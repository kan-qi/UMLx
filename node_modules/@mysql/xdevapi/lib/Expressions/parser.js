/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,14],$V2=[1,15],$V3=[1,6],$V4=[1,7],$V5=[1,23],$V6=[1,8],$V7=[1,12],$V8=[1,20],$V9=[1,18],$Va=[1,24],$Vb=[1,17],$Vc=[1,25],$Vd=[1,28],$Ve=[1,29],$Vf=[1,30],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,35],$Vl=[1,36],$Vm=[1,37],$Vn=[1,38],$Vo=[1,39],$Vp=[1,40],$Vq=[1,41],$Vr=[1,42],$Vs=[4,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,44,47,53],$Vt=[1,52],$Vu=[1,53],$Vv=[1,62],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,63],$VA=[8,10,11,13,14,15,16,25,42,50,52,58,61],$VB=[26,47],$VC=[58,60],$VD=[4,19,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,47,53],$VE=[60,61,64,65,66,67],$VF=[4,26,44,47,53];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Input":3,"EOF":4,"Expression":5,"StringOrNumber":6,"string":7,"Number":8,"Literal":9,"true":10,"false":11,"FunctionCall":12,"?":13,":":14,"StringLiteral":15,"@":16,"SQLVariable":17,"column":18,".":19,"BinaryOperator":20,"like":21,"not":22,"DocPath":23,"JSONExpression":24,"(":25,")":26,"||":27,"&&":28,"==":29,"!=":30,"+":31,"-":32,"*":33,"/":34,"%":35,"<":36,">":37,"<=":38,">=":39,"Field":40,"@.":41,"[":42,"Index":43,"]":44,"FunctionName":45,"FunctionArgs":46,",":47,"DocPathElement":48,"DocPathElements":49,"$":50,"JSONDocument":51,"{":52,"}":53,"int":54,"DEC":55,"HEX":56,"OCT":57,"`":58,"column_quoted":59,"NON_ESCAPED":60,"QUOTE":61,"string_quoted":62,"string_quoted_char":63,"HEX_ESCAPE":64,"OCT_ESCAPE":65,"CHAR_ESCAPE":66,"NAME":67,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",8:"Number",10:"true",11:"false",13:"?",14:":",15:"StringLiteral",16:"@",17:"SQLVariable",19:".",21:"like",22:"not",25:"(",26:")",27:"||",28:"&&",29:"==",30:"!=",31:"+",32:"-",33:"*",34:"/",35:"%",36:"<",37:">",38:"<=",39:">=",41:"@.",42:"[",43:"Index",44:"]",47:",",50:"$",52:"{",53:"}",55:"DEC",56:"HEX",57:"OCT",58:"`",60:"NON_ESCAPED",61:"QUOTE",64:"HEX_ESCAPE",65:"OCT_ESCAPE",66:"CHAR_ESCAPE",67:"NAME"},
productions_: [0,[3,1],[3,2],[6,1],[6,1],[9,1],[9,1],[9,1],[5,1],[5,1],[5,1],[5,2],[5,2],[5,1],[5,3],[5,5],[5,3],[5,3],[5,4],[5,1],[5,1],[5,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[40,11],[12,4],[45,1],[45,3],[46,0],[46,1],[46,3],[48,2],[48,3],[48,3],[49,1],[49,2],[23,2],[24,1],[24,5],[51,9],[54,1],[54,1],[54,1],[18,3],[59,1],[59,2],[7,3],[62,1],[62,2],[63,1],[63,1],[63,1],[63,1],[63,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { expr: {} } 
break;
case 2:

      const result = {
        expr: this.$
      };
      if (parser.placeholders) {
        result.placeholders = parser.placeholders;
        delete parser.placeholders
      }
      return result;
  
break;
case 3:
 this.$ = { type: 2, literal: Datatype.encodeScalar($$[$0]) }; 
break;
case 4:
 this.$ = { type: 2, literal: Datatype.encodeScalar(parseInt($$[$0])) } 
break;
case 6:
 this.$ = { type: 2, literal: Datatype.encodeScalar(true) } 
break;
case 7:
 this.$ = { type: 2, literal: Datatype.encodeScalar(false) } 
break;
case 10:

    this.$ = parser.addOrdinalPlaceholder();
  
break;
case 11:

    this.$ = parser.addNamedPlaceholder($$[$0]);
  
break;
case 13:

    this.$ = {
      type: 1,
      identifier: {
        name: $$[$0]
      }
    }
  
break;
case 14:

    this.$ = {
      type: 1,
      identifier: {
        name: $$[$0],
        table_name: $$[$0-2]
      }
    }
  
break;
case 15:

    this.$ = {
      type: 1,
      identifier: {
        name: $$[$0],
        table_name: $$[$0-2],
        schema_name: $$[$0-4]
      }
    }
  
break;
case 16:

    this.$ = {
      type: 5,
      operator: {
        name: $$[$0-1],
        param: [ $$[$0-2], $$[$0] ]
      }
    }
  
break;
case 17:

    this.$ = {
      type: 5,
      operator: {
        name: 'like',
        param: [ $$[$0-2], $$[$0] ]
      }
    }
  
break;
case 18:

    this.$ = {
      type: 5,
      operator: {
        name: 'not_like',
        param: [ $$[$0-3], $$[$0] ]
      }
    }
  
break;
case 21: case 57:
 this.$ = $$[$0-1]; 
break;
case 36:

    this.$ = {
      type: 4,
      function_call: {
        name: $$[$0-3]
      }
    };
    if ($$[$0-1]) {
      this.$.function_call.param = $$[$0-1];
    }
  
break;
case 37:
 this.$ = { name: $$[$0] } 
break;
case 38:
 this.$ = { name: $$[$0-1], schema_name: $$[$0-2] } 
break;
case 40:
 this.$ = [ $$[$0] ] 
break;
case 41:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 42:
 this.$ = { type: 1, value: $$[$0] } 
break;
case 43:
 this.$ = { type: 3, index: parseInt($$[$0-1]) }; 
break;
case 44:
 this.$ = { type: 4 } 
break;
case 45:
 this.$ = [ $$[$0] ]; 
break;
case 46:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 47:

    this.$ = {
      type: 1,
      identifier: {
        document_path: $$[$0]
      }
    }
  
break;
case 54:
 this.$ = $$[$0-1] 
break;
case 55: case 58: case 63: case 64:
 this.$ = $$[$0]; 
break;
case 56: case 59:
 this.$ = $$[$0-1] + $$[$0]; 
break;
case 60: case 61: case 62:
 this.$ = parser.charUnescape($$[$0]); 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},{1:[3]},{1:[2,1]},{4:[1,26],20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr},o($Vs,[2,8]),o($Vs,[2,9]),o($Vs,[2,10]),{15:[1,43]},{17:[1,44]},o($Vs,[2,13],{19:[1,45]}),o($Vs,[2,19]),o($Vs,[2,20]),{5:46,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},o($Vs,[2,5]),o($Vs,[2,6]),o($Vs,[2,7]),{25:[1,47]},{59:48,60:[1,49]},{19:$Vt,42:$Vu,48:51,49:50},o($Vs,[2,48]),{5:54,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},o($Vs,[2,3]),o($Vs,[2,4]),{19:[1,55],25:[2,37]},{15:[1,56]},{60:$Vv,62:57,63:58,64:$Vw,65:$Vx,66:$Vy,67:$Vz},{1:[2,2]},{5:64,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},{5:65,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},{21:[1,66]},o($VA,[2,22]),o($VA,[2,23]),o($VA,[2,24]),o($VA,[2,25]),o($VA,[2,26]),o($VA,[2,27]),o($VA,[2,28]),o($VA,[2,29]),o($VA,[2,30]),o($VA,[2,31]),o($VA,[2,32]),o($VA,[2,33]),o($VA,[2,34]),o($Vs,[2,11]),o($Vs,[2,12]),{18:67,58:$Vb},{20:27,21:$Vd,22:$Ve,26:[1,68],27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr},o($VB,[2,39],{9:4,12:5,18:9,23:10,24:11,6:13,45:16,51:19,7:21,46:69,5:70,8:$V0,10:$V1,11:$V2,13:$V3,14:$V4,15:$V5,16:$V6,25:$V7,42:$V8,50:$V9,52:$Va,58:$Vb,61:$Vc}),{58:[1,71],60:[1,72]},o($VC,[2,55]),o($Vs,[2,47],{48:73,19:$Vt,42:$Vu}),o($VD,[2,45]),{15:[1,74]},{8:[1,75],33:[1,76]},{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,47:[1,77]},{15:[1,78]},{14:[1,79]},{60:$Vv,61:[1,80],63:81,64:$Vw,65:$Vx,66:$Vy,67:$Vz},o($VE,[2,58]),o($VE,[2,60]),o($VE,[2,61]),o($VE,[2,62]),o($VE,[2,63]),o($VE,[2,64]),o($VF,[2,16],{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr}),o($VF,[2,17],{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr}),{5:82,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},o($Vs,[2,14],{19:[1,83]}),o($Vs,[2,21]),{26:[1,84],47:[1,85]},o($VB,[2,40],{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr}),o([4,19,21,22,26,27,28,29,30,31,32,33,34,35,36,37,38,39,44,47,53],[2,54]),o($VC,[2,56]),o($VD,[2,46]),o($VD,[2,42]),{44:[1,86]},{44:[1,87]},{5:88,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},{25:[2,38]},{5:89,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},o($Vs,[2,57]),o($VE,[2,59]),o($VF,[2,18],{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr}),{18:90,58:$Vb},o($Vs,[2,36]),{5:91,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},o($VD,[2,43]),o($VD,[2,44]),{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,44:[1,92]},{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,47:[1,93]},o($Vs,[2,15]),o($VB,[2,41],{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr}),o($Vs,[2,49]),{15:[1,94]},{14:[1,95]},{5:96,6:13,7:21,8:$V0,9:4,10:$V1,11:$V2,12:5,13:$V3,14:$V4,15:$V5,16:$V6,18:9,23:10,24:11,25:$V7,42:$V8,45:16,50:$V9,51:19,52:$Va,58:$Vb,61:$Vc},{20:27,21:$Vd,22:$Ve,27:$Vf,28:$Vg,29:$Vh,30:$Vi,31:$Vj,32:$Vk,33:$Vl,34:$Vm,35:$Vn,36:$Vo,37:$Vp,38:$Vq,39:$Vr,53:[1,97]},o($Vs,[2,50])],
defaultActions: {2:[2,1],26:[2,2],78:[2,38]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

/*
 * Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; version 2 of the
 * License.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301  USA
 */
var Datatype = require('./../Protocol/Datatype');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
parser.charUnescape = function (chr) {
  if (chr[0] !== "\\") {
    return chr;
  }

  chr = chr.substr(1);

  var quotes = {
    '"':  '"',
    '\'': '\''
  };

  if (quotes[chr]) {
    if (chr === parser.charUnescapeCurrentQuote) {
      return quotes[chr];
    } else {
      return '\\' + quotes[chr];
    }
  }

  var escapee = {
    '\\': '\\',
    '/':  '/',
    b:    '\b',
    f:    '\f',
    n:    '\n',
    r:    '\r',
    t:    '\t',
    v:    '\v'
  };

  if (escapee[chr]) {
    return escapee[chr];
  }

  chr = String.fromCharCode(chr);

  return chr;
};
parser.initPlaceholders = function () {
  this.placeholders = {
    ordinal: 0,
    named: []
  }
};
parser.addOrdinalPlaceholder = function (name) {
  if (typeof this.placeholders === 'undefined') {
    this.initPlaceholders();
  }
  if (this.placeholders.named.length) {
    throw new Error("Mixing of named and ordinal placeholders is not permitted");
  }
  return {
    type: 6,
    position: this.placeholders.ordinal++
  }
};
parser.addNamedPlaceholder = function (name) {
  if (typeof this.placeholders === 'undefined') {
    this.initPlaceholders();
  }
  if (this.placeholders.ordinal) {
    throw new Error("Mixing of named and ordinal placeholders is not permitted");
  }
  this.placeholders.named.push(name);
  return {
    type: 6,
    position: this.placeholders.named.length - 1
  }
};

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 4;
break;
case 1:return 25;
break;
case 2:return 26;
break;
case 3:return 8;
break;
case 4:return 10;
break;
case 5:return 11;
break;
case 6:return 21;
break;
case 7:return 21;
break;
case 8:return 22;
break;
case 9:return 22;
break;
case 10:return 13;
break;
case 11:return 47;
break;
case 12:return 27;
break;
case 13:return 28;
break;
case 14:return 29;
break;
case 15:return 31;
break;
case 16:return 32;
break;
case 17:return 33;
break;
case 18:return 34;
break;
case 19:return 35;
break;
case 20:return 29;
break;
case 21:return 30;
break;
case 22:return '!';
break;
case 23:return 50;
break;
case 24:return 19;
break;
case 25:return 42;
break;
case 26:return 44;
break;
case 27:return 13;
break;
case 28:return 14;
break;
case 29:return 36;
break;
case 30:return 37;
break;
case 31:return 38;
break;
case 32:return 39;
break;
case 33:return 15;
break;
case 34:
    if (yy_.yytext.match(/\r|\n/) && parser.restricted) {
        parser.restricted = false;
        this.unput(yy_.yytext);
        return ";";
    }

break;
case 35:
    if (yy_.yytext.match(/\r|\n/) && parser.restricted) {
        parser.restricted = false;
        this.unput(yy_.yytext);
        return ";";
    }

break;
case 36:this.begin('string_quoted_content'); parser.charUnescapeCurrentQuote = this.match; return 61;
break;
case 37:return 60;
break;
case 38:return 64;
break;
case 39:return 65;
break;
case 40:return 66;
break;
case 41:if (parser.charUnescapeCurrentQuote === this.match) { this.popState(); return 61; } else { return 60; }
break;
case 42:return 60;
break;
case 43:this.begin('backtick'); return 58;
break;
case 44:return 60;
break;
case 45:return 60;
break;
case 46:this.popState(); return 58;
break;
case 47:/* skip whitespaces */
break;
case 48:return 'INVALID'
break;
}
},
rules: [/^(?:$)/,/^(?:\()/,/^(?:\))/,/^(?:(([1-9][0-9]*)))/,/^(?:true\b)/,/^(?:false\b)/,/^(?:like\b)/,/^(?:LIKE\b)/,/^(?:not\b)/,/^(?:NOT\b)/,/^(?:\?)/,/^(?:,)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:==)/,/^(?:!=)/,/^(?:!)/,/^(?:\$)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\?)/,/^(?::)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:(([A-Za-z_][A-Za-z_0-9]*)))/,/^(?:\/\*(.|\r|\n)*?\*\/)/,/^(?:\/\/.*($|\r|\n))/,/^(?:((['"])))/,/^(?:\s+)/,/^(?:((\\[Xx][A-Fa-f0-9]{1,2})))/,/^(?:((\\?[0-7]{1,3})))/,/^(?:((\\[abfnrtv\\/'"])))/,/^(?:((['"])))/,/^(?:(([^\0\n])))/,/^(?:`)/,/^(?:\s+)/,/^(?:[^`])/,/^(?:`)/,/^(?:\s+)/,/^(?:.)/],
conditions: {"backtick":{"rules":[44,45,46],"inclusive":false},"string_quoted_content":{"rules":[37,38,39,40,41,42],"inclusive":false},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,43,47,48],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}