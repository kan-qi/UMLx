+ "package presto.robotium.util;" + "\n"
+ "" + "\n"
+ "import java.util.ArrayList;" + "\n"
+ "import java.util.List;" + "\n"
+ "" + "\n"
+ "import com.google.common.base.Preconditions;" + "\n"
+ "import com.robotium.solo.Solo;" + "\n"
+ "" + "\n"
+ "import android.app.Activity;" + "\n"
+ "import android.view.View;" + "\n"
+ "import android.view.ViewGroup;" + "\n"
+ "import android.view.Window;" + "\n"
+ "import android.widget.TextView;" + "\n"
+ "" + "\n"
+ "public class RobotiumUtil {" + "\n"
+ "	// time" + "\n"
+ "	// robotium solo instance" + "\n"
+ "	private Solo solo;" + "\n"
+ "" + "\n"
+ "	private RobotiumUtil(Solo solo) {" + "\n"
+ "		Preconditions.checkNotNull(solo);" + "\n"
+ "		this.solo = solo;" + "\n"
+ "	}" + "\n"
+ "" + "\n"
+ "	public void logTransition(ActionLogger action) {" + "\n"
+ "		solo.getCurrentViews();" + "\n"
+ "		action.doAction();" + "\n"
+ "		" + "\n"
+ "		solo.getCurrentViews();" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	public void logTransitionWithMediumWait(ActionLogger action) {" + "\n"
+ "		solo.getCurrentViews();" + "\n"
+ "		action.doAction();" + "\n"
+ "		solo.sleep(TimeOption.getTimeMillis(TimeOption.Time.medium_time));" + "\n"
+ "		solo.getCurrentViews();" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	public void logTransitionWithLongWait(ActionLogger action) {" + "\n"
+ "		solo.getCurrentViews();" + "\n"
+ "		action.doAction();" + "\n"
+ "		solo.sleep(TimeOption.getTimeMillis(TimeOption.Time.long_time));" + "\n"
+ "		solo.getCurrentViews();" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	/**" + "\n"
+ "	 * Return the ActionBar Container using current activity.   It is not reliable." + "\n"
+ "	 **/" + "\n"
+ "	public View getActionBarView2() {" + "\n"
+ "		Activity curAct = solo.getCurrentActivity();" + "\n"
+ "	    Window window = curAct.getWindow();" + "\n"
+ "	    View v = window.getDecorView();" + "\n"
+ "	    int resId = curAct.getResources().getIdentifier(\"action_bar_container\", \"id\", \"android\");" + "\n"
+ "	    return v.findViewById(resId);" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	/**" + "\n"
+ "	 * Return the ActionBar Container using String" + "\n"
+ "	 * " + "\n"
+ "	 **/" + "\n"
+ "	public View getActionBarView(){" + "\n"
+ "		//solo.sleep(2000);" + "\n"
+ "		ArrayList<View> alViews = solo.getCurrentViews();" + "\n"
+ "		for(View curView :alViews){" + "\n"
+ "			String className = curView.getClass().getName();" + "\n"
+ "			if(className.equals(\"com.android.internal.widget.ActionBarContainer\")){" + "\n"
+ "				return curView;" + "\n"
+ "			}" + "\n"
+ "		}" + "\n"
+ "		return null;" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	/*" + "\n"
+ "	 * Return the menuitem of actionbar " + "\n"
+ "	 * " + "\n"
+ "	 */" + "\n"
+ "	private ArrayList<View> getActionBarItemsWithMenuButton(){" + "\n"
+ "		ViewGroup ActionBarContainer = (ViewGroup) this.getActionBarView();" + "\n"
+ "		ArrayList<View> ret = new ArrayList<View>();" + "\n"
+ "		//Find the \"com.android.internal.view.menu.ActionMenuView\" in the ViewGroup" + "\n"
+ "		ViewGroup ActionMenuView = (ViewGroup) recursiveFindActionMenuView(ActionBarContainer);" + "\n"
+ "		if(ActionMenuView == null){" + "\n"
+ "			//The ActionBar is empty. Should not happen" + "\n"
+ "			solo.Log2file(\"RobotiumUtil\", \"ActionBar does not have MenuView\");" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		for(int i = 0; i < ActionMenuView.getChildCount(); i++){" + "\n"
+ "			View curView = ActionMenuView.getChildAt(i);" + "\n"
+ "			ret.add(curView);" + "\n"
+ "		}	" + "\n"
+ "		" + "\n"
+ "		return ret;" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	" + "\n"
+ "	public ArrayList<View> getActionBarItems(){" + "\n"
+ "		ArrayList<View> ActionBarItems = getActionBarItemsWithMenuButton();" + "\n"
+ "		if(ActionBarItems == null){" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		for(int i = 0; i < ActionBarItems.size(); i++){" + "\n"
+ "			View curView = ActionBarItems.get(i);" + "\n"
+ "			String className = curView.getClass().getName();" + "\n"
+ "			if(className.contains(\"OverflowMenuButton\")){" + "\n"
+ "				ActionBarItems.remove(i);" + "\n"
+ "				return ActionBarItems;" + "\n"
+ "			}" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		return ActionBarItems;" + "\n"
+ "		" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	public View getActionBarMenuButton(){" + "\n"
+ "		ArrayList<View> ActionBarItems = getActionBarItemsWithMenuButton();" + "\n"
+ "		if(ActionBarItems == null){" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		for(int i = 0; i < ActionBarItems.size(); i++){" + "\n"
+ "			View curView = ActionBarItems.get(i);" + "\n"
+ "			String className = curView.getClass().getName();" + "\n"
+ "			if(className.contains(\"OverflowMenuButton\")){" + "\n"
+ "				" + "\n"
+ "				return curView;" + "\n"
+ "			}" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		return null;" + "\n"
+ "		" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	public View getActionBarItem(int index){" + "\n"
+ "		ArrayList<View> ActionBarItems = getActionBarItems();" + "\n"
+ "		if(ActionBarItems == null){" + "\n"
+ "			//There is no ActionBar" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		if(index < ActionBarItems.size()){" + "\n"
+ "			return ActionBarItems.get(index);" + "\n"
+ "		}" + "\n"
+ "		else{" + "\n"
+ "			//Out of range" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	" + "\n"
+ "	/*" + "\n"
+ "	 * Recursively find com.android.internal.view.menu.ActionMenuView in the given ViewGroup EntryPoint" + "\n"
+ "	 * return null if not found." + "\n"
+ "	 * " + "\n"
+ "	 */" + "\n"
+ "	" + "\n"
+ "	private View recursiveFindActionMenuView(View entryPoint){" + "\n"
+ "		View ret = null;" + "\n"
+ "		" + "\n"
+ "		String curClassName = \"\";" + "\n"
+ "		" + "\n"
+ "		curClassName = entryPoint.getClass().getName();" + "\n"
+ "		if(curClassName.contains(\"com.android.internal.view.menu.ActionMenuView\")){" + "\n"
+ "			//" + "\n"
+ "			return entryPoint;" + "\n"
+ "		}" + "\n"
+ "		//entryPoint is not an ActionMenuView" + "\n"
+ "		if(entryPoint instanceof ViewGroup){" + "\n"
+ "			ViewGroup vgEntry = (ViewGroup)entryPoint;" + "\n"
+ "			for( int i = 0; i<vgEntry.getChildCount(); i++){" + "\n"
+ "				View curView = vgEntry.getChildAt(i);" + "\n"
+ "				View retView = recursiveFindActionMenuView(curView);" + "\n"
+ "				" + "\n"
+ "				if(retView != null){" + "\n"
+ "					//ActionMenuView was found" + "\n"
+ "					return retView;" + "\n"
+ "				}" + "\n"
+ "				" + "\n"
+ "			}" + "\n"
+ "			//Still not found" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		else{" + "\n"
+ "			return null;" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		" + "\n"
+ "		" + "\n"
+ "	}" + "\n"
+ "	/*" + "\n"
+ "	 * Return the MenuItem View inside the popped up OptionsMenu" + "\n"
+ "	 * On Android 4 and above" + "\n"
+ "	 * " + "\n"
+ "	 */" + "\n"
+ "	public View getActionBarMenuItem(int index){" + "\n"
+ "		View ret = null;" + "\n"
+ "		" + "\n"
+ "		ArrayList<View> MenuItems = getActionBarMenuItems();" + "\n"
+ "		" + "\n"
+ "		if(MenuItems != null && index < MenuItems.size()){" + "\n"
+ "			ret = MenuItems.get(index);" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		return ret;" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	/*" + "\n"
+ "	 * " + "\n"
+ "	 * com.android.internal.view.menu.ListMenuItemView" + "\n"
+ "	 */" + "\n"
+ "	public ArrayList<View> getActionBarMenuItems(){" + "\n"
+ "		ArrayList<View> MenuItems = new ArrayList<View>();" + "\n"
+ "		ArrayList<View> curViews = solo.getCurrentViews();" + "\n"
+ "		" + "\n"
+ "		for(int i = 0; i < curViews.size(); i++){" + "\n"
+ "			View itemView = curViews.get(i);" + "\n"
+ "			String className = itemView.getClass().getName();" + "\n"
+ "			if(className.contains(\"com.android.internal.view.menu.ListMenuItemView\")){" + "\n"
+ "				MenuItems.add(itemView);" + "\n"
+ "			}" + "\n"
+ "		}" + "\n"
+ "		" + "\n"
+ "		return MenuItems;" + "\n"
+ "	}" + "\n"
+ "" + "\n"
+ "	public View findViewByText(String text) {" + "\n"
+ "		ArrayList<View> views = solo.getCurrentViews();" + "\n"
+ "		for (View view : views) {" + "\n"
+ "			if (view instanceof TextView) {" + "\n"
+ "				TextView textView = (TextView) view;" + "\n"
+ "				String textOnView = textView.getText().toString();" + "\n"
+ "				if (textOnView.equals(text)) {" + "\n"
+ "					return view;" + "\n"
+ "				}" + "\n"
+ "			}" + "\n"
+ "		}" + "\n"
+ "		return null;" + "\n"
+ "	}" + "\n"
+ "" + "\n"
+ "	public ArrayList<View> findViewByType(String type) {" + "\n"
+ "		ArrayList<View> matchedList = new ArrayList<View>();" + "\n"
+ "		ArrayList<View> views = solo.getCurrentViews();" + "\n"
+ "		for (View view : views) {" + "\n"
+ "			String viewType = view.getClass().getName();" + "\n"
+ "			if (viewType.equals(type)) {" + "\n"
+ "				// Return this Item" + "\n"
+ "				matchedList.add(view);" + "\n"
+ "			}" + "\n"
+ "		}" + "\n"
+ "		return matchedList;" + "\n"
+ "	}" + "\n"
+ "" + "\n"
+ "	public void logEvent(View view, String eventType, String value) {" + "\n"
+ "		if (eventType == null) {" + "\n"
+ "			eventType = \"\";" + "\n"
+ "		}" + "\n"
+ "		if (value == null) {" + "\n"
+ "			value = \"\";" + "\n"
+ "		}" + "\n"
+ "		String msg = \"\";" + "\n"
+ "		if (view == null) {" + "\n"
+ "			msg = String" + "\n"
+ "					.format(\"<Event view=\\"%1$s\\" id=\\"%2$s\\" eventtype=\\"%3$s\\" eventvalue=\\"%4$s\\" /> \"," + "\n"
+ "							\"null\", -1, eventType, value);" + "\n"
+ "		} else {" + "\n"
+ "			msg = String" + "\n"
+ "					.format(\"<Event view=\\"%1$s\\" id=\\"%2$s\\" eventtype=\\"%3$s\\" eventvalue=\\"%4$s\\" /> \"," + "\n"
+ "							view.getClass().getName(), view.getId(), eventType," + "\n"
+ "							value);" + "\n"
+ "		}" + "\n"
+ "		this.solo.Log2file(\"EVENTV\", msg);" + "\n"
+ "	}" + "\n"
+ "	" + "\n"
+ "	public int getTime(TimeOption.Time t) {" + "\n"
+ "		return TimeOption.getTimeMillis(t);" + "\n"
+ "	}" + "\n"
+ "" + "\n"
+ "	public static RobotiumUtil v(Solo solo) {" + "\n"
+ "		if (instance == null) {" + "\n"
+ "			instance = new RobotiumUtil(solo);" + "\n"
+ "		}" + "\n"
+ "		return instance;" + "\n"
+ "	}" + "\n"
+ "" + "\n"
+ "	private static RobotiumUtil instance;" + "\n"
+ "}" + "\n"
