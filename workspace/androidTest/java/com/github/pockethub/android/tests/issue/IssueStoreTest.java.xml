<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\androidTest\java\com\github\pockethub\android\tests\issue\IssueStoreTest.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>tests</name><operator>.</operator><name>issue</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>AndroidTestCase</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Issue</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>issue</name><operator>.</operator><name>IssueStore</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>InfoUtils</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>MoreAsserts</name><operator>.</operator><name>assertNotEqual</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Unit tests of {@link IssueStore}
 */</comment>
<class><specifier>public</specifier> class <name>IssueStoreTest</name> <super><extends>extends <name>AndroidTestCase</name></extends></super> <block>{

    <comment type="block" format="javadoc">/**
     * Verify issue is updated when re-added
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testReuseIssue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.issue.IssueStoreTest.testReuseIssue()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>IssueStore</name></type> <name>store</name> <init>= <expr><operator>new</operator> <call><name>IssueStore</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Repository</name></type> <name>repo</name> <init>= <expr><call><name><name>InfoUtils</name><operator>.</operator><name>createRepoFromData</name></name><argument_list>(<argument><expr><literal type="string">"owner"</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>store</name><operator>.</operator><name>getIssue</name></name><argument_list>(<argument><expr><name>repo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Issue</name></type> <name>issue</name> <init>= <expr><call><name><name>Issue</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>repository</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>number</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>body</name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>issue</name></expr></argument>, <argument><expr><call><name><name>store</name><operator>.</operator><name>addIssue</name></name><argument_list>(<argument><expr><name>issue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>issue</name></expr></argument>, <argument><expr><call><name><name>store</name><operator>.</operator><name>getIssue</name></name><argument_list>(<argument><expr><name>repo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Issue</name></type> <name>issue2</name> <init>= <expr><call><name><name>Issue</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>repository</name><argument_list>(<argument><expr><name>repo</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>number</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>body</name><argument_list>(<argument><expr><literal type="string">"body2"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>assertNotEqual</name><argument_list>(<argument><expr><name>issue</name></expr></argument>, <argument><expr><call><name><name>store</name><operator>.</operator><name>addIssue</name></name><argument_list>(<argument><expr><name>issue2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEqual</name><argument_list>(<argument><expr><call><name><name>issue2</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>issue</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNotEqual</name><argument_list>(<argument><expr><name>issue</name></expr></argument>, <argument><expr><call><name><name>store</name><operator>.</operator><name>getIssue</name></name><argument_list>(<argument><expr><name>repo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.issue.IssueStoreTest.testReuseIssue()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
