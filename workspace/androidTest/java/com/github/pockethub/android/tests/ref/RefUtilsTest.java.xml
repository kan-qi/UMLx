<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\androidTest\java\com\github\pockethub\android\tests\ref\RefUtilsTest.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>tests</name><operator>.</operator><name>ref</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>AndroidTestCase</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>ref</name><operator>.</operator><name>RefUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitReference</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Tests of {@link RefUtils}
 */</comment>
<class><specifier>public</specifier> class <name>RefUtilsTest</name> <super><extends>extends <name>AndroidTestCase</name></extends></super> <block>{

    <comment type="block" format="javadoc">/**
     * Verify {@link RefUtils#isBranch(GitReference)}
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testIsBranch</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testIsBranch()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><call><name><name>GitReference</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"navigation_drawer_header_background"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/tags/v1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/b1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isBranch</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/heads/b2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testIsBranch()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify {@link RefUtils#isTag(GitReference)}
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testIsTag</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testIsTag()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><operator>(</operator><name>GitReference</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><call><name><name>GitReference</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"navigation_drawer_header_background"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/b1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/heads/b2"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isTag</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/tags/v1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testIsTag()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify {@link RefUtils#isValid(GitReference)}
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testIsValid</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testIsValid()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name><name>GitReference</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/pull/6/merge"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertFalse</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/pull/6/head"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/pull"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/heads/b1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertTrue</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/tags/v1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testIsValid()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify {@link RefUtils#getName(GitReference)}
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testGetName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testGetName()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><operator>(</operator><name>GitReference</name><operator>)</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name><name>GitReference</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"unchanged"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"unchanged"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"branch"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/heads/branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"tag"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/tags/tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"notes"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/notes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testGetName()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <comment type="block" format="javadoc">/**
     * Verify {@link RefUtils#getPath(GitReference)}
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testGetPath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testGetPath()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertNull</name><argument_list>(<argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name><name>GitReference</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"unchanged"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"unchanged"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"heads/branch"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/heads/branch"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"tags/tag"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/tags/tag"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"notes"</literal></expr></argument>,
            <argument><expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><call><name>createGitReference</name><argument_list>(<argument><expr><literal type="string">"refs/notes"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.ref.RefUtilsTest.testGetPath()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><specifier>private</specifier> <type><name>GitReference</name></type> <name>createGitReference</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>ref</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.git.GitReference com.github.pockethub.android.tests.ref.RefUtilsTest.createGitReference(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.git.GitReference com.github.pockethub.android.tests.ref.RefUtilsTest.createGitReference(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>GitReference</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
