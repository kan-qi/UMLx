<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\androidTest\java\com\github\pockethub\android\tests\util\HtmlUtilsTest.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>tests</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>test</name><operator>.</operator><name>AndroidTestCase</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>HtmlUtils</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Unit tests of HTML conversions done when rendering markdown
 */</comment>
<class><specifier>public</specifier> class <name>HtmlUtilsTest</name> <super><extends>extends <name>AndroidTestCase</name></extends></super> <block>{

    <function><specifier>private</specifier> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>html</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.tests.util.HtmlUtilsTest.format(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>CharSequence</name></type> <name>formatted</name> <init>= <expr><call><name><name>HtmlUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertNotNull</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.tests.util.HtmlUtilsTest.format(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>formatted</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"&lt;githubroot&gt;"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"&lt;/githubroot&gt;"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Single email toggle span is removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testToggleRemoved</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testToggleRemoved()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"before &lt;span class=\"email-hidden-toggle\"&gt;&lt;a href=\"#\"&gt;Ã¢ÂÂ¦&lt;/a&gt;&lt;/span&gt;after"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"before after"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testToggleRemoved()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Multiple email toggle spans are removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testTogglesRemoved</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTogglesRemoved()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"before &lt;span class=\"email-hidden-toggle\"&gt;&lt;a href=\"#\"&gt;Ã¢ÂÂ¦&lt;/a&gt;&lt;/span&gt;after&lt;span class=\"email-hidden-toggle\"&gt;&lt;a href=\"#\"&gt;Ã¢ÂÂ¦&lt;/a&gt;&lt;/span&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"before after"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTogglesRemoved()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Email div is transformed into block quote
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testEmailQuoted</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmailQuoted()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"before &lt;div class=\"email-quoted-reply\"&gt;quoted&lt;/div&gt; after"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"before &lt;blockquote&gt;quoted&lt;/blockquote&gt; after"</literal></expr></argument>,
                <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmailQuoted()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Email fragment div is removed and newlines are replaced with br tags
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testEmailFragment</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmailFragment()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"before &lt;div class=\"email-fragment\"&gt;in\nside&lt;/div&gt; after"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"before in&lt;br&gt;side after"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmailFragment()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Email fragment div is removed and newlines are replaced with br tags
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testEmailFragments</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmailFragments()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"before &lt;div class=\"email-fragment\"&gt;in\nside&lt;/div&gt; after &lt;div class=\"email-fragment\"&gt;out\nside&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"before in&lt;br&gt;side after out&lt;br&gt;side"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmailFragments()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Email fragment div is removed and newlines are replaced with br tags
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testTrailingEmailFragment</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTrailingEmailFragment()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"before &lt;div class=\"email-fragment\"&gt;in\nside&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"before in&lt;br&gt;side"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTrailingEmailFragment()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Leading break is removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testLeadingBreak</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testLeadingBreak()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"&lt;br&gt;content"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testLeadingBreak()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Trailing break is removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testTrailingBreak</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTrailingBreak()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"content&lt;br&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTrailingBreak()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Leading &amp; trailing breaks are removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testWrappedBreaks</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testWrappedBreaks()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"&lt;br&gt;content&lt;br&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testWrappedBreaks()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Leading &amp; trailing breaks are removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testWrappedParagraphs</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testWrappedParagraphs()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"&lt;p&gt;content&lt;/p&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testWrappedParagraphs()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Paragraph replaced with break
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testParagraphReplacedWithBreak</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testParagraphReplacedWithBreak()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"line1&lt;p&gt;line2&lt;/p&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"line1&lt;br&gt;line2"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testParagraphReplacedWithBreak()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * em tags replaced with i tags
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testEmReplacedWithI</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmReplacedWithI()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;em&gt;b&lt;/em&gt;c"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>html</name></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testEmReplacedWithI()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * strong tags replaced with b tags
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testStrongReplacedWithB</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testStrongReplacedWithB()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"&lt;strong&gt;a&lt;/strong&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><name>html</name></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testStrongReplacedWithB()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Leading whitespace is removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testLeadingWhitespace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testLeadingWhitespace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">" content"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testLeadingWhitespace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Trailing whitespace is removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testTrailingWhitespace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTrailingWhitespace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"content "</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testTrailingWhitespace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Leading &amp; trailing whitespace is removed
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testWrappedWhitetspace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testWrappedWhitetspace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">" content "</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"content"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testWrappedWhitetspace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Pre untouched
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testPreWithNoWhitespace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithNoWhitespace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;pre&gt;b&lt;/pre&gt; c"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a&lt;pre&gt;b&lt;/pre&gt; c"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithNoWhitespace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Pre space escaped
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testPreWithSpaces</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithSpaces()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;pre&gt; b&lt;/pre&gt; c"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a&lt;pre&gt;&amp;nbsp;b&lt;/pre&gt; c"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithSpaces()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Pre tab escaped
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testPreWithTabs</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithTabs()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;pre&gt;\tb&lt;/pre&gt; c"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;b&lt;/pre&gt; c"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithTabs()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Pre newline escaped
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testPreWithNewline</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithNewline()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;pre&gt;\nb&lt;/pre&gt; c"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a&lt;pre&gt;&lt;br&gt;b&lt;/pre&gt; c"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithNewline()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Pre space, tab, and newline escaped
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testPreWithAllWhitepsace</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithAllWhitepsace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;pre&gt;\nb\tc &lt;/pre&gt;d"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"a&lt;pre&gt;&lt;br&gt;b&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;c&amp;nbsp;&lt;/pre&gt;d"</literal></expr></argument>,
                <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testPreWithAllWhitepsace()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Multiple pre elements escaped
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testMultiplePresEscaped</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testMultiplePresEscaped()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"a&lt;pre&gt; c &lt;/pre&gt;d&lt;pre&gt;\te\t&lt;/pre&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(
                <argument><expr><literal type="string">"a&lt;pre&gt;&amp;nbsp;c&amp;nbsp;&lt;/pre&gt;d&lt;pre&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;e&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/pre&gt;"</literal></expr></argument>,
                <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testMultiplePresEscaped()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Single code element inside a pre element
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>testFormatPreCodeOnly</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testFormatPreCodeOnly()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>html</name> <init>= <expr><literal type="string">"&lt;pre&gt;&lt;code&gt;a\nb\nc\n&lt;/code&gt;&lt;/pre&gt;"</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assertEquals</name><argument_list>(<argument><expr><literal type="string">"&lt;pre&gt;&lt;code&gt;a&lt;br&gt;b&lt;br&gt;c&lt;/code&gt;&lt;/pre&gt;"</literal></expr></argument>, <argument><expr><call><name>format</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.tests.util.HtmlUtilsTest.testFormatPreCodeOnly()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
