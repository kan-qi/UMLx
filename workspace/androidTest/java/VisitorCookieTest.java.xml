<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\androidTest\java\VisitorCookieTest.java"><import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>firebase</name><operator>.</operator><name>iid</name><operator>.</operator><name>FirebaseInstanceId</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ApiEndpoint</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>Secrets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>DiscoveryActivity</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Assert</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Rule</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>Test</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>junit</name><operator>.</operator><name>runner</name><operator>.</operator><name>RunWith</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>CookieManager</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>CookieStore</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>test</name><operator>.</operator><name>filters</name><operator>.</operator><name>SmallTest</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>test</name><operator>.</operator><name>ext</name><operator>.</operator><name>junit</name><operator>.</operator><name>runners</name><operator>.</operator><name>AndroidJUnit4</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>test</name><operator>.</operator><name>rule</name><operator>.</operator><name>ActivityTestRule</name></name>;</import>

<class><annotation>@<name>RunWith</name><argument_list>(<argument><expr><name><name>AndroidJUnit4</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></annotation>
<annotation>@<name>SmallTest</name></annotation>
<specifier>public</specifier> class <name>VisitorCookieTest</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_VIS</name> <init>= <expr><literal type="string">"vis"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Rule</name></annotation>
  <specifier>public</specifier> <type><name><name>ActivityTestRule</name><argument_list type="generic">&lt;<argument><name>DiscoveryActivity</name></argument>&gt;</argument_list></name></type> <name>activityRule</name> <init>=
    <expr><operator>new</operator> <call><name><name>ActivityTestRule</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>DiscoveryActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Test</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>testVisitorCookieHasBeenSet</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryActivity</name></type> <name>activity</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>activityRule</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Environment</name></type> <name>environment</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>environment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>CookieManager</name></type> <name>cookieManager</name> <init>= <expr><call><name><name>environment</name><operator>.</operator><name>cookieManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>CookieStore</name></type> <name>cookieStore</name> <init>= <expr><call><name><name>cookieManager</name><operator>.</operator><name>getCookieStore</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>URI</name></type> <name>webUri</name> <init>= <expr><call><name><name>URI</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>Secrets</name><operator>.</operator><name>WebEndpoint</name><operator>.</operator><name>PRODUCTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>URI</name></type> <name>apiUri</name> <init>= <expr><call><name><name>URI</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>ApiEndpoint</name><operator>.</operator><name>PRODUCTION</name><operator>.</operator><name>url</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>deviceId</name> <init>= <expr><call><name><name>FirebaseInstanceId</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertNotNull</name></name><argument_list>(<argument><expr><name>deviceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name>hasVisitorCookieForURI</name><argument_list>(<argument><expr><name>cookieStore</name></expr></argument>, <argument><expr><name>webUri</name></expr></argument>, <argument><expr><name>deviceId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Assert</name><operator>.</operator><name>assertTrue</name></name><argument_list>(<argument><expr><call><name>hasVisitorCookieForURI</name><argument_list>(<argument><expr><name>cookieStore</name></expr></argument>, <argument><expr><name>apiUri</name></expr></argument>, <argument><expr><name>deviceId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasVisitorCookieForURI</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>CookieStore</name></type> <name>cookieStore</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>URI</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>deviceId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>cookieStore</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>stream</name><argument_list>()</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>httpCookie</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>httpCookie</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>KEY_VIS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>httpCookie</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>deviceId</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
