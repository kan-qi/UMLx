<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\services\apiresponses\ProjectStatsEnvelope.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ReferrerType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>qualifiers</name><operator>.</operator><name>AutoGson</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>auto</name><operator>.</operator><name>parcel</name><operator>.</operator><name>AutoParcel</name></name>;</import>

<class><annotation>@<name>AutoGson</name></annotation>
<annotation>@<name>AutoParcel</name></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>ProjectStatsEnvelope</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>CumulativeStats</name></type> <name>cumulative</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FundingDateStats</name></argument>&gt;</argument_list></name></type> <name>fundingDistribution</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>ReferralAggregateStats</name></type> <name>referralAggregates</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ReferrerStats</name></argument>&gt;</argument_list></name></type> <name>referralDistribution</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RewardStats</name></argument>&gt;</argument_list></name></type> <name>rewardDistribution</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>VideoStats</name></type> <name>videoStats</name><parameter_list>()</parameter_list>;</function_decl>

  <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>cumulative</name><parameter_list>(<parameter><decl><type><name>CumulativeStats</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>fundingDistribution</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>FundingDateStats</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>referralAggregates</name><parameter_list>(<parameter><decl><type><name>ReferralAggregateStats</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>referralDistribution</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ReferrerStats</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>rewardDistribution</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RewardStats</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>videoStats</name><parameter_list>(<parameter><decl><type><name>VideoStats</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>ProjectStatsEnvelope</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>CumulativeStats</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>averagePledge</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>backersCount</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>goal</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>percentRaised</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>pledged</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>averagePledge</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>backersCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>goal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>percentRaised</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>pledged</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>CumulativeStats</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope_CumulativeStats</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>FundingDateStats</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>backersCount</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>cumulativePledged</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>cumulativeBackersCount</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>DateTime</name></type> <name>date</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>pledged</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>backersCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>cumulativePledged</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>cumulativeBackersCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>date</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>pledged</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>FundingDateStats</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope_FundingDateStats</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>ReferralAggregateStats</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>custom</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>external</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>internal</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>custom</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>external</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>internal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>ReferralAggregateStats</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope_ReferralAggregateStats</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>ReferrerStats</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>backersCount</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>code</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>percentageOfDollars</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>pledged</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>referrerName</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>referrerType</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>backersCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>code</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>percentageOfDollars</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>pledged</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>referrerName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>referrerType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>ReferrerStats</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <comment type="line">// Deserialize the referrer type string names into the corresponding</comment>
    <comment type="line">// enum type.</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ReferrerType</name></type> <name>referrerTypeEnum</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>referrerType</name></decl></parameter>)</parameter_list> <block>{
      <switch>switch <condition>(<expr><call><name><name>referrerType</name><operator>.</operator><name>toLowerCase</name></name><argument_list>(<argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><literal type="string">"custom"</literal></expr>:</case>
          <return>return <expr><name><name>ReferrerType</name><operator>.</operator><name>CUSTOM</name></name></expr>;</return>
        <case>case <expr><literal type="string">"external"</literal></expr>:</case>
          <return>return <expr><name><name>ReferrerType</name><operator>.</operator><name>EXTERNAL</name></name></expr>;</return>
        <case>case <expr><literal type="string">"kickstarter"</literal></expr>:</case>
          <return>return <expr><name><name>ReferrerType</name><operator>.</operator><name>KICKSTARTER</name></name></expr>;</return>
        <default>default:</default>
          <return>return <expr><name><name>ReferrerType</name><operator>.</operator><name>KICKSTARTER</name></name></expr>;</return>
      }</block></switch>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope_ReferrerStats</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>RewardStats</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>backersCount</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>rewardId</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>minimum</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>pledged</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>backersCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>rewardId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>minimum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>pledged</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>RewardStats</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope_RewardStats</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>VideoStats</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>externalCompletions</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>externalStarts</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>internalCompletions</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>internalStarts</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>externalCompletions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>externalStarts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>internalCompletions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>internalStarts</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>VideoStats</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_ProjectStatsEnvelope_VideoStats</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>
}</block></class>
</unit>
