<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\services\KSUri.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>Secrets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>UriUtilsKt</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>KSUri</name> <block>{
  <constructor><specifier>private</specifier> <name>KSUri</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAndroidPayUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call>
      <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Secrets</name><operator>.</operator><name>RegExpPattern</name><operator>.</operator><name>ANDROID_PAY_1</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call>
        <operator>||</operator> <call><name><name>Secrets</name><operator>.</operator><name>RegExpPattern</name><operator>.</operator><name>ANDROID_PAY_2</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isApiUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Secrets</name><operator>.</operator><name>RegExpPattern</name><operator>.</operator><name>API</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>host</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDiscoverCategoriesPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DISCOVER_CATEGORIES_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDiscoverScopePath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>scope</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>DISCOVER_SCOPE_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>scope</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDiscoverPlacesPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DISCOVER_PLACES_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isHivequeenUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Secrets</name><operator>.</operator><name>RegExpPattern</name><operator>.</operator><name>HIVEQUEEN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>host</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isKickstarterUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>host</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getHost</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isKSFavIcon</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>UriUtilsKt</name><operator>.</operator><name>lastPathSegment</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"favicon.ico"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isKSGraphQLUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"/graph"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWebViewUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isKSGraphQLUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isKSFavIcon</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNewGuestCheckoutUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>NEW_GUEST_CHECKOUT_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>PROJECT_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectPreviewUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isProjectUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>ObjectUtils</name><operator>.</operator><name>isNotNull</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"token"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSignupUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"/signup"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isStagingUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>Secrets</name><operator>.</operator><name>RegExpPattern</name><operator>.</operator><name>STAGING</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>host</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isCheckoutThanksUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>CHECKOUT_THANKS_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isModalUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>uri</name><operator>.</operator><name>getQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"modal"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>uri</name><operator>.</operator><name>getQueryParameter</name></name><argument_list>(<argument><expr><literal type="string">"modal"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectSurveyUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>PROJECT_SURVEY</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectUpdateCommentsUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>PROJECT_UPDATE_COMMENTS_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectUpdateUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>PROJECT_UPDATE_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectUpdatesUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>PROJECT_UPDATES_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUserSurveyUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>USER_SURVEY</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><call><name><name>UriUtilsKt</name><operator>.</operator><name>path</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>matches</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWebUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>webEndpoint</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isKickstarterUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isApiUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>webEndpoint</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="line">// /projects/:creator_param/:project_param/checkouts/1/thanks</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>CHECKOUT_THANKS_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/projects(\\/[a-zA-Z0-9_-]+)?\\/[a-zA-Z0-9_-]+\\/checkouts\\/\\d+\\/thanks\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /discover/categories/param</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>DISCOVER_CATEGORIES_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\A\\/discover\\/categories\\/.*"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /discover/param</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>DISCOVER_SCOPE_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\A\\/discover\\/([a-zA-Z0-9-_]+)\\z"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /discover/places/param</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>DISCOVER_PLACES_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"\\A\\/discover\\/places\\/[a-zA-Z0-9-_]+\\z"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /checkouts/:checkout_id/guest/new</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>NEW_GUEST_CHECKOUT_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/checkouts\\/[a-zA-Z0-9-_]+\\/guest\\/new\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /projects/:creator_param/:project_param</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PROJECT_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/projects(\\/[a-zA-Z0-9_-]+)?\\/[a-zA-Z0-9_-]+\\/?\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">//  /projects/:creator_param/:project_param/surveys/:survey_param</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PROJECT_SURVEY</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/projects(\\/[a-zA-Z0-9_-]+)?\\/[a-zA-Z0-9_-]+\\/surveys\\/[a-zA-Z0-9-_]+\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /projects/:creator_param/:project_param/posts/:update_param/comments</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PROJECT_UPDATE_COMMENTS_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/projects(\\/[a-zA-Z0-9_-]+)?\\/[a-zA-Z0-9_-]+\\/posts\\/[a-zA-Z0-9-_]+\\/comments\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /projects/:creator_param/:project_param/posts/:update_param</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PROJECT_UPDATE_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/projects(\\/[a-zA-Z0-9_-]+)?\\/[a-zA-Z0-9_-]+\\/posts\\/[a-zA-Z0-9-_]+\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /projects/:creator_param/:project_param/posts</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>PROJECT_UPDATES_PATTERN</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/projects(\\/[a-zA-Z0-9_-]+)?\\/[a-zA-Z0-9_-]+\\/posts\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// /users/:user_param/surveys/:survey_response_id": userSurvey</comment>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>USER_SURVEY</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(
    <argument><expr><literal type="string">"\\A\\/users(\\/[a-zA-Z0-9_-]+)?\\/surveys\\/[a-zA-Z0-9-_]+\\z"</literal></expr></argument>
  )</argument_list></call></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>
