<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\ui\adapters\DiscoveryPagerAdapter.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>adapters</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>DiscoveryUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>ArgumentsKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>fragments</name><operator>.</operator><name>DiscoveryFragment</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>fragment</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentPagerAdapter</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiscoveryPagerAdapter</name> <super><extends>extends <name>FragmentPagerAdapter</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Delegate</name></type> <name>delegate</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DiscoveryFragment</name></argument>&gt;</argument_list></name></type> <name>fragments</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pageTitles</name></decl>;</decl_stmt>

  <interface><specifier>public</specifier> interface <name>Delegate</name> <block>{
    <function_decl><type><name>void</name></type> <name>discoveryPagerAdapterSetPrimaryPage</name><parameter_list>(<parameter><decl><type><name>DiscoveryPagerAdapter</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <constructor><specifier>public</specifier> <name>DiscoveryPagerAdapter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>FragmentManager</name></type> <name>fragmentManager</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>DiscoveryFragment</name></argument>&gt;</argument_list></name></type> <name>fragments</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>pageTitles</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Delegate</name></type> <name>delegate</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fragmentManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>delegate</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragments</name></name> <operator>=</operator> <name>fragments</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pageTitles</name></name> <operator>=</operator> <name>pageTitles</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setPrimaryItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setPrimaryItem</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>delegate</name><operator>.</operator><name>discoveryPagerAdapterSetPrimaryPage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Object</name></type> <name>instantiateItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryFragment</name></type> <name>fragment</name> <init>= <expr><operator>(</operator><name>DiscoveryFragment</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>instantiateItem</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>fragments</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fragment</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Fragment</name></type> <name>getItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>fragments</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>CharSequence</name></type> <name>getPageTitle</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>pageTitles</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Passes along root categories to its fragment position to help fetch appropriate projects.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>takeCategoriesForPosition</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categories</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>fragments</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isInstantiated</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isAttached</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>frag</name></decl></parameter></parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fragmentPosition</name> <init>= <expr><call><name><name>frag</name><operator>.</operator><name>getArguments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>ArgumentsKey</name><operator>.</operator><name>DISCOVERY_SORT_POSITION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>fragmentPosition</name> <operator>==</operator> <name>position</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>frag</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>frag</name><operator>.</operator><name>takeCategories</name></name><argument_list>(<argument><expr><name>categories</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Take current params from activity and pass to the appropriate fragment.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>takeParams</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryParams</name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>fragments</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isInstantiated</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isAttached</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>frag</name></decl></parameter></parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fragmentPosition</name> <init>= <expr><call><name><name>frag</name><operator>.</operator><name>getArguments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>ArgumentsKey</name><operator>.</operator><name>DISCOVERY_SORT_POSITION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>DiscoveryUtils</name><operator>.</operator><name>positionFromSort</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name>fragmentPosition</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>frag</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>frag</name><operator>.</operator><name>updateParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Call when the view model tells us to clear specific pages.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>clearPages</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>pages</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>fragments</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isInstantiated</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isAttached</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>frag</name></decl></parameter></parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fragmentPosition</name> <init>= <expr><call><name><name>frag</name><operator>.</operator><name>getArguments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>ArgumentsKey</name><operator>.</operator><name>DISCOVERY_SORT_POSITION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>pages</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>fragmentPosition</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>clearPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>scrollToTop</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>fragments</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isInstantiated</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>isAttached</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>frag</name></decl></parameter></parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fragmentPosition</name> <init>= <expr><call><name><name>frag</name><operator>.</operator><name>getArguments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name><name>ArgumentsKey</name><operator>.</operator><name>DISCOVERY_SORT_POSITION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>position</name> <operator>==</operator> <name>fragmentPosition</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>DiscoveryFragment</name><operator>::</operator><name>scrollToTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
