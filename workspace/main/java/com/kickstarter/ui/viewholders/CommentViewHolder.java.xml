<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\ui\viewholders\CommentViewHolder.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentUserType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>KSString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>transformations</name><operator>.</operator><name>CircleTransformation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>CommentUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>DateTimeUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Comment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>picasso</name><operator>.</operator><name>Picasso</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>Bind</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>BindColor</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectUtils</name><operator>.</operator><name>requireNonNull</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>CommentViewHolder</name> <super><extends>extends <name>KSViewHolder</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><name>Comment</name></type> <name>comment</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrentUserType</name></type> <name>currentUser</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>KSString</name></type> <name>ksString</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Project</name></type> <name>project</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Bind</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>avatar</name></name></expr></argument>)</argument_list></annotation> <type><name>ImageView</name></type> <name>avatarImageView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Bind</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>creator_label</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>creatorLabelTextView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Bind</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>user_label</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>userLabelTextView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Bind</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>nameTextView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Bind</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>post_date</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>postDateTextView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>Bind</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>comment_body</name></name></expr></argument>)</argument_list></annotation> <type><name>TextView</name></type> <name>commentBodyTextView</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>BindColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>text_secondary</name></name></expr></argument>)</argument_list></annotation> <type><name>int</name></type> <name>textSecondaryColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <annotation>@<name>BindColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>text_primary</name></name></expr></argument>)</argument_list></annotation> <type><name>int</name></type> <name>textPrimaryColor</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>CommentViewHolder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentUser</name></name> <operator>=</operator> <call><name>environment</name><argument_list>()</argument_list></call><operator>.</operator><call><name>currentUser</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ksString</name></name> <operator>=</operator> <call><name>environment</name><argument_list>()</argument_list></call><operator>.</operator><call><name>ksString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>bindData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <type><specifier>final</specifier> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>Comment</name></argument>&gt;</argument_list></name></type> <name>projectAndComment</name> <init>= <expr><call><name>requireNonNull</name><argument_list>(<argument><expr><operator>(</operator><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>Comment</name></argument>&gt;</argument_list></name><operator>)</operator> <name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>project</name></name> <operator>=</operator> <call><name>requireNonNull</name><argument_list>(<argument><expr><name><name>projectAndComment</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>comment</name></name> <operator>=</operator> <call><name>requireNonNull</name><argument_list>(<argument><expr><name><name>projectAndComment</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>Comment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onBind</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>context</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>creatorLabelTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>userLabelTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>CommentUtils</name><operator>.</operator><name>isUserAuthor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>comment</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>project</name><operator>.</operator><name>creator</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>creatorLabelTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>CommentUtils</name><operator>.</operator><name>isUserAuthor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>comment</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>currentUser</name><operator>.</operator><name>getUser</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>userLabelTextView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <expr_stmt><expr><call><name><name>Picasso</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>load</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>comment</name><operator>.</operator><name>author</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>avatar</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>small</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>transform</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CircleTransformation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>avatarImageView</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>nameTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>comment</name><operator>.</operator><name>author</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>postDateTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>relative</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>ksString</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>comment</name><operator>.</operator><name>createdAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>CommentUtils</name><operator>.</operator><name>isDeleted</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>textSecondaryColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>getTypeface</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>ITALIC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>textPrimaryColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>getTypeface</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>commentBodyTextView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>comment</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
