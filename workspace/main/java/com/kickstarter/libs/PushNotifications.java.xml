<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\PushNotifications.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationChannel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>qualifiers</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>transformations</name><operator>.</operator><name>CircleTransformation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>transformations</name><operator>.</operator><name>CropSquareTransformation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>MessageThread</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>SurveyResponse</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Update</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>pushdata</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>pushdata</name><operator>.</operator><name>GCM</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>MessageThreadEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>PushNotificationEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>IntentKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>ActivityFeedActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>MessagesActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>ProjectActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>SurveyResponseActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>UpdateActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>picasso</name><operator>.</operator><name>Picasso</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>squareup</name><operator>.</operator><name>picasso</name><operator>.</operator><name>RequestCreator</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>app</name><operator>.</operator><name>TaskStackBuilder</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>CompositeSubscription</name></name>;</import>
<import>import <name><name>timber</name><operator>.</operator><name>log</name><operator>.</operator><name>Timber</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>combineLatestPair</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>neverError</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>PushNotifications</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANNEL_FOLLOWING</name> <init>= <expr><literal type="string">"FOLLOWING"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANNEL_MESSAGES</name> <init>= <expr><literal type="string">"MESSAGES"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANNEL_PROJECT_ACTIVITY</name> <init>= <expr><literal type="string">"PROJECT_ACTIVITY"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANNEL_PROJECT_REMINDER</name> <init>= <expr><literal type="string">"PROJECT_REMINDER"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANNEL_PROJECT_UPDATES</name> <init>= <expr><literal type="string">"PROJECT_UPDATES"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANNEL_SURVEY</name> <init>= <expr><literal type="string">"SURVEY"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>NOTIFICATION_CHANNELS</name> <init>= <expr><block>{<expr><name>CHANNEL_FOLLOWING</name></expr>, <expr><name>CHANNEL_MESSAGES</name></expr>, <expr><name>CHANNEL_PROJECT_ACTIVITY</name></expr>,
    <expr><name>CHANNEL_PROJECT_REMINDER</name></expr>, <expr><name>CHANNEL_PROJECT_UPDATES</name></expr>, <expr><name>CHANNEL_SURVEY</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>ApplicationContext</name></annotation> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ApiClientType</name></type> <name>client</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>PushNotificationEnvelope</name></argument>&gt;</argument_list></name></type> <name>notifications</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CompositeSubscription</name></type> <name>subscriptions</name> <init>= <expr><operator>new</operator> <call><name>CompositeSubscription</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>PushNotifications</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>ApplicationContext</name></annotation> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ApiClientType</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>client</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>createNotificationChannels</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>add</name></name><argument_list>(
      <argument><expr><call><name><name>this</name><operator>.</operator><name>notifications</name>
        <operator>.</operator><name>onBackpressureBuffer</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>PushNotificationEnvelope</name><operator>::</operator><name>isFriendFollow</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>displayNotificationFromFriendFollowActivity</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>add</name></name><argument_list>(
      <argument><expr><call><name><name>this</name><operator>.</operator><name>notifications</name>
        <operator>.</operator><name>onBackpressureBuffer</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>PushNotificationEnvelope</name><operator>::</operator><name>isMessage</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>fetchMessageThreadWithEnvelope</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>envelopeAndMessageThread</name></decl></parameter></parameter_list> -&gt;
          <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>displayNotificationFromMessageActivity</name></name><argument_list>(<argument><expr><name><name>envelopeAndMessageThread</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>envelopeAndMessageThread</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>
        )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>add</name></name><argument_list>(
      <argument><expr><call><name><name>this</name><operator>.</operator><name>notifications</name>
        <operator>.</operator><name>onBackpressureBuffer</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>PushNotificationEnvelope</name><operator>::</operator><name>isProjectActivity</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>displayNotificationFromProjectActivity</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>add</name></name><argument_list>(
      <argument><expr><call><name><name>this</name><operator>.</operator><name>notifications</name>
        <operator>.</operator><name>onBackpressureBuffer</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>PushNotificationEnvelope</name><operator>::</operator><name>isProjectReminder</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>displayNotificationFromProjectReminder</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>add</name></name><argument_list>(
      <argument><expr><call><name><name>this</name><operator>.</operator><name>notifications</name>
        <operator>.</operator><name>onBackpressureBuffer</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>PushNotificationEnvelope</name><operator>::</operator><name>isProjectUpdateActivity</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>fetchUpdateWithEnvelope</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>envelopeAndUpdate</name></decl></parameter></parameter_list> -&gt;
          <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>displayNotificationFromUpdateActivity</name></name><argument_list>(<argument><expr><name><name>envelopeAndUpdate</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>envelopeAndUpdate</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>
        )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subscriptions</name><operator>.</operator><name>add</name></name><argument_list>(
      <argument><expr><call><name><name>this</name><operator>.</operator><name>notifications</name>
        <operator>.</operator><name>onBackpressureBuffer</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>PushNotificationEnvelope</name><operator>::</operator><name>isSurvey</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>fetchSurveyResponseWithEnvelope</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>newThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>envelopeAndSurveyResponse</name></decl></parameter></parameter_list> -&gt;
          <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>displayNotificationFromSurveyResponseActivity</name></name><argument_list>(
            <argument><expr><name><name>envelopeAndSurveyResponse</name><operator>.</operator><name>first</name></name></expr></argument>,
            <argument><expr><name><name>envelopeAndSurveyResponse</name><operator>.</operator><name>second</name></name></expr></argument>
          )</argument_list></call></expr></block></lambda></expr></argument>
        )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>notifications</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>createNotificationChannels</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// Create the NotificationChannel, but only on API 26+ because</comment>
    <comment type="line">// the NotificationChannel class is new and not in the support library</comment>
    <if>if <condition>(<expr><call><name><name>ApiCapabilities</name><operator>.</operator><name>canCreateNotificationChannels</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationChannel</name></argument>&gt;</argument_list></name></type> <name>channels</name> <init>= <expr><call><name>getListOfNotificationChannels</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// Register the channels with the system; you can't change the importance</comment>
      <comment type="line">// or other notification behaviors after this</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>NotificationManager</name></type> <name>notificationManager</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>NotificationManager</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>ObjectUtils</name><operator>.</operator><name>isNotNull</name></name><argument_list>(<argument><expr><name>notificationManager</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>notificationManager</name><operator>.</operator><name>createNotificationChannels</name></name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationChannel</name></argument>&gt;</argument_list></name></type> <name>getListOfNotificationChannels</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NotificationChannel</name></argument>&gt;</argument_list></name></type> <name>channels</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>NOTIFICATION_CHANNELS</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>channels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getNotificationChannel</name><argument_list>(<argument><expr><name>CHANNEL_MESSAGES</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Messages</name></name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>channels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getNotificationChannel</name><argument_list>(<argument><expr><name>CHANNEL_PROJECT_ACTIVITY</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Project_activity</name></name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>channels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getNotificationChannel</name><argument_list>(<argument><expr><name>CHANNEL_PROJECT_REMINDER</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Project_reminders</name></name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>channels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getNotificationChannel</name><argument_list>(<argument><expr><name>CHANNEL_PROJECT_UPDATES</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Project_updates</name></name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>NotificationChannel</name></type> <name>followingChannel</name> <init>= <expr><call><name>getNotificationChannel</name><argument_list>(<argument><expr><name>CHANNEL_FOLLOWING</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Following</name></name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_DEFAULT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>followingChannel</name><operator>.</operator><name>setDescription</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>When_following_is_on_you_can_follow_the_acticity_of_others</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>channels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>followingChannel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>channels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getNotificationChannel</name><argument_list>(<argument><expr><name>CHANNEL_SURVEY</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Reward_surveys</name></name></expr></argument>, <argument><expr><name><name>NotificationManager</name><operator>.</operator><name>IMPORTANCE_HIGH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>channels</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>NotificationChannel</name></type> <name>getNotificationChannel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>channelId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>nameResId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>importance</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>name</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>nameResId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>NotificationChannel</name><argument_list>(<argument><expr><name>channelId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>importance</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>displayNotificationFromFriendFollowActivity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>GCM</name></type> <name>gcm</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>gcm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>activity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>activity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Notification</name></type> <name>notification</name> <init>= <expr><call><name>notificationBuilder</name><argument_list>(<argument><expr><call><name><name>gcm</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gcm</name><operator>.</operator><name>alert</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHANNEL_FOLLOWING</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setLargeIcon</name><argument_list>(<argument><expr><call><name>fetchBitmap</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>userPhoto</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name>friendFollowActivityIntent</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>notificationManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>displayNotificationFromMessageActivity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>MessageThread</name></type> <name>messageThread</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>GCM</name></type> <name>gcm</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>gcm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>PushNotificationEnvelope</name><operator>.</operator><name>Message</name></name></type> <name>message</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Notification</name></type> <name>notification</name> <init>= <expr><call><name>notificationBuilder</name><argument_list>(<argument><expr><call><name><name>gcm</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gcm</name><operator>.</operator><name>alert</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHANNEL_MESSAGES</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name>messageThreadIntent</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>, <argument><expr><name>messageThread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>notificationManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>displayNotificationFromProjectActivity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>GCM</name></type> <name>gcm</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>gcm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>activity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>activity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>projectId</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>projectId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>projectId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectPhoto</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>projectPhoto</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectParam</name> <init>= <expr><call><name><name>ObjectUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notificationBuilder</name> <init>= <expr><call><name>notificationBuilder</name><argument_list>(<argument><expr><call><name><name>gcm</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gcm</name><operator>.</operator><name>alert</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHANNEL_PROJECT_ACTIVITY</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name>projectContentIntent</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>, <argument><expr><name>projectParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>projectPhoto</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>notificationBuilder</name> <operator>=</operator> <call><name><name>notificationBuilder</name><operator>.</operator><name>setLargeIcon</name></name><argument_list>(<argument><expr><call><name>fetchBitmap</name><argument_list>(<argument><expr><name>projectPhoto</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Notification</name></type> <name>notification</name> <init>= <expr><call><name><name>notificationBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>notificationManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>displayNotificationFromProjectReminder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>GCM</name></type> <name>gcm</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>gcm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>PushNotificationEnvelope</name><operator>.</operator><name>Project</name></name></type> <name>project</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>project</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Notification</name></type> <name>notification</name> <init>= <expr><call><name>notificationBuilder</name><argument_list>(<argument><expr><call><name><name>gcm</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gcm</name><operator>.</operator><name>alert</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHANNEL_PROJECT_REMINDER</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name>projectContentIntent</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>, <argument><expr><call><name><name>ObjectUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setLargeIcon</name><argument_list>(<argument><expr><call><name>fetchBitmap</name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>photo</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>notificationManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>displayNotificationFromSurveyResponseActivity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>SurveyResponse</name></type> <name>surveyResponse</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>GCM</name></type> <name>gcm</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>gcm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>PushNotificationEnvelope</name><operator>.</operator><name>Survey</name></name></type> <name>survey</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>survey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>survey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Notification</name></type> <name>notification</name> <init>= <expr><call><name>notificationBuilder</name><argument_list>(<argument><expr><call><name><name>gcm</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gcm</name><operator>.</operator><name>alert</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHANNEL_SURVEY</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name>surveyResponseContentIntent</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>, <argument><expr><name>surveyResponse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>notificationManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>displayNotificationFromUpdateActivity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>GCM</name></type> <name>gcm</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>gcm</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>activity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>activity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>updateId</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>updateId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>updateId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>projectId</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>projectId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>projectId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectParam</name> <init>= <expr><call><name><name>ObjectUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Notification</name></type> <name>notification</name> <init>= <expr><call><name>notificationBuilder</name><argument_list>(<argument><expr><call><name><name>gcm</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>gcm</name><operator>.</operator><name>alert</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>CHANNEL_PROJECT_UPDATES</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentIntent</name><argument_list>(<argument><expr><call><name>projectUpdateContentIntent</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>projectParam</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setLargeIcon</name><argument_list>(<argument><expr><call><name>fetchBitmap</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>projectPhoto</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>notificationManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>


  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>PendingIntent</name></type> <name>friendFollowActivityIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>messageThreadIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>ActivityFeedActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>TaskStackBuilder</name></type> <name>taskStackBuilder</name> <init>= <expr><call><name><name>TaskStackBuilder</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntentWithParentStack</name><argument_list>(<argument><expr><name>messageThreadIntent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>taskStackBuilder</name><operator>.</operator><name>getPendingIntent</name></name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>PendingIntent</name></type> <name>messageThreadIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>MessageThread</name></type> <name>messageThread</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>messageThreadIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>MessagesActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>MESSAGE_THREAD</name></name></expr></argument>, <argument><expr><name>messageThread</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>KOALA_CONTEXT</name></name></expr></argument>, <argument><expr><name><name>KoalaContext</name><operator>.</operator><name>Message</name><operator>.</operator><name>PUSH</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>TaskStackBuilder</name></type> <name>taskStackBuilder</name> <init>= <expr><call><name><name>TaskStackBuilder</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntentWithParentStack</name><argument_list>(<argument><expr><name>messageThreadIntent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>taskStackBuilder</name><operator>.</operator><name>getPendingIntent</name></name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notificationBuilder</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>title</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>channelId</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name>channelId</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setSmallIcon</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_kickstarter_micro_k</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setColor</name><argument_list>(<argument><expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>ksr_green_800</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setContentTitle</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setStyle</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>BigTextStyle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>bigText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setAutoCancel</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>PendingIntent</name></type> <name>projectContentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>projectParam</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>projectIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>ProjectActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>PROJECT_PARAM</name></name></expr></argument>, <argument><expr><name>projectParam</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>PUSH_NOTIFICATION_ENVELOPE</name></name></expr></argument>, <argument><expr><name>envelope</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>REF_TAG</name></name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>push</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>TaskStackBuilder</name></type> <name>taskStackBuilder</name> <init>= <expr><call><name><name>TaskStackBuilder</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntentWithParentStack</name><argument_list>(<argument><expr><name>projectIntent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>taskStackBuilder</name><operator>.</operator><name>getPendingIntent</name></name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>PendingIntent</name></type> <name>projectUpdateContentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>projectParam</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>projectIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>ProjectActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>PROJECT_PARAM</name></name></expr></argument>, <argument><expr><name>projectParam</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>REF_TAG</name></name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>push</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>updateIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>UpdateActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>PROJECT_PARAM</name></name></expr></argument>, <argument><expr><name>projectParam</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>UPDATE</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>PUSH_NOTIFICATION_ENVELOPE</name></name></expr></argument>, <argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>TaskStackBuilder</name></type> <name>taskStackBuilder</name> <init>= <expr><call><name><name>TaskStackBuilder</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntentWithParentStack</name><argument_list>(<argument><expr><name>projectIntent</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntent</name><argument_list>(<argument><expr><name>updateIntent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>taskStackBuilder</name><operator>.</operator><name>getPendingIntent</name></name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>PendingIntent</name></type> <name>surveyResponseContentIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>SurveyResponse</name></type> <name>surveyResponse</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>activityFeedIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>ActivityFeedActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>surveyResponseIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>SurveyResponseActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>putExtra</name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>SURVEY_RESPONSE</name></name></expr></argument>, <argument><expr><name>surveyResponse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>TaskStackBuilder</name></type> <name>taskStackBuilder</name> <init>= <expr><call><name><name>TaskStackBuilder</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntentWithParentStack</name><argument_list>(<argument><expr><name>activityFeedIntent</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>addNextIntent</name><argument_list>(<argument><expr><name>surveyResponseIntent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>taskStackBuilder</name><operator>.</operator><name>getPendingIntent</name></name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>signature</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_UPDATE_CURRENT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Bitmap</name></type> <name>fetchBitmap</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>url</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>transformIntoCircle</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>url</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <try>try <block>{
      <decl_stmt><decl><type><name>RequestCreator</name></type> <name>requestCreator</name> <init>= <expr><call><name><name>Picasso</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>context</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>load</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>transform</name><argument_list>(<argument><expr><operator>new</operator> <call><name>CropSquareTransformation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>transformIntoCircle</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>requestCreator</name> <operator>=</operator> <call><name><name>requestCreator</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CircleTransformation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><call><name><name>requestCreator</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Timber</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><literal type="string">"Failed to load large icon: %s"</literal></expr></argument>,  <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>NotificationManager</name></type> <name>notificationManager</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>NotificationManager</name><operator>)</operator> <call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PushNotificationEnvelope</name></argument>, <argument><name>MessageThread</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchMessageThreadWithEnvelope</name><parameter_list>(
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>PushNotificationEnvelope</name><operator>.</operator><name>Message</name></name></type> <name>message</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>message</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>message</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThread</name></argument>&gt;</argument_list></name></type> <name>messageThread</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>client</name><operator>.</operator><name>fetchMessagesForThread</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>messageThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>MessageThreadEnvelope</name><operator>::</operator><name>messageThread</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name>messageThread</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PushNotificationEnvelope</name></argument>, <argument><name>SurveyResponse</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchSurveyResponseWithEnvelope</name><parameter_list>(
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>PushNotificationEnvelope</name><operator>.</operator><name>Survey</name></name></type> <name>survey</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>survey</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>survey</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>SurveyResponse</name></argument>&gt;</argument_list></name></type> <name>surveyResponse</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>client</name><operator>.</operator><name>fetchSurveyResponse</name></name><argument_list>(<argument><expr><call><name><name>survey</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name>surveyResponse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>PushNotificationEnvelope</name></argument>, <argument><name>Update</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchUpdateWithEnvelope</name><parameter_list>(
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>PushNotificationEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name> <init>= <expr><call><name><name>envelope</name><operator>.</operator><name>activity</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>activity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>updateId</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>updateId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>updateId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>projectId</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>projectId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>projectId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>projectParam</name> <init>= <expr><call><name><name>ObjectUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>projectId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>updateParam</name> <init>= <expr><call><name><name>ObjectUtils</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>updateId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Update</name></argument>&gt;</argument_list></name></type> <name>update</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>client</name><operator>.</operator><name>fetchUpdate</name></name><argument_list>(<argument><expr><name>projectParam</name></expr></argument>, <argument><expr><name>updateParam</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name>update</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
