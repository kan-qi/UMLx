<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\SwipeRefresher.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>jakewharton</name><operator>.</operator><name>rxbinding</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>RxSwipeRefreshLayout</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>swiperefreshlayout</name><operator>.</operator><name>widget</name><operator>.</operator><name>SwipeRefreshLayout</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Action0</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Func0</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>SwipeRefresher</name> <block>{
  <comment type="block" format="javadoc">/**
   *
   * @param activity Activity to bind lifecycle events for.
   * @param layout Layout to subscribe to for refresh events, send signals when no longer refreshing.
   * @param refreshAction Action to call when a refresh event is emitted, likely a viewModel input.
   * @param isRefreshing Observable that emits events when the refreshing status changes.
   */</comment>
  <constructor><specifier>public</specifier> <name>SwipeRefresher</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>BaseActivity</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>ActivityViewModel</name></extends></argument>&gt;</argument_list></name></type> <name>activity</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>SwipeRefreshLayout</name></type> <name>layout</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Action0</name></type> <name>refreshAction</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func0</name><argument_list type="generic">&lt;<argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>isRefreshing</name></decl></parameter>)</parameter_list> <block>{

    <comment type="line">// Iterate through colors in loading spinner while waiting for refresh</comment>
    <expr_stmt><expr><call><name>setColorSchemeResources</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Emits when user has signaled to refresh layout</comment>
    <expr_stmt><expr><call><name><name>RxSwipeRefreshLayout</name><operator>.</operator><name>refreshes</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>bindToLifecycle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>refreshAction</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Emits when the refreshing status changes. Hides loading spinner when feed is no longer refreshing.</comment>
    <expr_stmt><expr><call><name><name>isRefreshing</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>refreshing</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><name>refreshing</name></expr></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>bindToLifecycle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>layout</name><operator>::</operator><name>setRefreshing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   *
   * @param fragment Fragment to bind lifecycle events for.
   * @param layout Layout to subscribe to for refresh events, send signals when no longer refreshing.
   * @param refreshAction Action to call when a refresh event is emitted, likely a viewModel input.
   * @param isRefreshing Observable that emits events when the refreshing status changes.
   */</comment>
  <constructor><specifier>public</specifier> <name>SwipeRefresher</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>BaseFragment</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>FragmentViewModel</name></extends></argument>&gt;</argument_list></name></type> <name>fragment</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>SwipeRefreshLayout</name></type> <name>layout</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Action0</name></type> <name>refreshAction</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func0</name><argument_list type="generic">&lt;<argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>isRefreshing</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setColorSchemeResources</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">// Emits when user has signaled to refresh layout</comment>
    <expr_stmt><expr><call><name><name>RxSwipeRefreshLayout</name><operator>.</operator><name>refreshes</name></name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>fragment</name><operator>.</operator><name>bindToLifecycle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>refreshAction</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Emits when the refreshing status changes. Hides loading spinner when feed is no longer refreshing.</comment>
    <expr_stmt><expr><call><name><name>isRefreshing</name><operator>.</operator><name>call</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>refreshing</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><name>refreshing</name></expr></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>fragment</name><operator>.</operator><name>bindToLifecycle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>layout</name><operator>::</operator><name>setRefreshing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setColorSchemeResources</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>SwipeRefreshLayout</name></type> <name>layout</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// Iterate through colors in loading spinner while waiting for refresh</comment>
    <expr_stmt><expr><call><name><name>layout</name><operator>.</operator><name>setColorSchemeResources</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>ksr_green_500</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>ksr_green_700</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>ksr_green_800</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
