<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\ProjectUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>KSString</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>Duration</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ProjectUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>ProjectUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>combineProjectsAndParams</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>projects</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryParams</name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>projectAndParams</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>projects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>projects</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>projectAndParams</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>projects</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>projectAndParams</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns time until project reaches deadline along with the unit,
   * e.g. `25 minutes`, `8 days`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>deadlineCountdown</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>deadlineCountdownValue</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>deadlineCountdownUnit</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block">/*
   * Returns unit of time remaining in a readable string, e.g. `days to go`, `hours to go`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>deadlineCountdownDetail</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>KSString</name></type> <name>ksString</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ksString</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>discovery_baseball_card_time_left_to_go</name></name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><literal type="string">"time_left"</literal></expr></argument>, <argument><expr><call><name>deadlineCountdownUnit</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the most appropriate unit for the time remaining until the project
   * reaches its deadline.
   *
   * @param  context an Android context.
   * @return         the String unit.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>deadlineCountdownUnit</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>seconds</name> <init>= <expr><call><name>timeInSecondsUntilDeadline</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <name>seconds</name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>discovery_baseball_card_deadline_units_secs</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">120.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>discovery_baseball_card_deadline_units_secs</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">120.0</literal> <operator>*</operator> <literal type="number">60.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>discovery_baseball_card_deadline_units_mins</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">72.0</literal> <operator>*</operator> <literal type="number">60.0</literal> <operator>*</operator> <literal type="number">60.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>discovery_baseball_card_deadline_units_hours</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif></if>
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>discovery_baseball_card_deadline_units_days</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns time remaining until project reaches deadline in either seconds,
   * minutes, hours or days. A time unit is chosen such that the number is
   * readable, e.g. 5 minutes would be preferred to 300 seconds.
   *
   * @return the Integer time remaining.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>deadlineCountdownValue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Long</name></type> <name>seconds</name> <init>= <expr><call><name>timeInSecondsUntilDeadline</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">120.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>seconds</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call></expr>;</return> <comment type="line">// seconds</comment>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">120.0</literal> <operator>*</operator> <literal type="number">60.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>seconds</name> <operator>/</operator> <literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// minutes</comment>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>seconds</name> <operator>&lt;</operator> <literal type="number">72.0</literal> <operator>*</operator> <literal type="number">60.0</literal> <operator>*</operator> <literal type="number">60.0</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>seconds</name> <operator>/</operator> <literal type="number">60.0</literal> <operator>/</operator> <literal type="number">60.0</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// hours</comment>
    }</block></then></if></elseif></if>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>seconds</name> <operator>/</operator> <literal type="number">60.0</literal> <operator>/</operator> <literal type="number">60.0</literal> <operator>/</operator> <literal type="number">24.0</literal></expr></argument>)</argument_list></call></expr>;</return> <comment type="line">// days</comment>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns `true` if the project is no longer live, `false` otherwise.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isCompleted</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>state</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>state</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Project</name><operator>.</operator><name>STATE_CANCELED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name><name>Project</name><operator>.</operator><name>STATE_FAILED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name><name>Project</name><operator>.</operator><name>STATE_SUCCESSFUL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name><name>Project</name><operator>.</operator><name>STATE_PURGED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>||</operator>
      <call><name><name>Project</name><operator>.</operator><name>STATE_SUSPENDED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns `true` if the project name ends with a punctuation character.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isProjectNamePunctuated</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>lastChar</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>name</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>lastChar</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">".*\\p{Punct}"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Metadata</name></type> <name>metadataForProject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>project</name><operator>.</operator><name>isBacking</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name><name>Metadata</name><operator>.</operator><name>BACKING</name></name></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>project</name><operator>.</operator><name>isStarred</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name><name>Metadata</name><operator>.</operator><name>SAVING</name></name></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>project</name><operator>.</operator><name>isFeaturedToday</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name><name>Metadata</name><operator>.</operator><name>CATEGORY_FEATURED</name></name></expr>;</return>
    }</block></then></if></elseif></if>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns 16:9 height relative to input width.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>photoHeightFromWidthRatio</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>width</name> <operator>*</operator> <literal type="number">9</literal> <operator>/</operator> <literal type="number">16</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Set correct button view based on project and backing status.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setActionButton</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Button</name></type> <name>backProjectButton</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Button</name></type> <name>managePledgeButton</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Button</name></type> <name>viewPledgeButton</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>project</name><operator>.</operator><name>isBacking</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>project</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>backProjectButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>backProjectButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>project</name><operator>.</operator><name>isBacking</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>project</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>managePledgeButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>managePledgeButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>project</name><operator>.</operator><name>isBacking</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>project</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>viewPledgeButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>viewPledgeButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns time between project launch and deadline.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Long</name></type> <name>timeInSecondsOfDuration</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Duration</name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>launchedAt</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>deadline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStandardSeconds</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns time until project reaches deadline in seconds, or 0 if the
   * project has already finished.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Long</name></type> <name>timeInSecondsUntilDeadline</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0L</literal></expr></argument>,
      <argument><expr><operator>new</operator> <call><name>Duration</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DateTime</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>deadline</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStandardSeconds</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>userIsCreator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>project</name><operator>.</operator><name>creator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>id</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>user</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUSUserViewingNonUSProject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>userCountry</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>projectCountry</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>I18nUtils</name><operator>.</operator><name>isCountryUS</name></name><argument_list>(<argument><expr><name>userCountry</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>I18nUtils</name><operator>.</operator><name>isCountryUS</name></name><argument_list>(<argument><expr><name>projectCountry</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <enum><specifier>public</specifier> enum <name>Metadata</name> <block>{
    <decl><name>BACKING</name></decl>, <decl><name>SAVING</name></decl>, <decl><name>CATEGORY_FEATURED</name></decl>
  }</block></enum>
}</block></class>
</unit>
