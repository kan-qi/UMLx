<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\DiscoveryParamsUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>RefTag</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BooleanUtils</name><operator>.</operator><name>isTrue</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>IntegerUtils</name><operator>.</operator><name>isNonZero</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiscoveryParamsUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>DiscoveryParamsUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <comment type="block" format="javadoc">/**
   * A `ref_tag` representation of some discovery params. This tag can be used to attribute a checkout when a user
   * pledges from discovery using these particular params.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>RefTag</name></type> <name>refTag</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryParams</name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>params</name><operator>.</operator><name>isCategorySet</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name></name></type> <name>sort</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>sort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>category</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
      <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>category</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>params</name><operator>.</operator><name>location</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>city</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>staffPicks</name> <init>= <expr><call><name>isTrue</name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>staffPicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>staffPicks</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name></name></type> <name>sort</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>sort</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>recommended</name></name><argument_list>(<argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
      <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>recommended</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>isNonZero</name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>social</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>social</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>params</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>search</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name><name>RefTag</name><operator>.</operator><name>discovery</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
