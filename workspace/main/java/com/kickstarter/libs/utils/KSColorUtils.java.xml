<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\KSColorUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ColorInt</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ColorRes</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>FloatRange</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>IntRange</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>core</name><operator>.</operator><name>graphics</name><operator>.</operator><name>ColorUtils</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>KSColorUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>KSColorUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>float</name></type> <name>KICKSTARTER_LIGHTNESS_THRESHOLD</name> <init>= <expr><literal type="number">0.72f</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Set the alpha portion of the color.
   *
   * @param color   the (a)rgb color to set an alpha for.
   * @param alpha   the new alpha value, between 0 and 255.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>setAlpha</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><annotation>@<name>IntRange</name><argument_list>(<argument><expr><name>from</name><operator>=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>to</name><operator>=</operator><literal type="number">255</literal></expr></argument>)</argument_list></annotation> <specifier>final</specifier> <name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>alpha</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Darken the argb color by a percentage.
   *
   * @param color   the argb color to lighten.
   * @param percent percentage to darken by, between 0.0 and 1.0.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>darken</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorInt</name></annotation> <specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><annotation>@<name>FloatRange</name><argument_list>(<argument><expr><name>from</name><operator>=</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>to</name><operator>=</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></annotation> <specifier>final</specifier> <name>float</name></type> <name>percent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>hsl</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ColorUtils</name><operator>.</operator><name>colorToHSL</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>hsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-=</operator> <name><name>hsl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>percent</name></expr>;</expr_stmt>
    <comment type="line">// HSLToColor sets alpha to fully opaque, so pluck the alpha from the original color.</comment>
    <return>return <expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name><name>ColorUtils</name><operator>.</operator><name>HSLToColor</name></name><argument_list>(<argument><expr><name>hsl</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>lightColor</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ContextCompat</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>lightColorId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>ColorRes</name></annotation> <type><name>int</name></type> <name>lightColorId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>white</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Lighten the argb color by a percentage.
   *
   * @param color   the argb color to lighten.
   * @param percent percentage to lighten by, between 0.0 and 1.0.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>lighten</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorInt</name></annotation> <specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><annotation>@<name>FloatRange</name><argument_list>(<argument><expr><name>from</name><operator>=</operator><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>to</name><operator>=</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></annotation> <specifier>final</specifier> <name>float</name></type> <name>percent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>float</name><index>[]</index></name></type> <name>hsl</name> <init>= <expr><operator>new</operator> <name><name>float</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ColorUtils</name><operator>.</operator><name>colorToHSL</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>hsl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hsl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>-</operator> <name><name>hsl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>percent</name></expr>;</expr_stmt>
    <comment type="line">// HSLToColor sets alpha to fully opaque, so pluck the alpha from the original color.</comment>
    <return>return <expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name><name>ColorUtils</name><operator>.</operator><name>HSLToColor</name></name><argument_list>(<argument><expr><name>hsl</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Check whether a color is light.
   *
   * @param color   the argb color to check.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLight</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorInt</name></annotation> <specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>weightedLightness</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>KICKSTARTER_LIGHTNESS_THRESHOLD</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Check whether a color is dark.
   *
   * @param color   the argb color to check.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDark</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorInt</name></annotation> <specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name>isLight</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block">/*
   * Return a value between 0.0 and 1.0 representing the perceived lightness of the color.
   * More info here: https://robots.thoughtbot.com/closer-look-color-lightness
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>double</name></type> <name>weightedLightness</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorInt</name></annotation> <specifier>final</specifier> <name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><operator>(</operator><call><name><name>Color</name><operator>.</operator><name>red</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">212.6</literal> <operator>+</operator> <call><name><name>Color</name><operator>.</operator><name>green</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">715.2</literal> <operator>+</operator> <call><name><name>Color</name><operator>.</operator><name>blue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">72.2</literal><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <literal type="number">255</literal></expr>;</return>
  }</block></function>
}</block></class>
</unit>
