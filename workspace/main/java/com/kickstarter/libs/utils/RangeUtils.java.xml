<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\RangeUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Range</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>RangeUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>RangeUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Given a list of integers computes a list of consecutive, monotonically non-descreasing ranges.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>consecutiveRanges</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>xs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>previous</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>current</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>previous</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>previous</name> <operator>=</operator> <call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>current</name> <operator>=</operator> <call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <if>if <condition>(<expr><name>previous</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>previous</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>current</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>lastIdx</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Range</name></type> <name>lastRange</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>lastIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>lastIdx</name></expr></argument>, <argument><expr><call><name><name>Range</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>lastRange</name><operator>.</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>lastRange</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></for>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>positionalRanges</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>positions</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Integer</name></type> <name>firstPosition</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>positions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>firstPosition</name> <operator>=</operator> <call><name><name>positions</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>ranges</name> <init>= <expr><call><name><name>RangeUtils</name><operator>.</operator><name>consecutiveRanges</name></name><argument_list>(<argument><expr><name>positions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Range</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>Range</name></type> <name>range</name> <range>: <expr><name>ranges</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Range</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name><name>range</name><operator>.</operator><name>start</name></name> <operator>+</operator> <name>firstPosition</name></expr></argument>, <argument><expr><name><name>range</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
