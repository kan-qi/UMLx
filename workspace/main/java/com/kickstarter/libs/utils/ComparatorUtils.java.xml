<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\ComparatorUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>


<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ComparatorUtils</name> <block>{

  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DescendingOrderFloatComparator</name> <super><implements>implements <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Float</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name><name>x</name><operator>.</operator><name>floatValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>y</name><operator>.</operator><name>floatValue</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DescendingOrderIntegerComparator</name> <super><implements>implements <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <comment type="block">/*
    * IMPORTANT: this sorts in descending order.
     */</comment>
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Integer</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Integer</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <name>y</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><call><name><name>x</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>y</name><operator>.</operator><name>intValue</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
