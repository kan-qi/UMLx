<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\KoalaUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Update</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>KoalaUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>KoalaUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>discoveryParamsProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryParams</name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>discoveryParamsProperties</name><argument_list>(<argument><expr><name>params</name></expr></argument>, <argument><expr><literal type="string">"discover_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>discoveryParamsProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryParams</name></type> <name>params</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>unmodifiableMap</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"everything"</literal></expr></argument>, <argument><expr><call><name><name>BooleanUtils</name><operator>.</operator><name>isTrue</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>isAllProjects</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"recommended"</literal></expr></argument>, <argument><expr><call><name><name>BooleanUtils</name><operator>.</operator><name>isTrue</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>recommended</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"social"</literal></expr></argument>, <argument><expr><call><name><name>BooleanUtils</name><operator>.</operator><name>isIntTrue</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>social</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"staff_picks"</literal></expr></argument>, <argument><expr><call><name><name>BooleanUtils</name><operator>.</operator><name>isTrue</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>staffPicks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"starred"</literal></expr></argument>, <argument><expr><call><name><name>BooleanUtils</name><operator>.</operator><name>isIntTrue</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>starred</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"term"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>term</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"sort"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>params</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>params</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>category</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>putAll</name><argument_list>(<argument><expr><call><name>categoryProperties</name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Location</name></type> <name>location</name> <init>= <expr><call><name><name>params</name><operator>.</operator><name>location</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>location</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>putAll</name><argument_list>(<argument><expr><call><name>locationProperties</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block>
    }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>prefixedProperties</name> <init>= <expr><call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>prefixedProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"page"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>page</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>prefixedProperties</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"per_page"</literal></expr></argument>, <argument><expr><call><name><name>params</name><operator>.</operator><name>perPage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>prefixedProperties</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>categoryProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>categoryProperties</name><argument_list>(<argument><expr><name>category</name></expr></argument>, <argument><expr><literal type="string">"category_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>categoryProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Category</name></type> <name>category</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
    }</block></class></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>locationProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Location</name></type> <name>location</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>locationProperties</name><argument_list>(<argument><expr><name>location</name></expr></argument>, <argument><expr><literal type="string">"location_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>locationProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Location</name></type> <name>location</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"displayable_name"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>displayableName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"city"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>city</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>state</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"country"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>country</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"projects_count"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>projectsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
    }</block></class></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>userProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>userProperties</name><argument_list>(<argument><expr><name>user</name></expr></argument>, <argument><expr><literal type="string">"user_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>userProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"uid"</literal></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"backed_projects_count"</literal></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>backedProjectsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"created_projects_count"</literal></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>createdProjectsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"starred_projects_count"</literal></expr></argument>, <argument><expr><call><name><name>user</name><operator>.</operator><name>starredProjectsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
    }</block></class></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>projectProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>loggedInUser</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>projectProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>, <argument><expr><literal type="string">"project_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>projectProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>loggedInUser</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"backers_count"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>backersCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"comments_count"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>commentsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"country"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>country</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"duration"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>timeInSecondsOfDuration</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"currency"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>currency</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"goal"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>goal</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"has_video"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>video</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"hours_remaining"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>timeInSecondsUntilDeadline</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">60.0f</literal> <operator>/</operator> <literal type="number">60.0f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"percent_raised"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>percentageFunded</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">100.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"pledged"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>pledged</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>state</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"update_count"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>updatesCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>category</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>category</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><call><name><name>category</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>parent</name> <init>= <expr><call><name><name>category</name><operator>.</operator><name>parent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"parent_category"</literal></expr></argument>, <argument><expr><call><name><name>parent</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>Location</name></type> <name>location</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>location</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>location</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"location"</literal></expr></argument>, <argument><expr><call><name><name>location</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>prefixedMap</name> <init>= <expr><call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>prefixedMap</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name>userProperties</name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>creator</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"creator_"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>loggedInUser</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>prefixedMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"user_is_project_creator"</literal></expr></argument>, <argument><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>userIsCreator</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>prefixedMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"user_is_backer"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>isBacking</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>prefixedMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"user_has_starred"</literal></expr></argument>, <argument><expr><call><name><name>project</name><operator>.</operator><name>isStarred</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>prefixedMap</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>activityProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>loggedInUser</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>activityProperties</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>, <argument><expr><literal type="string">"activity_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>activityProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>loggedInUser</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"category"</literal></expr></argument>, <argument><expr><call><name><name>activity</name><operator>.</operator><name>category</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
    }</block></class></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>project</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>project</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name>projectProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>Update</name></type> <name>update</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>update</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name>updateProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>properties</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>updateProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>loggedInUser</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>updateProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>, <argument><expr><literal type="string">"update_"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>updateProperties</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>loggedInUser</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>prefix</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>properties</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <block>{
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"comments_count"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>commentsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"has_liked"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>hasLiked</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"likes_count"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>likesCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"sequence"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>sequence</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"visible"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>visible</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"published_at"</literal></expr></argument>, <argument><expr><call><name><name>update</name><operator>.</operator><name>publishedAt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
    }</block></class></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>properties</name> <operator>=</operator> <call><name><name>MapUtils</name><operator>.</operator><name>prefixKeys</name></name><argument_list>(<argument><expr><name>properties</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>properties</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><call><name>projectProperties</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>loggedInUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>properties</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
