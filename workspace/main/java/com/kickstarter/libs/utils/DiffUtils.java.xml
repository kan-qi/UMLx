<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\DiffUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>auto</name><operator>.</operator><name>parcel</name><operator>.</operator><name>AutoParcel</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Func2</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>DiffUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>DiffUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Diff</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>insertions</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>deletions</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>updates</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>insertions</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>deletions</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>updates</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Diff</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_DiffUtils_Diff</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>insertions</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>deletions</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>updates</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>Diff</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>oldItems</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newItems</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DiffUtils</name><operator>.</operator><name>diff</name></name><argument_list>(<argument><expr><name>oldItems</name></expr></argument>, <argument><expr><name>newItems</name></expr></argument>, <argument><expr><name>Object</name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>Diff</name></type> <name>diff</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>oldItems</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>newItems</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>matches</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>insertions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>deletions</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>updates</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>missingItems</name> <init>= <expr><call><name><name>ListUtils</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>oldItems</name></expr></argument>, <argument><expr><name>newItems</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>T</name></type> <name>item</name> <range>: <expr><name>missingItems</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>deletions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>oldItems</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>addedItems</name> <init>= <expr><call><name><name>ListUtils</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>newItems</name></expr></argument>, <argument><expr><name>oldItems</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>T</name></type> <name>item</name> <range>: <expr><name>addedItems</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>insertions</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>newItems</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>maybeUpdatedItems</name> <init>= <expr><call><name><name>ListUtils</name><operator>.</operator><name>intersection</name></name><argument_list>(<argument><expr><name>oldItems</name></expr></argument>, <argument><expr><name>newItems</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>T</name></type> <name>maybeUpdatedItem</name> <range>: <expr><name>maybeUpdatedItems</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>T</name></type> <name>oldItem</name> <init>= <expr><call><name><name>ListUtils</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>oldItems</name></expr></argument>, <argument><expr><name>maybeUpdatedItem</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>T</name></type> <name>newItem</name> <init>= <expr><call><name><name>ListUtils</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>newItems</name></expr></argument>, <argument><expr><name>maybeUpdatedItem</name></expr></argument>, <argument><expr><name>matches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>oldItem</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>newItem</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>updates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ListUtils</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>oldItems</name></expr></argument>, <argument><expr><name>oldItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><call><name><name>Diff</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>insertions</name><argument_list>(<argument><expr><name>insertions</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>deletions</name><argument_list>(<argument><expr><name>deletions</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>updates</name><argument_list>(<argument><expr><name>updates</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
