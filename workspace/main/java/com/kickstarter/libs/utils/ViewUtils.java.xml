<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\ViewUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>AppRatingDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>views</name><operator>.</operator><name>ConfirmDialog</name></name>;</import>

<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Action1</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ViewUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>ViewUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>getScreenDensity</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getScreenHeightDp</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>screenHeightDp</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getScreenWidthDp</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>screenWidthDp</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFontScaleLarge</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>fontScale</name> <operator>&gt;</operator> <literal type="number">1.5f</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLandscape</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name> <operator>==</operator> <name><name>Configuration</name><operator>.</operator><name>ORIENTATION_LANDSCAPE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPortrait</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name>isLandscape</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Set layout margins for a ViewGroup with LinearLayout parent.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLinearViewGroupMargins</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>viewGroup</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>leftMargin</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>topMargin</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>rightMargin</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottomMargin</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>layoutParams</name> <init>= <expr><operator>new</operator> <call><name><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><call><name><name>viewGroup</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>layoutParams</name><operator>.</operator><name>setMargins</name></name><argument_list>(<argument><expr><name>leftMargin</name></expr></argument>, <argument><expr><name>topMargin</name></expr></argument>, <argument><expr><name>rightMargin</name></expr></argument>, <argument><expr><name>bottomMargin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>layoutParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Set layout margins for a ViewGroup with RelativeLayout parent.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRelativeViewGroupMargins</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>viewGroup</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>leftMargin</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>topMargin</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>rightMargin</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottomMargin</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>layoutParams</name> <init>= <expr><operator>new</operator> <call><name><name>RelativeLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><call><name><name>viewGroup</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>layoutParams</name><operator>.</operator><name>setMargins</name></name><argument_list>(<argument><expr><name>leftMargin</name></expr></argument>, <argument><expr><name>topMargin</name></expr></argument>, <argument><expr><name>rightMargin</name></expr></argument>, <argument><expr><name>bottomMargin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>viewGroup</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>layoutParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Show a dialog box to the user.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>new</operator> <call><name>ConfirmDialog</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>title</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>buttonMessage</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>new</operator> <call><name>ConfirmDialog</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>buttonMessage</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showRatingDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>new</operator> <call><name>AppRatingDialog</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Opens the play store native app or the play store web site.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>openStoreRating</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>packageName</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <comment type="line">// First try to load the play store native application</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>marketUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"market://details?id="</literal> <operator>+</operator> <name>packageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>marketUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>__</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// Fallback to the play store web site</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Uri</name></type> <name>httpUri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"http://play.google.com/store/apps/details?id="</literal> <operator>+</operator> <name>packageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>httpUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Show a toast with default bottom gravity to the user.
   */</comment>
  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"InflateParams"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>toast</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>text</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toast_text_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Toast</name></type> <name>toast</name> <init>= <expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"InflateParams"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showToastFromTop</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>xOffset</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>yOffset</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>toast</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TextView</name></type> <name>text</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>toast_text_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Toast</name></type> <name>toast</name> <init>= <expr><operator>new</operator> <call><name>Toast</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>TOP</name></name> <operator>|</operator> <name><name>Gravity</name><operator>.</operator><name>CENTER_HORIZONTAL</name></name></expr></argument>, <argument><expr><name>xOffset</name></expr></argument>, <argument><expr><name>yOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Action1</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showToast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><lambda><parameter_list>(<parameter><decl><name>message</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>showToast</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the visiblity of a view to {@link View#VISIBLE} or {@link View#GONE}. Setting
   * the view to GONE removes it from the layout so that it no longer takes up any space.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setGone</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>gone</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>gone</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Action1</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setGone</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><lambda><parameter_list>(<parameter><decl><name>gone</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>setGone</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>gone</name></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the visiblity of a view to {@link View#VISIBLE} or {@link View#INVISIBLE}. Setting
   * the view to INVISIBLE makes it hidden, but it still takes up space.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setInvisible</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>hidden</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>hidden</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Action1</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setInvisible</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><lambda><parameter_list>(<parameter><decl><name>invisible</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>setInvisible</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>invisible</name></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</return>
  }</block></function>
}</block></class>
</unit>
