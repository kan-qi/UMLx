<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\ObjectUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Func1</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ObjectUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>ObjectUtils</name><parameter_list>()</parameter_list><block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>object</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNotNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>object</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the first non-`null` value of its arguments.
   */</comment>
  <function><annotation>@<name>NonNull</name></annotation> <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>coalesce</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>theDefault</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><name>value</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>theDefault</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a function `T -&gt; T` that coalesces values with `theDefault`.
   */</comment>
  <function><annotation>@<name>NonNull</name></annotation> <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>Func1</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>&gt;</argument_list></name></type> <name>coalesceWith</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>theDefault</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><lambda><parameter_list>(<parameter><decl><name>value</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>ObjectUtils</name><operator>.</operator><name>coalesce</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>theDefault</name></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Converts a {@link String} to a {@link Boolean}, or null if the boolean cannot be parsed.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Boolean</name></type> <name>toBoolean</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Boolean</name><operator>.</operator><name>parseBoolean</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Converts a {@link String} to an {@link Integer}, or null if the integer cannot be parsed.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Integer</name></type> <name>toInteger</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>s</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <try>try <block>{
        <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></catch></try>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Converts an {@link Integer} to a {@link String}, can be null if the integer is also null.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Integer</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Converts a {@link Long} to a {@link String}, can be null if the long is also null.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Long</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Converts a {@link Float} to a {@link String}, can be null if the float is also null.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Float</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Float</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Converts a {@link Double} to a {@link String}, can be null if the double is also null.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Double</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Double</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Cast a `null`able value into a non-`null` value, and throw a `NullPointerException` if the value is `null`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>requireNonNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>T</name></type> <name>value</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NullPointerException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name>requireNonNull</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"Value should not be null."</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Cast a `null`able value into a non-`null` value, and throw a `NullPointerException` if the value is `null`. Provide
   * a message for a better description of why you require this value to be non-`null`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>requireNonNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>klass</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NullPointerException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name>requireNonNull</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>klass</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" required to be non-null."</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Cast a `null`able value into a non-`null` value, and throw a `NullPointerException` if the value is `null`. Provide
   * a message for a better description of why you require this value to be non-`null`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>requireNonNull</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NullPointerException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <return>return <expr><name>value</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
