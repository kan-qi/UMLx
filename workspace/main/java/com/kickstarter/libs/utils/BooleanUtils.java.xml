<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\BooleanUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>BooleanUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>BooleanUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <comment type="block" format="javadoc">/**
   * Returns the input boolean negated.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>negate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>bool</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><name>bool</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns `false` if the boolean is `null` or `false`, and `true` otherwise.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isTrue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Boolean</name></type> <name>bool</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>bool</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><name>bool</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns `false` if the integer is `0` or `null`, and `true` otherwise.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isIntTrue</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Integer</name></type> <name>integer</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>integer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>integer</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns `true` if the boolean is `null` or `false`, and `true` otherwise.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFalse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Boolean</name></type> <name>bool</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name>isTrue</name><argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
