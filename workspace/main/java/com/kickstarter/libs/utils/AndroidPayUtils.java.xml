<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\AndroidPayUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>Cart</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>FullWallet</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>FullWalletRequest</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>InstrumentInfo</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>LineItem</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>MaskedWalletRequest</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>PaymentMethodTokenizationParameters</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>PaymentMethodTokenizationType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>WalletConstants</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>wallet</name><operator>.</operator><name>fragment</name><operator>.</operator><name>SupportWalletFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityRequestCodes</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>models</name><operator>.</operator><name>AndroidPayAuthorizedPayload</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>models</name><operator>.</operator><name>AndroidPayPayload</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>data</name><operator>.</operator><name>ActivityResult</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>AndroidPayUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>AndroidPayUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>environment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Build</name></type> <name>build</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name><name>build</name><operator>.</operator><name>isInternal</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>WalletConstants</name><operator>.</operator><name>ENVIRONMENT_TEST</name></name></expr> </then><else>: <expr><name><name>WalletConstants</name><operator>.</operator><name>ENVIRONMENT_PRODUCTION</name></name></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>MaskedWalletRequest</name></type> <name>createMaskedWalletRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>AndroidPayPayload</name></type> <name>payload</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><call><name><name>MaskedWalletRequest</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>setMerchantName</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>merchantName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setPhoneNumberRequired</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>phoneNumberRequired</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setShippingAddressRequired</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>shippingAddressRequired</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setCurrencyCode</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>currencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setAllowDebitCard</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>allowDebitCard</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setAllowPrepaidCard</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>allowPrepaidCard</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setEstimatedTotalPrice</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>estimatedTotalPrice</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setCart</name><argument_list>(
        <argument><expr><call><name><name>Cart</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>setCurrencyCode</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>cart</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currencyCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setTotalPrice</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>cart</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalPrice</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setLineItems</name><argument_list>(<argument><expr><call><name>lineItemsFromPayload</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
      )</argument_list></call>
      <operator>.</operator><call><name>setPaymentMethodTokenizationParameters</name><argument_list>(
        <argument><expr><call><name><name>PaymentMethodTokenizationParameters</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>setPaymentMethodTokenizationType</name><argument_list>(<argument><expr><name><name>PaymentMethodTokenizationType</name><operator>.</operator><name>PAYMENT_GATEWAY</name></name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addParameter</name><argument_list>(<argument><expr><literal type="string">"gateway"</literal></expr></argument>, <argument><expr><literal type="string">"stripe"</literal></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addParameter</name><argument_list>(<argument><expr><literal type="string">"stripe:publishableKey"</literal></expr></argument>, <argument><expr><call><name><name>payload</name><operator>.</operator><name>stripePublishableKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>addParameter</name><argument_list>(<argument><expr><literal type="string">"stripe:version"</literal></expr></argument>, <argument><expr><call><name><name>payload</name><operator>.</operator><name>stripeVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
      )</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>FullWalletRequest</name></type> <name>createFullWalletRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>googleTransactionId</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>AndroidPayPayload</name></type> <name>payload</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><call><name><name>FullWalletRequest</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>setGoogleTransactionId</name><argument_list>(<argument><expr><name>googleTransactionId</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setCart</name><argument_list>(
        <argument><expr><call><name><name>Cart</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>setCurrencyCode</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>cart</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>currencyCode</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setTotalPrice</name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>cart</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>totalPrice</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>setLineItems</name><argument_list>(<argument><expr><call><name>lineItemsFromPayload</name><argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
      )</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns true if the activity result contains data for a full wallet.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFullWalletRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ActivityResult</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>intent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return
      <expr><name>intent</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
      <call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>WalletConstants</name><operator>.</operator><name>EXTRA_ERROR_CODE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <call><name><name>intent</name><operator>.</operator><name>hasExtra</name></name><argument_list>(<argument><expr><name><name>WalletConstants</name><operator>.</operator><name>EXTRA_FULL_WALLET</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name><name>result</name><operator>.</operator><name>resultCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name> <operator>&amp;&amp;</operator>
      <call><name><name>result</name><operator>.</operator><name>requestCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ActivityRequestCodes</name><operator>.</operator><name>CHECKOUT_ACTIVITY_WALLET_OBTAINED_FULL</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMaskedWalletRequest</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ActivityResult</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>intent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return
      <expr><name>intent</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
      <call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>WalletConstants</name><operator>.</operator><name>EXTRA_ERROR_CODE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
      <call><name><name>result</name><operator>.</operator><name>requestCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ActivityRequestCodes</name><operator>.</operator><name>CHECKOUT_ACTIVITY_WALLET_REQUEST</name></name> <operator>||</operator>
      <call><name><name>result</name><operator>.</operator><name>requestCode</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ActivityRequestCodes</name><operator>.</operator><name>CHECKOUT_ACTIVITY_WALLET_CHANGE_REQUEST</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the error code contained in a wallet request. If no such error is found, `null` is returned.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Integer</name></type> <name>walletRequestError</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ActivityResult</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><call><name><name>result</name><operator>.</operator><name>intent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>error</name> <init>= <expr><ternary><condition><expr><name>intent</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name><name>WalletConstants</name><operator>.</operator><name>EXTRA_ERROR_CODE</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>error</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>error</name></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Constructs an authorized payload that can be sent back to our server from an Android Pay full wallet.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>AndroidPayAuthorizedPayload</name></type> <name>authorizedPayloadFromFullWallet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>FullWallet</name></type> <name>fullWallet</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>InstrumentInfo</name></type> <name>instrumentInfo</name> <init>= <expr><call><name><name>fullWallet</name><operator>.</operator><name>getInstrumentInfos</name></name><argument_list>()</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>AndroidPayAuthorizedPayload</name>
      <operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>androidPayWallet</name><argument_list>(
        <argument><expr><call><name><name>AndroidPayAuthorizedPayload</name><operator>.</operator><name>AndroidPayWallet</name>
          <operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>googleTransactionId</name><argument_list>(<argument><expr><call><name><name>fullWallet</name><operator>.</operator><name>getGoogleTransactionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>instrumentDetails</name><argument_list>(<argument><expr><call><name><name>instrumentInfo</name><operator>.</operator><name>getInstrumentDetails</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>instrumentType</name><argument_list>(<argument><expr><call><name><name>instrumentInfo</name><operator>.</operator><name>getInstrumentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
      )</argument_list></call>
      <operator>.</operator><call><name>stripeToken</name><argument_list>(<argument><expr><call><name><name>AndroidPayAuthorizedPayload</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>fullWallet</name><operator>.</operator><name>getPaymentMethodToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>gson</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Attempts to programmatically trigger an Android Pay sheet from a wallet fragment. It does this by crawling the
   * subviews of the fragment and clicking them.
   *
   * NB: This is very hacky.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>triggerAndroidPaySheet</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>SupportWalletFragment</name></type> <name>walletFragment</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>group</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>walletFragment</name><operator>.</operator><name>getView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>group</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>recursiveClickFirstChildView</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> | <type><name>NullPointerException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Recursive crawls the view hierarchy of `viewGroup` in order to find a clickable child and click it.
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>recursiveClickFirstChildView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>viewGroup</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>boolean</name></type> <name>continueRecursing</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>viewGroup</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>continueRecursing</name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>viewGroup</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>child</name><operator>.</operator><name>hasOnClickListeners</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>performClick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>continueRecursing</name> <operator>=</operator> <call><name>recursiveClickFirstChildView</name><argument_list>(<argument><expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></for>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> | <type><name>NullPointerException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{
    }</block></catch></try>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LineItem</name></argument>&gt;</argument_list></name></type> <name>lineItemsFromPayload</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>AndroidPayPayload</name></type> <name>payload</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>payload</name><operator>.</operator><name>cart</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>lineItems</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>AndroidPayUtils</name><operator>::</operator><name>lineItemFromPayloadLineItem</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBlocking</name><argument_list>()</argument_list></call><operator>.</operator><call><name>first</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>LineItem</name></type> <name>lineItemFromPayloadLineItem</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>AndroidPayPayload</name><operator>.</operator><name>Cart</name><operator>.</operator><name>LineItem</name></name></type> <name>payloadLineItem</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>LineItem</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>setCurrencyCode</name><argument_list>(<argument><expr><call><name><name>payloadLineItem</name><operator>.</operator><name>currencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setDescription</name><argument_list>(<argument><expr><call><name><name>payloadLineItem</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setQuantity</name><argument_list>(<argument><expr><call><name><name>payloadLineItem</name><operator>.</operator><name>quantity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setTotalPrice</name><argument_list>(<argument><expr><call><name><name>payloadLineItem</name><operator>.</operator><name>totalPrice</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setUnitPrice</name><argument_list>(<argument><expr><call><name><name>payloadLineItem</name><operator>.</operator><name>unitPrice</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>setRole</name><argument_list>(<argument><expr><name><name>LineItem</name><operator>.</operator><name>Role</name><operator>.</operator><name>REGULAR</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Tries to parse a payload string into a {@link AndroidPayPayload} object.
   * @param payloadString An (optional) string of JSON that represents the payload.
   * @return The parsed {@link AndroidPayPayload} object if successful, and `null` otherwise.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>AndroidPayPayload</name></type> <name>payloadFromString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>payloadString</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>payloadString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>json</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>payloadString</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name><name>AndroidPayPayload</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
