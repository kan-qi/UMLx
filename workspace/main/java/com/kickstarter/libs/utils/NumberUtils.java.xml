<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\NumberUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>NumberOptions</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>RoundingMode</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormatSymbols</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>NumberFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>NumberUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>NumberUtils</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>flooredPercentage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>flooredPercentage</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>flooredPercentage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>NumberFormat</name></type> <name>numberFormat</name> <init>= <expr><call><name><name>NumberFormat</name><operator>.</operator><name>getPercentInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>numberFormat</name><operator>.</operator><name>setRoundingMode</name></name><argument_list>(<argument><expr><name><name>RoundingMode</name><operator>.</operator><name>DOWN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>numberFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>value</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a formatted number for the user's locale.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a formatted number for the specified locale.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>NumberFormat</name><operator>.</operator><name>getIntegerInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a formatted number for the user's locale. Defaults to 0 precision with no bucketing.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name><name>NumberOptions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a formatted number for the user's locale. {@link NumberOptions} can control whether the number is
   * used as a currency, if it is bucketed, and the precision.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>NumberOptions</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>format</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><call><name><name>Locale</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a formatted number for a given locale. {@link NumberOptions} can control whether the number is
   * used as a currency, if it is bucketed, and the precision.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>NumberOptions</name></type> <name>options</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>NumberFormat</name></type> <name>numberFormat</name> <init>= <expr><call><name>numberFormat</name><argument_list>(<argument><expr><name>options</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>numberFormat</name> <operator>instanceof</operator> <name>DecimalFormat</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>numberFormat</name><operator>.</operator><name>setRoundingMode</name></name><argument_list>(<argument><expr><call><name><name>ObjectUtils</name><operator>.</operator><name>coalesce</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>roundingMode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>HALF_DOWN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name><name>ObjectUtils</name><operator>.</operator><name>coalesce</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>precision</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>divisor</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>suffix</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// TODO: The bucketing logic works, but the suffix should be translated.</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>bucketAbove</name> <init>= <expr><call><name><name>ObjectUtils</name><operator>.</operator><name>coalesce</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>bucketAbove</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>bucketAbove</name> <operator>&gt;=</operator> <literal type="number">1000.0f</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&gt;=</operator> <name>bucketAbove</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>bucketAbove</name> <operator>&gt;</operator> <literal type="number">0.0f</literal> <operator>&amp;&amp;</operator> <name>bucketAbove</name> <operator>&lt;</operator> <literal type="number">1_000_000.0f</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1000.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="string">"K"</literal></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>bucketAbove</name> <operator>&gt;=</operator> <literal type="number">1_000_000.0f</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>divisor</name> <operator>=</operator> <literal type="number">1_000_000.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="string">"M"</literal></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
      <if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>bucketAbove</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>precision</name> <operator>=</operator> <call><name><name>ObjectUtils</name><operator>.</operator><name>coalesce</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>bucketPrecision</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>currencyCode</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>suffix</name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><call><name><name>options</name><operator>.</operator><name>currencyCode</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>numberFormat</name><operator>.</operator><name>setMinimumFractionDigits</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>numberFormat</name><operator>.</operator><name>setMaximumFractionDigits</name></name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>bucketedValue</name> <init>= <expr><name>value</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>value</name> <operator>&gt;=</operator> <name>bucketAbove</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>bucketedValue</name> <operator>=</operator> <name>value</name> <operator>/</operator> <name>divisor</name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name><name>numberFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>bucketedValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suffix</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Return a formatter that can output an appropriate number based on the input currency and locale.
   */</comment>
  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>NumberFormat</name></type> <name>numberFormat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>NumberOptions</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>NumberFormat</name></type> <name>numberFormat</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>options</name><operator>.</operator><name>isCurrency</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>DecimalFormat</name></type> <name>decimalFormat</name> <init>= <expr><operator>(</operator><name>DecimalFormat</name><operator>)</operator> <call><name><name>NumberFormat</name><operator>.</operator><name>getCurrencyInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>DecimalFormatSymbols</name></type> <name>symbols</name> <init>= <expr><call><name><name>decimalFormat</name><operator>.</operator><name>getDecimalFormatSymbols</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>symbols</name><operator>.</operator><name>setCurrencySymbol</name></name><argument_list>(<argument><expr><call><name><name>options</name><operator>.</operator><name>currencySymbol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>decimalFormat</name><operator>.</operator><name>setDecimalFormatSymbols</name></name><argument_list>(<argument><expr><name>symbols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numberFormat</name> <operator>=</operator> <name>decimalFormat</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>numberFormat</name> <operator>=</operator> <call><name><name>NumberFormat</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>numberFormat</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
