<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\utils\ListUtils.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Func2</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>ListUtils</name> <block>{
  <constructor><specifier>private</specifier> <name>ListUtils</name><parameter_list>()</parameter_list> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Returns a new list with all elements in `xs` equal to `x` replaced by `newx`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>allReplaced</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>newx</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>xs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>x</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ys</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>newx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>ys</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Appends `x` to the end of the list `xs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>append</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ys</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Concats the second argument onto the end of the first without mutating
   * either list.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>concat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>zs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ListUtils</name><operator>.</operator><name>mutatingConcat</name></name><argument_list>(<argument><expr><name>zs</name></expr></argument>, <argument><expr><name>ys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>zs</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Concats the distinct elements of `ys` onto the end of the `xs` without mutating either list.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>concatDistinct</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>zs</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ListUtils</name><operator>.</operator><name>mutatingConcatDistinct</name></name><argument_list>(<argument><expr><name>zs</name></expr></argument>, <argument><expr><name>ys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>zs</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns true if `y` is equal to any of the values in `xs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ListUtils</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>Object</name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns true if `y` is equal to any of the values in `xs`, where equality is determined by a given function.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>boolean</name></type> <name>contains</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>equality</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ListUtils</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>equality</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a list containing elements of `lhs` that do not exist in `rhs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>difference</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ListUtils</name><operator>.</operator><name>difference</name></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>Object</name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a list containing elements of `lhs` that do not exist in `rhs`, where equality between elements is
   * determined by a given function.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>difference</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>equality</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>T</name></type> <name>litem</name> <range>: <expr><name>lhs</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>ListUtils</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>litem</name></expr></argument>, <argument><expr><name>equality</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>litem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns an empty list.
   */</comment>
  <function><annotation>@<name>NonNull</name></annotation> <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>empty</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the first element in `xs` that equals `x`, or `null` if `x` is not found in `xs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>Nullable</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>find</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ListUtils</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>Object</name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the first element in `xs` that equals `x`, or `null` if `x` is not found in `xs`. Equality is determined
   * by the given function.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>Nullable</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>find</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>equality</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>idx</name> <init>= <expr><call><name><name>ListUtils</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>equality</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the first object or `null` if empty.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>Nullable</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>first</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name><name>xs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Combines a list of lists into a new single, flat list.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>flatten</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>xss</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name> <range>: <expr><name>xss</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the index of the first element in `xs` that equals `x`, or `-1` if `x` is not found in `xs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>int</name></type> <name>indexOf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ListUtils</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>Object</name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the index of the first element in `xs` that equals `x`, or `-1` if `x` is not found in `xs`. Equality is determined
   * by the given function.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>int</name></type> <name>indexOf</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>equality</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <call><name><name>xs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>equality</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><call><name><name>xs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>idx</name></expr>;</return>
      }</block></then></if>
    }</block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a list containing the elements of `lhs` that exist in `rhs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>intersection</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ListUtils</name><operator>.</operator><name>intersection</name></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>Object</name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns a list containing the elements of `lhs` that exist in `rhs`, where equality is determined by the given function.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>intersection</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>rhs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name>T</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>equality</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>T</name></type> <name>litem</name> <range>: <expr><name>lhs</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>ListUtils</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>, <argument><expr><name>litem</name></expr></argument>, <argument><expr><name>equality</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>litem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Concats the second argument onto the end of the first, but also mutates the
   * first argument.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>mutatingConcat</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>xs</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>ys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>xs</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Concats the distinct elements of `ys` onto the end of the `xs`, but also mutates the first.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>mutatingConcatDistinct</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name>T</name></type> <name>y</name> <range>: <expr><name>ys</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>xs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>xs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <return>return <expr><name>xs</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Checks the size of a list and returns `true` if the list is non empty.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>boolean</name></type> <name>nonEmpty</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>xs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Prepends `x` to the beginning of the list `xs`.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>prepend</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ys</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ys</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Replaces the element at index `idx` with the element `x`. Does so by return a whole new list without
   * mutating the original.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>replaced</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ys</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ys</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Uses Fisher-Yates algorithm to shuffle an array without mutating input arg.
   * http://www.dotnetperls.com/shuffle-java
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>shuffle</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>xs</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>ys</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name> <init>= <expr><call><name><name>ys</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>random</name></name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><name>length</name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>T</name></type> <name>temp</name> <init>= <expr><call><name><name>ys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>ys</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>ys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ys</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>ys</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
