<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\ApiPaginator.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ListUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>MalformedURLException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Func1</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>functions</name><operator>.</operator><name>Func2</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<comment type="block" format="javadoc">/**
 * An object to facilitate loading pages of data from the API.
 *
 * @param &lt;Data&gt; The type of data returned from the array, e.g. `Project`, `Activity`, etc.
 * @param &lt;Envelope&gt; The type of envelope the API returns for a list of data, e.g. `DiscoverEnvelope`.
 * @param &lt;Params&gt; The type of params that {@link ApiClientType} can use to make a request. Many times this can just be `Void`.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name><name>ApiPaginator</name><parameter_list>&lt;<parameter><name>Data</name></parameter>, <parameter><name>Envelope</name></parameter>, <parameter><name>Params</name></parameter>&gt;</parameter_list></name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>nextPage</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>startOverWith</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>envelopeToListOfData</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithParams</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithPaginationPath</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>envelopeToMoreUrl</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pageTransformation</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>clearWhenStartingOver</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>concater</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>distinctUntilChanged</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>_morePath</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>_isFetching</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// Outputs</comment>
  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>paginatedData</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>paginatedData</name></name></expr>;</return>
  }</block></function>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>paginatedData</name></decl>;</decl_stmt>
  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isFetching</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>isFetching</name></name></expr>;</return>
  }</block></function>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isFetching</name> <init>= <expr><name><name>this</name><operator>.</operator><name>_isFetching</name></name></expr></init></decl>;</decl_stmt>
  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>loadingPage</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>loadingPage</name></name></expr>;</return>
  }</block></function>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>loadingPage</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>ApiPaginator</name><parameter_list>(
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>nextPage</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>startOverWith</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>envelopeToListOfData</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithParams</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithPaginationPath</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>envelopeToMoreUrl</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pageTransformation</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>clearWhenStartingOver</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>concater</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>distinctUntilChanged</name></decl></parameter>
  )</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nextPage</name></name> <operator>=</operator> <name>nextPage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startOverWith</name></name> <operator>=</operator> <name>startOverWith</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>envelopeToListOfData</name></name> <operator>=</operator> <name>envelopeToListOfData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadWithParams</name></name> <operator>=</operator> <name>loadWithParams</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>envelopeToMoreUrl</name></name> <operator>=</operator> <name>envelopeToMoreUrl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pageTransformation</name></name> <operator>=</operator> <name>pageTransformation</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadWithPaginationPath</name></name> <operator>=</operator> <name>loadWithPaginationPath</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clearWhenStartingOver</name></name> <operator>=</operator> <name>clearWhenStartingOver</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>concater</name></name> <operator>=</operator> <name>concater</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distinctUntilChanged</name></name> <operator>=</operator> <name>distinctUntilChanged</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paginatedData</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>startOverWith</name><operator>.</operator><name>switchMap</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>dataWithPagination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadingPage</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>startOverWith</name><operator>.</operator><name>switchMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>nextPage</name><operator>.</operator><name>scan</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>accum</name></decl></parameter>, <parameter><decl><name>___</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><name>accum</name> <operator>+</operator> <literal type="number">1</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <class><specifier>public</specifier> <specifier>final</specifier> <specifier>static</specifier> class <name><name>Builder</name><parameter_list>&lt;<parameter><name>Data</name></parameter>, <parameter><name>Envelope</name></parameter>, <parameter><name>Params</name></parameter>&gt;</parameter_list></name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>nextPage</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>startOverWith</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>envelopeToListOfData</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithParams</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Func1</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithPaginationPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>envelopeToMoreUrl</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Func1</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pageTransformation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>clearWhenStartingOver</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Func2</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>concater</name> <init>= <expr><name>ListUtils</name><operator>::</operator><name>concat</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>distinctUntilChanged</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * [Required] An observable that emits whenever a new page of data should be loaded.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>nextPage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>nextPage</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>nextPage</name></name> <operator>=</operator> <name>nextPage</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Optional] An observable that emits when a fresh first page should be loaded.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>startOverWith</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>startOverWith</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startOverWith</name></name> <operator>=</operator> <name>startOverWith</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Required] A function that takes an `Envelope` instance and returns the list of data embedded in it.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>envelopeToListOfData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>envelopeToListOfData</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>envelopeToListOfData</name></name> <operator>=</operator> <name>envelopeToListOfData</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Required] A function to extract the more URL from an API response envelope.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>envelopeToMoreUrl</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>envelopeToMoreUrl</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>envelopeToMoreUrl</name></name> <operator>=</operator> <name>envelopeToMoreUrl</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Required] A function that makes an API request with a pagination URL.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>loadWithPaginationPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithPaginationPath</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadWithPaginationPath</name></name> <operator>=</operator> <name>loadWithPaginationPath</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Required] A function that takes a `Params` and performs the associated network request
     * and returns an `Observable&lt;Envelope&gt;`
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>loadWithParams</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Envelope</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loadWithParams</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>loadWithParams</name></name> <operator>=</operator> <name>loadWithParams</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Optional] Function to transform every page of data that is loaded.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>pageTransformation</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func1</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>pageTransformation</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pageTransformation</name></name> <operator>=</operator> <name>pageTransformation</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Optional] Determines if the list of loaded data is cleared when starting over from the first page.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>clearWhenStartingOver</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>clearWhenStartingOver</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>clearWhenStartingOver</name></name> <operator>=</operator> <name>clearWhenStartingOver</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Optional] Determines how two lists are concatenated together while paginating. A regular `ListUtils::concat` is probably
     * sufficient, but sometimes you may want `ListUtils::concatDistinct`
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>concater</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Func2</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>concater</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>concater</name></name> <operator>=</operator> <name>concater</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * [Optional] Determines if the list of loaded data is should be distinct until changed.
     */</comment>
    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>distinctUntilChanged</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>distinctUntilChanged</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distinctUntilChanged</name></name> <operator>=</operator> <name>distinctUntilChanged</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>ApiPaginator</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>Params</name></argument>&gt;</argument_list></name></type> <name>build</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>RuntimeException</name></expr></argument></throws> <block>{
      <comment type="line">// Early error when required field is not set</comment>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>nextPage</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"`nextPage` is required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>envelopeToListOfData</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"`envelopeToListOfData` is required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>loadWithParams</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"`loadWithParams` is required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>loadWithPaginationPath</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"`loadWithPaginationPath` is required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>envelopeToMoreUrl</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"`envelopeToMoreUrl` is required"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <comment type="line">// Default params for optional fields</comment>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>startOverWith</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startOverWith</name></name> <operator>=</operator> <call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>pageTransformation</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pageTransformation</name></name> <operator>=</operator> <lambda><parameter_list type="pseudo"><parameter><decl><name>x</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>x</name></expr></block></lambda></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>concater</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>concater</name></name> <operator>=</operator> <name>ListUtils</name><operator>::</operator><name>concat</name></expr>;</expr_stmt>
      }</block></then></if>

      <return>return <expr><operator>new</operator> <call><name><name>ApiPaginator</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>nextPage</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startOverWith</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>envelopeToListOfData</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>loadWithParams</name></name></expr></argument>,
        <argument><expr><name><name>this</name><operator>.</operator><name>loadWithPaginationPath</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>envelopeToMoreUrl</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>pageTransformation</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>clearWhenStartingOver</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>concater</name></name></expr></argument>,
        <argument><expr><name><name>this</name><operator>.</operator><name>distinctUntilChanged</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>Data</name></parameter>, <parameter><name>Envelope</name></parameter>, <parameter><name>FirstPageParams</name></parameter>&gt;</parameter_list> <type><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>, <argument><name>Envelope</name></argument>, <argument><name>FirstPageParams</name></argument>&gt;</argument_list></name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>Builder</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns an observable that emits the accumulated list of paginated data each time a new page is loaded.
   */</comment>
  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>dataWithPagination</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Params</name></type> <name>firstPageParams</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>data</name> <init>= <expr><call><name>paramsAndMoreUrlWithPagination</name><argument_list>(<argument><expr><name>firstPageParams</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>concatMap</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>fetchData</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>takeUntil</name><argument_list>(<argument><expr><name>List</name><operator>::</operator><name>isEmpty</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>paginatedData</name> <init>= <expr><ternary><condition><expr><name><name>this</name><operator>.</operator><name>clearWhenStartingOver</name></name></expr>
      ?</condition><then> <expr><call><name><name>data</name><operator>.</operator><name>scan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>concater</name></name></expr></argument>)</argument_list></call></expr>
      </then><else>: <expr><call><name><name>data</name><operator>.</operator><name>scan</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>concater</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <return>return <expr><ternary><condition><expr><name><name>this</name><operator>.</operator><name>distinctUntilChanged</name></name></expr> ?</condition><then> <expr><call><name><name>paginatedData</name><operator>.</operator><name>distinctUntilChanged</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>paginatedData</name></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns an observable that emits the params for the next page of data *or* the more URL for the next page.
   */</comment>
  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>paramsAndMoreUrlWithPagination</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Params</name></type> <name>firstPageParams</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><call><name><name>this</name><operator>.</operator><name>_morePath</name>
      <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>path</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>Transformers</name><operator>.</operator><name>takeWhen</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>nextPage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>startWith</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>firstPageParams</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Data</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchData</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>paginatingData</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>paginatingData</name><operator>.</operator><name>second</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>
      ?</condition><then> <expr><call><name><name>this</name><operator>.</operator><name>loadWithPaginationPath</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name><name>paginatingData</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>
      </then><else>: <expr><call><name><name>this</name><operator>.</operator><name>loadWithParams</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name><name>paginatingData</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator>
        <operator>.</operator><call><name>retry</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>Transformers</name><operator>.</operator><name>neverError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>doOnNext</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>keepMorePath</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>envelopeToListOfData</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>pageTransformation</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>doOnSubscribe</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>_isFetching</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>doAfterTerminate</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>_isFetching</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>keepMorePath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Envelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>URL</name></type> <name>url</name> <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>envelopeToMoreUrl</name><operator>.</operator><name>call</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>_morePath</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name>pathAndQueryFromURL</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>MalformedURLException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>pathAndQueryFromURL</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>URL</name></type> <name>url</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>url</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"?"</literal> <operator>+</operator> <call><name><name>url</name><operator>.</operator><name>getQuery</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
