<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\Range.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name></name>;</package>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>Range</name> <block>{
  <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Range</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Range</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Range</name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="string">"[start: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>start</name></name> <operator>+</operator> <literal type="string">", length: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="string">"]"</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>Range</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Range</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>Range</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><name><name>this</name><operator>.</operator><name>start</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>start</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>length</name></name></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><name><name>this</name><operator>.</operator><name>start</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
