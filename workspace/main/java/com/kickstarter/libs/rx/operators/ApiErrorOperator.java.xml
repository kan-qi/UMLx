<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\rx\operators\ApiErrorOperator.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>operators</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>gson</name><operator>.</operator><name>Gson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ResponseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>ErrorEnvelope</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Subscriber</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Takes a {@link retrofit2.Response}, if it's successful send it to {@link Subscriber#onNext}, otherwise
 * attempt to parse the error.
 *
 * Errors that conform to the API's error format are converted into an {@link ApiException} exception and sent to
 * {@link Subscriber#onError}, otherwise a more generic {@link ResponseException} is sent to {@link Subscriber#onError}.
 *
 * @param &lt;T&gt; The response type.
 */</comment>
<class><specifier>public</specifier> <specifier>final</specifier> class <name><name>ApiErrorOperator</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><implements>implements <name><name>Observable</name><operator>.</operator><name><name>Operator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>, <argument><name><name>retrofit2</name><operator>.</operator><name><name>Response</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Gson</name></type> <name>gson</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ApiErrorOperator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Gson</name></type> <name>gson</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gson</name></name> <operator>=</operator> <name>gson</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>Subscriber</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name><name>Response</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super></argument>&gt;</argument_list></name></type> <name>call</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Subscriber</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>T</name></super></argument>&gt;</argument_list></name></type> <name>subscriber</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Gson</name></type> <name>gson</name> <init>= <expr><name><name>this</name><operator>.</operator><name>gson</name></name></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <class><super><name><name>Subscriber</name><argument_list type="generic">&lt;<argument><name><name>retrofit2</name><operator>.</operator><name><name>Response</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCompleted</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>subscriber</name><operator>.</operator><name>isUnsubscribed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onCompleted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>subscriber</name><operator>.</operator><name>isUnsubscribed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onError</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onNext</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>retrofit2</name><operator>.</operator><name><name>Response</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>response</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>subscriber</name><operator>.</operator><name>isUnsubscribed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>ErrorEnvelope</name></type> <name>envelope</name> <init>= <expr><call><name><name>gson</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>errorBody</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>string</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ErrorEnvelope</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ApiException</name><argument_list>(<argument><expr><name>envelope</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onError</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ResponseException</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then> <else>else <block>{ 
          <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>subscriber</name><operator>.</operator><name>onCompleted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></function>
    }</block></class></expr>;</return>
  }</block></function>
}</block></class>
</unit>
