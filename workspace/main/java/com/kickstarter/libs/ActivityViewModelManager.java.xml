<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\libs\ActivityViewModelManager.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>KSApplication</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BundleUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<class><specifier>public</specifier> class <name>ActivityViewModelManager</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIEW_MODEL_ID_KEY</name> <init>= <expr><literal type="string">"view_model_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIEW_MODEL_STATE_KEY</name> <init>= <expr><literal type="string">"view_model_state"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>ActivityViewModelManager</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>ActivityViewModelManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ActivityViewModel</name></argument>&gt;</argument_list></name></type> <name>viewModels</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>ActivityViewModelManager</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>instance</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>ActivityViewModel</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>fetch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>viewModelClass</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>id</name> <init>= <expr><call><name>fetchId</name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ActivityViewModel</name></type> <name>activityViewModel</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>viewModels</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>activityViewModel</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>activityViewModel</name> <operator>=</operator> <call><name>create</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>viewModelClass</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <name>activityViewModel</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>destroy</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ActivityViewModel</name></type> <name>activityViewModel</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>activityViewModel</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ActivityViewModel</name></argument>&gt;</argument_list></name></name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>viewModels</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ActivityViewModel</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>activityViewModel</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></while>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>save</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ActivityViewModel</name></type> <name>activityViewModel</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Bundle</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>envelope</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>VIEW_MODEL_ID_KEY</name></expr></argument>, <argument><expr><call><name>findIdForViewModel</name><argument_list>(<argument><expr><name>activityViewModel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>state</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>envelope</name><operator>.</operator><name>putBundle</name></name><argument_list>(<argument><expr><name>VIEW_MODEL_STATE_KEY</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>ActivityViewModel</name></extends></parameter>&gt;</parameter_list> <type><name>ActivityViewModel</name></type> <name>create</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>viewModelClass</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><specifier>final</specifier> <name>KSApplication</name></type> <name>application</name> <init>= <expr><operator>(</operator><name>KSApplication</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>Environment</name></type> <name>environment</name> <init>= <expr><call><name><name>application</name><operator>.</operator><name>component</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>environment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ActivityViewModel</name></type> <name>activityViewModel</name></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Constructor</name></type> <name>constructor</name> <init>= <expr><call><name><name>viewModelClass</name><operator>.</operator><name>getConstructor</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>activityViewModel</name> <operator>=</operator> <operator>(</operator><name>ActivityViewModel</name><operator>)</operator> <call><name><name>constructor</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Need to catch these exceptions separately, otherwise the compiler turns them into `ReflectiveOperationException`.</comment>
      <comment type="line">// That exception is only available in API19+</comment>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InstantiationException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>viewModels</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>activityViewModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>activityViewModel</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>BundleUtils</name><operator>.</operator><name>maybeGetBundle</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>, <argument><expr><name>VIEW_MODEL_STATE_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>activityViewModel</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>fetchId</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>savedInstanceState</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then>
      <expr><call><name><name>savedInstanceState</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>VIEW_MODEL_ID_KEY</name></expr></argument>)</argument_list></call></expr> </then><else>:
      <expr><call><name><name>UUID</name><operator>.</operator><name>randomUUID</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>findIdForViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ActivityViewModel</name></type> <name>activityViewModel</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><specifier>final</specifier> <name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ActivityViewModel</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>this</name><operator>.</operator><name>viewModels</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>activityViewModel</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></for>

    <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Cannot find view model in map!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>
}</block></class>
</unit>
