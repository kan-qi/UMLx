<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\viewmodels\ThanksViewModel.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>viewmodels</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityViewModel</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentUserType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>RefTag</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>preferences</name><operator>.</operator><name>BooleanPreferenceType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ListUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>UserUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>DiscoverEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>IntentKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>ThanksActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>adapters</name><operator>.</operator><name>ThanksAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>adapters</name><operator>.</operator><name>data</name><operator>.</operator><name>ThanksData</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>ProjectCardViewHolder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>ThanksCategoryViewHolder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>BehaviorSubject</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>combineLatestPair</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>ignoreValues</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>neverError</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>takeWhen</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BooleanUtils</name><operator>.</operator><name>isTrue</name></name>;</import>

<interface><specifier>public</specifier> interface <name>ThanksViewModel</name> <block>{

  <interface>interface <name>Inputs</name> <super><extends>extends <name><name>ProjectCardViewHolder</name><operator>.</operator><name>Delegate</name></name>, <name><name>ThanksCategoryViewHolder</name><operator>.</operator><name>Delegate</name></name>,
    <name><name>ThanksAdapter</name><operator>.</operator><name>Delegate</name></name></extends></super> <block>{
    <comment type="block" format="javadoc">/** Call when the user accepts the prompt to signup to the Games newsletter. */</comment>
    <function_decl><type><name>void</name></type> <name>signupToGamesNewsletterClick</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <interface>interface <name>Outputs</name> <block>{
    <comment type="block" format="javadoc">/** Emits the data to configure the adapter with. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ThanksData</name></argument>&gt;</argument_list></name></type> <name>adapterData</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Show a dialog confirming the user will be signed up to the games newsletter. Required for German users. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showConfirmGamesNewsletterDialog</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Show a dialog prompting the user to sign-up to the games newsletter. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showGamesNewsletterDialog</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Show a dialog prompting the user to rate the app. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showRatingDialog</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when we should start the {@link com.kickstarter.ui.activities.DiscoveryActivity}. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>startDiscoveryActivity</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when we should start the {@link com.kickstarter.ui.activities.ProjectActivity}. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startProjectActivity</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>final</specifier> class <name>ViewModel</name> <super><extends>extends <name><name>ActivityViewModel</name><argument_list type="generic">&lt;<argument><name>ThanksActivity</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Inputs</name>, <name>Outputs</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ApiClientType</name></type> <name>apiClient</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BooleanPreferenceType</name></type> <name>hasSeenAppRatingPreference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BooleanPreferenceType</name></type> <name>hasSeenGamesNewsletterPreference</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrentUserType</name></type> <name>currentUser</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Environment</name></type> <name>environment</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>apiClient</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>apiClient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentUser</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>currentUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasSeenAppRatingPreference</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>hasSeenAppRatingPreference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hasSeenGamesNewsletterPreference</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>hasSeenGamesNewsletterPreference</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>project</name> <init>= <expr><call><name>intent</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>i</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>PROJECT</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>ofType</name><argument_list>(<argument><expr><name><name>Project</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>take</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>rootCategory</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>flatMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>rootCategory</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>apiClient</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isGamesCategory</name> <init>= <expr><call><name><name>rootCategory</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="string">"games"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>slug</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>hasSeenGamesNewsletterDialog</name> <init>= <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>hasSeenGamesNewsletterPreference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isSignedUpToGamesNewsletter</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>currentUser</name><operator>.</operator><name>observable</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>u</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>u</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isTrue</name><argument_list>(<argument><expr><call><name><name>u</name><operator>.</operator><name>gamesNewsletter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>showGamesNewsletter</name> <init>= <expr><call><name><name>Observable</name><operator>.</operator><name>combineLatest</name></name><argument_list>(
        <argument><expr><name>isGamesCategory</name></expr></argument>, <argument><expr><name>hasSeenGamesNewsletterDialog</name></expr></argument>, <argument><expr><name>isSignedUpToGamesNewsletter</name></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>isGames</name></decl></parameter>, <parameter><decl><name>hasSeen</name></decl></parameter>, <parameter><decl><name>isSignedUp</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><name>isGames</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hasSeen</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isSignedUp</name></expr></block></lambda></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>take</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>categoryCardViewHolderClicked</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>c</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>category</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startDiscoveryActivity</name></name><operator>::</operator><name>onNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>projectCardViewHolderClicked</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>startProjectActivity</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>thanks</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>combineLatest</name></name><argument_list>(
        <argument><expr><name>project</name></expr></argument>,
        <argument><expr><name>rootCategory</name></expr></argument>,
        <argument><expr><call><name><name>project</name><operator>.</operator><name>flatMap</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>relatedProjects</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>apiClient</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>ThanksData</name><operator>::</operator><operator>new</operator></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>adapterData</name></name><operator>::</operator><name>onNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>hasSeenAppRatingPreference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>take</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name>showGamesNewsletter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>ag</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><name><name>ag</name><operator>.</operator><name>first</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ag</name><operator>.</operator><name>second</name></name></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>ignoreValues</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>showRatingDialog</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>showGamesNewsletter</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>x</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>x</name></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>showGamesNewsletterDialog</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>showGamesNewsletterDialog</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>hasSeenGamesNewsletterPreference</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>currentUser</name><operator>.</operator><name>observable</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>takeWhen</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>signupToGamesNewsletterClick</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>u</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>signupToGamesNewsletter</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>apiClient</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>signedUpToGamesNewsletter</name></name><operator>::</operator><name>onNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>currentUser</name><operator>.</operator><name>observable</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>takeWhen</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>signedUpToGamesNewsletter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>UserUtils</name><operator>::</operator><name>isLocationGermany</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>showConfirmGamesNewsletterDialog</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Event tracking</comment>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>categoryCardViewHolderClicked</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackCheckoutFinishJumpToDiscovery</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>projectCardViewHolderClicked</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>koala</name></name><operator>::</operator><name>trackCheckoutFinishJumpToProject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>signedUpToGamesNewsletter</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackNewsletterToggle</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Given a project, returns an observable that emits the project's root category.
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>rootCategory</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ApiClientType</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>category</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>category</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>category</name><operator>.</operator><name>parent</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>parent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>

      <return>return <expr><call><name><name>client</name><operator>.</operator><name>fetchCategory</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>category</name><operator>.</operator><name>rootId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns a shuffled list of 3 recommended projects, with fallbacks to similar and staff picked projects
     * for users with fewer than 3 recommendations.
     */</comment>
    <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>relatedProjects</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ApiClientType</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>recommendedParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>backed</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>recommended</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>perPage</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>similarToParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>backed</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>similarTo</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>perPage</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>Category</name></type> <name>category</name> <init>= <expr><call><name><name>project</name><operator>.</operator><name>category</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>staffPickParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>category</name><argument_list>(<argument><expr><ternary><condition><expr><name>category</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>category</name><operator>.</operator><name>root</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>backed</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>staffPicks</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>perPage</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>recommendedProjects</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>fetchProjects</name></name><argument_list>(<argument><expr><name>recommendedParams</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>retry</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>DiscoverEnvelope</name><operator>::</operator><name>projects</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ListUtils</name><operator>::</operator><name>shuffle</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>Observable</name><operator>::</operator><name>from</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>take</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>similarToProjects</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>fetchProjects</name></name><argument_list>(<argument><expr><name>similarToParams</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>retry</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>DiscoverEnvelope</name><operator>::</operator><name>projects</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>Observable</name><operator>::</operator><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>staffPickProjects</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>fetchProjects</name></name><argument_list>(<argument><expr><name>staffPickParams</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>retry</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>DiscoverEnvelope</name><operator>::</operator><name>projects</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>Observable</name><operator>::</operator><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>concat</name></name><argument_list>(<argument><expr><name>recommendedProjects</name></expr></argument>, <argument><expr><name>similarToProjects</name></expr></argument>, <argument><expr><name>staffPickProjects</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinct</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>take</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>signupToGamesNewsletter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ApiClientType</name></type> <name>client</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>client</name>
        <operator>.</operator><name>updateUserSettings</name></name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>gamesNewsletter</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>categoryCardViewHolderClicked</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>projectCardViewHolderClicked</name>  <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>signupToGamesNewsletterClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>ThanksData</name></argument>&gt;</argument_list></name></type> <name>adapterData</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showConfirmGamesNewsletterDialog</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showGamesNewsletterDialog</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showRatingDialog</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>signedUpToGamesNewsletter</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>startDiscoveryActivity</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startProjectActivity</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Inputs</name></type> <name>inputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Outputs</name></type> <name>outputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>categoryViewHolderClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>categoryCardViewHolderClicked</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>category</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>signupToGamesNewsletterClick</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>signupToGamesNewsletterClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>projectCardViewHolderClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>projectCardViewHolderClicked</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ThanksData</name></argument>&gt;</argument_list></name></type> <name>adapterData</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>adapterData</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showConfirmGamesNewsletterDialog</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showConfirmGamesNewsletterDialog</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showGamesNewsletterDialog</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showGamesNewsletterDialog</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showRatingDialog</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showRatingDialog</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>startDiscoveryActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startDiscoveryActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startProjectActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startProjectActivity</name></name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></interface>
</unit>
