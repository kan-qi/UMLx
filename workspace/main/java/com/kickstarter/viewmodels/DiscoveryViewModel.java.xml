<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\viewmodels\DiscoveryViewModel.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>viewmodels</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityViewModel</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>BuildCheck</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentConfigType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentUserType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BooleanUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>DiscoveryDrawerUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>DiscoveryUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>UserUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>WebClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>InternalBuildEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>DiscoveryActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>adapters</name><operator>.</operator><name>DiscoveryDrawerAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>adapters</name><operator>.</operator><name>DiscoveryPagerAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>adapters</name><operator>.</operator><name>data</name><operator>.</operator><name>NavigationDrawerData</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>intentmappers</name><operator>.</operator><name>DiscoveryIntentMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>intentmappers</name><operator>.</operator><name>IntentMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>discoverydrawer</name><operator>.</operator><name>ChildFilterViewHolder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>discoverydrawer</name><operator>.</operator><name>LoggedInViewHolder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>discoverydrawer</name><operator>.</operator><name>LoggedOutViewHolder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>discoverydrawer</name><operator>.</operator><name>ParentFilterViewHolder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>discoverydrawer</name><operator>.</operator><name>TopFilterViewHolder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>BehaviorSubject</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>combineLatestPair</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>neverError</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>takeWhen</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BooleanUtils</name><operator>.</operator><name>isFalse</name></name>;</import>

<interface><specifier>public</specifier> interface <name>DiscoveryViewModel</name> <block>{

  <interface>interface <name>Inputs</name> <super><extends>extends <name><name>DiscoveryDrawerAdapter</name><operator>.</operator><name>Delegate</name></name>, <name><name>DiscoveryPagerAdapter</name><operator>.</operator><name>Delegate</name></name></extends></super> <block>{
    <comment type="block" format="javadoc">/** Call when a new build is available. */</comment>
    <function_decl><type><name>void</name></type> <name>newerBuildIsAvailable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>InternalBuildEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Call when you want to open or close the drawer. */</comment>
    <function_decl><type><name>void</name></type> <name>openDrawer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>open</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <interface>interface <name>Outputs</name> <block>{

    <comment type="block" format="javadoc">/** Emits a boolean that determines if the drawer is open or not. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>drawerIsOpen</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits a boolean that determines if the sort tab layout should be expanded/collapsed. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>expandSortTabLayout</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when params change so that the tool bar can adjust accordingly. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>updateToolbarWithParams</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when the params of a particular page should be updated. The page will be responsible for
     * taking those params and creating paginating projects from it. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>updateParamsForPage</name><parameter_list>()</parameter_list>;</function_decl>

    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>NavigationDrawerData</name></argument>&gt;</argument_list></name></type> <name>navigationDrawerData</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits the root categories and position. Position is used to determine the appropriate fragment
     * to pass the categories to. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rootCategoriesAndPosition</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits a list of pages that should be cleared of all their content. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clearPages</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when a newer build is available and an alert should be shown. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>InternalBuildEnvelope</name></argument>&gt;</argument_list></name></type> <name>showBuildCheckAlert</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start activity feed activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showActivityFeed</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start creator dashboard activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showCreatorDashboard</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start help activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showHelp</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start internal tools activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showInternalTools</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start login tout activity for result. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showLoginTout</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start profile activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showProfile</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start settings activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showSettings</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>final</specifier> class <name>ViewModel</name> <super><extends>extends <name><name>ActivityViewModel</name><argument_list type="generic">&lt;<argument><name>DiscoveryActivity</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Inputs</name>, <name>Outputs</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ApiClientType</name></type> <name>apiClient</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BuildCheck</name></type> <name>buildCheck</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrentUserType</name></type> <name>currentUser</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrentConfigType</name></type> <name>currentConfigType</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WebClientType</name></type> <name>webClient</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Environment</name></type> <name>environment</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>apiClient</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>apiClient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buildCheck</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>buildCheck</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentConfigType</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>currentConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentUser</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>currentUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>webClient</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>webClient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>buildCheck</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>webClient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showActivityFeed</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>activityFeedClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showBuildCheckAlert</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>newerBuildIsAvailable</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showCreatorDashboard</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>creatorDashboardClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showHelp</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>loggedOutSettingsClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showInternalTools</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>internalToolsClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showLoginTout</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>loggedOutLoginToutClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showProfile</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>profileClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showSettings</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>settingsClick</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>currentUser</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>currentUser</name><operator>.</operator><name>observable</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>changedUser</name> <init>= <expr><call><name><name>currentUser</name>
        <operator>.</operator><name>distinctUntilChanged</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>u1</name></decl></parameter>, <parameter><decl><name>u2</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>UserUtils</name><operator>.</operator><name>userHasChanged</name></name><argument_list>(<argument><expr><name>u1</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>changedUser</name><operator>.</operator><name>subscribe</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>updatedUser</name></decl></parameter></parameter_list> -&gt;
        <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>apiClient</name><operator>.</operator><name>config</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name><name>Transformers</name><operator>.</operator><name>neverError</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>currentConfigType</name></name><operator>::</operator><name>config</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Seed params when we are freshly launching the app with no data.</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>paramsFromInitialIntent</name> <init>= <expr><call><name>intent</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>take</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Intent</name><operator>::</operator><name>getAction</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_MAIN</name></name><operator>::</operator><name>equals</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name>changedUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>intentAndUser</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>getDefaultParams</name></name><argument_list>(<argument><expr><name><name>intentAndUser</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>share</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>paramsFromIntent</name> <init>= <expr><call><name>intent</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>DiscoveryIntentMapper</name><operator>.</operator><name>params</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>apiClient</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>drawerParamsClicked</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>childFilterRowClick</name>
        <operator>.</operator><name>mergeWith</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>topFilterRowClick</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name><operator>::</operator><name>params</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Merge various param data sources.</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name><name>Observable</name><operator>.</operator><name>merge</name></name><argument_list>(
        <argument><expr><name>paramsFromInitialIntent</name></expr></argument>,
        <argument><expr><name>paramsFromIntent</name></expr></argument>,
        <argument><expr><name>drawerParamsClicked</name></expr></argument>
      )</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>pagerSelectedPage</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>pagerSetPrimaryPage</name><operator>.</operator><name>distinctUntilChanged</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Combine params with the selected sort position.</comment>
      <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>combineLatest</name></name><argument_list>(
        <argument><expr><name>params</name></expr></argument>,
        <argument><expr><call><name><name>pagerSelectedPage</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>DiscoveryUtils</name><operator>::</operator><name>sortFromPosition</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><lambda><parameter_list>(<parameter><decl><name>p</name></decl></parameter>, <parameter><decl><name>s</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>p</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>updateParamsForPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>categories</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>apiClient</name><operator>.</operator><name>fetchCategories</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><name>Observable</name><operator>::</operator><name>from</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>toSortedList</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>share</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Combine root categories with the selected sort position.</comment>
      <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>combineLatest</name></name><argument_list>(
        <argument><expr><call><name><name>categories</name>
          <operator>.</operator><name>flatMap</name></name><argument_list>(<argument><expr><name>Observable</name><operator>::</operator><name>from</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Category</name><operator>::</operator><name>isRoot</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><name>pagerSelectedPage</name></expr></argument>,
        <argument><expr><name>Pair</name><operator>::</operator><name>create</name></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>rootCategoriesAndPosition</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>drawerClickedParentCategory</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>parentFilterRowClick</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name><operator>::</operator><name>params</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>DiscoveryParams</name><operator>::</operator><name>category</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>expandedCategory</name> <init>= <expr><call><name><name>Observable</name><operator>.</operator><name>merge</name></name><argument_list>(
        <argument><expr><call><name><name>this</name><operator>.</operator><name>topFilterRowClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>(</operator><name>Category</name><operator>)</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>drawerClickedParentCategory</name></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>scan</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>previous</name></decl></parameter>, <parameter><decl><name>next</name></decl></parameter>)</parameter_list> -&gt; <block>{
          <if>if <condition>(<expr><name>previous</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>next</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>previous</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>next</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
          <expr_stmt/>}</block>
          <return>return <expr><name>next</name></expr>;</return></then></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Accumulate a list of pages to clear when the params or user changes,</comment>
      <comment type="line">// to avoid displaying old data.</comment>
      <expr_stmt><expr><call><name><name>pagerSelectedPage</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>takeWhen</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name>changedUser</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pageAndUser</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name><name>pageAndUser</name><operator>.</operator><name>first</name></name></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>currentPage</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Observable</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>DiscoveryUtils</name><operator>::</operator><name>positionFromSort</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>sortPosition</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>sortPosition</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>currentPage</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>clearPages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>distinctUntilChanged</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>updateToolbarWithParams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>updateParamsForPage</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">true</literal></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>expandSortTabLayout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>combineLatest</name></name><argument_list>(
        <argument><expr><name>categories</name></expr></argument>,
        <argument><expr><name>params</name></expr></argument>,
        <argument><expr><name>expandedCategory</name></expr></argument>,
        <argument><expr><name>currentUser</name></expr></argument>,
        <argument><expr><name>DiscoveryDrawerUtils</name><operator>::</operator><name>deriveNavigationDrawerData</name></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>navigationDrawerData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>drawerParamsClicked</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>koala</name></name><operator>::</operator><name>trackDiscoveryFilterSelected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Observable</name><operator>.</operator><name>merge</name></name><argument_list>(
        <argument><expr><name><name>this</name><operator>.</operator><name>openDrawer</name></name></expr></argument>,
        <argument><expr><call><name><name>this</name><operator>.</operator><name>childFilterRowClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">false</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>this</name><operator>.</operator><name>topFilterRowClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">false</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>this</name><operator>.</operator><name>internalToolsClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">false</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>this</name><operator>.</operator><name>loggedOutLoginToutClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">false</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>this</name><operator>.</operator><name>profileClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">false</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>this</name><operator>.</operator><name>settingsClick</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="boolean">false</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>
      )</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>drawerIsOpen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>openDrawer</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>isTrue</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackDiscoveryFilters</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>intent</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>IntentMapper</name><operator>::</operator><name>appBannerIsSet</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackOpenedAppBanner</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>DiscoveryParams</name></type> <name>getDefaultParams</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>user</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isFalse</name><argument_list>(<argument><expr><call><name><name>user</name><operator>.</operator><name>optedOutOfRecommendations</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>recommended</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>backed</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>
      <return>return <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>activityFeedClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name></argument>&gt;</argument_list></name></type> <name>childFilterRowClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>creatorDashboardClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>internalToolsClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>loggedOutLoginToutClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>loggedOutSettingsClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>InternalBuildEnvelope</name></argument>&gt;</argument_list></name></type> <name>newerBuildIsAvailable</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>openDrawer</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>pagerSetPrimaryPage</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name></argument>&gt;</argument_list></name></type> <name>parentFilterRowClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>profileClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>settingsClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name></argument>&gt;</argument_list></name></type> <name>topFilterRowClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clearPages</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>drawerIsOpen</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>expandSortTabLayout</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>NavigationDrawerData</name></argument>&gt;</argument_list></name></type> <name>navigationDrawerData</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rootCategoriesAndPosition</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showActivityFeed</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>InternalBuildEnvelope</name></argument>&gt;</argument_list></name></type> <name>showBuildCheckAlert</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showCreatorDashboard</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showHelp</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showInternalTools</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showLoginTout</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showProfile</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showSettings</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>updateParamsForPage</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>updateToolbarWithParams</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Inputs</name></type> <name>inputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Outputs</name></type> <name>outputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>childFilterViewHolderRowClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ChildFilterViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>childFilterRowClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>discoveryPagerAdapterSetPrimaryPage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryPagerAdapter</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pagerSetPrimaryPage</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedInViewHolderActivityClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedInViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>activityFeedClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedInViewHolderDashboardClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedInViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>creatorDashboardClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedInViewHolderInternalToolsClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedInViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>internalToolsClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedInViewHolderProfileClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedInViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>profileClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedInViewHolderSettingsClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedInViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>settingsClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedOutViewHolderActivityClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedOutViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>activityFeedClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedOutViewHolderInternalToolsClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedOutViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>internalToolsClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedOutViewHolderLoginToutClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedOutViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>loggedOutLoginToutClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loggedOutViewHolderHelpClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoggedOutViewHolder</name></type> <name>viewHolder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>loggedOutSettingsClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>newerBuildIsAvailable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>InternalBuildEnvelope</name></type> <name>envelope</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>newerBuildIsAvailable</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>openDrawer</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>open</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>openDrawer</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>parentFilterViewHolderRowClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ParentFilterViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>parentFilterRowClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>topFilterViewHolderRowClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>TopFilterViewHolder</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>NavigationDrawerData</name><operator>.</operator><name>Section</name><operator>.</operator><name>Row</name></name></type> <name>row</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>topFilterRowClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>clearPages</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>clearPages</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>drawerIsOpen</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>drawerIsOpen</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>expandSortTabLayout</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>expandSortTabLayout</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>NavigationDrawerData</name></argument>&gt;</argument_list></name></type> <name>navigationDrawerData</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>navigationDrawerData</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rootCategoriesAndPosition</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>rootCategoriesAndPosition</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showActivityFeed</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showActivityFeed</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>InternalBuildEnvelope</name></argument>&gt;</argument_list></name></type> <name>showBuildCheckAlert</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showBuildCheckAlert</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showCreatorDashboard</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showCreatorDashboard</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showHelp</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showHelp</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showInternalTools</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showInternalTools</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showLoginTout</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showLoginTout</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showProfile</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showProfile</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>showSettings</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>showSettings</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>updateParamsForPage</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>updateParamsForPage</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>updateToolbarWithParams</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>updateToolbarWithParams</name></name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></interface>
</unit>
