<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\viewmodels\LoginToutViewModel.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>viewmodels</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>facebook</name><operator>.</operator><name>CallbackManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>facebook</name><operator>.</operator><name>FacebookAuthorizationException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>facebook</name><operator>.</operator><name>FacebookCallback</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>facebook</name><operator>.</operator><name>FacebookException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>facebook</name><operator>.</operator><name>login</name><operator>.</operator><name>LoginManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>facebook</name><operator>.</operator><name>login</name><operator>.</operator><name>LoginResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityRequestCodes</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityViewModel</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentUserType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>AccessTokenEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>ErrorEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>IntentKey</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>LoginToutActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>data</name><operator>.</operator><name>ActivityResult</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>data</name><operator>.</operator><name>LoginReason</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>BehaviorSubject</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>combineLatestPair</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>neverError</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>pipeApiErrorsTo</name></name>;</import>

<interface><specifier>public</specifier> interface <name>LoginToutViewModel</name> <block>{

  <interface>interface <name>Inputs</name> <block>{
    <comment type="block" format="javadoc">/** Call when the Login to Facebook button is clicked. */</comment>
    <function_decl><type><name>void</name></type> <name>facebookLoginClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoginToutActivity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>facebookPermissions</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Call when the login button is clicked. */</comment>
    <function_decl><type><name>void</name></type> <name>loginClick</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Call when the signup button is clicked. */</comment>
    <function_decl><type><name>void</name></type> <name>signupClick</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <interface>interface <name>Outputs</name> <block>{
    <comment type="block" format="javadoc">/** Emits when a user has successfully logged in; the login flow should finish with a result indicating success. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>finishWithSuccessfulResult</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when a user has failed to authenticate using Facebook. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showFacebookAuthorizationErrorDialog</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when the API was unable to create a new Facebook user. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showFacebookInvalidAccessTokenErrorToast</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when the API could not retrieve an email for the Facebook user. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showMissingFacebookEmailErrorToast</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when a login attempt is unauthorized. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showUnauthorizedErrorDialog</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits a Facebook user and an access token string to confirm Facebook signup. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>ErrorEnvelope</name><operator>.</operator><name>FacebookUser</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startFacebookConfirmationActivity</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when the login activity should be started. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startLoginActivity</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when the signup activity should be started. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startSignupActivity</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits when a user has successfully logged in using Facebook, but has require two-factor authentication enabled. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startTwoFactorChallenge</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>final</specifier> class <name>ViewModel</name> <super><extends>extends <name><name>ActivityViewModel</name><argument_list type="generic">&lt;<argument><name>LoginToutActivity</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Inputs</name>, <name>Outputs</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>CallbackManager</name></type> <name>callbackManager</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrentUserType</name></type> <name>currentUser</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ApiClientType</name></type> <name>client</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Environment</name></type> <name>environment</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>client</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>apiClient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentUser</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>currentUser</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>registerFacebookCallback</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>facebookSuccessTokenEnvelope</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>facebookAccessToken</name>
        <operator>.</operator><name>switchMap</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>loginWithFacebookAccessToken</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>share</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>intent</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>i</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>i</name><operator>.</operator><name>getSerializableExtra</name></name><argument_list>(<argument><expr><name><name>IntentKey</name><operator>.</operator><name>LOGIN_REASON</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>ofType</name><argument_list>(<argument><expr><name><name>LoginReason</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>loginReason</name></name><operator>::</operator><name>onNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>activityResult</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>callbackManager</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>requestCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>resultCode</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>intent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>activityResult</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>r</name><operator>.</operator><name>isRequestCode</name></name><argument_list>(<argument><expr><name><name>ActivityRequestCodes</name><operator>.</operator><name>LOGIN_FLOW</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ActivityResult</name><operator>::</operator><name>isOk</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>finishWithSuccessfulResult</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>facebookAuthorizationError</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>clearFacebookSession</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>facebookSuccessTokenEnvelope</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>envelope</name></decl></parameter></parameter_list> -&gt; <block>{
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>currentUser</name><operator>.</operator><name>login</name></name><argument_list>(<argument><expr><call><name><name>envelope</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>envelope</name><operator>.</operator><name>accessToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>finishWithSuccessfulResult</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startFacebookConfirmationActivity</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>loginError</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>isConfirmFacebookSignupError</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>facebookUser</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>combineLatestPair</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>facebookAccessToken</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startLoginActivity</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>loginClick</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startSignupActivity</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>signupClick</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>loginReason</name><operator>.</operator><name>take</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>koala</name></name><operator>::</operator><name>trackLoginRegisterTout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>loginError</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackLoginError</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>showMissingFacebookEmailErrorToast</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>mergeWith</name><argument_list>(<argument><expr><call><name>showFacebookInvalidAccessTokenErrorToast</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>mergeWith</name><argument_list>(<argument><expr><call><name>showFacebookAuthorizationErrorDialog</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackFacebookLoginError</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>clearFacebookSession</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>FacebookException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>LoginManager</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>logOut</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>loginWithFacebookAccessToken</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>fbAccessToken</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>client</name><operator>.</operator><name>loginWithFacebook</name></name><argument_list>(<argument><expr><name>fbAccessToken</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>pipeApiErrorsTo</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>loginError</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>neverError</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>registerFacebookCallback</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>fbAccessToken</name> <init>= <expr><name><name>this</name><operator>.</operator><name>facebookAccessToken</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>FacebookException</name></argument>&gt;</argument_list></name></type> <name>fbAuthError</name> <init>= <expr><name><name>this</name><operator>.</operator><name>facebookAuthorizationError</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callbackManager</name></name> <operator>=</operator> <call><name><name>CallbackManager</name><operator>.</operator><name>Factory</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>LoginManager</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerCallback</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callbackManager</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>FacebookCallback</name><argument_list type="generic">&lt;<argument><name>LoginResult</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoginResult</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>fbAccessToken</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>getAccessToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getToken</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>()</parameter_list> <block>{
          <comment type="line">// continue</comment>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onError</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>FacebookException</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name>error</name> <operator>instanceof</operator> <name>FacebookAuthorizationException</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fbAuthError</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>facebookAccessToken</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>loginClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>ErrorEnvelope</name></argument>&gt;</argument_list></name></type> <name>loginError</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>LoginReason</name></argument>&gt;</argument_list></name></type> <name>loginReason</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>signupClick</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>FacebookException</name></argument>&gt;</argument_list></name></type> <name>facebookAuthorizationError</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>finishWithSuccessfulResult</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>ErrorEnvelope</name><operator>.</operator><name>FacebookUser</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startFacebookConfirmationActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startLoginActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startSignupActivity</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Inputs</name></type> <name>inputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Outputs</name></type> <name>outputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>facebookLoginClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>LoginToutActivity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>facebookPermissions</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>LoginManager</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>logInWithReadPermissions</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>facebookPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>loginClick</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>loginClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>signupClick</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>signupClick</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>finishWithSuccessfulResult</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>finishWithSuccessfulResult</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showFacebookAuthorizationErrorDialog</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>facebookAuthorizationError</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>FacebookException</name><operator>::</operator><name>getLocalizedMessage</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showFacebookInvalidAccessTokenErrorToast</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>loginError</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>isFacebookInvalidAccessTokenError</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showMissingFacebookEmailErrorToast</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>loginError</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>isMissingFacebookEmailError</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>showUnauthorizedErrorDialog</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>loginError</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>isUnauthorizedError</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>ErrorEnvelope</name><operator>.</operator><name>FacebookUser</name></name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startFacebookConfirmationActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startFacebookConfirmationActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startLoginActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startLoginActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startSignupActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startSignupActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>startTwoFactorChallenge</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>this</name><operator>.</operator><name>loginError</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>ErrorEnvelope</name><operator>::</operator><name>isTfaRequiredError</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></interface>
</unit>
