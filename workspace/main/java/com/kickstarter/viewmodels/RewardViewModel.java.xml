<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\viewmodels\RewardViewModel.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>viewmodels</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityViewModel</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>CurrentConfigType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>KSCurrency</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BackingUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>BooleanUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>IntegerUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>NumberUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ObjectUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ProjectUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>RewardUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Reward</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>RewardsItem</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>viewholders</name><operator>.</operator><name>RewardViewHolder</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>math</name><operator>.</operator><name>RoundingMode</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>coalesce</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>takeWhen</name></name>;</import>

<interface><specifier>public</specifier> interface <name>RewardViewModel</name> <block>{

  <interface>interface <name>Inputs</name> <block>{
    <comment type="block" format="javadoc">/** Call with a reward and project when data is bound to the view. */</comment>
    <function_decl><type><name>void</name></type> <name>projectAndReward</name><parameter_list>(<parameter><decl><type><name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><name>Reward</name></type> <name>reward</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Call when the user clicks on a reward.*/</comment>
    <function_decl><type><name>void</name></type> <name>rewardClicked</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <interface>interface <name>Outputs</name> <block>{
    <comment type="block" format="javadoc">/** Returns `true` if the all gone TextView should be gone, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>allGoneTextViewIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the backers TextView's text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>backersTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the number of backers TextView should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>backersTextViewIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the USD conversion section should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>conversionTextViewIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the USD conversion. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>conversionTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the description TextView's text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>descriptionTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the estimated delivery date TextView's text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DateTime</name></argument>&gt;</argument_list></name></type> <name>estimatedDeliveryDateTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the estimated delivery section should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>estimatedDeliveryDateSectionIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if reward can be clicked, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isClickable</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the separator between the limit and backers TextViews should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitAndBackersSeparatorIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the limit TextView should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitAndRemainingTextViewIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the limit and remaining TextView's text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>limitAndRemainingTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the limit header should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitHeaderIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the minimum TextView's text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>minimumTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the reward description is empty and should be hidden in the UI. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardDescriptionIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Show the rewards items. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>RewardsItem</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rewardsItemList</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the items section should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardsItemsAreGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if selected header should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>selectedHeaderIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the shipping section should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>shippingSummarySectionIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Set the shipping summary TextView's text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>shippingSummaryTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start the {@link com.kickstarter.ui.activities.BackingActivity} with the project. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>startBackingActivity</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Start {@link com.kickstarter.ui.activities.CheckoutActivity} with the project's reward selected. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>Reward</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startCheckoutActivity</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the title TextView should be hidden, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>titleTextViewIsGone</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Use the reward's title to set the title text. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleTextViewText</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Returns `true` if the white overlay indicating a reward is disabled should be invisible, `false` otherwise. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>whiteOverlayIsInvisible</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>final</specifier> class <name>ViewModel</name> <super><extends>extends <name><name>ActivityViewModel</name><argument_list type="generic">&lt;<argument><name>RewardViewHolder</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Inputs</name>, <name>Outputs</name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CurrentConfigType</name></type> <name>currentConfig</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>KSCurrency</name></type> <name>ksCurrency</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Environment</name></type> <name>environment</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>currentConfig</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>currentConfig</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ksCurrency</name></name> <operator>=</operator> <call><name><name>environment</name><operator>.</operator><name>ksCurrency</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>formattedMinimum</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>ksCurrency</name><operator>.</operator><name>formatWithProjectCurrency</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>second</name><operator>.</operator><name>minimum</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>UP</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isSelectable</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>isSelectable</name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>project</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Reward</name></argument>&gt;</argument_list></name></type> <name>reward</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardIsSelected</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>BackingUtils</name><operator>.</operator><name>isBacked</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Hide 'all gone' header if limit has not been reached, or reward has been backed by user.</comment>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allGoneTextViewIsGone</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>RewardUtils</name><operator>.</operator><name>isLimitReached</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>BackingUtils</name><operator>.</operator><name>isBacked</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backersTextViewIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>RewardUtils</name><operator>.</operator><name>isNoReward</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>RewardUtils</name><operator>.</operator><name>hasBackers</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backersTextViewText</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>RewardUtils</name><operator>.</operator><name>isReward</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>RewardUtils</name><operator>.</operator><name>hasBackers</name></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>backersCount</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conversionTextViewIsGone</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>p</name><operator>.</operator><name>first</name><operator>.</operator><name>currency</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>p</name><operator>.</operator><name>first</name><operator>.</operator><name>currentCurrency</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conversionTextViewText</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>ksCurrency</name><operator>.</operator><name>formatWithUserPreference</name></name><argument_list>(<argument><expr><call><name><name>pr</name><operator>.</operator><name>second</name><operator>.</operator><name>minimum</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>RoundingMode</name><operator>.</operator><name>UP</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>descriptionTextViewText</name></name> <operator>=</operator> <call><name><name>reward</name><operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>estimatedDeliveryDateTextViewText</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>estimatedDeliveryOn</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>estimatedDeliveryDateSectionIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>estimatedDeliveryOn</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNull</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isClickable</name></name> <operator>=</operator> <call><name><name>isSelectable</name><operator>.</operator><name>distinctUntilChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startCheckoutActivity</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>isSelectable</name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>pr</name><operator>.</operator><name>first</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>takeWhen</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>rewardClicked</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startBackingActivity</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>takeWhen</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>rewardClicked</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>ProjectUtils</name><operator>.</operator><name>isCompleted</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>BackingUtils</name><operator>.</operator><name>isBacked</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>limitAndBackersSeparatorIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>IntegerUtils</name><operator>.</operator><name>isNonZero</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>IntegerUtils</name><operator>.</operator><name>isNonZero</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>backersCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>limitAndRemainingTextViewIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>RewardUtils</name><operator>::</operator><name>isLimited</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>limitAndRemainingTextViewText</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>r</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>r</name><operator>.</operator><name>limit</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>r</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name><name>lr</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>lr</name><operator>.</operator><name>second</name></name> <operator>!=</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>rr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>NumberUtils</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>rr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Hide limit header if reward is not limited, or reward has been backed by user.</comment>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>limitHeaderIsGone</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>RewardUtils</name><operator>.</operator><name>isLimited</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>BackingUtils</name><operator>.</operator><name>isBacked</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>minimumTextViewText</name></name> <operator>=</operator> <name>formattedMinimum</name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rewardsItemList</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>rewardsItems</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>coalesce</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>RewardsItem</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rewardsItemsAreGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>RewardUtils</name><operator>::</operator><name>isItemized</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedHeaderIsGone</name></name> <operator>=</operator> <call><name><name>rewardIsSelected</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shippingSummaryTextViewText</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>RewardUtils</name><operator>::</operator><name>isShippable</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>shippingSummary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shippingSummarySectionIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>RewardUtils</name><operator>::</operator><name>isShippable</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>titleTextViewIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>title</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rewardDescriptionIsGone</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>description</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>String</name><operator>::</operator><name>isEmpty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>titleTextViewText</name></name> <operator>=</operator> <call><name><name>reward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>Reward</name><operator>::</operator><name>title</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>ObjectUtils</name><operator>::</operator><name>isNotNull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>whiteOverlayIsInvisible</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>projectAndReward</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pr</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>RewardUtils</name><operator>.</operator><name>isLimitReached</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>BackingUtils</name><operator>.</operator><name>isBacked</name></name><argument_list>(<argument><expr><name><name>pr</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>BooleanUtils</name><operator>::</operator><name>negate</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>distinctUntilChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSelectable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Reward</name></type> <name>reward</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>BackingUtils</name><operator>.</operator><name>isBacked</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>reward</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>project</name><operator>.</operator><name>isLive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>

      <return>return <expr><operator>!</operator><call><name><name>RewardUtils</name><operator>.</operator><name>isLimitReached</name></name><argument_list>(<argument><expr><name>reward</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>Reward</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>projectAndReward</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>rewardClicked</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>allGoneTextViewIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>backersTextViewIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>backersTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>conversionTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>conversionTextViewIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>descriptionTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DateTime</name></argument>&gt;</argument_list></name></type> <name>estimatedDeliveryDateTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>estimatedDeliveryDateSectionIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isClickable</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitAndBackersSeparatorIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitAndRemainingTextViewIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>limitAndRemainingTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitHeaderIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>minimumTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardDescriptionIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>RewardsItem</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rewardsItemList</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardsItemsAreGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>titleTextViewIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>selectedHeaderIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>shippingSummarySectionIsGone</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>shippingSummaryTextViewText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>startBackingActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>Reward</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startCheckoutActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>whiteOverlayIsInvisible</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Inputs</name></type> <name>inputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Outputs</name></type> <name>outputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>projectAndReward</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Reward</name></type> <name>reward</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>projectAndReward</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>reward</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>rewardClicked</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>rewardClicked</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>allGoneTextViewIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>allGoneTextViewIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>backersTextViewIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>backersTextViewIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>backersTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>backersTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>conversionTextViewIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>conversionTextViewIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>conversionTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>conversionTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isClickable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>isClickable</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>descriptionTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>descriptionTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DateTime</name></argument>&gt;</argument_list></name></type> <name>estimatedDeliveryDateTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>estimatedDeliveryDateTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>estimatedDeliveryDateSectionIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>estimatedDeliveryDateSectionIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitAndBackersSeparatorIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>limitAndBackersSeparatorIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitAndRemainingTextViewIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>limitAndRemainingTextViewIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>limitAndRemainingTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>limitAndRemainingTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>limitHeaderIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>limitHeaderIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>minimumTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>minimumTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardDescriptionIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>rewardDescriptionIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>RewardsItem</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>rewardsItemList</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>rewardsItemList</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>rewardsItemsAreGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>rewardsItemsAreGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>selectedHeaderIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>selectedHeaderIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>shippingSummarySectionIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>shippingSummarySectionIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>shippingSummaryTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>shippingSummaryTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>startBackingActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startBackingActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>Reward</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startCheckoutActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startCheckoutActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>titleTextViewIsGone</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>titleTextViewIsGone</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>titleTextViewText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>titleTextViewText</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>whiteOverlayIsInvisible</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>whiteOverlayIsInvisible</name></name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></interface>
</unit>
