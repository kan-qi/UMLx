<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\viewmodels\SearchViewModel.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>viewmodels</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ActivityViewModel</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>ApiPaginator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>RefTag</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>ListUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>StringUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>DiscoverEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>activities</name><operator>.</operator><name>SearchActivity</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Scheduler</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>BehaviorSubject</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>rx</name><operator>.</operator><name>transformers</name><operator>.</operator><name>Transformers</name><operator>.</operator><name>takePairWhen</name></name>;</import>

<interface><specifier>public</specifier> interface <name>SearchViewModel</name> <block>{

  <interface>interface <name>Inputs</name> <block>{
    <comment type="block" format="javadoc">/** Call when the next page has been invoked. */</comment>
    <function_decl><type><name>void</name></type> <name>nextPage</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Call when a project is tapped in search results. */</comment>
    <function_decl><type><name>void</name></type> <name>projectClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Call when text changes in search box. */</comment>
    <function_decl><type><name>void</name></type> <name>search</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>s</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <interface>interface <name>Outputs</name> <block>{
    <comment type="block" format="javadoc">/** Emits a boolean indicating whether projects are being fetched from the API. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isFetchingProjects</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits list of popular projects. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>popularProjects</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits list of projects matching criteria. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>searchProjects</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/** Emits a project and ref tag when we should start a project activity. */</comment>
    <function_decl><type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startProjectActivity</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>final</specifier> class <name>ViewModel</name> <super><extends>extends <name><name>ActivityViewModel</name><argument_list type="generic">&lt;<argument><name>SearchActivity</name></argument>&gt;</argument_list></name></extends> <implements>implements <name>Inputs</name>, <name>Outputs</name></implements></super> <block>{

    <constructor><specifier>public</specifier> <name>ViewModel</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Environment</name></type> <name>environment</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>ApiClientType</name></type> <name>apiClient</name> <init>= <expr><call><name><name>environment</name><operator>.</operator><name>apiClient</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>Scheduler</name></type> <name>scheduler</name> <init>= <expr><call><name><name>environment</name><operator>.</operator><name>scheduler</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>searchParams</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>search</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>StringUtils</name><operator>::</operator><name>isPresent</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>debounce</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>, <argument><expr><name>scheduler</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>term</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>popularParams</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>search</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>StringUtils</name><operator>::</operator><name>isEmpty</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>defaultParams</name></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>startWith</name><argument_list>(<argument><expr><name>defaultParams</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name><name>Observable</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>searchParams</name></expr></argument>, <argument><expr><name>popularParams</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>ApiPaginator</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>DiscoverEnvelope</name></argument>, <argument><name>DiscoveryParams</name></argument>&gt;</argument_list></name></type> <name>paginator</name> <init>=
        <expr><name><name>ApiPaginator</name><operator>.</operator></name>&lt;<name>Project</name></expr></init></decl>, <decl><type ref="prev"/><name>DiscoverEnvelope</name></decl>, <decl><type ref="prev"/><name>DiscoveryParams</name>&gt;<name>builder</name><argument_list>()</argument_list>
          .<name>nextPage</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>nextPage</name></name></expr></argument>)</argument_list>
          .<name>startOverWith</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list>
          .<name>envelopeToListOfData</name><argument_list>(<argument><expr><name>DiscoverEnvelope</name><operator>::</operator><name>projects</name></expr></argument>)</argument_list>
          .<name>envelopeToMoreUrl</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>env</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>env</name><operator>.</operator><name>urls</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>api</name><argument_list>()</argument_list></call><operator>.</operator><call><name>moreProjects</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list>
          <operator>.</operator><call><name>clearWhenStartingOver</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>concater</name><argument_list>(<argument><expr><name>ListUtils</name><operator>::</operator><name>concatDistinct</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>loadWithParams</name><argument_list>(<argument><expr><name>apiClient</name><operator>::</operator><name>fetchProjects</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>loadWithPaginationPath</name><argument_list>(<argument><expr><name>apiClient</name><operator>::</operator><name>fetchProjects</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>paginator</name><operator>.</operator><name>isFetching</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>isFetchingProjects</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>search</name>
        <operator>.</operator><name>filter</name></name><argument_list>(<argument><expr><name>StringUtils</name><operator>::</operator><name>isEmpty</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>__</name></decl></parameter></parameter_list> -&gt; <block>{
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>searchProjects</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><call><name><name>ListUtils</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackClearedSearchTerm</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>params</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>takePairWhen</name><argument_list>(<argument><expr><call><name><name>paginator</name><operator>.</operator><name>paginatedData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>paramsAndProjects</name></decl></parameter></parameter_list> -&gt; <block>{
          <if>if <condition>(<expr><call><name><name>paramsAndProjects</name><operator>.</operator><name>first</name><operator>.</operator><name>sort</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>defaultSort</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>popularProjects</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name><name>paramsAndProjects</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>searchProjects</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name><name>paramsAndProjects</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>pageCount</name> <init>= <expr><call><name><name>paginator</name><operator>.</operator><name>loadingPage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>query</name> <init>= <expr><call><name><name>params</name>
        <operator>.</operator><name>map</name></name><argument_list>(<argument><expr><name>DiscoveryParams</name><operator>::</operator><name>term</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>projects</name> <init>= <expr><call><name><name>Observable</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>popularProjects</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>searchProjects</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startProjectActivity</name></name> <operator>=</operator> <call><name><name>Observable</name><operator>.</operator><name>combineLatest</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>search</name></name></expr></argument>, <argument><expr><name>projects</name></expr></argument>, <argument><expr><name>Pair</name><operator>::</operator><name>create</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>takePairWhen</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>projectClicked</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>searchTermAndProjectsAndProjectClicked</name></decl></parameter></parameter_list> -&gt; <block>{
          <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>searchTerm</name> <init>= <expr><name><name>searchTermAndProjectsAndProjectClicked</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>currentProjects</name> <init>= <expr><name><name>searchTermAndProjectsAndProjectClicked</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>projectClicked</name> <init>= <expr><name><name>searchTermAndProjectsAndProjectClicked</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>

          <return>return <expr><call><name><name>this</name><operator>.</operator><name>projectAndRefTag</name></name><argument_list>(<argument><expr><name>searchTerm</name></expr></argument>, <argument><expr><name>currentProjects</name></expr></argument>, <argument><expr><name>projectClicked</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>query</name>
        <operator>.</operator><name>compose</name></name><argument_list>(<argument><expr><call><name>takePairWhen</name><argument_list>(<argument><expr><name>pageCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>qp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>StringUtils</name><operator>.</operator><name>isPresent</name></name><argument_list>(<argument><expr><name><name>qp</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>compose</name><argument_list>(<argument><expr><call><name>bindToLifecycle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>qp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackSearchResults</name></name><argument_list>(<argument><expr><name><name>qp</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>qp</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>koala</name><operator>.</operator><name>trackSearchView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name></name></type> <name>defaultSort</name> <init>= <expr><name><name>DiscoveryParams</name><operator>.</operator><name>Sort</name><operator>.</operator><name>POPULAR</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>DiscoveryParams</name></type> <name>defaultParams</name> <init>= <expr><call><name><name>DiscoveryParams</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sort</name><argument_list>(<argument><expr><name>defaultSort</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Returns a project and its appropriate ref tag given its location in a list of popular projects or search results.
     *
     * @param searchTerm        The search term entered to determine list of search results.
     * @param projects          The list of popular or search result projects.
     * @param selectedProject   The project selected by the user.
     * @return                  The project and its appropriate ref tag.
     */</comment>
    <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></type> <name>projectAndRefTag</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>searchTerm</name></decl></parameter>,
      <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>projects</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>selectedProject</name></decl></parameter>)</parameter_list> <block>{

      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isFirstResult</name> <init>= <expr><name>selectedProject</name> <operator>==</operator> <call><name><name>projects</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>searchTerm</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><ternary><condition><expr><name>isFirstResult</name></expr>
          ?</condition><then> <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>selectedProject</name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>searchPopularFeatured</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
          </then><else>: <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>selectedProject</name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>searchPopular</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><ternary><condition><expr><name>isFirstResult</name></expr>
          ?</condition><then> <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>selectedProject</name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>searchFeatured</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
          </then><else>: <expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>selectedProject</name></expr></argument>, <argument><expr><call><name><name>RefTag</name><operator>.</operator><name>search</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
      }</block></else></if>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>nextPage</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>projectClicked</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>search</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isFetchingProjects</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>popularProjects</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>BehaviorSubject</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>searchProjects</name> <init>= <expr><call><name><name>BehaviorSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startProjectActivity</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>SearchViewModel</name><operator>.</operator><name>Inputs</name></name></type> <name>inputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>SearchViewModel</name><operator>.</operator><name>Outputs</name></name></type> <name>outputs</name> <init>= <expr><name>this</name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>nextPage</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>nextPage</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>projectClicked</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>projectClicked</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>search</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>search</name><operator>.</operator><name>onNext</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>, <argument><name>RefTag</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>startProjectActivity</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>startProjectActivity</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>isFetchingProjects</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>isFetchingProjects</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>popularProjects</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>popularProjects</name></name></expr>;</return>
    }</block></function>
    <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>searchProjects</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>searchProjects</name></name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></interface>
</unit>
