<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\models\Category.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>qualifiers</name><operator>.</operator><name>AutoGson</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>auto</name><operator>.</operator><name>parcel</name><operator>.</operator><name>AutoParcel</name></name>;</import>

<class><annotation>@<name>AutoParcel</name></annotation>
<annotation>@<name>AutoGson</name></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>Category</name> <super><implements>implements <name>Parcelable</name>, <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></implements></super> <block>{
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>color</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>long</name></type> <name>id</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Category</name></type> <name>parent</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Long</name></type> <name>parentId</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>position</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Integer</name></type> <name>projectsCount</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>slug</name><parameter_list>()</parameter_list>;</function_decl>

  <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>id</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>parent</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>parentId</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>position</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>projectsCount</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>slug</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Category</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_Category</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  
  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Category</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>id</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>isRoot</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>id</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>rootId</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name>isRoot</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>rootId</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>other</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if></elseif></if>

    <return>return <expr><call><name>root</name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>root</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>name</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isRoot</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>parentId</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>parentId</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Category</name></type> <name>root</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name>isRoot</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>this</name></expr> </then><else>: <expr><call><name>parent</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>rootId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name>isRoot</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>id</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>parentId</name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>
}</block></class>
</unit>
