<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\models\Project.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Permission</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>qualifiers</name><operator>.</operator><name>AutoGson</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>DateTimeUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>utils</name><operator>.</operator><name>IntegerUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Retention</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RetentionPolicy</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>StringDef</name></name>;</import>
<import>import <name><name>auto</name><operator>.</operator><name>parcel</name><operator>.</operator><name>AutoParcel</name></name>;</import>

<class><annotation>@<name>AutoGson</name></annotation>
<annotation>@<name>AutoParcel</name></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>Project</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>backersCount</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>blurb</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Backing</name></type> <name>backing</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Category</name></type> <name>category</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Integer</name></type> <name>commentsCount</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>country</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// e.g.: US</comment>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>DateTime</name></type> <name>createdAt</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>User</name></type> <name>creator</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>currency</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// e.g.: USD</comment>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>currencySymbol</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// e.g.: $</comment>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>currentCurrency</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// e.g.: User's Preferred currency USD</comment>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>currencyTrailingCode</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DateTime</name></type> <name>featuredAt</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>friends</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Float</name></type> <name>fxRate</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DateTime</name></type> <name>deadline</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>goal</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>long</name></type> <name>id</name><parameter_list>()</parameter_list>;</function_decl> <comment type="line">// in the Kickstarter app, this is project.pid not project.id</comment>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isBacking</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isStarred</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DateTime</name></type> <name>lastUpdatePublishedAt</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DateTime</name></type> <name>launchedAt</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Location</name></type> <name>location</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>name</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>permissions</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>float</name></type> <name>pledged</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Photo</name></type> <name>photo</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Reward</name></argument>&gt;</argument_list></name></type> <name>rewards</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>slug</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Boolean</name></type> <name>staffPick</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>State</name></annotation> <type><name>String</name></type> <name>state</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DateTime</name></type> <name>stateChangedAt</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Float</name></type> <name>staticUsdRate</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Integer</name></type> <name>unreadMessagesCount</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Integer</name></type> <name>unseenActivityCount</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Integer</name></type> <name>updatesCount</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DateTime</name></type> <name>updatedAt</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Urls</name></type> <name>urls</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Video</name></type> <name>video</name><parameter_list>()</parameter_list>;</function_decl>

  <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>backersCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>blurb</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>backing</name><parameter_list>(<parameter><decl><type><name>Backing</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>category</name><parameter_list>(<parameter><decl><type><name>Category</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>commentsCount</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>country</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>createdAt</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>creator</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>currency</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>currencySymbol</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>currentCurrency</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>currencyTrailingCode</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>deadline</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>featuredAt</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>friends</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>fxRate</name><parameter_list>(<parameter><decl><type><name>Float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>goal</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>id</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>isBacking</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>isStarred</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>lastUpdatePublishedAt</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>launchedAt</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>location</name><parameter_list>(<parameter><decl><type><name>Location</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>name</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>permissions</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Permission</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>pledged</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>photo</name><parameter_list>(<parameter><decl><type><name>Photo</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>rewards</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Reward</name></argument>&gt;</argument_list></name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>slug</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>staffPick</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>staticUsdRate</name><parameter_list>(<parameter><decl><type><name>Float</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>state</name><parameter_list>(<parameter><decl><type><annotation>@<name>State</name></annotation> <name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>stateChangedAt</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>unreadMessagesCount</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>unseenActivityCount</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>updatedAt</name><parameter_list>(<parameter><decl><type><name>DateTime</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>updatesCount</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>urls</name><parameter_list>(<parameter><decl><type><name>Urls</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>video</name><parameter_list>(<parameter><decl><type><name>Video</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Project</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></class>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_Project</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>isBacking</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>isStarred</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>rewards</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_STARTED</name>      <init>= <expr><literal type="string">"started"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_SUBMITTED</name>    <init>= <expr><literal type="string">"submitted"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_LIVE</name>         <init>= <expr><literal type="string">"live"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_SUCCESSFUL</name>   <init>= <expr><literal type="string">"successful"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_FAILED</name>       <init>= <expr><literal type="string">"failed"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_CANCELED</name>     <init>= <expr><literal type="string">"canceled"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_SUSPENDED</name>    <init>= <expr><literal type="string">"suspended"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_PURGED</name>       <init>= <expr><literal type="string">"purged"</literal></expr></init></decl>;</decl_stmt>

  <annotation_defn><annotation>@<name>Retention</name><argument_list>(<argument><expr><name><name>RetentionPolicy</name><operator>.</operator><name>SOURCE</name></name></expr></argument>)</argument_list></annotation>
  <annotation>@<name>StringDef</name><argument_list>(<argument><expr><block>{<expr><name>STATE_STARTED</name></expr>, <argument><expr><name>STATE_SUBMITTED</name></expr></argument>, <argument><expr><name>STATE_LIVE</name></expr></argument>, <argument><expr><name>STATE_SUCCESSFUL</name></expr></argument>, <argument><expr><name>STATE_FAILED</name></expr></argument>, <argument><expr><name>STATE_CANCELED</name></expr></argument>, <argument><expr><name>STATE_SUSPENDED</name></expr></argument>, <argument><expr><name>STATE_PURGED</name></expr></argument>}</block></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> @interface <name>State</name> <block>{}</block></annotation_defn>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>creatorBioUrl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>urls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>web</name><argument_list>()</argument_list></call><operator>.</operator><call><name>creatorBio</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isBackingRewardId</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>rewardId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>backing</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>backing</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>rewardId</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>backing</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>rewardId</name><argument_list>()</argument_list></call> <operator>==</operator> <name>rewardId</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>descriptionUrl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>urls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>web</name><argument_list>()</argument_list></call><operator>.</operator><call><name>description</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>updatesUrl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>urls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>web</name><argument_list>()</argument_list></call><operator>.</operator><call><name>updates</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>webProjectUrl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>urls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>web</name><argument_list>()</argument_list></call><operator>.</operator><call><name>project</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><annotation>@<name>AutoParcel</name></annotation>
  <annotation>@<name>AutoGson</name></annotation>
  <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Urls</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Web</name></type> <name>web</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Api</name></type> <name>api</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>web</name><parameter_list>(<parameter><decl><type><name>Web</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>api</name><parameter_list>(<parameter><decl><type><name>Api</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Urls</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_Project_Urls</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <class><annotation>@<name>AutoParcel</name></annotation>
    <annotation>@<name>AutoGson</name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Web</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>project</name><parameter_list>()</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>projectShort</name><parameter_list>()</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>rewards</name><parameter_list>()</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>updates</name><parameter_list>()</parameter_list>;</function_decl>

      <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
      <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>project</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>projectShort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>rewards</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>updates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Web</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
      }</block></class>

      <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_Project_Urls_Web</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>

      <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>creatorBio</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>project</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>appendEncodedPath</name><argument_list>(<argument><expr><literal type="string">"/creator_bio"</literal></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>description</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>project</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>appendEncodedPath</name><argument_list>(<argument><expr><literal type="string">"/description"</literal></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class>

    <class><annotation>@<name>AutoParcel</name></annotation>
    <annotation>@<name>AutoGson</name></annotation>
    <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Api</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>project</name><parameter_list>()</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>comments</name><parameter_list>()</parameter_list>;</function_decl>
      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>updates</name><parameter_list>()</parameter_list>;</function_decl>

      <class><annotation>@<name><name>AutoParcel</name><operator>.</operator><name>Builder</name></name></annotation>
      <specifier>public</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>project</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>comments</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>updates</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>__</name></decl></parameter>)</parameter_list>;</function_decl>
        <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Api</name></type> <name>build</name><parameter_list>()</parameter_list>;</function_decl>
      }</block></class>

      <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>builder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name><name>AutoParcel_Project_Urls_Api</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></class>
  }</block></class>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasComments</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>IntegerUtils</name><operator>.</operator><name>isNonZero</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>commentsCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasRewards</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>rewards</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVideo</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>video</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a canceled state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isCanceled</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_CANCELED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a failed state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFailed</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_FAILED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFeaturedToday</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>featuredAt</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name><name>DateTimeUtils</name><operator>.</operator><name>isDateToday</name></name><argument_list>(<argument><expr><call><name>featuredAt</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a live state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isLive</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_LIVE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFriendBacking</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>friends</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>friends</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFunded</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>isLive</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>percentageFunded</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">100</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a purged state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPurged</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_PURGED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a live state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isStarted</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_STARTED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a submitted state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSubmitted</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_SUBMITTED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a suspended state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSuspended</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_SUSPENDED</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/** Returns whether the project is in a successful state. */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSuccessful</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>STATE_SUCCESSFUL</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>state</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isApproachingDeadline</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>deadline</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBeforeNow</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>deadline</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isBefore</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DateTime</name><argument_list>()</argument_list></call><operator>.</operator><call><name>plusDays</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>percentageFunded</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>goal</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0.0f</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><call><name>pledged</name><argument_list>()</argument_list></call> <operator>/</operator> <call><name>goal</name><argument_list>()</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">100.0f</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="number">0.0f</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>param</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>slug</name> <init>= <expr><call><name>slug</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>slug</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>slug</name></expr> </then><else>: <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>id</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>secureWebProjectUrl</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// TODO: Just use http with local env</comment>
    <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>webProjectUrl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call><operator>.</operator><call><name>scheme</name><argument_list>(<argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>newPledgeUrl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>secureWebProjectUrl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call><operator>.</operator><call><name>appendEncodedPath</name><argument_list>(<argument><expr><literal type="string">"pledge/new"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>editPledgeUrl</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>secureWebProjectUrl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call><operator>.</operator><call><name>appendEncodedPath</name><argument_list>(<argument><expr><literal type="string">"pledge/edit"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>rewardSelectedUrl</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Reward</name></type> <name>reward</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name>newPledgeUrl</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>buildUpon</name><argument_list>()</argument_list></call><operator>.</operator><call><name>scheme</name><argument_list>(<argument><expr><literal type="string">"https"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><literal type="string">"backing[backer_reward_id]"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>reward</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><literal type="string">"clicked_reward"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="string">"Project{"</literal>
      <operator>+</operator> <literal type="string">"id="</literal> <operator>+</operator> <call><name>id</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal>
      <operator>+</operator> <literal type="string">"name="</literal> <operator>+</operator> <call><name>name</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal>
      <operator>+</operator> <literal type="string">"}"</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>o</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>o</name> <operator>instanceof</operator> <name>Project</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Project</name></type> <name>p</name> <init>= <expr><operator>(</operator><name>Project</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>id</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>p</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>id</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
