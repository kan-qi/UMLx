<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\mock\factories\BackingFactory.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Backing</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Reward</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>User</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>joda</name><operator>.</operator><name>time</name><operator>.</operator><name>DateTime</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>BackingFactory</name> <block>{
  <constructor><specifier>private</specifier> <name>BackingFactory</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Backing</name></type> <name>backing</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>backing</name><argument_list>(<argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Backing</name></type> <name>backing</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>backer</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>backing</name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>backer</name></expr></argument>, <argument><expr><call><name><name>RewardFactory</name><operator>.</operator><name>reward</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Backing</name></type> <name>backing</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>backer</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Reward</name></type> <name>reward</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Backing</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>amount</name><argument_list>(<argument><expr><literal type="number">10.0f</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>backer</name><argument_list>(<argument><expr><name>backer</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>backerId</name><argument_list>(<argument><expr><call><name><name>backer</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>id</name><argument_list>(<argument><expr><call><name><name>IdFactory</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>pledgedAt</name><argument_list>(<argument><expr><call><name><name>DateTime</name><operator>.</operator><name>now</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>project</name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>projectCountry</name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>country</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>projectId</name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>reward</name><argument_list>(<argument><expr><name>reward</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>rewardId</name><argument_list>(<argument><expr><call><name><name>reward</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>sequence</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>shippingAmount</name><argument_list>(<argument><expr><literal type="number">0.0f</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>status</name><argument_list>(<argument><expr><name><name>Backing</name><operator>.</operator><name>STATUS_PLEDGED</name></name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Backing</name></type> <name>backing</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>backing</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
      <operator>.</operator><call><name>status</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
