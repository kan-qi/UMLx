<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\kickstarter\app\src\main\java\com\kickstarter\mock\services\MockApiClient.java"><package>package <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>services</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>libs</name><operator>.</operator><name>Config</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>ActivityEnvelopeFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>ActivityFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>BackingFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>CategoryFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>CommentFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>CommentsEnvelopeFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>LocationFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>MessageThreadEnvelopeFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>MessageThreadsEnvelopeFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>ProjectFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>SurveyResponseFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>UpdateFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>mock</name><operator>.</operator><name>factories</name><operator>.</operator><name>UserFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Backing</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Category</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Comment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Empty</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Location</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>MessageThread</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Project</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>ProjectNotification</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>SurveyResponse</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>Update</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>models</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>ApiClientType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>DiscoveryParams</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>AccessTokenEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>ActivityEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>CommentsEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>DiscoverEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>MessageThreadEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>MessageThreadsEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>ProjectStatsEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>services</name><operator>.</operator><name>apiresponses</name><operator>.</operator><name>ProjectsEnvelope</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>data</name><operator>.</operator><name>Mailbox</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>kickstarter</name><operator>.</operator><name>ui</name><operator>.</operator><name>data</name><operator>.</operator><name>MessageSubject</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>rx</name><operator>.</operator><name>subjects</name><operator>.</operator><name>PublishSubject</name></name>;</import>

<class><specifier>public</specifier> class <name>MockApiClient</name> <super><implements>implements <name>ApiClientType</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PublishSubject</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>observable</name> <init>= <expr><call><name><name>PublishSubject</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Emits when endpoints on the client are called. The key in the pair is the underscore-separated
   * name of the method, and the value is a map of argument names/values.
   */</comment>
  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>observable</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>observable</name></name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Config</name></argument>&gt;</argument_list></name></type> <name>config</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ActivityEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchActivities</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>ActivityEnvelopeFactory</name><operator>.</operator><name>activityEnvelope</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><call><name><name>ActivityFactory</name><operator>.</operator><name>activity</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ActivityEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchActivities</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Integer</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>fetchActivities</name><argument_list>()</argument_list></call><operator>.</operator><call><name>take</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ActivityEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchActivitiesWithPaginationPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>paginationPath</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchCategories</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>artCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>bluesCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>ceramicsCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>gamesCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>musicCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>photographyCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>tabletopGamesCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>textilesCategory</name></name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>worldMusicCategory</name></name><argument_list>()</argument_list></call></expr></argument>
      )</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ProjectNotification</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchProjectNotifications</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>fetchProject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>slug</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>fetchProject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoverEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchProjects</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>DiscoveryParams</name></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>DiscoverEnvelope</name>
        <operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>projects</name><argument_list>(
          <argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(
            <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>project</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>allTheWayProject</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>ProjectFactory</name><operator>.</operator><name>successfulProject</name></name><argument_list>()</argument_list></call></expr></argument>
          )</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>urls</name><argument_list>(
          <argument><expr><call><name><name>DiscoverEnvelope</name><operator>.</operator><name>UrlsEnvelope</name>
            <operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>api</name><argument_list>(
              <argument><expr><call><name><name>DiscoverEnvelope</name><operator>.</operator><name>UrlsEnvelope</name><operator>.</operator><name>ApiEnvelope</name>
                <operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>moreProjects</name><argument_list>(<argument><expr><literal type="string">"http://more.projects.please"</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
            )</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ProjectsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchProjects</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isMember</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>DiscoverEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchProjects</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>paginationUrl</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ProjectStatsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchProjectStats</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>CommentsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchComments</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>CommentsEnvelopeFactory</name><operator>.</operator><name>commentsEnvelope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>CommentsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchComments</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>CommentsEnvelopeFactory</name><operator>.</operator><name>commentsEnvelope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>CommentsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchComments</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>paginationPath</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>CommentsEnvelopeFactory</name><operator>.</operator><name>commentsEnvelope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThreadEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchMessagesForBacking</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Backing</name></type> <name>backing</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>MessageThreadEnvelopeFactory</name><operator>.</operator><name>messageThreadEnvelope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThreadEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchMessagesForThread</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>MessageThread</name></type> <name>messageThread</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>MessageThreadEnvelopeFactory</name><operator>.</operator><name>messageThreadEnvelope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThreadEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchMessagesForThread</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Long</name></type> <name>messageThreadId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThreadsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchMessageThreads</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Mailbox</name></type> <name>mailbox</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>MessageThreadsEnvelopeFactory</name><operator>.</operator><name>messageThreadsEnvelope</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThreadsEnvelope</name></argument>&gt;</argument_list></name></type> <name>fetchMessageThreadsWithPaginationPath</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>paginationPath</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Update</name></argument>&gt;</argument_list></name></type> <name>fetchUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>projectParam</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>updateParam</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>UpdateFactory</name><operator>.</operator><name>update</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Update</name></argument>&gt;</argument_list></name></type> <name>fetchUpdate</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>loginWithFacebook</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>accessToken</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>AccessTokenEnvelope</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>user</name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>accessToken</name><argument_list>(<argument><expr><literal type="string">"deadbeef"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>loginWithFacebook</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>fbAccessToken</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>AccessTokenEnvelope</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>user</name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>accessToken</name><argument_list>(<argument><expr><literal type="string">"deadbeef"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>registerWithFacebook</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>fbAccessToken</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>sendNewsletters</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>AccessTokenEnvelope</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>user</name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>accessToken</name><argument_list>(<argument><expr><literal type="string">"deadbeef"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Backing</name></argument>&gt;</argument_list></name></type> <name>fetchProjectBacking</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>BackingFactory</name><operator>.</operator><name>backing</name></name><argument_list>(<argument><expr><name>project</name></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>fetchCategory</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>CategoryFactory</name><operator>.</operator><name>musicCategory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Category</name></argument>&gt;</argument_list></name></type> <name>fetchCategory</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Category</name></type> <name>category</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>fetchCurrentUser</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Location</name></argument>&gt;</argument_list></name></type> <name>fetchLocation</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>param</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>LocationFactory</name><operator>.</operator><name>sydney</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>login</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>email</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>AccessTokenEnvelope</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>user</name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>accessToken</name><argument_list>(<argument><expr><literal type="string">"deadbeef"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>login</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>email</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>password</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>AccessTokenEnvelope</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>user</name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
        <operator>.</operator><call><name>accessToken</name><argument_list>(<argument><expr><literal type="string">"deadbeef"</literal></expr></argument>)</argument_list></call>
        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>MessageThread</name></argument>&gt;</argument_list></name></type> <name>markAsRead</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>MessageThread</name></type> <name>messageThread</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Backing</name></argument>&gt;</argument_list></name></type> <name>postBacking</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Backing</name></type> <name>backing</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>BackingFactory</name><operator>.</operator><name>backing</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Comment</name></argument>&gt;</argument_list></name></type> <name>postComment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>CommentFactory</name><operator>.</operator><name>comment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>body</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Comment</name></argument>&gt;</argument_list></name></type> <name>postComment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Update</name></type> <name>update</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>CommentFactory</name><operator>.</operator><name>comment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>body</name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Empty</name></argument>&gt;</argument_list></name></type> <name>registerPushToken</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>token</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>resetPassword</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>email</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Message</name></argument>&gt;</argument_list></name></type> <name>sendMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>MessageSubject</name></type> <name>messageSubject</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>AccessTokenEnvelope</name></argument>&gt;</argument_list></name></type> <name>signup</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>email</name></decl></parameter>,
    <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>password</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>passwordConfirmation</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>sendNewsletters</name></decl></parameter>)</parameter_list> <block>{

    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(
      <argument><expr><call><name><name>AccessTokenEnvelope</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
        <operator>.</operator><call><name>user</name><argument_list>(<argument><expr><call><name><name>UserFactory</name><operator>.</operator><name>user</name></name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call>
          <operator>.</operator><call><name>name</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>
          <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
        )</argument_list></call>
      <operator>.</operator><call><name>accessToken</name><argument_list>(<argument><expr><literal type="string">"deadbeef"</literal></expr></argument>)</argument_list></call>
      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>saveProject</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isStarred</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>SurveyResponse</name></argument>&gt;</argument_list></name></type> <name>fetchSurveyResponse</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>surveyResponseId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>SurveyResponseFactory</name><operator>.</operator><name>surveyResponse</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>id</name><argument_list>(<argument><expr><name>surveyResponseId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>Project</name></argument>&gt;</argument_list></name></type> <name>toggleProjectSave</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Project</name></type> <name>project</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>project</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isStarred</name><argument_list>(<argument><expr><operator>!</operator><call><name><name>project</name><operator>.</operator><name>isStarred</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>SurveyResponse</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>fetchUnansweredSurveys</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>SurveyResponseFactory</name><operator>.</operator><name>surveyResponse</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>SurveyResponseFactory</name><operator>.</operator><name>surveyResponse</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>ProjectNotification</name></argument>&gt;</argument_list></name></type> <name>updateProjectNotifications</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>ProjectNotification</name></type> <name>projectNotification</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>checked</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>projectNotification</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>email</name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mobile</name><argument_list>(<argument><expr><name>checked</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Observable</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>updateUserSettings</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>observable</name><operator>.</operator><name>onNext</name></name><argument_list>(
      <argument><expr><call><name><name>Pair</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">"update_user_settings"</literal></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <block>{
          <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"user"</literal></expr></argument>, <argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
      }</block></class></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Observable</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
