<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\ikimuhendis\ldrawer\ActionBarDrawerToggle.java"><package>package <name><name>com</name><operator>.</operator><name>ikimuhendis</name><operator>.</operator><name>ldrawer</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>


<class><specifier>public</specifier> class <name>ActionBarDrawerToggle</name> <super><extends>extends <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarDrawerToggle</name></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ActionBarDrawerToggle</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <type><name>Activity</name></type> <name>mActivity</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>DrawerLayout</name></type> <name>mDrawerLayout</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mOpenDrawerContentDescRes</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mCloseDrawerContentDescRes</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>DrawerArrowDrawable</name></type> <name>mDrawerImage</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>animateEnabled</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ActionBarDrawerToggle</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>drawerImageRes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>openDrawerContentDescRes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>closeDrawerContentDescRes</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>drawerLayout</name></expr></argument>, <argument><expr><name>drawerImageRes</name></expr></argument>, <argument><expr><name>openDrawerContentDescRes</name></expr></argument>, <argument><expr><name>closeDrawerContentDescRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ActionBarDrawerToggle</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl></parameter>, <parameter><decl><type><name>DrawerArrowDrawable</name></type> <name>drawerImage</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>openDrawerContentDescRes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>closeDrawerContentDescRes</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>drawerLayout</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_drawer</name></name></expr></argument>, <argument><expr><name>openDrawerContentDescRes</name></expr></argument>, <argument><expr><name>closeDrawerContentDescRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mActivity</name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mDrawerLayout</name> <operator>=</operator> <name>drawerLayout</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mOpenDrawerContentDescRes</name> <operator>=</operator> <name>openDrawerContentDescRes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCloseDrawerContentDescRes</name> <operator>=</operator> <name>closeDrawerContentDescRes</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mDrawerImage</name> <operator>=</operator> <name>drawerImage</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>animateEnabled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>syncState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>syncState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>animateEnabled</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>isDrawerOpen</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mDrawerImage</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>mDrawerImage</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
        <expr_stmt><expr><call><name>setActionBarUpIndicator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setActionBarDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDrawerIndicatorEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enable</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setDrawerIndicatorEnabled</name></name><argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>setActionBarUpIndicator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setActionBarDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isDrawerIndicatorEnabled</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>super</name><operator>.</operator><name>isDrawerIndicatorEnabled</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>onConfigurationChanged</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>newConfig</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onConfigurationChanged</name></name><argument_list>(<argument><expr><name>newConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <expr_stmt><expr><call><name>syncState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDrawerSlide</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>drawerView</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>slideOffset</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDrawerSlide</name></name><argument_list>(<argument><expr><name>drawerView</name></expr></argument>, <argument><expr><name>slideOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>animateEnabled</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerImage</name><operator>.</operator><name>setVerticalMirror</name></name><argument_list>(<argument><expr><operator>!</operator><call><name><name>mDrawerLayout</name><operator>.</operator><name>isDrawerOpen</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mDrawerImage</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>slideOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDrawerOpened</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>drawerView</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDrawerOpened</name></name><argument_list>(<argument><expr><name>drawerView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>animateEnabled</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerImage</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setActionBarDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDrawerClosed</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>drawerView</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerImage</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDrawerClosed</name></name><argument_list>(<argument><expr><name>drawerView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>animateEnabled</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerImage</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>setActionBarDescription</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setActionBarUpIndicator</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mActivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>setHomeAsUpIndicator</name> <init>= <expr><call><name><name>ActionBar</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"setHomeAsUpIndicator"</literal></expr></argument>,
                    <argument><expr><name><name>Drawable</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>setHomeAsUpIndicator</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getActionBar</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mDrawerImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
             <comment type="line">//   Log.e(TAG, "setActionBarUpIndicator error", e);</comment>
            }</block></catch></try>

            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>home</name> <init>= <expr><call><name><name>mActivity</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>home</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>ViewGroup</name></type> <name>parent</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>home</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childCount</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>childCount</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
                <return>return;</return>
            }</block></then></if>

            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>first</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>second</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>up</name> <init>= <expr><ternary><condition><expr><call><name><name>first</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr> ?</condition><then> <expr><name>second</name></expr> </then><else>: <expr><name>first</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>up</name> <operator>instanceof</operator> <name>ImageView</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ImageView</name></type> <name>upV</name> <init>= <expr><operator>(</operator><name>ImageView</name><operator>)</operator> <name>up</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>upV</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><name>mDrawerImage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setActionBarDescription</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mActivity</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mActivity</name><operator>.</operator><name>getActionBar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>setHomeActionContentDescription</name> <init>= <expr><call><name><name>ActionBar</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredMethod</name></name></name><argument_list>(
                    <argument><expr><literal type="string">"setHomeActionContentDescription"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>setHomeActionContentDescription</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getActionBar</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>isDrawerOpen</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>mOpenDrawerContentDescRes</name></expr> </then><else>: <expr><name>mCloseDrawerContentDescRes</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;=</operator> <literal type="number">19</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>mActivity</name><operator>.</operator><name>getActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSubtitle</name><argument_list>(<argument><expr><call><name><name>mActivity</name><operator>.</operator><name>getActionBar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSubtitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"setActionBarUpIndicator"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAnimateEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>animateEnabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isAnimateEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>animateEnabled</name></name></expr>;</return>
    }</block></function>

}</block></class>
</unit>
