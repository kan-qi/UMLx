<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\ikimuhendis\ldrawer\DrawerArrowDrawable.java"><package>package <name><name>com</name><operator>.</operator><name>ikimuhendis</name><operator>.</operator><name>ldrawer</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>ColorFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PixelFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>


<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>DrawerArrowDrawable</name> <super><extends>extends <name>Drawable</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>ARROW_HEAD_ANGLE</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>toRadians</name></name><argument_list>(<argument><expr><literal type="number">45.0D</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mBarGap</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mBarSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mBarThickness</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mMiddleArrowSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>mPaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Path</name></type> <name>mPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mVerticalMirror</name> <init>= <expr><literal type="number">1f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mTopBottomArrowSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>DrawerArrowDrawable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>ldrawer_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mSize</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>ldrawer_drawableSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mBarSize</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>ldrawer_barSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mTopBottomArrowSize</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>ldrawer_topBottomBarArrowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mBarThickness</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>ldrawer_thickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mBarGap</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>ldrawer_gapBetweenBars</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mMiddleArrowSize</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>ldrawer_middleBarArrowSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setStrokeJoin</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Join</name><operator>.</operator><name>ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setStrokeCap</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Cap</name><operator>.</operator><name>SQUARE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>mBarThickness</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>protected</specifier> <type><name>float</name></type> <name>lerp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat1</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat2</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>paramFloat3</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>paramFloat1</name> <operator>+</operator> <name>paramFloat3</name> <operator>*</operator> <operator>(</operator><name>paramFloat2</name> <operator>-</operator> <name>paramFloat1</name><operator>)</operator></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Rect</name></type> <name>localRect</name> <init>= <expr><call><name>getBounds</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><call><name>lerp</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>mBarSize</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mTopBottomArrowSize</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name>lerp</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>mBarSize</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mMiddleArrowSize</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f3</name> <init>= <expr><call><name>lerp</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mBarThickness</name></name> <operator>/</operator> <literal type="number">2.0F</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f4</name> <init>= <expr><call><name>lerp</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><name>ARROW_HEAD_ANGLE</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f5</name> <init>= <expr><literal type="number">0.0F</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f6</name> <init>= <expr><literal type="number">180.0F</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f7</name> <init>= <expr><call><name>lerp</name><argument_list>(<argument><expr><name>f5</name></expr></argument>, <argument><expr><name>f6</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f8</name> <init>= <expr><call><name>lerp</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>mBarGap</name></name> <operator>+</operator> <name><name>this</name><operator>.</operator><name>mBarThickness</name></name></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>rewind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f9</name> <init>= <expr><operator>-</operator><name>f2</name> <operator>/</operator> <literal type="number">2.0F</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>f9</name> <operator>+</operator> <name>f3</name></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>rLineTo</name></name><argument_list>(<argument><expr><name>f2</name> <operator>-</operator> <name>f3</name></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f10</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>f11</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>f1</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>f4</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>f9</name></expr></argument>, <argument><expr><name>f8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>rLineTo</name></name><argument_list>(<argument><expr><name>f10</name></expr></argument>, <argument><expr><name>f11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>f9</name></expr></argument>, <argument><expr><operator>-</operator><name>f8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>rLineTo</name></name><argument_list>(<argument><expr><name>f10</name></expr></argument>, <argument><expr><operator>-</operator><name>f11</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPath</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name>isLayoutRtl</name><argument_list>()</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>rotate</name></name><argument_list>(<argument><expr><literal type="number">180.0F</literal></expr></argument>, <argument><expr><call><name><name>localRect</name><operator>.</operator><name>centerX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>localRect</name><operator>.</operator><name>centerY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>rotate</name></name><argument_list>(<argument><expr><name>f7</name> <operator>*</operator> <name>mVerticalMirror</name></expr></argument>, <argument><expr><call><name><name>localRect</name><operator>.</operator><name>centerX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>localRect</name><operator>.</operator><name>centerY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><call><name><name>localRect</name><operator>.</operator><name>centerX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>localRect</name><operator>.</operator><name>centerY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>mPath</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>mPaint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>restore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getIntrinsicHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>mSize</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getIntrinsicWidth</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>mSize</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAlpha</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getOpacity</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>PixelFormat</name><operator>.</operator><name>TRANSLUCENT</name></name></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isLayoutRtl</name><parameter_list>()</parameter_list>;</function_decl>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setColorFilter</name><parameter_list>(<parameter><decl><type><name>ColorFilter</name></type> <name>colorFilter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setColorFilter</name></name><argument_list>(<argument><expr><name>colorFilter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setVerticalMirror</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mVerticalMirror</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mVerticalMirror</name></name> <operator>=</operator> <ternary><condition><expr><name>mVerticalMirror</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>paramFloat</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name> <operator>=</operator> <name>paramFloat</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidateSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resourceId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class></unit>
