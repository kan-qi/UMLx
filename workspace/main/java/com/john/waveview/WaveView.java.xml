<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\john\waveview\WaveView.java"><package>package <name><name>com</name><operator>.</operator><name>john</name><operator>.</operator><name>waveview</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>


<comment type="block" format="javadoc">/**
 * Created by John on 2014/10/15.
 */</comment>
<class><specifier>public</specifier> class <name>WaveView</name> <super><extends>extends <name>LinearLayout</name></extends></super> <block>{
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LARGE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIDDLE</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LITTLE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mAboveWaveColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mBlowWaveColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mWaveHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mWaveMultiple</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mWaveHz</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mWaveToTop</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Wave</name></type> <name>mWave</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Solid</name></type> <name>mSolid</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ABOVE_WAVE_COLOR</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BLOW_WAVE_COLOR</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_PROGRESS</name> <init>= <expr><literal type="number">80</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>WaveView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setOrientation</name><argument_list>(<argument><expr><name>VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//load styled attributes.</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>TypedArray</name></type> <name>attributes</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>waveViewStyle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mAboveWaveColor</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView_above_wave_color</name></name></expr></argument>, <argument><expr><name>DEFAULT_ABOVE_WAVE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBlowWaveColor</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView_blow_wave_color</name></name></expr></argument>, <argument><expr><name>DEFAULT_BLOW_WAVE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mProgress</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView_progress</name></name></expr></argument>, <argument><expr><name>DEFAULT_PROGRESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mWaveHeight</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView_wave_height</name></name></expr></argument>, <argument><expr><name>MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mWaveMultiple</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView_wave_length</name></name></expr></argument>, <argument><expr><name>LARGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mWaveHz</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>WaveView_wave_hz</name></name></expr></argument>, <argument><expr><name>MIDDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attributes</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mWave</name> <operator>=</operator> <operator>new</operator> <call><name>Wave</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mWave</name><operator>.</operator><name>initializeWaveSize</name></name><argument_list>(<argument><expr><name>mWaveMultiple</name></expr></argument>, <argument><expr><name>mWaveHeight</name></expr></argument>, <argument><expr><name>mWaveHz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mWave</name><operator>.</operator><name>setAboveWaveColor</name></name><argument_list>(<argument><expr><name>mAboveWaveColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mWave</name><operator>.</operator><name>setBlowWaveColor</name></name><argument_list>(<argument><expr><name>mBlowWaveColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mWave</name><operator>.</operator><name>initializePainters</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>mSolid</name> <operator>=</operator> <operator>new</operator> <call><name>Solid</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mSolid</name><operator>.</operator><name>setAboveWavePaint</name></name><argument_list>(<argument><expr><call><name><name>mWave</name><operator>.</operator><name>getAboveWavePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mSolid</name><operator>.</operator><name>setBlowWavePaint</name></name><argument_list>(<argument><expr><call><name><name>mWave</name><operator>.</operator><name>getBlowWavePaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addView</name><argument_list>(<argument><expr><name>mWave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addView</name><argument_list>(<argument><expr><name>mSolid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name>mProgress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mProgress</name></name> <operator>=</operator> <ternary><condition><expr><name>progress</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><name>progress</name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>computeWaveToTop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onWindowFocusChanged</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hasWindowFocus</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onWindowFocusChanged</name></name><argument_list>(<argument><expr><name>hasWindowFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hasWindowFocus</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>computeWaveToTop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>computeWaveToTop</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>mWaveToTop</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1f</literal> <operator>-</operator> <name>mProgress</name> <operator>/</operator> <literal type="number">100f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><call><name><name>mWave</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><operator>(</operator><name>LayoutParams</name><operator>)</operator> <name>params</name><operator>)</operator><operator>.</operator><name>topMargin</name> <operator>=</operator> <name>mWaveToTop</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mWave</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Parcelable</name></type> <name>onSaveInstanceState</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Force our ancestor class to save its state</comment>
        <decl_stmt><decl><type><name>Parcelable</name></type> <name>superState</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SavedState</name></type> <name>ss</name> <init>= <expr><operator>new</operator> <call><name>SavedState</name><argument_list>(<argument><expr><name>superState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>ss</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>mProgress</name></expr>;</expr_stmt>
        <return>return <expr><name>ss</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SavedState</name></type> <name>ss</name> <init>= <expr><operator>(</operator><name>SavedState</name><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>getSuperState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><name><name>ss</name><operator>.</operator><name>progress</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>SavedState</name> <super><extends>extends <name>BaseSavedState</name></extends></super> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>progress</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Constructor called from {@link android.widget.ProgressBar#onSaveInstanceState()}
         */</comment>
        <constructor><name>SavedState</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>superState</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>superState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <comment type="block" format="javadoc">/**
         * Constructor called from {@link #CREATOR}
         */</comment>
        <constructor><specifier>private</specifier> <name>SavedState</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>progress</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>writeToParcel</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>SavedState</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>SavedState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><specifier>public</specifier> <type><name>SavedState</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>SavedState</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><specifier>public</specifier> <type><name><name>SavedState</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <name><name>SavedState</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
    }</block></class>
}</block></class>
</unit>
