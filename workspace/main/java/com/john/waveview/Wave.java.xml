<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\john\waveview\Wave.java"><package>package <name><name>com</name><operator>.</operator><name>john</name><operator>.</operator><name>waveview</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>


<comment type="line">// y=Asin(Ïx+Ï)+k</comment>
<class>class <name>Wave</name> <super><extends>extends <name>View</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WAVE_HEIGHT_LARGE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WAVE_HEIGHT_MIDDLE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>WAVE_HEIGHT_LITTLE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>WAVE_LENGTH_MULTIPLE_LARGE</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>WAVE_LENGTH_MULTIPLE_MIDDLE</name> <init>= <expr><literal type="number">1f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>WAVE_LENGTH_MULTIPLE_LITTLE</name> <init>= <expr><literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>WAVE_HZ_FAST</name> <init>= <expr><literal type="number">0.13f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>WAVE_HZ_NORMAL</name> <init>= <expr><literal type="number">0.09f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>WAVE_HZ_SLOW</name> <init>= <expr><literal type="number">0.05f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ABOVE_WAVE_ALPHA</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_BLOW_WAVE_ALPHA</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>X_SPACE</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>PI2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Path</name></type> <name>mAboveWavePath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Path</name></type> <name>mBlowWavePath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>mAboveWavePaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>mBlowWavePaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mAboveWaveColor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mBlowWaveColor</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mWaveMultiple</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mWaveLength</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mWaveHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mMaxRight</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mWaveHz</name></decl>;</decl_stmt>

    <comment type="line">// wave animation</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mAboveOffset</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mBlowOffset</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>RefreshProgressRunnable</name></type> <name>mRefreshProgressRunnable</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>, <decl><type ref="prev"/><name>bottom</name></decl>;</decl_stmt>
    <comment type="line">// Ï</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>omega</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Wave</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>waveViewStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Wave</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>mBlowWavePath</name></expr></argument>, <argument><expr><name>mBlowWavePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>mAboveWavePath</name></expr></argument>, <argument><expr><name>mAboveWavePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAboveWaveColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>aboveWaveColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mAboveWaveColor</name></name> <operator>=</operator> <name>aboveWaveColor</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setBlowWaveColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>blowWaveColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mBlowWaveColor</name></name> <operator>=</operator> <name>blowWaveColor</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Paint</name></type> <name>getAboveWavePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mAboveWavePaint</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Paint</name></type> <name>getBlowWavePaint</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mBlowWavePaint</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>initializeWaveSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>waveMultiple</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>waveHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>waveHz</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mWaveMultiple</name> <operator>=</operator> <call><name>getWaveMultiple</name><argument_list>(<argument><expr><name>waveMultiple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mWaveHeight</name> <operator>=</operator> <call><name>getWaveHeight</name><argument_list>(<argument><expr><name>waveHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mWaveHz</name> <operator>=</operator> <call><name>getWaveHz</name><argument_list>(<argument><expr><name>waveHz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBlowOffset</name> <operator>=</operator> <name>mWaveHeight</name> <operator>*</operator> <literal type="number">0.4f</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>,
                <argument><expr><name>mWaveHeight</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setLayoutParams</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>initializePainters</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mAboveWavePaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>mAboveWaveColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mAboveWavePaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>DEFAULT_ABOVE_WAVE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mAboveWavePaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mAboveWavePaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBlowWavePaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>mBlowWaveColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBlowWavePaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>DEFAULT_BLOW_WAVE_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBlowWavePaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBlowWavePaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>float</name></type> <name>getWaveMultiple</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>LARGE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_LENGTH_MULTIPLE_LARGE</name></expr>;</return>
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>MIDDLE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_LENGTH_MULTIPLE_MIDDLE</name></expr>;</return>
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>LITTLE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_LENGTH_MULTIPLE_LITTLE</name></expr>;</return>
        }</block></switch>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>getWaveHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>LARGE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_HEIGHT_LARGE</name></expr>;</return>
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>MIDDLE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_HEIGHT_MIDDLE</name></expr>;</return>
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>LITTLE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_HEIGHT_LITTLE</name></expr>;</return>
        }</block></switch>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>float</name></type> <name>getWaveHz</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>LARGE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_HZ_FAST</name></expr>;</return>
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>MIDDLE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_HZ_NORMAL</name></expr>;</return>
            <case>case <expr><name><name>WaveView</name><operator>.</operator><name>LITTLE</name></name></expr>:</case>
                <return>return <expr><name>WAVE_HZ_SLOW</name></expr>;</return>
        }</block></switch>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * calculate wave track
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>calculatePath</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mAboveWavePath</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mBlowWavePath</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getWaveOffset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mAboveWavePath</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>mMaxRight</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>X_SPACE</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call>(<name>float</name>) <argument_list>(<argument><expr><name>mWaveHeight</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>omega</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>mAboveOffset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>mWaveHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mAboveWavePath</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>mAboveWavePath</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mBlowWavePath</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>float</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>mMaxRight</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>X_SPACE</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>y</name> <operator>=</operator> <call>(<name>float</name>) <argument_list>(<argument><expr><name>mWaveHeight</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sin</name></name><argument_list>(<argument><expr><name>omega</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>mBlowOffset</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>mWaveHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mBlowWavePath</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>mBlowWavePath</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onWindowVisibilityChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>visibility</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onWindowVisibilityChanged</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>View</name><operator>.</operator><name>GONE</name></name> <operator>==</operator> <name>visibility</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>removeCallbacks</name><argument_list>(<argument><expr><name>mRefreshProgressRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>removeCallbacks</name><argument_list>(<argument><expr><name>mRefreshProgressRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mRefreshProgressRunnable</name> <operator>=</operator> <operator>new</operator> <call><name>RefreshProgressRunnable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>post</name><argument_list>(<argument><expr><name>mRefreshProgressRunnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDetachedFromWindow</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetachedFromWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onWindowFocusChanged</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hasWindowFocus</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onWindowFocusChanged</name></name><argument_list>(<argument><expr><name>hasWindowFocus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hasWindowFocus</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>mWaveLength</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>startWave</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>startWave</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mWaveLength</name> <operator>=</operator> <name>width</name> <operator>*</operator> <name>mWaveMultiple</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>getLeft</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>right</name> <operator>=</operator> <call><name>getRight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bottom</name> <operator>=</operator> <call><name>getBottom</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mMaxRight</name> <operator>=</operator> <name>right</name> <operator>+</operator> <name>X_SPACE</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>omega</name> <operator>=</operator> <name>PI2</name> <operator>/</operator> <name>mWaveLength</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>getWaveOffset</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mBlowOffset</name> <operator>&gt;</operator> <name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>-</operator> <literal type="number">100</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mBlowOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mBlowOffset</name> <operator>+=</operator> <name>mWaveHz</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>mAboveOffset</name> <operator>&gt;</operator> <name><name>Float</name><operator>.</operator><name>MAX_VALUE</name></name> <operator>-</operator> <literal type="number">100</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mAboveOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mAboveOffset</name> <operator>+=</operator> <name>mWaveHz</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <class><specifier>private</specifier> class <name>RefreshProgressRunnable</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{
        <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
            <synchronized>synchronized <init>(<expr><name><name>Wave</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>calculatePath</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>gap</name> <init>= <expr><literal type="number">16</literal> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>postDelayed</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><ternary><condition><expr><name>gap</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>gap</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>
        }</block></function>
    }</block></class>

}</block></class>
</unit>
