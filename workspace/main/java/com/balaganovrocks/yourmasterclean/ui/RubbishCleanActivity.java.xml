<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\ui\RubbishCleanActivity.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ServiceConnection</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ActivityInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ApplicationInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>IPackageDataObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>ads</name><operator>.</operator><name>AdListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>ads</name><operator>.</operator><name>InterstitialAd</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>ads</name><operator>.</operator><name>AdRequest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>Formatter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>etiennelawlor</name><operator>.</operator><name>quickreturn</name><operator>.</operator><name>library</name><operator>.</operator><name>enums</name><operator>.</operator><name>QuickReturnType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>etiennelawlor</name><operator>.</operator><name>quickreturn</name><operator>.</operator><name>library</name><operator>.</operator><name>listeners</name><operator>.</operator><name>QuickReturnListViewOnScrollListener</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nhaarman</name><operator>.</operator><name>listviewanimations</name><operator>.</operator><name>appearance</name><operator>.</operator><name>simple</name><operator>.</operator><name>SwingBottomInAnimationAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nhaarman</name><operator>.</operator><name>listviewanimations</name><operator>.</operator><name>itemmanipulation</name><operator>.</operator><name>swipedismiss</name><operator>.</operator><name>OnDismissCallback</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>adapter</name><operator>.</operator><name>RublishMemoryAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name><operator>.</operator><name>BaseSwipeBackActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>model</name><operator>.</operator><name>CacheListItem</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>model</name><operator>.</operator><name>StorageSize</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>service</name><operator>.</operator><name>CleanerService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name><operator>.</operator><name>SystemBarTintManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name><operator>.</operator><name>UIElementsHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>widget</name><operator>.</operator><name>textcounter</name><operator>.</operator><name>CounterView</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>widget</name><operator>.</operator><name>textcounter</name><operator>.</operator><name>formatters</name><operator>.</operator><name>DecimalFormatter</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>InjectView</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>OnClick</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>umeng</name><operator>.</operator><name>socialize</name><operator>.</operator><name>utils</name><operator>.</operator><name>BitmapUtils</name><operator>.</operator><name>cleanCache</name></name>;</import>
<import>import static <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ResourceBundle</name><operator>.</operator><name>clearCache</name></name>;</import>


<class><specifier>public</specifier> class <name>RubbishCleanActivity</name> <super><extends>extends <name>BaseSwipeBackActivity</name></extends> <implements>implements <name>OnDismissCallback</name>, <name><name>CleanerService</name><operator>.</operator><name>OnActionListener</name></name></implements></super> <block>{

    <decl_stmt><decl><type><name>ActionBar</name></type> <name>ab</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SCANING</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SCAN_FINIFSH</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROCESS_MAX</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROCESS_PROCESS</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"myLogs"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INITIAL_DELAY_MILLIS</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SwingBottomInAnimationAdapter</name></type> <name>swingBottomInAnimationAdapter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Resources</name></type> <name>res</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ptotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pprocess</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><specifier>private</specifier> <type><name>CleanerService</name></type> <name>mCleanerService</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>InterstitialAd</name></type> <name>mInterstitialAd</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mAlreadyScanned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mAlreadyCleaned</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>CACHE_APP</name> <init>= <expr><name><name>Long</name><operator>.</operator><name>MAX_VALUE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>CachePackageDataObserver</name></type> <name>mClearCacheObserver</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>listview</name></name></expr></argument>)</argument_list></annotation>
    <type><name>ListView</name></type> <name>mListView</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>empty</name></name></expr></argument>)</argument_list></annotation>
    <type><name>TextView</name></type> <name>mEmptyView</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></annotation>
    <type><name>RelativeLayout</name></type> <name>header</name></decl>;</decl_stmt>


    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>textCounter</name></name></expr></argument>)</argument_list></annotation>
    <type><name>CounterView</name></type> <name>textCounter</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>sufix</name></name></expr></argument>)</argument_list></annotation>
    <type><name>TextView</name></type> <name>sufix</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progressBar</name></name></expr></argument>)</argument_list></annotation>
    <type><name>View</name></type> <name>mProgressBar</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progressBarText</name></name></expr></argument>)</argument_list></annotation>
    <type><name>TextView</name></type> <name>mProgressBarText</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RublishMemoryAdapter</name></type> <name>rublishMemoryAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CacheListItem</name></argument>&gt;</argument_list></name></type> <name>mCacheListItem</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>bottom_lin</name></name></expr></argument>)</argument_list></annotation>
    <type><name>LinearLayout</name></type> <name>bottom_lin</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>clear_button</name></name></expr></argument>)</argument_list></annotation>
    <type><name>Button</name></type> <name>clearButton</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>ServiceConnection</name></type> <name>mServiceConnection</name> <init>= <expr><operator>new</operator> <class><super><name>ServiceConnection</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onServiceConnected</name><parameter_list>(<parameter><decl><type><name>ComponentName</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>IBinder</name></type> <name>service</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>mCleanerService</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>CleanerService</name><operator>.</operator><name>CleanerServiceBinder</name></name><operator>)</operator> <name>service</name><operator>)</operator><operator>.</operator><call><name>getService</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mCleanerService</name><operator>.</operator><name>setOnActionListener</name></name><argument_list>(<argument><expr><name><name>RubbishCleanActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//  updateStorageUsage();</comment>

            <if>if <condition>(<expr><operator>!</operator><call><name><name>mCleanerService</name><operator>.</operator><name>isScanning</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>mAlreadyScanned</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mCleanerService</name><operator>.</operator><name>scanCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onServiceDisconnected</name><parameter_list>(<parameter><decl><type><name>ComponentName</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>mCleanerService</name><operator>.</operator><name>setOnActionListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mCleanerService</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list>  <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_rublish_clean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>getActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//     applyKitKatTranslucency();</comment>

<comment type="line">//        StikkyHeaderBuilder.stickTo(mListView).setHeader(header)</comment>
<comment type="line">//                .minHeightHeaderPixel(0).build();</comment>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>int</name></type> <name>footerHeight</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>footer_height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>mListView</name><operator>.</operator><name>setEmptyView</name></name><argument_list>(<argument><expr><name>mEmptyView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rublishMemoryAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>RublishMemoryAdapter</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>mCacheListItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mListView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>rublishMemoryAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mListView</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><name>rublishMemoryAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mListView</name><operator>.</operator><name>setOnScrollListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuickReturnListViewOnScrollListener</name><argument_list>(<argument><expr><name><name>QuickReturnType</name><operator>.</operator><name>FOOTER</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bottom_lin</name></expr></argument>, <argument><expr><name>footerHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bindService</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>CleanerService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>mServiceConnection</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>BIND_AUTO_CREATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// for android 6.0+</comment>
        <expr_stmt><expr><name>mInterstitialAd</name> <operator>=</operator> <operator>new</operator> <call><name>InterstitialAd</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>setAdUnitId</name></name><argument_list>(<argument><expr><literal type="string">"ca-app-pub-4369038195513432/2986510514"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>loadAd</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AdRequest</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setRequestedOrientation</name><argument_list>(<argument><expr><name><name>ActivityInfo</name><operator>.</operator><name>SCREEN_ORIENTATION_PORTRAIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO Auto-generated method stub</comment>
        <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDismiss</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>viewGroup</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>ints</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>,
                                           <parameter><decl><type><name>String</name></type> <name><name>permissions</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>requestCode</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">1</literal></expr>:</case> <block>{
                <comment type="line">// If request is cancelled, the result arrays are empty.</comment>
                <if>if <condition>(<expr><name><name>grantResults</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal>
                        <operator>&amp;&amp;</operator> <name><name>grantResults</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"permission granted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>,<argument><expr><literal type="string">"Permission granted"</literal></expr></argument>,<argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// permission was granted, yay! Do the</comment>

                    <comment type="line">// contacts-related task you need to do.</comment>


                }</block></then> <else>else <block>{

                    <comment type="line">// permission denied, boo! Disable the</comment>
                    <comment type="line">// functionality that depends on this permission.</comment>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"permission dont granted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>,<argument><expr><literal type="string">"You need to accept the permission"</literal></expr></argument>,<argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <return>return;</return>
            }</block>

            <comment type="line">// other 'case' lines to check for other</comment>
            <comment type="line">// permissions this app might request</comment>
        }</block></switch>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScanStarted</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mProgressBarText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scanning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>showProgressBar</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScanProgressUpdated</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>mProgressBarText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scanning_m_of_n</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScanCompleted</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>CacheListItem</name></argument>&gt;</argument_list></name></type> <name>apps</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>showProgressBar</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mCacheListItem</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mCacheListItem</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>apps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rublishMemoryAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>apps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bottom_lin</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>medMemory</name> <init>= <expr><ternary><condition><expr><name>mCleanerService</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>mCleanerService</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>StorageSize</name></type> <name>mStorageSize</name> <init>= <expr><call><name><name>StorageUtil</name><operator>.</operator><name>convertStorageSize</name></name><argument_list>(<argument><expr><name>medMemory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setAutoFormat</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setFormatter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecimalFormatter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setAutoStart</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setStartValue</name></name><argument_list>(<argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setEndValue</name></name><argument_list>(<argument><expr><name><name>mStorageSize</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setIncrement</name></name><argument_list>(<argument><expr><literal type="number">5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// the amount the number increments at each time interval</comment>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>setTimeInterval</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// the time interval (ms) at which the text changes</comment>
            <expr_stmt><expr><call><name><name>sufix</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>mStorageSize</name><operator>.</operator><name>suffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//  textCounter.setSuffix(mStorageSize.suffix);</comment>
            <expr_stmt><expr><call><name><name>textCounter</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bottom_lin</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><operator>!</operator><name>mAlreadyScanned</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mAlreadyScanned</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

        }</block></then></if>


    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCleanStarted</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{

        <if>if <condition>(<expr><call><name>isProgressBarVisible</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>showProgressBar</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        }</block></then></if>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>RubbishCleanActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>isFinishing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>showDialogLoading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCleanCompleted</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>cacheSize</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"CLean compleate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>dismissDialogLoading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cleaned</name></name></expr></argument>, <argument><expr><call><name><name>Formatter</name><operator>.</operator><name>formatShortFileSize</name></name><argument_list>(
                <argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>cacheSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>bottom_lin</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mCacheListItem</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rublishMemoryAdapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    }</block></function>


    <comment type="block" format="javadoc">/**
     * Apply KitKat specific translucency.
     */</comment>
    <function><specifier>private</specifier> <type><name>void</name></type> <name>applyKitKatTranslucency</name><parameter_list>()</parameter_list> <block>{

        <comment type="line">// KitKat translucent navigation/status bar.</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setTranslucentStatus</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>SystemBarTintManager</name></type> <name>mTintManager</name> <init>= <expr><operator>new</operator> <call><name>SystemBarTintManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mTintManager</name><operator>.</operator><name>setStatusBarTintEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mTintManager</name><operator>.</operator><name>setNavigationBarTintEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// mTintManager.setTintColor(0xF00099CC);</comment>

            <expr_stmt><expr><call><name><name>mTintManager</name><operator>.</operator><name>setTintDrawable</name></name><argument_list>(<argument><expr><call><name><name>UIElementsHelper</name>
                    <operator>.</operator><name>getGeneralActionBarBackground</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>getActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBackgroundDrawable</name><argument_list>(
                    <argument><expr><call><name><name>UIElementsHelper</name><operator>.</operator><name>getGeneralActionBarBackground</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then></if>

    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>clearALLCache</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PackageInfo</name></argument>&gt;</argument_list></name></type> <name>packList</name> <init>= <expr><call><name>getPackageManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInstalledPackages</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>packList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>PackageInfo</name></type> <name>packInfo</name> <init>= <expr><call><name><name>packList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(  <expr><operator>(</operator><name><name>packInfo</name><operator>.</operator><name>applicationInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>ApplicationInfo</name><operator>.</operator><name>FLAG_SYSTEM</name></name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>appName</name> <init>= <expr><call><name><name>packInfo</name><operator>.</operator><name>applicationInfo</name><operator>.</operator><name>loadLabel</name></name><argument_list>(<argument><expr><call><name>getPackageManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <try>try <block>{
                    <comment type="line">// clearing app data</comment>
                    <comment type="line">//                    Runtime runtime = Runtime.getRuntime();</comment>
                    <comment type="line">//                    runtime.exec("pm clear "+packInfo.packageName);</comment>
                    <decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>createPackageContext</name><argument_list>(<argument><expr><name><name>packInfo</name><operator>.</operator><name>packageName</name></name></expr></argument>,<argument><expr><name><name>Context</name><operator>.</operator><name>CONTEXT_IGNORE_SECURITY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>deleteCache</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>OnClick</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>clear_button</name></name></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClickClear</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mCleanerService</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mCleanerService</name><operator>.</operator><name>isScanning</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>!</operator><call><name><name>mCleanerService</name><operator>.</operator><name>isCleaning</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>mCleanerService</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mAlreadyCleaned</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>cleanCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>clearALLCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>deleteCache</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>clearCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>ActivityCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
            <comment type="line">// TODO: Consider calling</comment>
            <comment type="line">//    ActivityCompat#requestPermissions</comment>
            <comment type="line">// here to request the missing permissions, and then overriding</comment>
            <comment type="line">//   public void onRequestPermissionsResult(int requestCode, String[] permissions,</comment>
            <comment type="line">//                                          int[] grantResults)</comment>
            <comment type="line">// to handle the case where the user grants the permission. See the documentation</comment>
            <comment type="line">// for ActivityCompat#requestPermissions for more details.</comment>
            <if>if <condition>(<expr><call><name><name>ActivityCompat</name><operator>.</operator><name>shouldShowRequestPermissionRationale</name></name><argument_list>( <argument><expr><name>this</name></expr></argument>,
                    <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{

                <comment type="line">// Show an expanation to the user *asynchronously* -- don't block</comment>
                <comment type="line">// this thread waiting for the user's response! After the user</comment>
                <comment type="line">// sees the explanation, try again to request the permission.</comment>

                <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name><name>RubbishCleanActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr>}</block></expr></argument>,
                        <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></then> <else>else <block>{

                <comment type="line">// No explanation needed, we can request the permission.</comment>

                <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name><name>RubbishCleanActivity</name><operator>.</operator><name>this</name></name></expr></argument>,
                        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr>}</block></expr></argument>,
                        <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// 1 is an int constant. The callback method gets the  result of the request.</comment>
            }</block></else></if>

            <return>return;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>mCleanerService</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mCleanerService</name><operator>.</operator><name>isScanning</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>!</operator><call><name><name>mCleanerService</name><operator>.</operator><name>isCleaning</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>mCleanerService</name><operator>.</operator><name>getCacheSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mAlreadyCleaned</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>mCleanerService</name><operator>.</operator><name>cleanCache</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>isLoaded</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><literal type="string">"TAG"</literal></expr></argument>, <argument><expr><literal type="string">"The interstitial wasn't loaded yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>setAdListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AdListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAdLoaded</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onAdLoaded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">// Code to be executed when an ad finishes loading.</comment>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAdFailedToLoad</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>errorCode</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onAdFailedToLoad"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">// Code to be executed when an ad request fails.</comment>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAdOpened</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onAdOpened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Code to be executed when the ad is displayed.</comment>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAdLeftApplication</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onAdLeftApplication"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// Code to be executed when the user has left the app.</comment>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAdClosed</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,<argument><expr><literal type="string">"onAdClosed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">// Code to be executed when when the interstitial ad is closed.</comment>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>setAdListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AdListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onAdClosed</name><parameter_list>()</parameter_list> <block>{
                <comment type="line">// Load the next interstitial.</comment>
                <expr_stmt><expr><call><name><name>mInterstitialAd</name><operator>.</operator><name>loadAd</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AdRequest</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getBaseContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ResultActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// do something</comment>
            }</block></function>

        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>deleteCache</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getCacheDir</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>deleteDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>deleteDir</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>dir</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>dir</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>children</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>list</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>children</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>success</name> <init>= <expr><call><name>deleteDir</name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name><name>children</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><then> <block>{
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></then></if>
            }</block></for>
            <return>return <expr><call><name><name>dir</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if<condition>(<expr><name>dir</name><operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>dir</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>dir</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>void</name></type> <name>setTranslucentStatus</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>on</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Window</name></type> <name>win</name> <init>= <expr><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name></name></type> <name>winParams</name> <init>= <expr><call><name><name>win</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_TRANSLUCENT_STATUS</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>on</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>winParams</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>bits</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>winParams</name><operator>.</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>bits</name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>win</name><operator>.</operator><name>setAttributes</name></name><argument_list>(<argument><expr><name>winParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isProgressBarVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>mProgressBar</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>showProgressBar</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>show</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>show</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mProgressBar</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mProgressBar</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                    <argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mProgressBar</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>unbindService</name><argument_list>(<argument><expr><name>mServiceConnection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>clearCache</name><parameter_list>()</parameter_list>
    <block>{
        <if>if <condition>(<expr><name>mClearCacheObserver</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>mClearCacheObserver</name><operator>=</operator><operator>new</operator> <call><name>CachePackageDataObserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>PackageManager</name></type> <name>mPM</name><init>=<expr><call><name>getPackageManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"rawtypes"</literal></expr></argument>)</argument_list></annotation>
        <type><specifier>final</specifier> <name><name>Class</name><index>[]</index></name></type> <name>classes</name><init>= <expr><block>{ <expr><name><name>Long</name><operator>.</operator><name>TYPE</name></name></expr>, <expr><name><name>IPackageDataObserver</name><operator>.</operator><name>class</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Long</name></type> <name>localLong</name><init>=<expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>CACHE_APP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try
        <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>localMethod</name><init>=
                    <expr><call><name><name>mPM</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"freeStorageAndNotify"</literal></expr></argument>, <argument><expr><name>classes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="block">/*
             * Start of inner try-catch block
             */</comment>
            <try>try
            <block>{
                <expr_stmt><expr><call><name><name>localMethod</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>mPM</name></expr></argument>, <argument><expr><name>localLong</name></expr></argument>, <argument><expr><name>mClearCacheObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{
                <comment type="line">// TODO Auto-generated catch block</comment>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{
                <comment type="line">// TODO Auto-generated catch block</comment>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch>
            <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>e</name></decl></parameter>)</parameter_list>
            <block>{
                <comment type="line">// TODO Auto-generated catch block</comment>
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
            <comment type="block">/*
             * End of inner try-catch block
             */</comment>
        }</block>
        <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e1</name></decl></parameter>)</parameter_list>
        <block>{
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>e1</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
    }</block></function><comment type="line">//End of clearCache() method</comment>

    <class><specifier>private</specifier> class <name>CachePackageDataObserver</name> <super><extends>extends <name><name>IPackageDataObserver</name><operator>.</operator><name>Stub</name></name></extends></super>
    <block>{
        <function><specifier>public</specifier> <type><name>void</name></type> <name>onRemoveCompleted</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>packageName</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>succeeded</name></decl></parameter>)</parameter_list>
        <block>{

        }</block></function><comment type="line">//End of onRemoveCompleted() method</comment>
    }</block></class><comment type="line">//End of CachePackageDataObserver instance inner class</comment>
}</block></class>
</unit>
