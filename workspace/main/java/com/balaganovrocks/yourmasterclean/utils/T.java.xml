<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\T.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Toastç»ä¸ç®¡çç±»
 * 
 * @author way
 * 
 */</comment>
<class><specifier>public</specifier> class <name>T</name> <block>{
	<comment type="line">// Toast</comment>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>Toast</name></type> <name>toast</name></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * ç­æ¶é´æ¾ç¤ºToast
	 * 
	 * @param context
	 * @param message
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showShort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>toast</name> <operator>=</operator> <call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// toast.setGravity(Gravity.CENTER, 0, 0);</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * ç­æ¶é´æ¾ç¤ºToast
	 * 
	 * @param context
	 * @param message
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showShort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>toast</name> <operator>=</operator> <call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// toast.setGravity(Gravity.CENTER, 0, 0);</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * é¿æ¶é´æ¾ç¤ºToast
	 * 
	 * @param context
	 * @param message
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showLong</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>toast</name> <operator>=</operator> <call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// toast.setGravity(Gravity.CENTER, 0, 0);</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * é¿æ¶é´æ¾ç¤ºToast
	 * 
	 * @param context
	 * @param message
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showLong</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>toast</name> <operator>=</operator> <call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//	toast.setGravity(Gravity.CENTER, 0, 0);</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * èªå®ä¹æ¾ç¤ºToastæ¶é´
	 * 
	 * @param context
	 * @param message
	 * @param duration
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>toast</name> <operator>=</operator> <call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// toast.setGravity(Gravity.CENTER, 0, 0);</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * èªå®ä¹æ¾ç¤ºToastæ¶é´
	 * 
	 * @param context
	 * @param message
	 * @param duration
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>==</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>toast</name> <operator>=</operator> <call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">// toast.setGravity(Gravity.CENTER, 0, 0);</comment>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/** Hide the toast, if any. */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>hideToast</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><literal type="null">null</literal> <operator>!=</operator> <name>toast</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>toast</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
}</block></class>
</unit>
