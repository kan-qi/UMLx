<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\StorageUtil.java"><comment type="block">/*
 * Copyright (C) 2012 www.amsoft.cn
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>StatFs</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>model</name><operator>.</operator><name>SDCardInfo</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>model</name><operator>.</operator><name>StorageSize</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>


<comment type="line">// TODO: Auto-generated Javadoc</comment>

<class><specifier>public</specifier> class <name>StorageUtil</name> <block>{

    <comment type="line">// storage, G M K B</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>convertStorage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>kb</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>mb</name> <init>= <expr><name>kb</name> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>gb</name> <init>= <expr><name>mb</name> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>gb</name></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%.1f GB"</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator> <name>size</name> <operator>/</operator> <name>gb</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>mb</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>size</name> <operator>/</operator> <name>mb</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>f</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="string">"%.0f MB"</literal></expr> </then><else>: <expr><literal type="string">"%.1f MB"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>kb</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>float</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator> <name>size</name> <operator>/</operator> <name>kb</name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>f</name> <operator>&gt;</operator> <literal type="number">100</literal></expr> ?</condition><then> <expr><literal type="string">"%.0f KB"</literal></expr> </then><else>: <expr><literal type="string">"%.1f KB"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else
            <block type="pseudo"><return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%d B"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>StorageSize</name></type> <name>convertStorageSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>kb</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>mb</name> <init>= <expr><name>kb</name> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>gb</name> <init>= <expr><name>mb</name> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StorageSize</name></type> <name>sto</name> <init>= <expr><operator>new</operator> <call><name>StorageSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>gb</name></expr>)</condition><then> <block>{

            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"GB"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>size</name> <operator>/</operator> <name>gb</name></expr>;</expr_stmt>
            <return>return <expr><name>sto</name></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>mb</name></expr>)</condition><then> <block>{

            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"MB"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>size</name> <operator>/</operator> <name>mb</name></expr>;</expr_stmt>

            <return>return <expr><name>sto</name></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <name>kb</name></expr>)</condition><then> <block>{


            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"KB"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>size</name> <operator>/</operator> <name>kb</name></expr>;</expr_stmt>

            <return>return <expr><name>sto</name></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>suffix</name></name> <operator>=</operator> <literal type="string">"B"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sto</name><operator>.</operator><name>value</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>

            <return>return <expr><name>sto</name></expr>;</return>
        }</block></else></if>


    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SDCardInfo</name></type> <name>getSDCardInfo</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// String sDcString = Environment.getExternalStorageState();</comment>

        <if>if <condition>(<expr><call><name><name>Environment</name><operator>.</operator><name>isExternalStorageRemovable</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>sDcString</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStorageState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>sDcString</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>MEDIA_MOUNTED</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>File</name></type> <name>pathFile</name> <init>= <expr><call><name><name>Environment</name>
                        <operator>.</operator><name>getExternalStorageDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <try>try <block>{
                    <decl_stmt><decl><type><name>StatFs</name></type> <name>statfs</name> <init>= <expr><operator>new</operator> <call><name>StatFs</name><argument_list>(
                            <argument><expr><call><name><name>pathFile</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// è·åSDCardä¸BLOCKæ»æ°</comment>
                    <decl_stmt><decl><type><name>long</name></type> <name>nTotalBlocks</name> <init>= <expr><call><name><name>statfs</name><operator>.</operator><name>getBlockCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// è·åSDCardä¸æ¯ä¸ªblockçSIZE</comment>
                    <decl_stmt><decl><type><name>long</name></type> <name>nBlocSize</name> <init>= <expr><call><name><name>statfs</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// è·åå¯ä¾ç¨åºä½¿ç¨çBlockçæ°é</comment>
                    <decl_stmt><decl><type><name>long</name></type> <name>nAvailaBlock</name> <init>= <expr><call><name><name>statfs</name><operator>.</operator><name>getAvailableBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// è·åå©ä¸çææBlockçæ°é(åæ¬é¢ççä¸è¬ç¨åºæ æ³ä½¿ç¨çå)</comment>
                    <decl_stmt><decl><type><name>long</name></type> <name>nFreeBlock</name> <init>= <expr><call><name><name>statfs</name><operator>.</operator><name>getFreeBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>SDCardInfo</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>SDCardInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <comment type="line">// è®¡ç®SDCard æ»å®¹éå¤§å°MB</comment>
                    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>total</name></name> <operator>=</operator> <name>nTotalBlocks</name> <operator>*</operator> <name>nBlocSize</name></expr>;</expr_stmt>

                    <comment type="line">// è®¡ç® SDCard å©ä½å¤§å°MB</comment>
                    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name>nAvailaBlock</name> <operator>*</operator> <name>nBlocSize</name></expr>;</expr_stmt>

                    <return>return <expr><name>info</name></expr>;</return>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalArgumentException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

                }</block></catch></try>
            }</block></then></if>
        }</block></then></if>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SDCardInfo</name></type> <name>getSystemSpaceInfo</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>path</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getDataDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// File path = context.getCacheDir().getAbsoluteFile();</comment>
        <decl_stmt><decl><type><name>StatFs</name></type> <name>stat</name> <init>= <expr><operator>new</operator> <call><name>StatFs</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>blockSize</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalBlocks</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getBlockCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>availableBlocks</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getAvailableBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>totalSize</name> <init>= <expr><name>blockSize</name> <operator>*</operator> <name>totalBlocks</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>availSize</name> <init>= <expr><name>availableBlocks</name> <operator>*</operator> <name>blockSize</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SDCardInfo</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>SDCardInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>total</name></name> <operator>=</operator> <name>totalSize</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name>availSize</name></expr>;</expr_stmt>
        <return>return <expr><name>info</name></expr>;</return>


    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SDCardInfo</name></type> <name>getRootSpaceInfo</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>File</name></type> <name>path</name> <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getRootDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StatFs</name></type> <name>stat</name> <init>= <expr><operator>new</operator> <call><name>StatFs</name><argument_list>(<argument><expr><call><name><name>path</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>blockSize</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>totalBlocks</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getBlockCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>availableBlocks</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getAvailableBlocks</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>totalSize</name> <init>= <expr><name>blockSize</name> <operator>*</operator> <name>totalBlocks</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>availSize</name> <init>= <expr><name>availableBlocks</name> <operator>*</operator> <name>blockSize</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// è·åSDCardä¸æ¯ä¸ªblockçSIZE</comment>
        <decl_stmt><decl><type><name>long</name></type> <name>nBlocSize</name> <init>= <expr><call><name><name>stat</name><operator>.</operator><name>getBlockSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SDCardInfo</name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name>SDCardInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// è®¡ç®SDCard æ»å®¹éå¤§å°MB</comment>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>total</name></name> <operator>=</operator> <name>totalSize</name></expr>;</expr_stmt>

        <comment type="line">// è®¡ç® SDCard å©ä½å¤§å°MB</comment>
        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>free</name></name> <operator>=</operator> <name>availSize</name></expr>;</expr_stmt>
        <return>return <expr><name>info</name></expr>;</return>

    }</block></function>
}</block></class>
</unit>
