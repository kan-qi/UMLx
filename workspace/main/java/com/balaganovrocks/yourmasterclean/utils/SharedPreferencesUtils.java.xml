<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\SharedPreferencesUtils.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>

<class><specifier>public</specifier> class <name>SharedPreferencesUtils</name> <block>{
    <comment type="block" format="javadoc">/**
     * ä¿å­å¨ææºéé¢çæä»¶å
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILE_NAME</name> <init>= <expr><literal type="string">"CONFIG"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * ä¿å­æ°æ®çæ¹æ³ï¼æä»¬éè¦æ¿å°ä¿å­æ°æ®çå·ä½ç±»åï¼ç¶åæ ¹æ®ç±»åè°ç¨ä¸åçä¿å­æ¹æ³
     *
     * @param context
     * @param key
     * @param object
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setParam</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>object</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>FILE_NAME</name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>sp</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><literal type="string">"String"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><literal type="string">"Integer"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><literal type="string">"Boolean"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><literal type="string">"Float"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Float</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><literal type="string">"Long"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Long</name><operator>)</operator> <name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * å¾å°ä¿å­æ°æ®çæ¹æ³ï¼æä»¬æ ¹æ®é»è®¤å¼å¾å°ä¿å­çæ°æ®çå·ä½ç±»åï¼ç¶åè°ç¨ç¸å¯¹äºçæ¹æ³è·åå¼
     *
     * @param context
     * @param key
     * @param defaultObject
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Object</name></type> <name>getParam</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>,
                                  <parameter><decl><type><name>Object</name></type> <name>defaultObject</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>defaultObject</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>FILE_NAME</name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><literal type="string">"String"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator> <name>defaultObject</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><literal type="string">"Integer"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Integer</name><operator>)</operator> <name>defaultObject</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><literal type="string">"Boolean"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Boolean</name><operator>)</operator> <name>defaultObject</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><literal type="string">"Float"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Float</name><operator>)</operator> <name>defaultObject</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><literal type="string">"Long"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><operator>(</operator><name>Long</name><operator>)</operator> <name>defaultObject</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif></if>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMemberId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>FILE_NAME</name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"memberId"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasBind</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>FILE_NAME</name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>flag</name> <init>= <expr><call><name><name>sp</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"bind_flag"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><literal type="string">"ok"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setIsShortCut</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Boolean</name></type> <name>isLogin</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>FILE_NAME</name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>SharedPreferences</name><operator>.</operator><name>Editor</name></name></type> <name>editor</name> <init>= <expr><call><name><name>sp</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><literal type="string">"isShortCut"</literal></expr></argument>, <argument><expr><name>isLogin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>editor</name><operator>.</operator><name>commit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Boolean</name></type> <name>isShortCut</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>FILE_NAME</name></expr></argument>,
                <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>sp</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="string">"isShortCut"</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}</block></class>
</unit>
