<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\ViewUtil.java"><comment type="block">/*
 * Copyright (C) 2012 www.amsoft.cn
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name><operator>.</operator><name>MeasureSpec</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewParent</name></name>;</import>

<comment type="line">// TODO: Auto-generated Javadoc</comment>


<class><specifier>public</specifier> class <name>ViewUtil</name> <block>{

	<comment type="block" format="javadoc">/**
	 * æ æå¼
	 */</comment>
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INVALID</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block" format="javadoc">/**
	 * æè¿°ï¼dipè½¬æ¢ä¸ºpx.
	 * 
	 * @param context
	 *            the context
	 * @param dipValue
	 *            the dip value
	 * @return pxå¼
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>dip2px</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dipValue</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>mDisplayMetrics</name> <init>= <expr><call><name><name>AppUtil</name><operator>.</operator><name>getDisplayMetrics</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><call><name>applyDimension</name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>dipValue</name></expr></argument>,
				<argument><expr><name>mDisplayMetrics</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	
	
	<comment type="block" format="javadoc">/**
     * æè¿°ï¼pxè½¬æ¢ä¸ºdip.
     *
     * @param context the context
     * @param pxValue the px value
     * @return dipå¼
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>px2dip</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>pxValue</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>mDisplayMetrics</name> <init>= <expr><call><name><name>AppUtil</name><operator>.</operator><name>getDisplayMetrics</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>pxValue</name> <operator>/</operator> <name><name>mDisplayMetrics</name><operator>.</operator><name>density</name></name></expr>;</return>
    }</block></function>
	
	<comment type="block" format="javadoc">/**
	 * TypedValueå®æ¹æºç ä¸­çç®æ³ï¼ä»»æåä½è½¬æ¢ä¸ºPXåä½
	 * @param unit  TypedValue.COMPLEX_UNIT_DIP
	 * @param value å¯¹åºåä½çå¼
	 * @param metrics å¯åº¦
	 * @return pxå¼
	 */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>applyDimension</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>,
                                       <parameter><decl><type><name>DisplayMetrics</name></type> <name>metrics</name></decl></parameter>)</parameter_list><block>{
        <switch>switch <condition>(<expr><name>unit</name></expr>)</condition> <block>{
        <case>case <expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_PX</name></name></expr>:</case>
            <return>return <expr><name>value</name></expr>;</return>
        <case>case <expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr>:</case>
            <return>return <expr><name>value</name> <operator>*</operator> <name><name>metrics</name><operator>.</operator><name>density</name></name></expr>;</return>
        <case>case <expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_SP</name></name></expr>:</case>
            <return>return <expr><name>value</name> <operator>*</operator> <name><name>metrics</name><operator>.</operator><name>scaledDensity</name></name></expr>;</return>
        <case>case <expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_PT</name></name></expr>:</case>
            <return>return <expr><name>value</name> <operator>*</operator> <name><name>metrics</name><operator>.</operator><name>xdpi</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">72</literal><operator>)</operator></expr>;</return>
        <case>case <expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_IN</name></name></expr>:</case>
            <return>return <expr><name>value</name> <operator>*</operator> <name><name>metrics</name><operator>.</operator><name>xdpi</name></name></expr>;</return>
        <case>case <expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_MM</name></name></expr>:</case>
            <return>return <expr><name>value</name> <operator>*</operator> <name><name>metrics</name><operator>.</operator><name>xdpi</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal><operator>/</operator><literal type="number">25.4f</literal><operator>)</operator></expr>;</return>
        }</block></switch>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

	<comment type="block" format="javadoc">/**
	 * æµéè¿ä¸ªview æåéè¿getMeasuredWidth()è·åå®½åº¦åé«åº¦.
	 * 
	 * @param view
	 *            è¦æµéçview
	 * @return æµéè¿çview
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>measureView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>p</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>new</operator> <call><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>,
					<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<decl_stmt><decl><type><name>int</name></type> <name>childWidthSpec</name> <init>= <expr><call><name><name>ViewGroup</name><operator>.</operator><name>getChildMeasureSpec</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lpHeight</name> <init>= <expr><name><name>p</name><operator>.</operator><name>height</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>childHeightSpec</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>lpHeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>childHeightSpec</name> <operator>=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>lpHeight</name></expr></argument>,
					<argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>childHeightSpec</name> <operator>=</operator> <call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
					<argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>UNSPECIFIED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><name>childWidthSpec</name></expr></argument>, <argument><expr><name>childHeightSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * è·å¾è¿ä¸ªViewçå®½åº¦ æµéè¿ä¸ªviewï¼æåéè¿getMeasuredWidth()è·åå®½åº¦.
	 * 
	 * @param view
	 *            è¦æµéçview
	 * @return æµéè¿çviewçå®½åº¦
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getViewWidth</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>measureView</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>view</name><operator>.</operator><name>getMeasuredWidth</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * è·å¾è¿ä¸ªViewçé«åº¦ æµéè¿ä¸ªviewï¼æåéè¿getMeasuredHeight()è·åé«åº¦.
	 * 
	 * @param view
	 *            è¦æµéçview
	 * @return æµéè¿çviewçé«åº¦
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getViewHeight</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>measureView</name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name><name>view</name><operator>.</operator><name>getMeasuredHeight</name></name><argument_list>()</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block" format="javadoc">/**
	 * ä»ç¶äº²å¸å±ä¸­ç§»é¤èªå·±
	 * 
	 * @param v
	 */</comment>
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removeSelfFromParent</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>ViewParent</name></type> <name>parent</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>getParent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>parent</name> <operator>instanceof</operator> <name>ViewGroup</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>(</operator><operator>(</operator><name>ViewGroup</name><operator>)</operator> <name>parent</name><operator>)</operator><operator>.</operator><call><name>removeView</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></function>

}</block></class>
</unit>
