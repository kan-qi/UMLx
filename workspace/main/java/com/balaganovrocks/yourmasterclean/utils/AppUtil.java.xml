<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\AppUtil.java"><comment type="block">/*
 * Copyright (C) 2012 www.amsoft.cn
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name><operator>.</operator><name>MemoryInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name><operator>.</operator><name>RunningAppProcessInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name><operator>.</operator><name>RunningServiceInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ApplicationInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>location</name><operator>.</operator><name>LocationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>NetworkInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputMethodManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>bean</name><operator>.</operator><name>AppProcessInfo</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>bean</name><operator>.</operator><name>ProcessInfo</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>DataOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileFilter</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>


<comment type="line">// TODO: Auto-generated Javadoc</comment>

<comment type="block" format="javadoc">/**

 */</comment>
<class><specifier>public</specifier> class <name>AppUtil</name> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>mProcessList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>PackageManager</name></type> <name>manager</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PackageInfo</name></type> <name>info</name> <init>= <expr><call><name><name>manager</name><operator>.</operator><name>getPackageInfo</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>version</name> <init>= <expr><name><name>info</name><operator>.</operator><name>versionName</name></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>version</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="string">"1.0"</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>PackageManager</name></type> <name>manager</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PackageInfo</name></type> <name>info</name> <init>= <expr><call><name><name>manager</name><operator>.</operator><name>getPackageInfo</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>versionCode</name> <init>= <expr><name><name>info</name><operator>.</operator><name>versionCode</name></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><name>versionCode</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼æå¼å¹¶å®è£æä»¶.
     *
     * @param context the context
     * @param file    apkæä»¶è·¯å¾
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>installApk</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setDataAndType</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"application/vnd.android.package-archive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼å¸è½½ç¨åº.
     *
     * @param context     the context
     * @param packageName åå
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>uninstallApk</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>packageName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_DELETE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Uri</name></type> <name>packageURI</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"package:"</literal> <operator>+</operator> <name>packageName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>packageURI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * ç¨æ¥å¤æ­æå¡æ¯å¦è¿è¡.
     *
     * @param context   the context
     * @param className å¤æ­çæå¡åå­ "com.xxx.xx..XXXService"
     * @return true å¨è¿è¡ false ä¸å¨è¿è¡
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isServiceRunning</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>isRunning</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RunningServiceInfo</name></argument>&gt;</argument_list></name></type> <name>servicesList</name> <init>= <expr><call><name><name>activityManager</name>
                <operator>.</operator><name>getRunningServices</name></name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>RunningServiceInfo</name></argument>&gt;</argument_list></name></type> <name>l</name> <init>= <expr><call><name><name>servicesList</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><call><name><name>l</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>RunningServiceInfo</name></type> <name>si</name> <init>= <expr><operator>(</operator><name>RunningServiceInfo</name><operator>)</operator> <call><name><name>l</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>className</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>si</name><operator>.</operator><name>service</name><operator>.</operator><name>getClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>isRunning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></while>
        <return>return <expr><name>isRunning</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * åæ­¢æå¡.
     *
     * @param context   the context
     * @param className the class name
     * @return true, if successful
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>stopRunningService</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>className</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent_service</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>ret</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>intent_service</name> <operator>=</operator> <operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><name>className</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <if>if <condition>(<expr><name>intent_service</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>stopService</name></name><argument_list>(<argument><expr><name>intent_service</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>ret</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gets the number of cores available in this device, across all processors.
     * Requires: Ability to peruse the filesystem at "/sys/devices/system/cpu"
     *
     * @return The number of cores, or 1 if failed to get result
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNumCores</name><parameter_list>()</parameter_list> <block>{
        <try>try <block>{
            <comment type="line">// Get directory containing CPU info</comment>
            <decl_stmt><decl><type><name>File</name></type> <name>dir</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><literal type="string">"/sys/devices/system/cpu/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Filter to only list the devices we care about</comment>
            <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>files</name> <init>= <expr><call><name><name>dir</name><operator>.</operator><name>listFiles</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>FileFilter</name></super><argument_list>()</argument_list> <block>{

                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>boolean</name></type> <name>accept</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>pathname</name></decl></parameter>)</parameter_list> <block>{
                    <comment type="line">// Check if filename is "cpu", followed by a single digit</comment>
                    <comment type="line">// number</comment>
                    <if>if <condition>(<expr><call><name><name>Pattern</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"cpu[0-9]"</literal></expr></argument>, <argument><expr><call><name><name>pathname</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    }</block></then></if>
                    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
                }</block></function>

            }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// Return the number of cores (virtual CPU devices)</comment>
            <return>return <expr><name><name>files</name><operator>.</operator><name>length</name></name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼å¤æ­ç½ç»æ¯å¦ææ.
     *
     * @param context the context
     * @return true, if is network available
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNetworkAvailable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>ConnectivityManager</name></type> <name>connectivity</name> <init>= <expr><operator>(</operator><name>ConnectivityManager</name><operator>)</operator> <call><name><name>context</name>
                    <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CONNECTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>connectivity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>NetworkInfo</name></type> <name>info</name> <init>= <expr><call><name><name>connectivity</name><operator>.</operator><name>getActiveNetworkInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>info</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>info</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name><name>info</name><operator>.</operator><name>getState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>NetworkInfo</name><operator>.</operator><name>State</name><operator>.</operator><name>CONNECTED</name></name></expr>)</condition><then> <block>{
                        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Gpsæ¯å¦æå¼ éè¦&lt;uses-permission
     * android:name="android.permission.ACCESS_FINE_LOCATION" /&gt;æé
     *
     * @param context the context
     * @return true, if is gps enabled
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isGpsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>LocationManager</name></type> <name>lm</name> <init>= <expr><operator>(</operator><name>LocationManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LOCATION_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>lm</name><operator>.</operator><name>isProviderEnabled</name></name><argument_list>(<argument><expr><name><name>LocationManager</name><operator>.</operator><name>GPS_PROVIDER</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * å¤æ­å½åç½ç»æ¯å¦æ¯ç§»å¨æ°æ®ç½ç».
     *
     * @param context the context
     * @return boolean
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMobile</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ConnectivityManager</name></type> <name>connectivityManager</name> <init>= <expr><operator>(</operator><name>ConnectivityManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CONNECTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>NetworkInfo</name></type> <name>activeNetInfo</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getActiveNetworkInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>activeNetInfo</name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <call><name><name>activeNetInfo</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>ConnectivityManager</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * å¯¼å¥æ°æ®åº.
     *
     * @param context the context
     * @param dbName  the db name
     * @param rawRes  the raw res
     * @return true, if successful
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>importDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>dbName</name></decl></parameter>,
                                         <parameter><decl><type><name>int</name></type> <name>rawRes</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>buffer_size</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>dbPath</name> <init>= <expr><literal type="string">"/data/data/"</literal> <operator>+</operator> <call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call>
                    <operator>+</operator> <literal type="string">"/databases/"</literal> <operator>+</operator> <name>dbName</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>File</name></type> <name>dbfile</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dbPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// å¤æ­æ°æ®åºæä»¶æ¯å¦å­å¨ï¼è¥ä¸å­å¨åæ§è¡å¯¼å¥ï¼å¦åç´æ¥æå¼æ°æ®åº</comment>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>dbfile</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// æ¬²å¯¼å¥çæ°æ®åº</comment>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>dbfile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>dbfile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mkdirs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>dbfile</name><operator>.</operator><name>createNewFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>is</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openRawResource</name><argument_list>(<argument><expr><name>rawRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>fos</name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>dbfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>buffer_size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><operator>(</operator><name>count</name> <operator>=</operator> <call><name><name>is</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>fos</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>fos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                }</block></catch></try>
            }</block></then></if>
            <if>if <condition>(<expr><name>is</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>is</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>flag</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * è·åå±å¹å°ºå¯¸ä¸å¯åº¦.
     *
     * @param context the context
     * @return mDisplayMetrics
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DisplayMetrics</name></type> <name>getDisplayMetrics</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Resources</name></type> <name>mResources</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>context</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mResources</name> <operator>=</operator> <call><name><name>Resources</name><operator>.</operator><name>getSystem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>mResources</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <comment type="line">// DisplayMetrics{density=1.5, width=480, height=854, scaledDensity=1.5,</comment>
        <comment type="line">// xdpi=160.421, ydpi=159.497}</comment>
        <comment type="line">// DisplayMetrics{density=2.0, width=720, height=1280,</comment>
        <comment type="line">// scaledDensity=2.0, xdpi=160.42105, ydpi=160.15764}</comment>
        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>mDisplayMetrics</name> <init>= <expr><call><name><name>mResources</name><operator>.</operator><name>getDisplayMetrics</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>mDisplayMetrics</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æå¼é®ç.
     *
     * @param context the context
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showSoftInput</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>inputMethodManager</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>inputMethodManager</name><operator>.</operator><name>toggleSoftInput</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
                <argument><expr><name><name>InputMethodManager</name><operator>.</operator><name>HIDE_NOT_ALWAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * å³é­é®çäºä»¶.
     *
     * @param context the context
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>closeSoftInput</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>inputMethodManager</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>inputMethodManager</name> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name><operator>)</operator><operator>.</operator><call><name>getCurrentFocus</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>inputMethodManager</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Activity</name><operator>)</operator> <name>context</name><operator>)</operator>
                            <operator>.</operator><call><name>getCurrentFocus</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowToken</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>InputMethodManager</name><operator>.</operator><name>HIDE_NOT_ALWAYS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * è·ååä¿¡æ¯.
     *
     * @param context the context
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PackageInfo</name></type> <name>getPackageInfo</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PackageInfo</name></type> <name>info</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><name>packageName</name></expr></argument>,
                    <argument><expr><name><name>PackageManager</name><operator>.</operator><name>GET_ACTIVITIES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>info</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getPackage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>PackageManager</name></type> <name>packageManager</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name><name>packageManager</name><operator>.</operator><name>getPackageInfo</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <return>return <expr><name><name>packageInfo</name><operator>.</operator><name>packageName</name></name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        }</block></catch></try>
        <return>return <expr><literal type="string">""</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼è·åè¿è¡çè¿ç¨åè¡¨.
     *
     * @param context
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppProcessInfo</name></argument>&gt;</argument_list></name></type> <name>getRunningAppProcesses</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppProcessInfo</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PackageManager</name></type> <name>packageManager</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>activityManager</name> <operator>=</operator> <operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name>
                    <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>packageManager</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getPackageManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>list</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>AppProcessInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// ææè¿è¡çè¿ç¨</comment>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>RunningAppProcessInfo</name></argument>&gt;</argument_list></name></type> <name>appProcessList</name> <init>= <expr><call><name><name>activityManager</name>
                    <operator>.</operator><name>getRunningAppProcesses</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ApplicationInfo</name></type> <name>appInfo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>AppProcessInfo</name></type> <name>abAppProcessInfo</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>PackageInfo</name></type> <name>packageInfo</name> <init>= <expr><call><name>getPackageInfo</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>mProcessList</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mProcessList</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>mProcessList</name> <operator>=</operator> <call><name>getProcessRunningInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>RunningAppProcessInfo</name></type> <name>appProcessInfo</name> <range>: <expr><name>appProcessList</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><name>abAppProcessInfo</name> <operator>=</operator> <operator>new</operator> <call><name>AppProcessInfo</name><argument_list>(
                        <argument><expr><name><name>appProcessInfo</name><operator>.</operator><name>processName</name></name></expr></argument>, <argument><expr><name><name>appProcessInfo</name><operator>.</operator><name>pid</name></name></expr></argument>,
                        <argument><expr><name><name>appProcessInfo</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <call><name>getApplicationInfo</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                        <argument><expr><name><name>appProcessInfo</name><operator>.</operator><name>processName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// appInfo.flags;</comment>

                <if>if <condition>(<expr><name>appInfo</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

                    <if>if <condition>(<expr><operator>(</operator><name><name>appInfo</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name><name>ApplicationInfo</name><operator>.</operator><name>FLAG_SYSTEM</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>isSystem</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>isSystem</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    }</block></else></if>
                    <decl_stmt><decl><type><name>Drawable</name></type> <name>icon</name> <init>= <expr><call><name><name>appInfo</name><operator>.</operator><name>loadIcon</name></name><argument_list>(<argument><expr><name>packageManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>appName</name> <init>= <expr><call><name><name>appInfo</name><operator>.</operator><name>loadLabel</name></name><argument_list>(<argument><expr><name>packageManager</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>appName</name></name> <operator>=</operator> <name>appName</name></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <comment type="line">// :æå¡çå½å</comment>
                    <if>if <condition>(<expr><call><name><name>appProcessInfo</name><operator>.</operator><name>processName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>appInfo</name> <operator>=</operator> <call><name>getApplicationInfo</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                                <argument><expr><call><name><name>appProcessInfo</name><operator>.</operator><name>processName</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>Drawable</name></type> <name>icon</name> <init>= <expr><call><name><name>appInfo</name><operator>.</operator><name>loadIcon</name></name><argument_list>(<argument><expr><name>packageManager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>icon</name></name> <operator>=</operator> <name>icon</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>isSystem</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>appName</name></name> <operator>=</operator> <name><name>appProcessInfo</name><operator>.</operator><name>processName</name></name></expr>;</expr_stmt>
                }</block></else></if>

				<comment type="block">/*
                 * AbPsRow psRow = getPsRow(appProcessInfo.processName);
				 * if(psRow!=null){ abAppProcessInfo.memory = psRow.mem; }
				 */</comment>

                <decl_stmt><decl><type><name>ProcessInfo</name></type> <name>processInfo</name> <init>= <expr><call><name>getMemInfo</name><argument_list>(<argument><expr><name><name>appProcessInfo</name><operator>.</operator><name>processName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name><name>processInfo</name><operator>.</operator><name>memory</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>processInfo</name><operator>.</operator><name>cpu</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>processInfo</name><operator>.</operator><name>status</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>abAppProcessInfo</name><operator>.</operator><name>threadsCount</name></name> <operator>=</operator> <name><name>processInfo</name><operator>.</operator><name>threadsCount</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>abAppProcessInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>list</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼æ ¹æ®è¿ç¨åè¿ååºç¨ç¨åº.
     *
     * @param context
     * @param processName
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ApplicationInfo</name></type> <name>getApplicationInfo</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                                                     <parameter><decl><type><name>String</name></type> <name>processName</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>processName</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>PackageManager</name></type> <name>packageManager</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>getPackageManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ApplicationInfo</name></argument>&gt;</argument_list></name></type> <name>appList</name> <init>= <expr><call><name><name>packageManager</name>
                <operator>.</operator><name>getInstalledApplications</name></name><argument_list>(<argument><expr><name><name>PackageManager</name><operator>.</operator><name>GET_UNINSTALLED_PACKAGES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ApplicationInfo</name></type> <name>appInfo</name> <range>: <expr><name>appList</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>processName</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>appInfo</name><operator>.</operator><name>processName</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>appInfo</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼killè¿ç¨.
     *
     * @param context
     * @param pid
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>killProcesses</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>,
                                     <parameter><decl><type><name>String</name></type> <name>processName</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>String</name></type> <name>cmd</name> <init>= <expr><literal type="string">"kill -9 "</literal> <operator>+</operator> <name>pid</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>Command</name> <init>= <expr><literal type="string">"am force-stop "</literal> <operator>+</operator> <name>processName</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Process</name></type> <name>sh</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>os</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>sh</name> <operator>=</operator> <call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"su"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>os</name> <operator>=</operator> <operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><call><name><name>sh</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>Command</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="string">"exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
            <expr_stmt><expr><call><name><name>sh</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// TODO Auto-generated catch block</comment>
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <comment type="line">// AbLogUtil.d(AbAppUtil.class, "#kill -9 "+pid);</comment>
        <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>processName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>packageName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><call><name><name>processName</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>packageName</name> <operator>=</operator> <name>processName</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>packageName</name> <operator>=</operator> <call><name><name>processName</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>activityManager</name><operator>.</operator><name>killBackgroundProcesses</name></name><argument_list>(<argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//</comment>
            <decl_stmt><decl><type><name>Method</name></type> <name>forceStopPackage</name> <init>= <expr><call><name><name>activityManager</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>getDeclaredMethod</name><argument_list>(<argument><expr><literal type="string">"forceStopPackage"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>forceStopPackage</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>forceStopPackage</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>activityManager</name></expr></argument>, <argument><expr><name>packageName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

    }</block></function>

    <comment type="line">// /**</comment>
    <comment type="line">// *</comment>
    <comment type="line">// * æè¿°ï¼æ§è¡PS.</comment>
    <comment type="line">// */</comment>
    <comment type="line">// public static List&lt;AbPsRow&gt; ps() {</comment>
    <comment type="line">// List&lt;AbPsRow&gt; psRowlist = new ArrayList&lt;AbPsRow&gt;();</comment>
    <comment type="line">// String ps = runScript("ps");</comment>
    <comment type="line">// String[] lines = ps.split("\n");</comment>
    <comment type="line">// psRowlist = new ArrayList&lt;AbPsRow&gt;();</comment>
    <comment type="line">// for (String line : lines) {</comment>
    <comment type="line">// AbPsRow row = new AbPsRow(line);</comment>
    <comment type="line">// if (row.pid != null) psRowlist.add(row);</comment>
    <comment type="line">// }</comment>
    <comment type="line">// return psRowlist;</comment>
    <comment type="line">// }</comment>
    <comment type="line">//</comment>
    <comment type="line">// /**</comment>
    <comment type="line">// *</comment>
    <comment type="line">// * æè¿°ï¼è·å¾è¿ä¸ªè¿ç¨çpsä¿¡æ¯.</comment>
    <comment type="line">// * @param processName</comment>
    <comment type="line">// * @return</comment>
    <comment type="line">// */</comment>
    <comment type="line">// public static AbPsRow getPsRow(String processName) {</comment>
    <comment type="line">// List&lt;AbPsRow&gt; psRowlist = ps();</comment>
    <comment type="line">// for (AbPsRow row : psRowlist) {</comment>
    <comment type="line">// if (processName.equals(row.cmd)) {</comment>
    <comment type="line">// return row;</comment>
    <comment type="line">// }</comment>
    <comment type="line">// }</comment>
    <comment type="line">// return null;</comment>
    <comment type="line">// }</comment>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼æ ¹æ®è¿ç¨åè·åCPUååå­ä¿¡æ¯.
     *
     * @param processName
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProcessInfo</name></type> <name>getMemInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>processName</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ProcessInfo</name></type> <name>process</name> <init>= <expr><operator>new</operator> <call><name>ProcessInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mProcessList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mProcessList</name> <operator>=</operator> <call><name>getProcessRunningInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>processNameTemp</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>mProcessList</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iterator</name>
                <operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr/>)</control> <block>{
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>item</name> <init>= <expr><operator>(</operator><name><name>String</name><index>[]</index></name><operator>)</operator> <call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>processNameTemp</name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
            <comment type="line">// AbLogUtil.d(AbAppUtil.class,</comment>
            <comment type="line">// "##"+item[9]+",NAME:"+processNameTemp);</comment>
            <if>if <condition>(<expr><name>processNameTemp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>processNameTemp</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>processName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <comment type="line">// AbLogUtil.d(AbAppUtil.class,</comment>
                <comment type="line">// "##"+item[9]+","+process.memory);</comment>
                <comment type="line">// Process ID</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// CPU</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// S</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// thread</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>threadsCount</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// Mem</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>mem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"M"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"K"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
                <comment type="line">// UID</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// Process Name</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>processName</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name><name>process</name><operator>.</operator><name>memory</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>AppUtil</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"##"</literal> <operator>+</operator> <name>processName</name> <operator>+</operator> <literal type="string">",top -n 1 Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>process</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼æ ¹æ®è¿ç¨IDè·åCPUååå­ä¿¡æ¯.
     *
     * @param pid
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ProcessInfo</name></type> <name>getMemInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pid</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>ProcessInfo</name></type> <name>process</name> <init>= <expr><operator>new</operator> <call><name>ProcessInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>mProcessList</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mProcessList</name> <operator>=</operator> <call><name>getProcessRunningInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>String</name></type> <name>tempPidString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tempPid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>mProcessList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>item</name> <init>= <expr><call><name><name>mProcessList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>tempPidString</name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tempPidString</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <comment type="line">// AbLogUtil.d(AbAppUtil.class, "##"+item[9]+",PID:"+tempPid);</comment>
            <expr_stmt><expr><name>tempPid</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>tempPidString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>tempPid</name> <operator>==</operator> <name>pid</name></expr>)</condition><then> <block>{
                <comment type="line">// AbLogUtil.d(AbAppUtil.class,</comment>
                <comment type="line">// "##"+item[9]+","+process.memory);</comment>
                <comment type="line">// Process ID</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>pid</name></name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">// CPU</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>cpu</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// S</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// thread</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>threadsCount</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// Mem</comment>
                <decl_stmt><decl><type><name>long</name></type> <name>mem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"M"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"M"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"K"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"K"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>mem</name> <operator>=</operator> <call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>item</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"G"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>memory</name></name> <operator>=</operator> <name>mem</name></expr>;</expr_stmt>
                <comment type="line">// UID</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
                <comment type="line">// Process Name</comment>
                <expr_stmt><expr><name><name>process</name><operator>.</operator><name>processName</name></name> <operator>=</operator> <name><name>item</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <return>return <expr><name>process</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼æ§è¡å½ä»¤.
     *
     * @param command
     * @param workdirectory
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>runCommand</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>workdirectory</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>AppUtil</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><literal type="string">"#"</literal> <operator>+</operator> <name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>ProcessBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>ProcessBuilder</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// set working directory</comment>
            <if>if <condition>(<expr><name>workdirectory</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>directory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>workdirectory</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>redirectErrorStream</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Process</name></type> <name>process</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>str</name> <init>= <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>+</operator> <name>str</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼è¿è¡èæ¬.
     *
     * @param script
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>runScript</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>script</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>sRet</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>Process</name></type> <name>m_process</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exec</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sbread</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Thread</name></type> <name>tout</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>bufferedReader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                            <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>m_process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ls_1</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <try>try <block>{
                        <while>while <condition>(<expr><operator>(</operator><name>ls_1</name> <operator>=</operator> <call><name><name>bufferedReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
                            <expr_stmt><expr><call><name><name>sbread</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>ls_1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></while>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></catch> <finally>finally <block>{
                        <try>try <block>{
                            <expr_stmt><expr><call><name><name>bufferedReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></finally></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>tout</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>sberr</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>Thread</name></type> <name>terr</name> <init>= <expr><operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
                <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
                    <decl_stmt><decl><type><name>BufferedReader</name></type> <name>bufferedReader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(
                            <argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>m_process</name><operator>.</operator><name>getErrorStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>ls_1</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                    <try>try <block>{
                        <while>while <condition>(<expr><operator>(</operator><name>ls_1</name> <operator>=</operator> <call><name><name>bufferedReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
                            <expr_stmt><expr><call><name><name>sberr</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>ls_1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></while>
                    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    }</block></catch> <finally>finally <block>{
                        <try>try <block>{
                            <expr_stmt><expr><call><name><name>bufferedReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        }</block></catch></try>
                    }</block></finally></try>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>terr</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>retvalue</name> <init>= <expr><call><name><name>m_process</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><call><name><name>tout</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <if>if <condition>(<expr><call><name><name>terr</name><operator>.</operator><name>isAlive</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>terr</name><operator>.</operator><name>interrupt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>String</name></type> <name>stdout</name> <init>= <expr><call><name><name>sbread</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>stderr</name> <init>= <expr><call><name><name>sberr</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>sRet</name> <operator>=</operator> <name>stdout</name> <operator>+</operator> <name>stderr</name></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
        <return>return <expr><name>sRet</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * åºç¨ç¨åºè¿è¡å½ä»¤è·å Rootæéï¼è®¾å¤å¿é¡»å·²ç ´è§£(è·å¾ROOTæé)
     *
     * @return åºç¨ç¨åºæ¯/å¦è·åRootæé
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getRootPermission</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>packageCodePath</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageCodePath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Process</name></type> <name>process</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>DataOutputStream</name></type> <name>os</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>cmd</name> <init>= <expr><literal type="string">"chmod 777 "</literal> <operator>+</operator> <name>packageCodePath</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// åæ¢å°rootå¸å·</comment>
            <expr_stmt><expr><name>process</name> <operator>=</operator> <call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"su"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>os</name> <operator>=</operator> <operator>new</operator> <call><name>DataOutputStream</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getOutputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="string">"exit\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>process</name><operator>.</operator><name>waitFor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch> <finally>finally <block>{
            <try>try <block>{
                <if>if <condition>(<expr><name>os</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>process</name><operator>.</operator><name>destroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></finally></try>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼è·åè¿ç¨è¿è¡çä¿¡æ¯.
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>getProcessRunningInfo</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>processList</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>runCommandTopN1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>processList</name> <operator>=</operator> <call><name>parseProcessRunningInfo</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>processList</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼top -n 1.
     *
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>runCommandTopN1</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name> <init>= <expr><block>{<expr><literal type="string">"/system/bin/top"</literal></expr>, <expr><literal type="string">"-n"</literal></expr>, <expr><literal type="string">"1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>runCommand</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="string">"/system/bin/"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <comment type="line">// /**</comment>
    <comment type="line">// *</comment>
    <comment type="line">// * æè¿°ï¼è·åè¿ç¨è¿è¡çä¿¡æ¯.</comment>
    <comment type="line">// * @return</comment>
    <comment type="line">// */</comment>
    <comment type="line">// public static AbCPUInfo getCPUInfo() {</comment>
    <comment type="line">// AbCPUInfo CPUInfo = null;</comment>
    <comment type="line">// try {</comment>
    <comment type="line">// String result = runCommandTopN1();</comment>
    <comment type="line">// CPUInfo = parseCPUInfo(result);</comment>
    <comment type="line">// } catch (Exception e) {</comment>
    <comment type="line">// e.printStackTrace();</comment>
    <comment type="line">// }</comment>
    <comment type="line">// return CPUInfo;</comment>
    <comment type="line">// }</comment>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼è§£ææ°æ®.
     *
     * @param info User 39%, System 17%, IOW 3%, IRQ 0% PID PR CPU% S #THR VSS
     *             RSS PCY UID Name 31587 0 39% S 14 542288K 42272K fg u0_a162
     *             cn.amsoft.process 313 1 17% S 12 68620K 11328K fg system
     *             /system/bin/surfaceflinger 32076 1 2% R 1 1304K 604K bg
     *             u0_a162 /system/bin/top
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>parseProcessRunningInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>info</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>processList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>String</name><index>[]</index></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>Length_ProcStat</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>tempString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>bIsProcInfo</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>rows</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rows</name> <operator>=</operator> <call><name><name>info</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"[\n]+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// ä½¿ç¨æ­£åè¡¨è¾¾å¼åå²å­ç¬¦ä¸²</comment>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>rows</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>tempString</name> <operator>=</operator> <name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <comment type="line">// AbLogUtil.d(AbAppUtil.class, tempString);</comment>
            <if>if <condition>(<expr><call><name><name>tempString</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="string">"PID"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>bIsProcInfo</name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>tempString</name> <operator>=</operator> <call><name><name>tempString</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name><name>tempString</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"[ ]+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>columns</name><operator>.</operator><name>length</name></name> <operator>==</operator> <name>Length_ProcStat</name></expr>)</condition><then> <block>{
                        <comment type="line">// æ/system/bin/çå»æ</comment>
                        <if>if <condition>(<expr><name><name>columns</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"/system/bin/"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                            <continue>continue;</continue>
                        }</block></then></if>
                        <comment type="line">// AbLogUtil.d(AbAppUtil.class,</comment>
                        <comment type="line">// "#"+columns[9]+",PID:"+columns[0]);</comment>
                        <expr_stmt><expr><call><name><name>processList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>columns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>bIsProcInfo</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <return>return <expr><name>processList</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     *
     * æè¿°ï¼è§£ææ°æ®.
     *
     * @param info
     *            User 39%, System 17%, IOW 3%, IRQ 0%
     * @return
     */</comment>
    <comment type="line">// public static AbCPUInfo parseCPUInfo(String info) {</comment>
    <comment type="line">// AbCPUInfo CPUInfo = new AbCPUInfo();</comment>
    <comment type="line">// String tempString = "";</comment>
    <comment type="line">// String[] rows = null;</comment>
    <comment type="line">// String[] columns = null;</comment>
    <comment type="line">// rows = info.split("[\n]+");</comment>
    <comment type="line">// // ä½¿ç¨æ­£åè¡¨è¾¾å¼åå²å­ç¬¦ä¸²</comment>
    <comment type="line">// for (int i = 0; i &lt; rows.length; i++) {</comment>
    <comment type="line">// tempString = rows[i];</comment>
    <comment type="line">// //AbLogUtil.d(AbAppUtil.class, tempString);</comment>
    <comment type="line">// if (tempString.indexOf("User") != -1 &amp;&amp; tempString.indexOf("System") !=</comment>
    <comment type="line">// -1) {</comment>
    <comment type="line">// tempString = tempString.trim();</comment>
    <comment type="line">// columns = tempString.split(",");</comment>
    <comment type="line">// for(int j = 0; j &lt; columns.length; j++){</comment>
    <comment type="line">// String col = columns[j].trim();</comment>
    <comment type="line">// String[] cpu = col.split(" ");</comment>
    <comment type="line">// if(j == 0){</comment>
    <comment type="line">// CPUInfo.User = cpu[1];</comment>
    <comment type="line">// }else if(j == 1){</comment>
    <comment type="line">// CPUInfo.System = cpu[1];</comment>
    <comment type="line">// }else if(j == 2){</comment>
    <comment type="line">// CPUInfo.IOW = cpu[1];</comment>
    <comment type="line">// }else if(j == 3){</comment>
    <comment type="line">// CPUInfo.IRQ = cpu[1];</comment>
    <comment type="line">// }</comment>
    <comment type="line">// }</comment>
    <comment type="line">// }</comment>
    <comment type="line">// }</comment>
    <comment type="line">// return CPUInfo;</comment>
    <comment type="line">// }</comment>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼è·åå¯ç¨åå­.
     *
     * @param context
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getAvailMemory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// è·åandroidå½åå¯ç¨åå­å¤§å°</comment>
        <decl_stmt><decl><type><name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name>
                <operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MemoryInfo</name></type> <name>memoryInfo</name> <init>= <expr><operator>new</operator> <call><name>MemoryInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>activityManager</name><operator>.</operator><name>getMemoryInfo</name></name><argument_list>(<argument><expr><name>memoryInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// å½åç³»ç»å¯ç¨åå­ ,å°è·å¾çåå­å¤§å°è§æ ¼å</comment>

        <return>return <expr><name><name>memoryInfo</name><operator>.</operator><name>availMem</name></name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * æè¿°ï¼æ»åå­.
     *
     * @param context
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getTotalMemory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// ç³»ç»åå­ä¿¡æ¯æä»¶</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>file</name> <init>= <expr><literal type="string">"/proc/meminfo"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>memInfo</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>strs</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>memory</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
            <decl_stmt><decl><type><name>FileReader</name></type> <name>fileReader</name> <init>= <expr><operator>new</operator> <call><name>FileReader</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>BufferedReader</name></type> <name>bufferedReader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><name>fileReader</name></expr></argument>, <argument><expr><literal type="number">8192</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// è¯»åmeminfoç¬¬ä¸è¡ï¼ç³»ç»åå­å¤§å°</comment>
            <expr_stmt><expr><name>memInfo</name> <operator>=</operator> <call><name><name>bufferedReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>strs</name> <operator>=</operator> <call><name><name>memInfo</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\\s+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>String</name></type> <name>str</name> <range>: <expr><name>strs</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name><name>AppUtil</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <comment type="line">// è·å¾ç³»ç»æ»åå­ï¼åä½KB</comment>
            <expr_stmt><expr><name>memory</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>strs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>bufferedReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <comment type="line">// Byteè½¬ä½KBæMB</comment>
        <return>return <expr><name>memory</name><operator>*</operator><literal type="number">1024</literal></expr>;</return>
    }</block></function>

}</block></class>
</unit>
