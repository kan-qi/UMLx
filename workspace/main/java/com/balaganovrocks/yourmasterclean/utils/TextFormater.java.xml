<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\TextFormater.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>

<class><specifier>public</specifier> class <name>TextFormater</name>
<block>{
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>dataSizeFormat</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DecimalFormat</name></type> <name>formater</name> <init>= <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"####.00"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>)</condition><then>
		<block>{
			<return>return <expr><name>size</name> <operator>+</operator> <literal type="string">"byte"</literal></expr>;</return>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>)</condition><then> <comment type="line">//å·¦ç§»20ä½ï¼ç¸å½äº1024 * 1024</comment>
		<block>{
			<decl_stmt><decl><type><name>float</name></type> <name>kSize</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt> <comment type="line">//å³ç§»10ä½ï¼ç¸å½äºé¤ä»¥1024</comment>
			<return>return <expr><call><name><name>formater</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>kSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"KB"</literal></expr>;</return>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator></expr>)</condition><then> <comment type="line">//å·¦ç§»30ä½ï¼ç¸å½äº1024 * 1024 * 1024</comment>
		<block>{
			<decl_stmt><decl><type><name>float</name></type> <name>mSize</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt> <comment type="line">//å³ç§»20ä½ï¼ç¸å½äºé¤ä»¥1024åé¤ä»¥1024</comment>
			<return>return <expr><call><name><name>formater</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>mSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"MB"</literal></expr>;</return>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>size</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>float</name></type> <name>gSize</name> <init>= <expr><name>size</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal></expr></init></decl>;</decl_stmt>
			<return>return <expr><call><name><name>formater</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>gSize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"GB"</literal></expr>;</return>
		}</block></then></if></elseif>
		<else>else
		<block>{
			<return>return <expr><literal type="string">"size : error"</literal></expr>;</return>
		}</block></else></if>
	}</block></function>
	
	<function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getSizeFromKB</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>kSize</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>dataSizeFormat</name><argument_list>(<argument><expr><name>kSize</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

}</block></class>
</unit>
