<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\utils\SystemBarTintManager.java"><comment type="block">/*
 * Copyright (C) 2013 readyState Software Ltd
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewConfiguration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name><operator>.</operator><name>LayoutParams</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Class to manage status and navigation bar tint effects when using KitKat 
 * translucent system UI modes.
 *
 */</comment>
<class><specifier>public</specifier> class <name>SystemBarTintManager</name> <block>{

    <static>static <block>{
        <comment type="line">// Android allows a system property to override the presence of the navigation bar.</comment>
        <comment type="line">// Used by the emulator.</comment>
        <comment type="line">// See https://github.com/android/platform_frameworks_base/blob/master/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java#L1076</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name>Class</name></type> <name>c</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><literal type="string">"android.os.SystemProperties"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>Method</name></type> <name>m</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getDeclaredMethod</name></name><argument_list>(<argument><expr><literal type="string">"get"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sNavBarOverride</name> <operator>=</operator> <operator>(</operator><name>String</name><operator>)</operator> <call><name><name>m</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"qemu.hw.mainkeys"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>sNavBarOverride</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
    }</block></static>


    <comment type="block" format="javadoc">/**
     * The default system bar tint color value.
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_TINT_COLOR</name> <init>= <expr><literal type="number">0x99000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>sNavBarOverride</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SystemBarConfig</name></type> <name>mConfig</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mStatusBarAvailable</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mNavBarAvailable</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mStatusBarTintEnabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mNavBarTintEnabled</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>mStatusBarTintView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>mNavBarTintView</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Constructor. Call this in the host activity onCreate method after its
     * content view has been set. You should always create new instances when
     * the host activity is recreated.
     *
     * @param activity The host activity.
     */</comment>
    <constructor><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">19</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <name>SystemBarTintManager</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>Window</name></type> <name>win</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getWindow</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ViewGroup</name></type> <name>decorViewGroup</name> <init>= <expr><operator>(</operator><name>ViewGroup</name><operator>)</operator> <call><name><name>win</name><operator>.</operator><name>getDecorView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
            <comment type="line">// check theme attrs</comment>
            <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>attrs</name> <init>= <expr><block>{<expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>windowTranslucentStatus</name></name></expr>,
                    <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>windowTranslucentNavigation</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>mStatusBarAvailable</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mNavBarAvailable</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <finally>finally <block>{
                <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></finally></try>

            <comment type="line">// check window flags</comment>
            <decl_stmt><decl><type><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name></name></type> <name>winParams</name> <init>= <expr><call><name><name>win</name><operator>.</operator><name>getAttributes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_TRANSLUCENT_STATUS</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>(</operator><name><name>winParams</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>bits</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mStatusBarAvailable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_TRANSLUCENT_NAVIGATION</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>(</operator><name><name>winParams</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>bits</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mNavBarAvailable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><name>mConfig</name> <operator>=</operator> <operator>new</operator> <call><name>SystemBarConfig</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>mStatusBarAvailable</name></expr></argument>, <argument><expr><name>mNavBarAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// device might not have virtual navigation keys</comment>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>mConfig</name><operator>.</operator><name>hasNavigtionBar</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>mNavBarAvailable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>mStatusBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setupStatusBarView</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>decorViewGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>mNavBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setupNavBarView</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>decorViewGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Enable tinting of the system status bar.
     *
     * If the platform is running Jelly Bean or earlier, or translucent system
     * UI modes have not been enabled in either the theme or via window flags,
     * then this method does nothing.
     *
     * @param enabled True to enable tinting, false to disable it (default).
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setStatusBarTintEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mStatusBarTintEnabled</name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mStatusBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Enable tinting of the system navigation bar.
     *
     * If the platform does not have soft navigation keys, is running Jelly Bean
     * or earlier, or translucent system UI modes have not been enabled in either
     * the theme or via window flags, then this method does nothing.
     *
     * @param enabled True to enable tinting, false to disable it (default).
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNavigationBarTintEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNavBarTintEnabled</name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mNavBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified color tint to all system UI bars.
     *
     * @param color The color of the background tint.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTintColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setStatusBarTintColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNavigationBarTintColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified drawable or color resource to all system UI bars.
     *
     * @param res The identifier of the resource.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTintResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setStatusBarTintResource</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNavigationBarTintResource</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified drawable to all system UI bars.
     *
     * @param drawable The drawable to use as the background, or null to remove it.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTintDrawable</name><parameter_list>(<parameter><decl><type><name>Drawable</name></type> <name>drawable</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setStatusBarTintDrawable</name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNavigationBarTintDrawable</name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified alpha to all system UI bars.
     *
     * @param alpha The alpha to use
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTintAlpha</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>setStatusBarAlpha</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setNavigationBarAlpha</name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified color tint to the system status bar.
     *
     * @param color The color of the background tint.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setStatusBarTintColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mStatusBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified drawable or color resource to the system status bar.
     *
     * @param res The identifier of the resource.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setStatusBarTintResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mStatusBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setBackgroundResource</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified drawable to the system status bar.
     *
     * @param drawable The drawable to use as the background, or null to remove it.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setStatusBarTintDrawable</name><parameter_list>(<parameter><decl><type><name>Drawable</name></type> <name>drawable</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mStatusBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setBackgroundDrawable</name></name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified alpha to the system status bar.
     *
     * @param alpha The alpha to use
     */</comment>
    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setStatusBarAlpha</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mStatusBarAvailable</name> <operator>&amp;&amp;</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified color tint to the system navigation bar.
     *
     * @param color The color of the background tint.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNavigationBarTintColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mNavBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified drawable or color resource to the system navigation bar.
     *
     * @param res The identifier of the resource.
     */</comment>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>setNavigationBarTintResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>res</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mNavBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setBackgroundResource</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified drawable to the system navigation bar.
     *
     * @param drawable The drawable to use as the background, or null to remove it.
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setNavigationBarTintDrawable</name><parameter_list>(<parameter><decl><type><name>Drawable</name></type> <name>drawable</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mNavBarAvailable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setBackgroundDrawable</name></name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Apply the specified alpha to the system navigation bar.
     *
     * @param alpha The alpha to use
     */</comment>
    <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>setNavigationBarAlpha</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mNavBarAvailable</name> <operator>&amp;&amp;</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get the system bar configuration.
     *
     * @return The system bar configuration for the current device configuration.
     */</comment>
    <function><specifier>public</specifier> <type><name>SystemBarConfig</name></type> <name>getConfig</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mConfig</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Is tinting enabled for the system status bar?
     *
     * @return True if enabled, False otherwise.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isStatusBarTintEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mStatusBarTintEnabled</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Is tinting enabled for the system navigation bar?
     *
     * @return True if enabled, False otherwise.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isNavBarTintEnabled</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mNavBarTintEnabled</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setupStatusBarView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>decorViewGroup</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mStatusBarTintView</name> <operator>=</operator> <operator>new</operator> <call><name>View</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LayoutParams</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><call><name><name>mConfig</name><operator>.</operator><name>getStatusBarHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>params</name><operator>.</operator><name>gravity</name></name> <operator>=</operator> <name><name>Gravity</name><operator>.</operator><name>TOP</name></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>mNavBarAvailable</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mConfig</name><operator>.</operator><name>isNavigationAtBottom</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>params</name><operator>.</operator><name>rightMargin</name></name> <operator>=</operator> <call><name><name>mConfig</name><operator>.</operator><name>getNavigationBarWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>DEFAULT_TINT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mStatusBarTintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>decorViewGroup</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>mStatusBarTintView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setupNavBarView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>decorViewGroup</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mNavBarTintView</name> <operator>=</operator> <operator>new</operator> <call><name>View</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>LayoutParams</name></type> <name>params</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>mConfig</name><operator>.</operator><name>isNavigationAtBottom</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><call><name><name>mConfig</name><operator>.</operator><name>getNavigationBarHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>.</operator><name>gravity</name></name> <operator>=</operator> <name><name>Gravity</name><operator>.</operator><name>BOTTOM</name></name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>params</name> <operator>=</operator> <operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><call><name><name>mConfig</name><operator>.</operator><name>getNavigationBarWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>.</operator><name>gravity</name></name> <operator>=</operator> <name><name>Gravity</name><operator>.</operator><name>RIGHT</name></name></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name>DEFAULT_TINT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mNavBarTintView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>decorViewGroup</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>mNavBarTintView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Class which describes system bar sizing and other characteristics for the current
     * device configuration.
     *
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SystemBarConfig</name> <block>{

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATUS_BAR_HEIGHT_RES_NAME</name> <init>= <expr><literal type="string">"status_bar_height"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NAV_BAR_HEIGHT_RES_NAME</name> <init>= <expr><literal type="string">"navigation_bar_height"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NAV_BAR_HEIGHT_LANDSCAPE_RES_NAME</name> <init>= <expr><literal type="string">"navigation_bar_height_landscape"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NAV_BAR_WIDTH_RES_NAME</name> <init>= <expr><literal type="string">"navigation_bar_width"</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SHOW_NAV_BAR_RES_NAME</name> <init>= <expr><literal type="string">"config_showNavigationBar"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>mTranslucentStatusBar</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>mTranslucentNavBar</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>mStatusBarHeight</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>mActionBarHeight</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>mHasNavigationBar</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>mNavigationBarHeight</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>mNavigationBarWidth</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>mInPortrait</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>mSmallestWidthDp</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>SystemBarConfig</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>translucentStatusBar</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>traslucentNavBar</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mInPortrait</name> <operator>=</operator> <operator>(</operator><call><name><name>res</name><operator>.</operator><name>getConfiguration</name></name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name> <operator>==</operator> <name><name>Configuration</name><operator>.</operator><name>ORIENTATION_PORTRAIT</name></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>mSmallestWidthDp</name> <operator>=</operator> <call><name>getSmallestWidthDp</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mStatusBarHeight</name> <operator>=</operator> <call><name>getInternalDimensionSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>STATUS_BAR_HEIGHT_RES_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mActionBarHeight</name> <operator>=</operator> <call><name>getActionBarHeight</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mNavigationBarHeight</name> <operator>=</operator> <call><name>getNavigationBarHeight</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mNavigationBarWidth</name> <operator>=</operator> <call><name>getNavigationBarWidth</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mHasNavigationBar</name> <operator>=</operator> <operator>(</operator><name>mNavigationBarHeight</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>mTranslucentStatusBar</name> <operator>=</operator> <name>translucentStatusBar</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>mTranslucentNavBar</name> <operator>=</operator> <name>traslucentNavBar</name></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></annotation>
        <specifier>private</specifier> <type><name>int</name></type> <name>getActionBarHeight</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>ICE_CREAM_SANDWICH</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TypedValue</name></type> <name>tv</name> <init>= <expr><operator>new</operator> <call><name>TypedValue</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>resolveAttribute</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>actionBarSize</name></name></expr></argument>, <argument><expr><name>tv</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>TypedValue</name><operator>.</operator><name>complexToDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>tv</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></annotation>
        <specifier>private</specifier> <type><name>int</name></type> <name>getNavigationBarHeight</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>ICE_CREAM_SANDWICH</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>hasNavBar</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>key</name></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>mInPortrait</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>NAV_BAR_HEIGHT_RES_NAME</name></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>key</name> <operator>=</operator> <name>NAV_BAR_HEIGHT_LANDSCAPE_RES_NAME</name></expr>;</expr_stmt>
                    }</block></else></if>
                    <return>return <expr><call><name>getInternalDimensionSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></annotation>
        <specifier>private</specifier> <type><name>int</name></type> <name>getNavigationBarWidth</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>ICE_CREAM_SANDWICH</name></name></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><call><name>hasNavBar</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <return>return <expr><call><name>getInternalDimensionSize</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>NAV_BAR_WIDTH_RES_NAME</name></expr></argument>)</argument_list></call></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></annotation>
        <specifier>private</specifier> <type><name>boolean</name></type> <name>hasNavBar</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>Resources</name></type> <name>res</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>resourceId</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getIdentifier</name></name><argument_list>(<argument><expr><name>SHOW_NAV_BAR_RES_NAME</name></expr></argument>, <argument><expr><literal type="string">"bool"</literal></expr></argument>, <argument><expr><literal type="string">"android"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>resourceId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>boolean</name></type> <name>hasNav</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// check override flag (see static block)</comment>
                <if>if <condition>(<expr><literal type="string">"1"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>sNavBarOverride</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>hasNav</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><literal type="string">"0"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>sNavBarOverride</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>hasNav</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
                <return>return <expr><name>hasNav</name></expr>;</return>
            }</block></then> <else>else <block>{ <comment type="line">// fallback</comment>
                <return>return <expr><operator>!</operator><call><name><name>ViewConfiguration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>hasPermanentMenuKey</name><argument_list>()</argument_list></call></expr>;</return>
            }</block></else></if>
        }</block></function>

        <function><specifier>private</specifier> <type><name>int</name></type> <name>getInternalDimensionSize</name><parameter_list>(<parameter><decl><type><name>Resources</name></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>resourceId</name> <init>= <expr><call><name><name>res</name><operator>.</operator><name>getIdentifier</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"dimen"</literal></expr></argument>, <argument><expr><literal type="string">"android"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>resourceId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>res</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
        <specifier>private</specifier> <type><name>float</name></type> <name>getSmallestWidthDp</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
            <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getWindowManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRealMetrics</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// TODO this is not correct, but we don't really care pre-kitkat</comment>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getWindowManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMetrics</name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <decl_stmt><decl><type><name>float</name></type> <name>widthDp</name> <init>= <expr><name><name>metrics</name><operator>.</operator><name>widthPixels</name></name> <operator>/</operator> <name><name>metrics</name><operator>.</operator><name>density</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>float</name></type> <name>heightDp</name> <init>= <expr><name><name>metrics</name><operator>.</operator><name>heightPixels</name></name> <operator>/</operator> <name><name>metrics</name><operator>.</operator><name>density</name></name></expr></init></decl>;</decl_stmt>
            <return>return <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>widthDp</name></expr></argument>, <argument><expr><name>heightDp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Should a navigation bar appear at the bottom of the screen in the current
         * device configuration? A navigation bar may appear on the right side of
         * the screen in certain configurations.
         *
         * @return True if navigation should appear at the bottom of the screen, False otherwise.
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isNavigationAtBottom</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><operator>(</operator><name>mSmallestWidthDp</name> <operator>&gt;=</operator> <literal type="number">600</literal> <operator>||</operator> <name>mInPortrait</name><operator>)</operator></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the height of the system status bar.
         *
         * @return The height of the status bar (in pixels).
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getStatusBarHeight</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>mStatusBarHeight</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the height of the action bar.
         *
         * @return The height of the action bar (in pixels).
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getActionBarHeight</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>mActionBarHeight</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Does this device have a system navigation bar?
         *
         * @return True if this device uses soft key navigation, False otherwise.
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasNavigtionBar</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>mHasNavigationBar</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the height of the system navigation bar.
         *
         * @return The height of the navigation bar (in pixels). If the device does not have
         * soft navigation keys, this will always return 0.
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getNavigationBarHeight</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>mNavigationBarHeight</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the width of the system navigation bar when it is placed vertically on the screen.
         *
         * @return The width of the navigation bar (in pixels). If the device does not have
         * soft navigation keys, this will always return 0.
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getNavigationBarWidth</name><parameter_list>()</parameter_list> <block>{
            <return>return <expr><name>mNavigationBarWidth</name></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the layout inset for any system UI that appears at the top of the screen.
         *
         * @param withActionBar True to include the height of the action bar, False otherwise.
         * @return The layout inset (in pixels).
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getPixelInsetTop</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>withActionBar</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>(</operator><ternary><condition><expr><name>mTranslucentStatusBar</name></expr> ?</condition><then> <expr><name>mStatusBarHeight</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>withActionBar</name></expr> ?</condition><then> <expr><name>mActionBarHeight</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the layout inset for any system UI that appears at the bottom of the screen.
         *
         * @return The layout inset (in pixels).
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getPixelInsetBottom</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>mTranslucentNavBar</name> <operator>&amp;&amp;</operator> <call><name>isNavigationAtBottom</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>mNavigationBarHeight</name></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></function>

        <comment type="block" format="javadoc">/**
         * Get the layout inset for any system UI that appears at the right of the screen.
         *
         * @return The layout inset (in pixels).
         */</comment>
        <function><specifier>public</specifier> <type><name>int</name></type> <name>getPixelInsetRight</name><parameter_list>()</parameter_list> <block>{
            <if>if <condition>(<expr><name>mTranslucentNavBar</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isNavigationAtBottom</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>mNavigationBarWidth</name></expr>;</return>
            }</block></then> <else>else <block>{
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></function>

    }</block></class>

}</block></class>
</unit>
