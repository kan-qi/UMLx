<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\widget\stickyheader\StikkyHeader.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>widget</name><operator>.</operator><name>stickyheader</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>StikkyHeader</name> <block>{

    <decl_stmt><decl><specifier>protected</specifier> <type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>protected</specifier> <type><name>View</name></type> <name>mHeader</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mMinHeightHeader</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>HeaderAnimator</name></type> <name>mHeaderAnimator</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mHeightHeader</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mMaxHeaderTransaction</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>View</name></type> <name>mFakeHeader</name></decl>;</decl_stmt>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>measureHeaderHeight</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>mHeader</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <comment type="line">//waiting for the height</comment>
            <expr_stmt><expr><call><name><name>mHeader</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addOnGlobalLayoutListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ViewTreeObserver</name><operator>.</operator><name>OnGlobalLayoutListener</name></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onGlobalLayout</name><parameter_list>()</parameter_list> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name><name>mHeader</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>mHeader</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeGlobalOnLayoutListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>setHeightHeader</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>setHeightHeader</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setHeightHeader</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>heightHeader</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mHeightHeader</name> <operator>=</operator> <name>heightHeader</name></expr>;</expr_stmt>

        <comment type="line">// some implementations dont use a fake header</comment>
        <if>if <condition>(<expr><name>mFakeHeader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>lpFakeHeader</name> <init>= <expr><call><name><name>mFakeHeader</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>lpFakeHeader</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>mHeightHeader</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mFakeHeader</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>lpFakeHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>lpHeader</name> <init>= <expr><call><name><name>mHeader</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>lpHeader</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>mHeightHeader</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mHeader</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>lpHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>calculateMaxTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupAnimator</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// update heights</comment>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>calculateMaxTransaction</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>mMaxHeaderTransaction</name> <operator>=</operator> <name>mMinHeightHeader</name> <operator>-</operator> <name>mHeightHeader</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>setupAnimator</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>mHeaderAnimator</name><operator>.</operator><name>setupAnimator</name></name><argument_list>(<argument><expr><name>mHeader</name></expr></argument>, <argument><expr><name>mMinHeightHeader</name></expr></argument>, <argument><expr><name>mHeightHeader</name></expr></argument>, <argument><expr><name>mMaxHeaderTransaction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>setMinHeightHeader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minHeightHeader</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mMinHeightHeader</name></name> <operator>=</operator> <name>minHeightHeader</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>calculateMaxTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


}</block></class>
</unit>
