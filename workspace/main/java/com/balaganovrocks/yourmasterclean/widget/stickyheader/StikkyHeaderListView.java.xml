<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\widget\stickyheader\StikkyHeaderListView.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>widget</name><operator>.</operator><name>stickyheader</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AbsListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>

<class><specifier>public</specifier> class <name>StikkyHeaderListView</name> <super><extends>extends <name>StikkyHeader</name></extends></super> <block>{


    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ListView</name></type> <name>mListView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>AbsListView</name><operator>.</operator><name>OnScrollListener</name></name></type> <name>mDelegateOnScrollListener</name></decl>;</decl_stmt>

    <constructor><name>StikkyHeaderListView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ListView</name></type> <name>listView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>mMinHeightHeader</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>HeaderAnimator</name></type> <name>headerAnimator</name></decl></parameter>)</parameter_list> <block>{

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mContext</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mListView</name></name> <operator>=</operator> <name>listView</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mHeader</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mMinHeightHeader</name></name> <operator>=</operator> <name>mMinHeightHeader</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mHeaderAnimator</name></name> <operator>=</operator> <name>headerAnimator</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>createFakeHeader</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>measureHeaderHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setupAnimator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setStickyOnScrollListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><specifier>protected</specifier> <type><name>void</name></type> <name>createFakeHeader</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><name>mFakeHeader</name> <operator>=</operator> <operator>new</operator> <call><name>View</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mFakeHeader</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>AbsListView</name><operator>.</operator><name>LayoutParams</name></name></type> <name>lp</name> <init>= <expr><operator>new</operator> <call><name><name>AbsListView</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mFakeHeader</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>lp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mListView</name><operator>.</operator><name>addHeaderView</name></name><argument_list>(<argument><expr><name>mFakeHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setStickyOnScrollListener</name><parameter_list>()</parameter_list> <block>{

        <decl_stmt><decl><type><name>StickyOnScrollListener</name></type> <name>mStickyOnScrollListener</name> <init>= <expr><operator>new</operator> <call><name>StickyOnScrollListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>mListView</name><operator>.</operator><name>setOnScrollListener</name></name><argument_list>(<argument><expr><name>mStickyOnScrollListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <class><specifier>private</specifier> class <name>StickyOnScrollListener</name> <super><implements>implements <name><name>AbsListView</name><operator>.</operator><name>OnScrollListener</name></name></implements></super> <block>{

        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mScrolledYList</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>AbsListView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scrollState</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>mDelegateOnScrollListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mDelegateOnScrollListener</name><operator>.</operator><name>onScrollStateChanged</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>scrollState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onScroll</name><parameter_list>(<parameter><decl><type><name>AbsListView</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstVisibleItem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visibleItemCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>totalItemCount</name></decl></parameter>)</parameter_list> <block>{

            <expr_stmt><expr><name>mScrolledYList</name> <operator>=</operator> <operator>-</operator><call><name>calculateScrollYList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//notify the animator</comment>
            <expr_stmt><expr><call><name><name>mHeaderAnimator</name><operator>.</operator><name>onScroll</name></name><argument_list>(<argument><expr><name>mScrolledYList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>mDelegateOnScrollListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mDelegateOnScrollListener</name><operator>.</operator><name>onScroll</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>firstVisibleItem</name></expr></argument>, <argument><expr><name>visibleItemCount</name></expr></argument>, <argument><expr><name>totalItemCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><specifier>private</specifier> <type><name>int</name></type> <name>calculateScrollYList</name><parameter_list>()</parameter_list> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>c</name> <init>= <expr><call><name><name>mListView</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>

            <comment type="line">//TODO support more than 1 header?</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>firstVisiblePosition</name> <init>= <expr><call><name><name>mListView</name><operator>.</operator><name>getFirstVisiblePosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name><name>c</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>headerHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>firstVisiblePosition</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <comment type="line">//TODO &gt;= number of header</comment>
                <expr_stmt><expr><name>headerHeight</name> <operator>=</operator> <name>mHeightHeader</name></expr>;</expr_stmt>
            }</block></then></if>

            <return>return <expr><operator>-</operator><name>top</name> <operator>+</operator> <name>firstVisiblePosition</name> <operator>*</operator> <call><name><name>c</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>headerHeight</name></expr>;</return>
        }</block></function>

    }</block></class>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnScrollListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>AbsListView</name><operator>.</operator><name>OnScrollListener</name></name></type> <name>onScrollListener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mDelegateOnScrollListener</name> <operator>=</operator> <name>onScrollListener</name></expr>;</expr_stmt>
    }</block></function>


}</block></class>
</unit>
