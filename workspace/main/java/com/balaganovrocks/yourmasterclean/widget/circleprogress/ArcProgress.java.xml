<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\widget\circleprogress\ArcProgress.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>widget</name><operator>.</operator><name>circleprogress</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextPaint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by bruce on 11/6/14.
 */</comment>
<class><specifier>public</specifier> class <name>ArcProgress</name> <super><extends>extends <name>View</name></extends></super> <block>{
	<decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>paint</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>Paint</name></type> <name>textPaint</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>RectF</name></type> <name>rectF</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>strokeWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>suffixTextSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>bottomTextSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>bottomText</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>textSize</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>textColor</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>progress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>max</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>finishedStrokeColor</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>unfinishedStrokeColor</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>arcAngle</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>suffixText</name> <init>= <expr><literal type="string">"%"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>suffixTextPadding</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>arcBottomHeight</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>default_finished_color</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>default_unfinished_color</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>rgb</name></name><argument_list>(<argument><expr><literal type="number">72</literal></expr></argument>, <argument><expr><literal type="number">106</literal></expr></argument>, <argument><expr><literal type="number">176</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>default_text_color</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>rgb</name></name><argument_list>(<argument><expr><literal type="number">66</literal></expr></argument>, <argument><expr><literal type="number">145</literal></expr></argument>, <argument><expr><literal type="number">241</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>default_suffix_text_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>default_suffix_padding</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>default_bottom_text_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>default_stroke_width</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>default_suffix_text</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>default_max</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>default_arc_angle</name> <init>= <expr><literal type="number">360</literal> <operator>*</operator> <literal type="number">0.8f</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>default_text_size</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>min_size</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_STATE</name> <init>= <expr><literal type="string">"saved_instance"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_STROKE_WIDTH</name> <init>= <expr><literal type="string">"stroke_width"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_SUFFIX_TEXT_SIZE</name> <init>= <expr><literal type="string">"suffix_text_size"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_SUFFIX_TEXT_PADDING</name> <init>= <expr><literal type="string">"suffix_text_padding"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_BOTTOM_TEXT_SIZE</name> <init>= <expr><literal type="string">"bottom_text_size"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_BOTTOM_TEXT</name> <init>= <expr><literal type="string">"bottom_text"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_TEXT_SIZE</name> <init>= <expr><literal type="string">"text_size"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_TEXT_COLOR</name> <init>= <expr><literal type="string">"text_color"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_PROGRESS</name> <init>= <expr><literal type="string">"progress"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_MAX</name> <init>= <expr><literal type="string">"max"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_FINISHED_STROKE_COLOR</name> <init>= <expr><literal type="string">"finished_stroke_color"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_UNFINISHED_STROKE_COLOR</name> <init>= <expr><literal type="string">"unfinished_stroke_color"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_ARC_ANGLE</name> <init>= <expr><literal type="string">"arc_angle"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_SUFFIX</name> <init>= <expr><literal type="string">"suffix"</literal></expr></init></decl>;</decl_stmt>

	<constructor><specifier>public</specifier> <name>ArcProgress</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ArcProgress</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<constructor><specifier>public</specifier> <name>ArcProgress</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>default_text_size</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>sp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>min_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Utils</name><operator>.</operator><name>dp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>default_text_size</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>sp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>default_suffix_text_size</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>sp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>default_suffix_padding</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>dp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>default_suffix_text</name> <operator>=</operator> <literal type="string">"%"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>default_bottom_text_size</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>sp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>default_stroke_width</name> <operator>=</operator> <call><name><name>Utils</name><operator>.</operator><name>dp2px</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>TypedArray</name></type> <name>attributes</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(
				<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress</name></name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>initByAttributes</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>attributes</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>initPainters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>initByAttributes</name><parameter_list>(<parameter><decl><type><name>TypedArray</name></type> <name>attributes</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>finishedStrokeColor</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getColor</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_finished_color</name></name></expr></argument>,
				<argument><expr><name>default_finished_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>unfinishedStrokeColor</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getColor</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_unfinished_color</name></name></expr></argument>,
				<argument><expr><name>default_unfinished_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>textColor</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_text_color</name></name></expr></argument>,
				<argument><expr><name>default_text_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>textSize</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getDimension</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_text_size</name></name></expr></argument>, <argument><expr><name>default_text_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>arcAngle</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getDimension</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_angle</name></name></expr></argument>,
				<argument><expr><name>default_arc_angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMax</name><argument_list>(<argument><expr><call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_max</name></name></expr></argument>, <argument><expr><name>default_max</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_progress</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>strokeWidth</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getDimension</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_stroke_width</name></name></expr></argument>, <argument><expr><name>default_stroke_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>suffixTextSize</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getDimension</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_suffix_text_size</name></name></expr></argument>,
				<argument><expr><name>default_suffix_text_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>suffixText</name> <operator>=</operator> <ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>attributes</name>
				<operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_suffix_text</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>default_suffix_text</name></expr>
				</then><else>: <expr><call><name><name>attributes</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_suffix_text</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
		<expr_stmt><expr><name>suffixTextPadding</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getDimension</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_suffix_text_padding</name></name></expr></argument>,
				<argument><expr><name>default_suffix_padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bottomTextSize</name> <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getDimension</name></name><argument_list>(
				<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_bottom_text_size</name></name></expr></argument>,
				<argument><expr><name>default_bottom_text_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>bottomText</name> <operator>=</operator> <call><name><name>attributes</name>
				<operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ArcProgress_arc_bottom_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>initPainters</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><name>textPaint</name> <operator>=</operator> <operator>new</operator> <call><name>TextPaint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>textColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>textSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>paint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>default_unfinished_color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>strokeWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStrokeCap</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Cap</name><operator>.</operator><name>ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>invalidate</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>initPainters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>float</name></type> <name>getStrokeWidth</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>strokeWidth</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setStrokeWidth</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>strokeWidth</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>strokeWidth</name></name> <operator>=</operator> <name>strokeWidth</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>float</name></type> <name>getSuffixTextSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>suffixTextSize</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSuffixTextSize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>suffixTextSize</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>suffixTextSize</name></name> <operator>=</operator> <name>suffixTextSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getBottomText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>bottomText</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setBottomText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>bottomText</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>bottomText</name></name> <operator>=</operator> <name>bottomText</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getProgress</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>progress</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>progress</name></name> <operator>&gt;</operator> <call><name>getMax</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>progress</name></name> <operator>%=</operator> <call><name>getMax</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getMax</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>max</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setMax</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>max</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>this</name><operator>.</operator><name>max</name></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><specifier>public</specifier> <type><name>float</name></type> <name>getBottomTextSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>bottomTextSize</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setBottomTextSize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>bottomTextSize</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>bottomTextSize</name></name> <operator>=</operator> <name>bottomTextSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>float</name></type> <name>getTextSize</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>textSize</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTextSize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>textSize</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>textSize</name></name> <operator>=</operator> <name>textSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getTextColor</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>textColor</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setTextColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>textColor</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>textColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getFinishedStrokeColor</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>finishedStrokeColor</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setFinishedStrokeColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>finishedStrokeColor</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>finishedStrokeColor</name></name> <operator>=</operator> <name>finishedStrokeColor</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>int</name></type> <name>getUnfinishedStrokeColor</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>unfinishedStrokeColor</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setUnfinishedStrokeColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unfinishedStrokeColor</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>unfinishedStrokeColor</name></name> <operator>=</operator> <name>unfinishedStrokeColor</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>float</name></type> <name>getArcAngle</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>arcAngle</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setArcAngle</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>arcAngle</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>arcAngle</name></name> <operator>=</operator> <name>arcAngle</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>String</name></type> <name>getSuffixText</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>suffixText</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSuffixText</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>suffixText</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>suffixText</name></name> <operator>=</operator> <name>suffixText</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>float</name></type> <name>getSuffixTextPadding</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>suffixTextPadding</name></expr>;</return>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>setSuffixTextPadding</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>suffixTextPadding</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name><name>this</name><operator>.</operator><name>suffixTextPadding</name></name> <operator>=</operator> <name>suffixTextPadding</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>int</name></type> <name>getSuggestedMinimumHeight</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>min_size</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>int</name></type> <name>getSuggestedMinimumWidth</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>min_size</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>rectF</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>strokeWidth</name> <operator>/</operator> <literal type="number">2f</literal></expr></argument>, <argument><expr><name>strokeWidth</name> <operator>/</operator> <literal type="number">2f</literal></expr></argument>,
				<argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>strokeWidth</name> <operator>/</operator> <literal type="number">2f</literal></expr></argument>,
				<argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>strokeWidth</name> <operator>/</operator> <literal type="number">2f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>radius</name> <init>= <expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2f</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>angle</name> <init>= <expr><operator>(</operator><literal type="number">360</literal> <operator>-</operator> <name>arcAngle</name><operator>)</operator> <operator>/</operator> <literal type="number">2f</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>arcBottomHeight</name> <operator>=</operator> <name>radius</name>
				<operator>*</operator> <call>(<name>float</name>) <argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <call><name><name>Math</name><operator>.</operator><name>cos</name></name><argument_list>(<argument><expr><name>angle</name> <operator>/</operator> <literal type="number">180</literal> <operator>*</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>startAngle</name> <init>= <expr><literal type="number">270</literal> <operator>-</operator> <name>arcAngle</name> <operator>/</operator> <literal type="number">2f</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>finishedSweepAngle</name> <init>= <expr><name>progress</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>getMax</name><argument_list>()</argument_list></call> <operator>*</operator> <name>arcAngle</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>float</name></type> <name>finishedStartAngle</name> <init>= <expr><name>startAngle</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>unfinishedStrokeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawArc</name></name><argument_list>(<argument><expr><name>rectF</name></expr></argument>, <argument><expr><name>startAngle</name></expr></argument>, <argument><expr><name>arcAngle</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>finishedStrokeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawArc</name></name><argument_list>(<argument><expr><name>rectF</name></expr></argument>, <argument><expr><name>finishedStartAngle</name></expr></argument>, <argument><expr><name>finishedSweepAngle</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>,
				<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>String</name></type> <name>text</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getProgress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>textColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>textSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>float</name></type> <name>textHeight</name> <init>= <expr><call><name><name>textPaint</name><operator>.</operator><name>descent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>textPaint</name><operator>.</operator><name>ascent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>float</name></type> <name>textBaseline</name> <init>= <expr><operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>textHeight</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>,
					<argument><expr><operator>(</operator><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>textPaint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>,
					<argument><expr><name>textBaseline</name></expr></argument>, <argument><expr><name>textPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>suffixTextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>float</name></type> <name>suffixHeight</name> <init>= <expr><call><name><name>textPaint</name><operator>.</operator><name>descent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>textPaint</name><operator>.</operator><name>ascent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>suffixText</name></expr></argument>,
					<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2.0f</literal> <operator>+</operator> <call><name><name>textPaint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call>
							<operator>+</operator> <name>suffixTextPadding</name></expr></argument>, <argument><expr><name>textBaseline</name> <operator>+</operator> <name>textHeight</name>
							<operator>-</operator> <name>suffixHeight</name></expr></argument>, <argument><expr><name>textPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>

		<if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name>getBottomText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>bottomTextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>float</name></type> <name>bottomTextBaseline</name> <init>= <expr><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <name>arcBottomHeight</name>
					<operator>-</operator> <operator>(</operator><call><name><name>textPaint</name><operator>.</operator><name>descent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>textPaint</name><operator>.</operator><name>ascent</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawText</name></name><argument_list>(
					<argument><expr><call><name>getBottomText</name><argument_list>()</argument_list></call></expr></argument>,
					<argument><expr><operator>(</operator><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>textPaint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><call><name>getBottomText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr></argument>,
					<argument><expr><name>bottomTextBaseline</name></expr></argument>, <argument><expr><name>textPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>Parcelable</name></type> <name>onSaveInstanceState</name><parameter_list>()</parameter_list> <block>{
		<decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>INSTANCE_STATE</name></expr></argument>, <argument><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_STROKE_WIDTH</name></expr></argument>, <argument><expr><call><name>getStrokeWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_SUFFIX_TEXT_SIZE</name></expr></argument>, <argument><expr><call><name>getSuffixTextSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_SUFFIX_TEXT_PADDING</name></expr></argument>, <argument><expr><call><name>getSuffixTextPadding</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_BOTTOM_TEXT_SIZE</name></expr></argument>, <argument><expr><call><name>getBottomTextSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>INSTANCE_BOTTOM_TEXT</name></expr></argument>, <argument><expr><call><name>getBottomText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_TEXT_SIZE</name></expr></argument>, <argument><expr><call><name>getTextSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>INSTANCE_TEXT_COLOR</name></expr></argument>, <argument><expr><call><name>getTextColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>INSTANCE_PROGRESS</name></expr></argument>, <argument><expr><call><name>getProgress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>INSTANCE_MAX</name></expr></argument>, <argument><expr><call><name>getMax</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>INSTANCE_FINISHED_STROKE_COLOR</name></expr></argument>, <argument><expr><call><name>getFinishedStrokeColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>INSTANCE_UNFINISHED_STROKE_COLOR</name></expr></argument>,
				<argument><expr><call><name>getUnfinishedStrokeColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_ARC_ANGLE</name></expr></argument>, <argument><expr><call><name>getArcAngle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>INSTANCE_SUFFIX</name></expr></argument>, <argument><expr><call><name>getSuffixText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>bundle</name></expr>;</return>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>state</name> <operator>instanceof</operator> <name>Bundle</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><specifier>final</specifier> <name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>(</operator><name>Bundle</name><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>strokeWidth</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_STROKE_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>suffixTextSize</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_SUFFIX_TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>suffixTextPadding</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_SUFFIX_TEXT_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>bottomTextSize</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_BOTTOM_TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>bottomText</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>INSTANCE_BOTTOM_TEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>textSize</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>INSTANCE_TEXT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>textColor</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>INSTANCE_TEXT_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setMax</name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>INSTANCE_MAX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>setProgress</name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>INSTANCE_PROGRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>finishedStrokeColor</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>INSTANCE_FINISHED_STROKE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>unfinishedStrokeColor</name> <operator>=</operator> <call><name><name>bundle</name>
					<operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>INSTANCE_UNFINISHED_STROKE_COLOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>suffixText</name> <operator>=</operator> <call><name><name>bundle</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>INSTANCE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>initPainters</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>bundle</name><operator>.</operator><name>getParcelable</name></name><argument_list>(<argument><expr><name>INSTANCE_STATE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></class>
</unit>
