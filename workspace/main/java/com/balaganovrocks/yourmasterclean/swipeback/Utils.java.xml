<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\swipeback\Utils.java">
<package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>swipeback</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by Chaojun Wang on 6/9/14.
 */</comment>
<class><specifier>public</specifier> class <name>Utils</name> <block>{
    <constructor><specifier>private</specifier> <name>Utils</name><parameter_list>()</parameter_list> <block>{
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Convert a translucent themed Activity
     * {@link android.R.attr#windowIsTranslucent} to a fullscreen opaque
     * Activity.
     * &lt;p&gt;
     * Call this whenever the background of a translucent Activity has changed
     * to become opaque. Doing so will allow the {@link android.view.Surface} of
     * the Activity behind to be released.
     * &lt;p&gt;
     * This call has no effect on non-translucent activities or on activities
     * with the {@link android.R.attr#windowIsFloating} attribute.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>convertActivityFromTranslucent</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>Activity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"convertFromTranslucent"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Convert a translucent themed Activity
     * {@link android.R.attr#windowIsTranslucent} back from opaque to
     * translucent following a call to
     * {@link #convertActivityFromTranslucent(android.app.Activity)} .
     * &lt;p&gt;
     * Calling this allows the Activity behind this one to be seen again. Once
     * all such Activities have been redrawn
     * &lt;p&gt;
     * This call has no effect on non-translucent activities or on activities
     * with the {@link android.R.attr#windowIsFloating} attribute.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>convertActivityToTranslucent</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>classes</name> <init>= <expr><call><name><name>Activity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredClasses</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>translucentConversionListenerClazz</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Class</name></type> <name>clazz</name> <range>: <expr><name>classes</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>clazz</name><operator>.</operator><name>getSimpleName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"TranslucentConversionListener"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>translucentConversionListenerClazz</name> <operator>=</operator> <name>clazz</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><call><name><name>Activity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getDeclaredMethod</name></name></name><argument_list>(<argument><expr><literal type="string">"convertToTranslucent"</literal></expr></argument>,
                    <argument><expr><name>translucentConversionListenerClazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>setAccessible</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>method</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{
                <expr><literal type="null">null</literal></expr>
            }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
        }</block></catch></try>
    }</block></function>
}</block></class>
</unit>
