<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\views\SlidingTab.java"><comment type="block">/*
 * Copyright (C) 2013 Andreas Stuetz &lt;andreas.stuetz@gmail.com&gt;
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>views</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name><operator>.</operator><name>OnPageChangeListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name><operator>.</operator><name>OnGlobalLayoutListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>HorizontalScrollView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>




<class><specifier>public</specifier> class  <name>SlidingTab</name> <super><extends>extends <name>HorizontalScrollView</name></extends></super> <block>{

    <interface><specifier>public</specifier> interface <name>IconTabProvider</name> <block>{
        <function_decl><specifier>public</specifier> <type><name>int</name></type> <name>getPageIconResId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="line">// @formatter:off</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>ATTRS</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{
            <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>textSize</name></name></expr>,
            <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>textColor</name></name></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <comment type="line">// @formatter:on</comment>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>defaultTabLayoutParams</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name></type> <name>expandedTabLayoutParams</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PageListener</name></type> <name>pageListener</name> <init>= <expr><operator>new</operator> <call><name>PageListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name>OnPageChangeListener</name></type> <name>delegatePageListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>LinearLayout</name></type> <name>tabsContainer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ViewPager</name></type> <name>pager</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tabCount</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>currentPosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>selectedPosition</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>currentPositionOffset</name> <init>= <expr><literal type="number">0f</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>rectPaint</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>dividerPaint</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>indicatorColor</name> <init>= <expr><literal type="number">0xFF666666</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>underlineColor</name> <init>= <expr><literal type="number">0x1A000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>dividerColor</name> <init>= <expr><literal type="number">0x1A000000</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>shouldExpand</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>textAllCaps</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>scrollOffset</name> <init>= <expr><literal type="number">52</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>indicatorHeight</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>underlineHeight</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>dividerPadding</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tabPadding</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt> <comment type="line">// tab ä¸º textview æ¶çpadding</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>dividerWidth</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tabTextSize</name> <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tabTextColor</name> <init>= <expr><literal type="number">0xFF666666</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>selectedTabTextColor</name> <init>= <expr><literal type="number">0xFF666666</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Typeface</name></type> <name>tabTypeface</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tabTypefaceStyle</name> <init>= <expr><name><name>Typeface</name><operator>.</operator><name>NORMAL</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>lastScrollX</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>tabBackgroundResId</name> <init>= <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>background_tab</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Locale</name></type> <name>locale</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SlidingTab</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SlidingTab</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>SlidingTab</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setFillViewport</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setWillNotDraw</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tabsContainer</name> <operator>=</operator> <operator>new</operator> <call><name>LinearLayout</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tabsContainer</name><operator>.</operator><name>setOrientation</name></name><argument_list>(<argument><expr><name><name>LinearLayout</name><operator>.</operator><name>HORIZONTAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tabsContainer</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addView</name><argument_list>(<argument><expr><name>tabsContainer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>dm</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>scrollOffset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>scrollOffset</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>indicatorHeight</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>indicatorHeight</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>underlineHeight</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>underlineHeight</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dividerPadding</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>dividerPadding</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tabPadding</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>tabPadding</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dividerWidth</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_DIP</name></name></expr></argument>, <argument><expr><name>dividerWidth</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tabTextSize</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_SP</name></name></expr></argument>, <argument><expr><name>tabTextSize</name></expr></argument>, <argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get system attrs (android:textSize and android:textColor)</comment>

        <decl_stmt><decl><type><name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>ATTRS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>tabTextSize</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tabTextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tabTextColor</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tabTextColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// get custom attrs</comment>

        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>indicatorColor</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsIndicatorColorWe</name></name></expr></argument>, <argument><expr><name>indicatorColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>underlineColor</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsUnderlineColorWe</name></name></expr></argument>, <argument><expr><name>underlineColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dividerColor</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsDividerColorWe</name></name></expr></argument>, <argument><expr><name>dividerColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>indicatorHeight</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsIndicatorHeightWe</name></name></expr></argument>, <argument><expr><name>indicatorHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>underlineHeight</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsUnderlineHeightWe</name></name></expr></argument>, <argument><expr><name>underlineHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dividerPadding</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsDividerPaddingWe</name></name></expr></argument>, <argument><expr><name>dividerPadding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tabPadding</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsTabPaddingLeftRightWe</name></name></expr></argument>, <argument><expr><name>tabPadding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tabBackgroundResId</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getResourceId</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsTabBackgroundWe</name></name></expr></argument>, <argument><expr><name>tabBackgroundResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>shouldExpand</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsShouldExpandWe</name></name></expr></argument>, <argument><expr><name>shouldExpand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>scrollOffset</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsScrollOffsetWe</name></name></expr></argument>, <argument><expr><name>scrollOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>textAllCaps</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>SlidingTab_pstsTextAllCapsWe</name></name></expr></argument>, <argument><expr><name>textAllCaps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rectPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rectPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rectPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>dividerPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dividerPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dividerPaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>dividerWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>defaultTabLayoutParams</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>expandedTabLayoutParams</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>locale</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>locale</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>locale</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setViewPager</name><parameter_list>(<parameter><decl><type><name>ViewPager</name></type> <name>pager</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pager</name></name> <operator>=</operator> <name>pager</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>pager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"ViewPager does not have adapter instance."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setOnPageChangeListener</name></name><argument_list>(<argument><expr><name>pageListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnPageChangeListener</name><parameter_list>(<parameter><decl><type><name>OnPageChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delegatePageListener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>notifyDataSetChanged</name><parameter_list>()</parameter_list> <block>{

        <expr_stmt><expr><call><name><name>tabsContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tabCount</name> <operator>=</operator> <call><name><name>pager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tabCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

            <if>if <condition>(<expr><call><name><name>pager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>IconTabProvider</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>addIconTab</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>IconTabProvider</name><operator>)</operator> <call><name><name>pager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getPageIconResId</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>addTextTab</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>pager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPageTitle</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

        }</block></for>

        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getViewTreeObserver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addOnGlobalLayoutListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnGlobalLayoutListener</name></super><argument_list>()</argument_list> <block>{

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onGlobalLayout</name><parameter_list>()</parameter_list> <block>{
                <expr_stmt><expr><call><name>getViewTreeObserver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeGlobalOnLayoutListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>currentPosition</name> <operator>=</operator> <call><name><name>pager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>scrollToChild</name><argument_list>(<argument><expr><name>currentPosition</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addTextTab</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>TextView</name></type> <name>tab</name> <init>= <expr><operator>new</operator> <call><name>TextView</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setSingleLine</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addTab</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addIconTab</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>ImageButton</name></type> <name>tab</name> <init>= <expr><operator>new</operator> <call><name>ImageButton</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>addTab</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>addTab</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>tab</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>OnClickListener</name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>pager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><name>tabPadding</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tabPadding</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>tabsContainer</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>tab</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><ternary><condition><expr><name>shouldExpand</name></expr> ?</condition><then> <expr><name>expandedTabLayoutParams</name></expr> </then><else>: <expr><name>defaultTabLayoutParams</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTabStyles</name><parameter_list>()</parameter_list> <block>{

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tabCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

            <decl_stmt><decl><type><name>View</name></type> <name>v</name> <init>= <expr><call><name><name>tabsContainer</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setBackgroundResource</name></name><argument_list>(<argument><expr><name>tabBackgroundResId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>v</name> <operator>instanceof</operator> <name>TextView</name></expr>)</condition><then> <block>{

                <decl_stmt><decl><type><name>TextView</name></type> <name>tab</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <name>v</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_PX</name></name></expr></argument>, <argument><expr><name>tabTextSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name>tabTypeface</name></expr></argument>, <argument><expr><name>tabTypefaceStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name>tabTextColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// setAllCaps() is only available from API 14, so the upper case is made manually if we are on a</comment>
                <comment type="line">// pre-ICS-build</comment>
                <if>if <condition>(<expr><name>textAllCaps</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>ICE_CREAM_SANDWICH</name></name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setAllCaps</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>tab</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toUpperCase</name><argument_list>(<argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
                <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>selectedPosition</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>tab</name><operator>.</operator><name>setTextColor</name></name><argument_list>(<argument><expr><name>selectedTabTextColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>scrollToChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{

        <if>if <condition>(<expr><name>tabCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>newScrollX</name> <init>= <expr><call><name><name>tabsContainer</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLeft</name><argument_list>()</argument_list></call> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>position</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>newScrollX</name> <operator>-=</operator> <name>scrollOffset</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>newScrollX</name> <operator>!=</operator> <name>lastScrollX</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>lastScrollX</name> <operator>=</operator> <name>newScrollX</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>scrollTo</name><argument_list>(<argument><expr><name>newScrollX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>isInEditMode</name><argument_list>()</argument_list></call> <operator>||</operator> <name>tabCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> <init>= <expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// draw underline</comment>
        <expr_stmt><expr><call><name><name>rectPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>underlineColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>underlineHeight</name></expr></argument>, <argument><expr><call><name><name>tabsContainer</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>rectPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw indicator line</comment>
        <expr_stmt><expr><call><name><name>rectPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>indicatorColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// default: line below current tab</comment>
        <decl_stmt><decl><type><name>View</name></type> <name>currentTab</name> <init>= <expr><call><name><name>tabsContainer</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>currentPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>lineLeft</name> <init>= <expr><call><name><name>currentTab</name><operator>.</operator><name>getLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>lineRight</name> <init>= <expr><call><name><name>currentTab</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// if there is an offset, start interpolating left and right coordinates between current and next tab</comment>
        <if>if <condition>(<expr><name>currentPositionOffset</name> <operator>&gt;</operator> <literal type="number">0f</literal> <operator>&amp;&amp;</operator> <name>currentPosition</name> <operator>&lt;</operator> <name>tabCount</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{

            <decl_stmt><decl><type><name>View</name></type> <name>nextTab</name> <init>= <expr><call><name><name>tabsContainer</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>currentPosition</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>nextTabLeft</name> <init>= <expr><call><name><name>nextTab</name><operator>.</operator><name>getLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>nextTabRight</name> <init>= <expr><call><name><name>nextTab</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>lineLeft</name> <operator>=</operator> <operator>(</operator><name>currentPositionOffset</name> <operator>*</operator> <name>nextTabLeft</name> <operator>+</operator> <operator>(</operator><literal type="number">1f</literal> <operator>-</operator> <name>currentPositionOffset</name><operator>)</operator> <operator>*</operator> <name>lineLeft</name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineRight</name> <operator>=</operator> <operator>(</operator><name>currentPositionOffset</name> <operator>*</operator> <name>nextTabRight</name> <operator>+</operator> <operator>(</operator><literal type="number">1f</literal> <operator>-</operator> <name>currentPositionOffset</name><operator>)</operator> <operator>*</operator> <name>lineRight</name><operator>)</operator></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>lineLeft</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>indicatorHeight</name></expr></argument>, <argument><expr><name>lineRight</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>rectPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// draw divider</comment>

        <expr_stmt><expr><call><name><name>dividerPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>dividerColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tabCount</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>tab</name> <init>= <expr><call><name><name>tabsContainer</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawLine</name></name><argument_list>(<argument><expr><call><name><name>tab</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dividerPadding</name></expr></argument>, <argument><expr><call><name><name>tab</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>dividerPadding</name></expr></argument>, <argument><expr><name>dividerPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <class><specifier>private</specifier> class <name>PageListener</name> <super><implements>implements <name>OnPageChangeListener</name></implements></super> <block>{

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrolled</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>positionOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>positionOffsetPixels</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>currentPosition</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentPositionOffset</name> <operator>=</operator> <name>positionOffset</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>scrollToChild</name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>positionOffset</name> <operator>*</operator> <call><name><name>tabsContainer</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>delegatePageListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>delegatePageListener</name><operator>.</operator><name>onPageScrolled</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>positionOffset</name></expr></argument>, <argument><expr><name>positionOffsetPixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onPageScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
            <if>if <condition>(<expr><name>state</name> <operator>==</operator> <name><name>ViewPager</name><operator>.</operator><name>SCROLL_STATE_IDLE</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>scrollToChild</name><argument_list>(<argument><expr><call><name><name>pager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><name>delegatePageListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>delegatePageListener</name><operator>.</operator><name>onPageScrollStateChanged</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>selectedPosition</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>delegatePageListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>delegatePageListener</name><operator>.</operator><name>onPageSelected</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></function>

    }</block></class>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setIndicatorColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indicatorColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indicatorColor</name></name> <operator>=</operator> <name>indicatorColor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setIndicatorColorResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indicatorColor</name></name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getIndicatorColor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>indicatorColor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setIndicatorHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indicatorLineHeightPx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>indicatorHeight</name></name> <operator>=</operator> <name>indicatorLineHeightPx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getIndicatorHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>indicatorHeight</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setUnderlineColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>underlineColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>underlineColor</name></name> <operator>=</operator> <name>underlineColor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setUnderlineColorResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>underlineColor</name></name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getUnderlineColor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>underlineColor</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDividerColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dividerColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dividerColor</name></name> <operator>=</operator> <name>dividerColor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDividerColorResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dividerColor</name></name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getDividerColor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dividerColor</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setUnderlineHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>underlineHeightPx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>underlineHeight</name></name> <operator>=</operator> <name>underlineHeightPx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getUnderlineHeight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>underlineHeight</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setDividerPadding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dividerPaddingPx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dividerPadding</name></name> <operator>=</operator> <name>dividerPaddingPx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getDividerPadding</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dividerPadding</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setScrollOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>scrollOffsetPx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scrollOffset</name></name> <operator>=</operator> <name>scrollOffsetPx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getScrollOffset</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>scrollOffset</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setShouldExpand</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>shouldExpand</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shouldExpand</name></name> <operator>=</operator> <name>shouldExpand</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getShouldExpand</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>shouldExpand</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isTextAllCaps</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>textAllCaps</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setAllCaps</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>textAllCaps</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>textAllCaps</name></name> <operator>=</operator> <name>textAllCaps</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTextSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>textSizePx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabTextSize</name></name> <operator>=</operator> <name>textSizePx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTextSize</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tabTextSize</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTextColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>textColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabTextColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTextColorResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabTextColor</name></name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTextColor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tabTextColor</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSelectedTextColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>textColor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedTabTextColor</name></name> <operator>=</operator> <name>textColor</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setSelectedTextColorResource</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedTabTextColor</name></name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSelectedTextColor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>selectedTabTextColor</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTypeface</name><parameter_list>(<parameter><decl><type><name>Typeface</name></type> <name>typeface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabTypeface</name></name> <operator>=</operator> <name>typeface</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabTypefaceStyle</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTabBackground</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabBackgroundResId</name></name> <operator>=</operator> <name>resId</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTabBackground</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tabBackgroundResId</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setTabPaddingLeftRight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>paddingPx</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tabPadding</name></name> <operator>=</operator> <name>paddingPx</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateTabStyles</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getTabPaddingLeftRight</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>tabPadding</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRestoreInstanceState</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>SavedState</name></type> <name>savedState</name> <init>= <expr><operator>(</operator><name>SavedState</name><operator>)</operator> <name>state</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onRestoreInstanceState</name></name><argument_list>(<argument><expr><call><name><name>savedState</name><operator>.</operator><name>getSuperState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>currentPosition</name> <operator>=</operator> <name><name>savedState</name><operator>.</operator><name>currentPosition</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>requestLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Parcelable</name></type> <name>onSaveInstanceState</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Parcelable</name></type> <name>superState</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SavedState</name></type> <name>savedState</name> <init>= <expr><operator>new</operator> <call><name>SavedState</name><argument_list>(<argument><expr><name>superState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>savedState</name><operator>.</operator><name>currentPosition</name></name> <operator>=</operator> <name>currentPosition</name></expr>;</expr_stmt>
        <return>return <expr><name>savedState</name></expr>;</return>
    }</block></function>

    <class><specifier>static</specifier> class <name>SavedState</name> <super><extends>extends <name>BaseSavedState</name></extends></super> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>currentPosition</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>SavedState</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>superState</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>superState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>private</specifier> <name>SavedState</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>currentPosition</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>writeToParcel</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>currentPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>SavedState</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>SavedState</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>SavedState</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <call><name>SavedState</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name><name>SavedState</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
                <return>return <expr><operator>new</operator> <name><name>SavedState</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
            }</block></function>
        }</block></class></expr></init></decl>;</decl_stmt>
    }</block></class>

}</block></class>
</unit>
