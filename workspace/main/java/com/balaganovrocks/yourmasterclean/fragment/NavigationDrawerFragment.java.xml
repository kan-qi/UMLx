<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\fragment\NavigationDrawerFragment.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RadioButton</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name><operator>.</operator><name>BaseFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name><operator>.</operator><name>BaseFragment</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>


<class><specifier>public</specifier> class <name>NavigationDrawerFragment</name> <super><extends>extends <name>BaseFragment</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><name>DrawerLayout</name></type> <name>mDrawerLayout</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type> <name>mFragmentContainerView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mFromSavedInstanceState</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>NavigationDrawerCallbacks</name></type> <name>mCallbacks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name><name>radioIds</name><index>[]</index></name> <init>= <expr><block>{
          <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>radio0</name></name></expr>,
          <comment type="line">//R.id.radio1,</comment>
       <comment type="line">//   R.id.radio2</comment>

  }</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>RadioButton</name></type> <name><name>radios</name><index>[]</index></name> <init>= <expr><operator>new</operator> <name><name>RadioButton</name><index>[<expr><name><name>radioIds</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// Indicate that this fragment would like to influence the set of</comment>
      <comment type="line">// actions in the action bar.</comment>
      <expr_stmt><expr><call><name>setHasOptionsMenu</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// TODO Auto-generated method stub</comment>

      <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_navigation_drawer</name></name></expr></argument>,
              <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>inject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>view</name></expr>;</return>
  }</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>fillData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>fillData</name><parameter_list>()</parameter_list> <block>{


      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>radioIds</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
          <expr_stmt><expr><name><name>radios</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>RadioButton</name><operator>)</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>radioIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>radios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><name>clickItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
  }</block></function>


  <function><specifier>public</specifier> <type><name>void</name></type> <name>setUp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fragmentId</name></decl></parameter>, <parameter><decl><type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>mFragmentContainerView</name> <operator>=</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name>fragmentId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mDrawerLayout</name> <operator>=</operator> <name>drawerLayout</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>setDrawerShadow</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>drawer_shadow</name></name></expr></argument>, <argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  }</block></function>


  <decl_stmt><decl><type><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></type> <name>clickItem</name> <init>= <expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>radios</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
              <if>if <condition>(<expr><call><name><name>v</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>radios</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name>selectItem</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then> <else>else <block>{
                  <expr_stmt><expr><name><name>radios</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></else></if>
          }</block></for>
      }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>


  <function><specifier>private</specifier> <type><name>void</name></type> <name>selectItem</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mDrawerLayout</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mDrawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name>mFragmentContainerView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      <if>if <condition>(<expr><name>mCallbacks</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>mCallbacks</name><operator>.</operator><name>onNavigationDrawerItemSelected</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
  }</block></function>


  <function><specifier>private</specifier> <type><name>ActionBar</name></type> <name>getActionBar</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getActionBar</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSaveInstanceState</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>outState</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSaveInstanceState</name></name><argument_list>(<argument><expr><name>outState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{
          <expr_stmt><expr><name>mCallbacks</name> <operator>=</operator> <operator>(</operator><name>NavigationDrawerCallbacks</name><operator>)</operator> <name>activity</name></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>ClassCastException</name><argument_list>(
                  <argument><expr><literal type="string">"Activity must implement NavigationDrawerCallbacks."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDetach</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>mCallbacks</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <interface><specifier>public</specifier> <specifier>static</specifier> interface <name>NavigationDrawerCallbacks</name> <block>{
      <function_decl><type><name>void</name></type> <name>onNavigationDrawerItemSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
