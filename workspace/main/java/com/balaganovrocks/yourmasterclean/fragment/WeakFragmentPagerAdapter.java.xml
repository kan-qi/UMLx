<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\fragment\WeakFragmentPagerAdapter.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentPagerAdapter</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * 
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>WeakFragmentPagerAdapter</name> <super><extends>extends <name>FragmentPagerAdapter</name></extends></super> <block>{

	<decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>mList</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getFragments</name><parameter_list>()</parameter_list> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>mList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>mList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>

		<return>return <expr><name>mList</name></expr>;</return>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>saveFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>fragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<return>return;</return>
		}</block></then></if>

		<for>for <control>(<init><decl><type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name></type> <name>item</name> <range>: <expr><name>mList</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>fragment</name></expr>)</condition><then> <block>{
				<return>return;</return>
			}</block></then></if>
		}</block></for>

		<expr_stmt><expr><call><name><name>mList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Fragment</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<constructor><specifier>protected</specifier> <name>WeakFragmentPagerAdapter</name><parameter_list>(<parameter><decl><type><name>FragmentManager</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

}</block></class>
</unit>
