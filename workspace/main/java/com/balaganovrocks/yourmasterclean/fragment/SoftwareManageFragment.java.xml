<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\fragment\SoftwareManageFragment.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>fragment</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ApplicationInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>IPackageStatsObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageStats</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>RemoteException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ListView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name><operator>.</operator><name>BaseFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>adapter</name><operator>.</operator><name>SoftwareAdapter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name><operator>.</operator><name>BaseFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>model</name><operator>.</operator><name>AppInfo</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name><operator>.</operator><name>StorageUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>
<import>import <name><name>butterknife</name><operator>.</operator><name>InjectView</name></name>;</import>


<class><specifier>public</specifier> class <name>SoftwareManageFragment</name> <super><extends>extends <name>BaseFragment</name></extends></super> <block>{


    <decl_stmt><decl><type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>REFRESH_BT</name> <init>= <expr><literal type="number">111</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ARG_POSITION</name> <init>= <expr><literal type="string">"position"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>position</name></decl>;</decl_stmt> <comment type="line">// 0:åºç¨è½¯ä»¶ï¼2 ç³»ç»è½¯ä»¶</comment>
    <decl_stmt><decl><type><name>SoftwareAdapter</name></type> <name>mAutoStartAdapter</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>listview</name></name></expr></argument>)</argument_list></annotation>
    <type><name>ListView</name></type> <name>listview</name></decl>;</decl_stmt>


    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>topText</name></name></expr></argument>)</argument_list></annotation>
    <type><name>TextView</name></type> <name>topText</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>userAppInfos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>systemAppInfos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progressBar</name></name></expr></argument>)</argument_list></annotation>
    <type><name>View</name></type> <name>mProgressBar</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>InjectView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progressBarText</name></name></expr></argument>)</argument_list></annotation>
    <type><name>TextView</name></type> <name>mProgressBarText</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Method</name></type> <name>mGetPackageSizeInfoMethod</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Integer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>task</name></decl>;</decl_stmt>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>ARG_POSITION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>,
                             <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// TODO Auto-generated method stub</comment>

        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_software</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>inject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mContext</name> <operator>=</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>mGetPackageSizeInfoMethod</name> <operator>=</operator> <call><name><name>mContext</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(
                    <argument><expr><literal type="string">"getPackageSizeInfo"</literal></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>IPackageStatsObserver</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><name>view</name></expr>;</return>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>fillData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>cancel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>fillData</name><parameter_list>()</parameter_list> <block>{

        <if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>topText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>topText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Attention</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></else></if>


        <expr_stmt><expr><name>task</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Integer</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
            <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>mAppCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
                <decl_stmt><decl><type><name>PackageManager</name></type> <name>pm</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PackageInfo</name></argument>&gt;</argument_list></name></type> <name>packInfos</name> <init>= <expr><call><name><name>pm</name><operator>.</operator><name>getInstalledPackages</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>publishProgress</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>packInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>appinfos</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>PackageInfo</name></type> <name>packInfo</name> <range>: <expr><name>packInfos</name></expr></range></decl></init>)</control> <block>{
                    <expr_stmt><expr><call><name>publishProgress</name><argument_list>(<argument><expr><operator>++</operator><name>mAppCount</name></expr></argument>, <argument><expr><call><name><name>packInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><specifier>final</specifier> <name>AppInfo</name></type> <name>appInfo</name> <init>= <expr><operator>new</operator> <call><name>AppInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>Drawable</name></type> <name>appIcon</name> <init>= <expr><call><name><name>packInfo</name><operator>.</operator><name>applicationInfo</name><operator>.</operator><name>loadIcon</name></name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setAppIcon</name></name><argument_list>(<argument><expr><name>appIcon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>flags</name> <init>= <expr><name><name>packInfo</name><operator>.</operator><name>applicationInfo</name><operator>.</operator><name>flags</name></name></expr></init></decl>;</decl_stmt>

                    <decl_stmt><decl><type><name>int</name></type> <name>uid</name> <init>= <expr><name><name>packInfo</name><operator>.</operator><name>applicationInfo</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setUid</name></name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>ApplicationInfo</name><operator>.</operator><name>FLAG_SYSTEM</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setUserApp</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//ç³»ç»åºç¨</comment>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setUserApp</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//ç¨æ·åºç¨</comment>
                    }</block></else></if>
                    <if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>ApplicationInfo</name><operator>.</operator><name>FLAG_EXTERNAL_STORAGE</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setInRom</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setInRom</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></else></if>
                    <decl_stmt><decl><type><name>String</name></type> <name>appName</name> <init>= <expr><call><name><name>packInfo</name><operator>.</operator><name>applicationInfo</name><operator>.</operator><name>loadLabel</name></name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setAppName</name></name><argument_list>(<argument><expr><name>appName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>packname</name> <init>= <expr><name><name>packInfo</name><operator>.</operator><name>packageName</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setPackname</name></name><argument_list>(<argument><expr><name>packname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>version</name> <init>= <expr><name><name>packInfo</name><operator>.</operator><name>versionName</name></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <try>try <block>{
                        <expr_stmt><expr><call><name><name>mGetPackageSizeInfoMethod</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{
                                <expr><name>packname</name></expr>,
                                <expr><operator>new</operator> <class><super><name><name>IPackageStatsObserver</name><operator>.</operator><name>Stub</name></name></super><argument_list>()</argument_list> <block>{
                                    <function><annotation>@<name>Override</name></annotation>
                                    <specifier>public</specifier> <type><name>void</name></type> <name>onGetStatsCompleted</name><parameter_list>(<parameter><decl><type><name>PackageStats</name></type> <name>pStats</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>succeeded</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RemoteException</name></expr></argument></throws> <block>{
                                        <synchronized>synchronized <init>(<expr><name>appInfo</name></expr>)</init> <block>{
                                            <expr_stmt><expr><call><name><name>appInfo</name><operator>.</operator><name>setPkgSize</name></name><argument_list>(<argument><expr><name><name>pStats</name><operator>.</operator><name>cacheSize</name></name> <operator>+</operator> <name><name>pStats</name><operator>.</operator><name>codeSize</name></name> <operator>+</operator> <name><name>pStats</name><operator>.</operator><name>dataSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                                        <expr_stmt/></block></synchronized></block></function></block></class></expr>}</block></expr></argument></argument_list></call></expr></expr_stmt>
                                    }</block></try>
                                }</block></for>
                        }</block></function>)</block><empty_stmt>;</empty_stmt></class></expr></expr_stmt>
                    }</block></function> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    }</block></catch>

                    <constructor_decl><name><name>appinfos</name><operator>.</operator><name>add</name></name><parameter_list>(<parameter><decl><type><name>appInfo</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
                }</block></class>
                <return>return <expr><name>appinfos</name></expr>;</return>
            }

            @<function><type><name>Override</name>
            <specifier>protected</specifier> <name>void</name></type> <name>onProgressUpdate</name><parameter_list>(<parameter><decl><type><name>Integer</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>mProgressBarText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scanning_m_of_n</name></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

                }</block></catch></try>

            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name>showProgressBar</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>mProgressBarText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>scanning</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

                }</block></catch></try>

                <comment type="line">//    loading.setVisibility(View.VISIBLE);</comment>
                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPreExecute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>

            <function><annotation>@<name>Override</name></annotation>
            <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>AppInfo</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{

                <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


                <try>try <block>{

                    <expr_stmt><expr><call><name>showProgressBar</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>userAppInfos</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>systemAppInfos</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <decl_stmt><decl><type><name>long</name></type> <name>allSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for <control>(<init><decl><type><name>AppInfo</name></type> <name>a</name> <range>: <expr><name>result</name></expr></range></decl></init>)</control> <block>{
                        <if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>isUserApp</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name>allSize</name> <operator>+=</operator> <call><name><name>a</name><operator>.</operator><name>getPkgSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>userAppInfos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <expr_stmt><expr><call><name><name>systemAppInfos</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></else></if>
                    }</block></for>
                    <if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>topText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>software_top_text</name></name></expr></argument>, <argument><expr><call><name><name>userAppInfos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>StorageUtil</name><operator>.</operator><name>convertStorage</name></name><argument_list>(<argument><expr><name>allSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mAutoStartAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>SoftwareAdapter</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>userAppInfos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>listview</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>mAutoStartAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    }</block></then> <else>else <block>{

                        <expr_stmt><expr><name>mAutoStartAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>SoftwareAdapter</name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>systemAppInfos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>listview</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>mAutoStartAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    }</block></else></if>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{

                }</block></catch></try>
            }</block></function>

        };
        <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>execute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


    }


    private <function><type><name>boolean</name></type> <name>isProgressBarVisible</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>mProgressBar</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>showProgressBar</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>show</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>show</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mProgressBar</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>mProgressBar</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(
                    <argument><expr><name>mContext</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_out</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mProgressBar</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroyView</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>reset</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}
</unit>
