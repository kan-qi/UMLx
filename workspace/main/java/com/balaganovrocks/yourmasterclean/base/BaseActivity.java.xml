<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\base\BaseActivity.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>umeng</name><operator>.</operator><name>analytics</name><operator>.</operator><name>MobclickAgent</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>dialogs</name><operator>.</operator><name>ProgressDialogFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>utils</name><operator>.</operator><name>T</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>ButterKnife</name></name>;</import>



<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseActivity</name> <super><extends>extends <name>FragmentActivity</name></extends></super> <block>{

	<comment type="block" format="javadoc">/**
	 * å±å¹çå®½åº¦ãé«åº¦ãå¯åº¦
	 */</comment>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mScreenWidth</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>int</name></type> <name>mScreenHeight</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mDensity</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>LogName</name></decl>;</decl_stmt> <comment type="line">// æå°çåç§°</comment>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>ImageView</name></type> <name>titleBack</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>titleName</name></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>TextView</name></type> <name>titleRightText</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>mDialogTag</name> <init>= <expr><literal type="string">"basedialog"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ProgressDialogFragment</name></type> <name>mProgressDialogFragment</name></decl>;</decl_stmt>

	<decl_stmt><decl><specifier>protected</specifier> <type><name>Boolean</name></type> <name>isfinish</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><specifier>protected</specifier> <type><name>ActivityTack</name></type> <name>tack</name> <init>= <expr><call><name><name>ActivityTack</name><operator>.</operator><name>getInstanse</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// requestWindowFeature(Window.FEATURE_NO_TITLE);</comment>
		<comment type="line">// getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</comment>
		<comment type="line">// WindowManager.LayoutParams.FLAG_FULLSCREEN);</comment>
		<expr_stmt><expr><name>mContext</name> <operator>=</operator> <name>this</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metric</name> <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>getWindowManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMetrics</name><argument_list>(<argument><expr><name>metric</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>mScreenWidth</name> <operator>=</operator> <name><name>metric</name><operator>.</operator><name>widthPixels</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mScreenHeight</name> <operator>=</operator> <name><name>metric</name><operator>.</operator><name>heightPixels</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mDensity</name> <operator>=</operator> <name><name>metric</name><operator>.</operator><name>density</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>LogName</name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tack</name><operator>.</operator><name>addActivity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>setContentView</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>layoutResID</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// TODO Auto-generated method stub</comment>
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setContentView</name></name><argument_list>(<argument><expr><name>layoutResID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ButterKnife</name><operator>.</operator><name>inject</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<comment type="block" format="javadoc">/** éè¿Classè·³è½¬çé¢ **/</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>startActivity</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cls</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>cls</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/** å«æBundleéè¿Classè·³è½¬çé¢ **/</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>startActivity</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cls</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setClass</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>cls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>bundle</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtras</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/** éè¿Actionè·³è½¬çé¢ **/</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>startActivity</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>action</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="block" format="javadoc">/** å«æBundleéè¿Actionè·³è½¬çé¢ **/</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>startActivity</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{
		<decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>bundle</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtras</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<comment type="line">// /**</comment>
	<comment type="line">// * åå¸</comment>
	<comment type="line">// *</comment>
	<comment type="line">// * @param message</comment>
	<comment type="line">// */</comment>
	<function><specifier>protected</specifier> <type><name>void</name></type> <name>showShort</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>showShort</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>protected</specifier> <type><name>void</name></type> <name>showLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>showLong</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><annotation>@<name>Override</name></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>finish</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>tack</name><operator>.</operator><name>removeActivity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>showDialogLoading</name><parameter_list>()</parameter_list> <block>{
		<expr_stmt><expr><call><name>showDialogLoading</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>showDialogLoading</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>mProgressDialogFragment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>mProgressDialogFragment</name> <operator>=</operator> <call><name><name>ProgressDialogFragment</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,
					<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mProgressDialogFragment</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>mProgressDialogFragment</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mDialogTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></function>

	<function><specifier>public</specifier> <type><name>void</name></type> <name>dismissDialogLoading</name><parameter_list>()</parameter_list> <block>{
		<if>if <condition>(<expr><name>mProgressDialogFragment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>mProgressDialogFragment</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MobclickAgent</name><operator>.</operator><name>onResume</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MobclickAgent</name><operator>.</operator><name>onPause</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

}</block></class>
</unit>
