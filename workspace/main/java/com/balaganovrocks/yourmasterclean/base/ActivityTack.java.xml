<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\superCleanMaster\app\src\main\java\com\balaganovrocks\yourmasterclean\base\ActivityTack.java"><package>package <name><name>com</name><operator>.</operator><name>balaganovrocks</name><operator>.</operator><name>yourmasterclean</name><operator>.</operator><name>base</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>umeng</name><operator>.</operator><name>analytics</name><operator>.</operator><name>MobclickAgent</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * activity æ ç®¡ç
 * @author duohuo-jinghao
 *
 */</comment>
<class><specifier>public</specifier> class <name>ActivityTack</name> <block>{
	
	
	<decl_stmt><decl><specifier>public</specifier> 	 <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>activityList</name><init>=<expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>ActivityTack</name></type> <name>tack</name><init>=<expr><operator>new</operator> <call><name>ActivityTack</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<function><specifier>public</specifier> <specifier>static</specifier>  <type><name>ActivityTack</name></type> <name>getInstanse</name><parameter_list>()</parameter_list><block>{
		<return>return <expr><name>tack</name></expr>;</return>
	}</block></function>
	
	<constructor><specifier>private</specifier> <name>ActivityTack</name><parameter_list>()</parameter_list><block>{
		
	}</block></constructor>
	
	<function><specifier>public</specifier>  <type><name>void</name></type> <name>addActivity</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>activityList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<function><specifier>public</specifier>  <type><name>void</name></type> <name>removeActivity</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name><name>activityList</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	<comment type="block" format="javadoc">/**
	 * å®å¨éåº
	 * @param context
	 */</comment>
	<function><specifier>public</specifier>  <type><name>void</name></type> <name>exit</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list><block>{

        <expr_stmt><expr><call><name><name>MobclickAgent</name><operator>.</operator><name>onKillProcess</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><call><name><name>activityList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition> <block>{
			<expr_stmt><expr><call><name><name>activityList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>activityList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
	    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>exit</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<comment type="block" format="javadoc">/**
	 * æ ¹æ®class nameè·åactivity
	 * @param name
	 * @return
	 */</comment>
	<function><specifier>public</specifier> <type><name>Activity</name></type> <name>getActivityByClassName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list><block>{
		<for>for<control>(<init><decl><type><name>Activity</name></type> <name>ac</name><range>:<expr><name>activityList</name></expr></range></decl></init>)</control><block>{
			<if>if<condition>(<expr><call><name><name>ac</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call><operator>.</operator><call><name>indexOf</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
		      	<return>return <expr><name>ac</name></expr>;</return>	
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>
	
	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"rawtypes"</literal></expr></argument>)</argument_list></annotation>
	<specifier>public</specifier> <type><name>Activity</name></type> <name>getActivityByClass</name><parameter_list>(<parameter><decl><type><name>Class</name></type> <name>cs</name></decl></parameter>)</parameter_list><block>{
		<for>for<control>(<init><decl><type><name>Activity</name></type> <name>ac</name><range>:<expr><name>activityList</name></expr></range></decl></init>)</control><block>{
			<if>if<condition>(<expr><call><name><name>ac</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block>{
		      	<return>return <expr><name>ac</name></expr>;</return>	
			}</block></then></if>
		}</block></for>
		<return>return <expr><literal type="null">null</literal></expr>;</return>
	}</block></function>
	
	<comment type="block" format="javadoc">/**
	 * å¼¹åºactivity
	 * @param activity
	 */</comment>
	<function><specifier>public</specifier> <type><name>void</name></type> <name>popActivity</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list><block>{
		<expr_stmt><expr><call><name>removeActivity</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	
	
	<comment type="block" format="javadoc">/**
	 * å¼¹åºactivityå°
	 * @param cs
	 */</comment>
	<function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"rawtypes"</literal></expr></argument>)</argument_list></annotation>
	<specifier>public</specifier> <type><name>void</name></type> <name>popUntilActivity</name><parameter_list>(<parameter><decl><type><name>Class</name><modifier>...</modifier></type> <name>cs</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>list</name><init>=<expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		 <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>activityList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
			 <decl_stmt><decl><type><name>Activity</name></type> <name>ac</name><init>= <expr><call><name><name>activityList</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			 <decl_stmt><decl><type><name>boolean</name></type> <name>isTop</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
			 <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>cs</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
				 <if>if<condition>(<expr><call><name><name>ac</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name><name>cs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					 <expr_stmt><expr><name>isTop</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
					 <break>break;</break>
				 }</block></then></if>
			}</block></for>
			 <if>if<condition>(<expr><operator>!</operator><name>isTop</name></expr>)</condition><then><block>{
				 <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			 }</block></then><else>else <block type="pseudo"><break>break;</break></block></else></if>
		}</block></for>
		 <for>for <control>(<init><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Activity</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control> <block>{
				<decl_stmt><decl><type><name>Activity</name></type> <name>activity</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>popActivity</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></for>
	}</block></function>
}</block></class>
</unit>
