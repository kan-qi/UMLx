<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\accounts\AccountUtils.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>accounts</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>Account</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountManagerFuture</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountsException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AuthenticatorDescription</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AuthenticatorException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>OperationCanceledException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>afollestad</name><operator>.</operator><name>materialdialogs</name><operator>.</operator><name>MaterialDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>User</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicInteger</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountManager</name><operator>.</operator><name>KEY_ACCOUNT_NAME</name></name>;</import>
<import>import static <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name><operator>.</operator><name>DEBUG</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>BuildConfig</name><operator>.</operator><name>ACCOUNT_TYPE</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Helpers for accessing {@link AccountManager}
 */</comment>
<class><specifier>public</specifier> class <name>AccountUtils</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"AccountUtils"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>AUTHENTICATOR_CHECKED</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>HAS_AUTHENTICATOR</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>AtomicInteger</name></type> <name>UPDATE_COUNT</name> <init>= <expr><operator>new</operator> <call><name>AtomicInteger</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>AuthenticatorConflictException</name> <super><extends>extends <name>IOException</name></extends></super> <block>{

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">641279204734869183L</literal></expr></init></decl>;</decl_stmt>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Verify authenticator registered for account type matches the package name
     * of this application
     *
     * @param manager
     * @return true is authenticator registered, false otherwise
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasAuthenticator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AccountManager</name></type> <name>manager</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.hasAuthenticator(android.accounts.AccountManager)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><operator>!</operator><name>AUTHENTICATOR_CHECKED</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name><name>AuthenticatorDescription</name><index>[]</index></name></type> <name>types</name> <init>= <expr><call><name><name>manager</name>
                    <operator>.</operator><name>getAuthenticatorTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>types</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>types</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <for>for <control>(<init><decl><type><name>AuthenticatorDescription</name></type> <name>descriptor</name> <range>: <expr><name>types</name></expr></range></decl></init>)</control> <block>{
                    <if>if <condition>(<expr><name>descriptor</name> <operator>!=</operator> <literal type="null">null</literal>
                            <operator>&amp;&amp;</operator> <call><name><name>ACCOUNT_TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>descriptor</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>HAS_AUTHENTICATOR</name> <operator>=</operator> <call><name><name>BuildConfig</name><operator>.</operator><name>APPLICATION_ID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>descriptor</name><operator>.</operator><name>packageName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></then></if>
            <expr_stmt><expr><name>AUTHENTICATOR_CHECKED</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.hasAuthenticator(android.accounts.AccountManager)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>HAS_AUTHENTICATOR</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Is the given user the owner of the default account?
     *
     * @param context
     * @param user
     * @return true if default account user, false otherwise
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUser</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUser(android.content.Context,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>user</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUser(android.content.Context,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>login</name> <init>= <expr><call><name><name>user</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>login</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUser(android.content.Context,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
        }</block></then></if>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUser(android.content.Context,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>login</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name>getLogin</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get login name of configured account
     *
     * @param context
     * @return login name or null if none configure
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLogin</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.accounts.AccountUtils.getLogin(android.content.Context)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name>Account</name></type> <name>account</name> <init>= <expr><call><name>getAccount</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.accounts.AccountUtils.getLogin(android.content.Context)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><ternary><condition><expr><name>account</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>account</name><operator>.</operator><name>name</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get configured account
     *
     * @param context
     * @return account or null if none
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Account</name></type> <name>getAccount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccount(android.content.Context)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name><name>Account</name><index>[]</index></name></type> <name>accounts</name> <init>= <expr><call><name><name>AccountManager</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getAccountsByType</name><argument_list>(<argument><expr><name>ACCOUNT_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccount(android.content.Context)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><ternary><condition><expr><name><name>accounts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>accounts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Account</name><index>[]</index></name></type> <name>getAccounts</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AccountManager</name></type> <name>manager</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>OperationCanceledException</name></expr></argument>, <argument><expr><name>AuthenticatorException</name></expr></argument>,
            <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"[android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccounts(android.accounts.AccountManager)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name><name>AccountManagerFuture</name><argument_list type="generic">&lt;<argument><name><name>Account</name><index>[]</index></name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><call><name><name>manager</name>
                <operator>.</operator><name>getAccountsByTypeAndFeatures</name></name><argument_list>(<argument><expr><name>ACCOUNT_TYPE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name><name>Account</name><index>[]</index></name></type> <name>accounts</name> <init>= <expr><call><name><name>future</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>accounts</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>accounts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"[android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccounts(android.accounts.AccountManager)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>getPasswordAccessibleAccounts</name><argument_list>(<argument><expr><name>manager</name></expr></argument>, <argument><expr><name>accounts</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
        }</block></then> <else>else <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"[android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccounts(android.accounts.AccountManager)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>new</operator> <name><name>Account</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>}</block>
        }</block></else></if>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get default account where password can be retrieved
     *
     * @param context
     * @return password accessible account or null if none
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Account</name></type> <name>getPasswordAccessibleAccount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getPasswordAccessibleAccount(android.content.Context)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>AccountManager</name></type> <name>manager</name> <init>= <expr><call><name><name>AccountManager</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Account</name><index>[]</index></name></type> <name>accounts</name> <init>= <expr><call><name><name>manager</name><operator>.</operator><name>getAccountsByType</name></name><argument_list>(<argument><expr><name>ACCOUNT_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>accounts</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>accounts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getPasswordAccessibleAccount(android.content.Context)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="null">null</literal></expr>;</return>}</block>
        }</block></then></if>

        <try>try <block>{
            <expr_stmt><expr><name>accounts</name> <operator>=</operator> <call><name>getPasswordAccessibleAccounts</name><argument_list>(<argument><expr><name>manager</name></expr></argument>, <argument><expr><name>accounts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>AuthenticatorConflictException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getPasswordAccessibleAccount(android.content.Context)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="null">null</literal></expr>;</return>}</block>
        }</block></catch></try>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getPasswordAccessibleAccount(android.content.Context)"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><ternary><condition><expr><name>accounts</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>accounts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>accounts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Account</name><index>[]</index></name></type> <name>getPasswordAccessibleAccounts</name><parameter_list>(
            <parameter><decl><type><specifier>final</specifier> <name>AccountManager</name></type> <name>manager</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Account</name><index>[]</index></name></type> <name>candidates</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>AuthenticatorConflictException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"[android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getPasswordAccessibleAccounts(android.accounts.AccountManager,[android.accounts.Account)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Account</name></argument>&gt;</argument_list></name></type> <name>accessible</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(
                <argument><expr><name><name>candidates</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>exceptionThrown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Account</name></type> <name>account</name> <range>: <expr><name>candidates</name></expr></range></decl></init>)</control> <block>{
            <try>try <block>{
                <expr_stmt><expr><call><name><name>manager</name><operator>.</operator><name>getPassword</name></name><argument_list>(<argument><expr><name>account</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>accessible</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>account</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>ignored</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><name>exceptionThrown</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></for>
        <if>if <condition>(<expr><call><name><name>accessible</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>exceptionThrown</name></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>AuthenticatorConflictException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"[android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getPasswordAccessibleAccounts(android.accounts.AccountManager,[android.accounts.Account)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>accessible</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Account</name><index>[<expr><call><name><name>accessible</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get account used for authentication
     *
     * @param manager
     * @param activity
     * @return account
     * @throws IOException
     * @throws AccountsException
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Account</name></type> <name>getAccount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>AccountManager</name></type> <name>manager</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>AccountsException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccount(android.accounts.AccountManager,android.app.Activity)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>loggable</name> <init>= <expr><call><name><name>Log</name><operator>.</operator><name>isLoggable</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>loggable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Getting account"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>activity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Activity cannot be null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>activity</name><operator>.</operator><name>isFinishing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>OperationCanceledException</name><argument_list>()</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>Account</name><index>[]</index></name></type> <name>accounts</name></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name>hasAuthenticator</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <throw>throw <expr><operator>new</operator> <call><name>AuthenticatorConflictException</name><argument_list>()</argument_list></call></expr>;</throw>
            }</block></then></if>

            <while>while <condition>(<expr><operator>(</operator><name>accounts</name> <operator>=</operator> <call><name>getAccounts</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <if>if <condition>(<expr><name>loggable</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No GitHub accounts for activity="</literal> <operator>+</operator> <name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <decl_stmt><decl><type><name>Bundle</name></type> <name>result</name> <init>= <expr><call><name><name>manager</name><operator>.</operator><name>addAccount</name></name><argument_list>(<argument><expr><name>ACCOUNT_TYPE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                        <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getResult</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <if>if <condition>(<expr><name>loggable</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,
                            <argument><expr><literal type="string">"Added account "</literal>
                                    <operator>+</operator> <call><name><name>result</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_ACCOUNT_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></while>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OperationCanceledException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Excepting retrieving account"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>AccountsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Excepting retrieving account"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>AuthenticatorConflictException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>runOnUiThread</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>showConflictMessage</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Excepting retrieving account"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr><name>loggable</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Returning account "</literal> <operator>+</operator> <name><name>accounts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.accounts.Account com.github.pockethub.android.accounts.AccountUtils.getAccount(android.accounts.AccountManager,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name><name>accounts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Update account
     *
     * @param account
     * @param activity
     * @return true if account was updated, false otherwise
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>updateAccount</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Account</name></type> <name>account</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name><name>UPDATE_COUNT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <synchronized>synchronized <init>(<expr><name>UPDATE_COUNT</name></expr>)</init> <block>{
            <comment type="line">// Don't update the account if the account was successfully updated</comment>
            <comment type="line">// while the lock was being waited for</comment>
            <if>if <condition>(<expr><name>count</name> <operator>!=</operator> <call><name><name>UPDATE_COUNT</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
            }</block></then></if>

            <decl_stmt><decl><type><name>AccountManager</name></type> <name>manager</name> <init>= <expr><call><name><name>AccountManager</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <try>try <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name>hasAuthenticator</name><argument_list>(<argument><expr><name>manager</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <throw>throw <expr><operator>new</operator> <call><name>AuthenticatorConflictException</name><argument_list>()</argument_list></call></expr>;</throw>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>manager</name><operator>.</operator><name>updateCredentials</name></name><argument_list>(<argument><expr><name>account</name></expr></argument>, <argument><expr><name>ACCOUNT_TYPE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                        <argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getResult</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>UPDATE_COUNT</name><operator>.</operator><name>incrementAndGet</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>OperationCanceledException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Excepting retrieving account"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
            }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>AccountsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Excepting retrieving account"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
            }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>AuthenticatorConflictException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>runOnUiThread</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>showConflictMessage</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
            }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Excepting retrieving account"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.updateAccount(android.accounts.Account,android.app.Activity)"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
            }</block></catch></try>
        }</block></synchronized>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Show conflict message about previously registered authenticator from
     * another application
     *
     * @param activity
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>showConflictMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.accounts.AccountUtils.showConflictMessage(android.app.Activity)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><operator>new</operator> <call><name><name>MaterialDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>title</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>authenticator_conflict_title</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>content</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>authenticator_conflict_message</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>positiveText</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>cancelListener</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>dialog</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>onPositive</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>activity</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.accounts.AccountUtils.showConflictMessage(android.app.Activity)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Is the given {@link Exception} due to a 401 Unauthorized API response?
     *
     * @param e
     * @return true if 401, false otherwise
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUnauthorized</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUnauthorized(android.accounts.AccountsException)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>message</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>e</name> <operator>instanceof</operator> <name>IOException</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>cause</name> <init>= <expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cause</name> <operator>instanceof</operator> <name>IOException</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>causeMessage</name> <init>= <expr><call><name><name>cause</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>causeMessage</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>message</name> <operator>=</operator> <name>causeMessage</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUnauthorized(android.accounts.AccountsException)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
        }</block></then></if>

        <if>if <condition>(<expr><literal type="string">"Received authentication challenge is null"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUnauthorized(android.accounts.AccountsException)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.accounts.AccountUtils.isUnauthorized(android.accounts.AccountsException)"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="string">"No authentication challenges found"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>}</block>

    }</block></function>
}</block></class>
</unit>
