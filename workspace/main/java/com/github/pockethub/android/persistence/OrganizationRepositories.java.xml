<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\persistence\OrganizationRepositories.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>persistence</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>Account</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteQueryBuilder</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>GitHubRequest</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>auto</name><operator>.</operator><name>factory</name><operator>.</operator><name>AutoFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>auto</name><operator>.</operator><name>factory</name><operator>.</operator><name>Provided</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>core</name><operator>.</operator><name>ServiceGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Page</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>activity</name><operator>.</operator><name>WatchingService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>repositories</name><operator>.</operator><name>RepositoryService</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Provider</name></name>;</import>

<import>import <name><name>retrofit2</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Cache of repositories under a given organization
 */</comment>
<class><annotation>@<name>AutoFactory</name></annotation>
<specifier>public</specifier> class <name>OrganizationRepositories</name> <super><implements>implements <name><name>PersistableResource</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>User</name></type> <name>org</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Provider</name><argument_list type="generic">&lt;<argument><name>Account</name></argument>&gt;</argument_list></name></type> <name>accountProvider</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create repositories cache for a given organization
     *
     * @param orgs
     * @param context
     * @param accountProvider
     */</comment>
    <constructor><specifier>public</specifier> <name>OrganizationRepositories</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>orgs</name></decl></parameter>,
                                    <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                    <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name><name>Provider</name><argument_list type="generic">&lt;<argument><name>Account</name></argument>&gt;</argument_list></name></type> <name>accountProvider</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.persistence.OrganizationRepositories.OrganizationRepositories(com.meisolsson.githubsdk.model.User,@Provided Context,@Provided Provider&lt;Account&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>org</name></name> <operator>=</operator> <name>orgs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>accountProvider</name></name> <operator>=</operator> <name>accountProvider</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.persistence.OrganizationRepositories.OrganizationRepositories(com.meisolsson.githubsdk.model.User,@Provided Context,@Provided Provider&lt;Account&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Cursor</name></type> <name>getCursor</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>readableDatabase</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.database.Cursor com.github.pockethub.android.persistence.OrganizationRepositories.getCursor(android.database.sqlite.SQLiteDatabase)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>SQLiteQueryBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>SQLiteQueryBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTables</name></name><argument_list>(<argument><expr><literal type="string">"repos JOIN users ON (repos.ownerId = users.id)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.Cursor com.github.pockethub.android.persistence.OrganizationRepositories.getCursor(android.database.sqlite.SQLiteDatabase)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>builder</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>readableDatabase</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
                <expr><literal type="string">"repos.repoId"</literal></expr>, <expr><literal type="string">"repos.name"</literal></expr>, <expr><literal type="string">"users.id"</literal></expr>, <expr><literal type="string">"users.name"</literal></expr>, <expr><literal type="string">"users.avatarurl"</literal></expr>,
                <expr><literal type="string">"repos.private"</literal></expr>, <expr><literal type="string">"repos.fork"</literal></expr>, <expr><literal type="string">"repos.description"</literal></expr>, <expr><literal type="string">"repos.forks"</literal></expr>,
                <expr><literal type="string">"repos.watchers"</literal></expr>, <expr><literal type="string">"repos.language"</literal></expr>, <expr><literal type="string">"repos.hasIssues"</literal></expr>, <expr><literal type="string">"repos.mirrorUrl"</literal></expr>,
                <expr><literal type="string">"repos.permissions_admin"</literal></expr>, <expr><literal type="string">"repos.permissions_pull"</literal></expr>, <expr><literal type="string">"repos.permissions_push"</literal></expr> }</block></expr></argument>,
                <argument><expr><literal type="string">"repos.orgId=?"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Repository</name></type> <name>loadFrom</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.Repository com.github.pockethub.android.persistence.OrganizationRepositories.loadFrom(android.database.Cursor)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>User</name></type> <name>owner</name> <init>= <expr><call><name><name>User</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>login</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>id</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>avatarUrl</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Permissions</name></type> <name>permissions</name> <init>= <expr><call><name><name>Permissions</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>admin</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>push</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>pull</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.Repository com.github.pockethub.android.persistence.OrganizationRepositories.loadFrom(android.database.Cursor)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Repository</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>owner</name><argument_list>(<argument><expr><name>owner</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>name</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>id</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>isPrivate</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>isFork</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>description</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>forksCount</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>watchersCount</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>language</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>hasIssues</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>mirrorUrl</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>permissions</name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>store</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>repos</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.persistence.OrganizationRepositories.store(android.database.sqlite.SQLiteDatabase,List&lt;Repository&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="string">"repos"</literal></expr></argument>, <argument><expr><literal type="string">"orgId=?"</literal></expr></argument>,
                <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>repos</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.persistence.OrganizationRepositories.store(android.database.sqlite.SQLiteDatabase,List&lt;Repository&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>Repository</name></type> <name>repo</name> <range>: <expr><name>repos</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>User</name></type> <name>owner</name> <init>= <expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"repoId"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"orgId"</literal></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"ownerId"</literal></expr></argument>, <argument><expr><call><name><name>owner</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"private"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>repo</name><operator>.</operator><name>isPrivate</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"fork"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>repo</name><operator>.</operator><name>isFork</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"description"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>description</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"forks"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>forksCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"watchers"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>watchersCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>language</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"hasIssues"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>repo</name><operator>.</operator><name>hasIssues</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mirrorUrl"</literal></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>mirrorUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"permissions_admin"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>repo</name><operator>.</operator><name>permissions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>admin</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"permissions_pull"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>repo</name><operator>.</operator><name>permissions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>pull</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"permissions_push"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>repo</name><operator>.</operator><name>permissions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>push</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"repos"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><call><name><name>owner</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><call><name><name>owner</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"avatarurl"</literal></expr></argument>, <argument><expr><call><name><name>owner</name><operator>.</operator><name>avatarUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>request</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.request()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><call><name>isAuthenticatedUser</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>all</name> <init>= <expr><operator>new</operator> <call><name><name>TreeSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>repo1</name></decl></parameter>, <parameter><decl><name>repo2</name></decl></parameter>)</parameter_list> -&gt; <block>{
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>id1</name> <init>= <expr><call><name><name>repo1</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>id2</name> <init>= <expr><call><name><name>repo2</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>id1</name> <operator>&gt;</operator> <name>id2</name></expr>)</condition><then> <block>{
                    <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.request()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">1</literal></expr>;</return>}</block>
                }</block></then></if>
                <if>if <condition>(<expr><name>id1</name> <operator>&lt;</operator> <name>id2</name></expr>)</condition><then> <block>{
                    <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.request()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>}</block>
                }</block></then></if>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.request()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block>
            }</block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getAllItems</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt;
                    <block type="pseudo"><expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>RepositoryService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>getUserRepositories</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getAllItems</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt;
                    <block type="pseudo"><expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WatchingService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>getWatchedRepositories</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.request()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>all</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
        }</block></then> <else>else <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.request()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>getAllItems</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt;
                    <block type="pseudo"><expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>RepositoryService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>getOrganizationRepositories</name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>getAllItems</name><parameter_list>(<parameter><decl><type><name><name>GitHubRequest</name><argument_list type="generic">&lt;<argument><name><name>Response</name><argument_list type="generic">&lt;<argument><name><name>Page</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.getAllItems(GitHubRequest&lt;Response&lt;Page&lt;Repository&gt;&gt;&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>repos</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>current</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <while>while<condition>(<expr><name>current</name> <operator>!=</operator> <name>last</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name><name>Page</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>page</name> <init>= <expr><call><name><name>request</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>blockingGet</name><argument_list>()</argument_list></call><operator>.</operator><call><name>body</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>repos</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>page</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>last</name> <operator>=</operator> <ternary><condition><expr><call><name><name>page</name><operator>.</operator><name>last</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>page</name><operator>.</operator><name>last</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name>current</name> <operator>=</operator> <ternary><condition><expr><call><name><name>page</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>page</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
        }</block></while>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.OrganizationRepositories.getAllItems(GitHubRequest&lt;Response&lt;Page&lt;Repository&gt;&gt;&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>repos</name></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAuthenticatedUser</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.persistence.OrganizationRepositories.isAuthenticatedUser()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.persistence.OrganizationRepositories.isAuthenticatedUser()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>org</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>accountProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.persistence.OrganizationRepositories.toString()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.persistence.OrganizationRepositories.toString()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">'['</literal> <operator>+</operator> <call><name><name>org</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="char">']'</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>
