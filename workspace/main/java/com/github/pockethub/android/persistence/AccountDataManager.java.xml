<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\persistence\AccountDataManager.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>persistence</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteQueryBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>RequestReader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>RequestWriter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>issue</name><operator>.</operator><name>IssueFilter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>User</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Named</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>MessageFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Single</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>functions</name><operator>.</operator><name>Consumer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manager cache for an account
 */</comment>
<class><specifier>public</specifier> class <name>AccountDataManager</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"AccountDataManager"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Executor</name></type> <name>EXECUTOR</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newFixedThreadPool</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Format version to bump if serialization format changes and cache should
     * be ignored
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FORMAT_VERSION</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name>DatabaseCache</name></type> <name>dbCache</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name>OrganizationRepositoriesFactory</name></type> <name>allRepos</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name>Organizations</name></type> <name>userAndOrgsResource</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <annotation>@<name>Named</name><argument_list>(<argument><expr><literal type="string">"cacheDir"</literal></expr></argument>)</argument_list></annotation>
    <specifier>protected</specifier> <type><name>File</name></type> <name>root</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>Inject</name></annotation>
    <specifier>public</specifier> <name>AccountDataManager</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExecute</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.persistence.AccountDataManager.AccountDataManager()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return context
     */</comment>
    <function><specifier>public</specifier> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.content.Context com.github.pockethub.android.persistence.AccountDataManager.getContext()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.content.Context com.github.pockethub.android.persistence.AccountDataManager.getContext()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>context</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Read data from file
     *
     * @param file
     * @return data
     */</comment>
    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>V</name></parameter>&gt;</parameter_list> <type><name>V</name></type> <name>read</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"java.lang.Object com.github.pockethub.android.persistence.AccountDataManager.read(android.content.Context,java.io.File)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type> <name>length</name> <init>= <expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>data</name> <init>= <expr><operator>new</operator> <call><name>RequestReader</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>FORMAT_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>MessageFormat</name><operator>.</operator><name>format</name></name><argument_list>(
                    <argument><expr><literal type="string">"Cache hit to {0}, {1} ms to load {2} bytes"</literal></expr></argument>,
                    <argument><expr><call><name><name>file</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator></expr></argument>,
                    <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"java.lang.Object com.github.pockethub.android.persistence.AccountDataManager.read(android.content.Context,java.io.File)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>(</operator><name>V</name><operator>)</operator> <name>data</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Write data to file
     *
     * @param file
     * @param data
     * @return this manager
     */</comment>
    <function><specifier>private</specifier> <type><name>AccountDataManager</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.persistence.AccountDataManager com.github.pockethub.android.persistence.AccountDataManager.write(java.io.File,Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><operator>new</operator> <call><name>RequestWriter</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>FORMAT_VERSION</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>write</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.persistence.AccountDataManager com.github.pockethub.android.persistence.AccountDataManager.write(java.io.File,Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Query tables for columns
     *
     * @param helper
     * @param tables
     * @param columns
     * @return cursor
     */</comment>
    <function><specifier>protected</specifier> <type><name>Cursor</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>SQLiteOpenHelper</name></type> <name>helper</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tables</name></decl></parameter>,
            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.database.Cursor com.github.pockethub.android.persistence.AccountDataManager.query(android.database.sqlite.SQLiteOpenHelper,String,[String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.Cursor com.github.pockethub.android.persistence.AccountDataManager.query(android.database.sqlite.SQLiteOpenHelper,String,[String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>query</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>tables</name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Query tables for columns
     *
     * @param helper
     * @param tables
     * @param columns
     * @param selection
     * @param selectionArgs
     * @return cursor
     */</comment>
    <function><specifier>protected</specifier> <type><name>Cursor</name></type> <name>query</name><parameter_list>(<parameter><decl><type><name>SQLiteOpenHelper</name></type> <name>helper</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>tables</name></decl></parameter>,
            <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>columns</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>selection</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.database.Cursor com.github.pockethub.android.persistence.AccountDataManager.query(android.database.sqlite.SQLiteOpenHelper,String,[String,String,[String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>SQLiteQueryBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>SQLiteQueryBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTables</name></name><argument_list>(<argument><expr><name>tables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.Cursor com.github.pockethub.android.persistence.AccountDataManager.query(android.database.sqlite.SQLiteOpenHelper,String,[String,String,[String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>builder</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><call><name><name>helper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>,
                <argument><expr><name>selectionArgs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get organizations
     * &lt;p/&gt;
     * This method may perform file and/or network I/O and should never be
     * called on the UI-thread
     *
     * @param forceReload
     * @return list of user and Orgs
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>getOrgs</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>forceReload</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;User&gt; com.github.pockethub.android.persistence.AccountDataManager.getOrgs(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;User&gt; com.github.pockethub.android.persistence.AccountDataManager.getOrgs(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><ternary><condition><expr><name>forceReload</name></expr> ?</condition><then> <expr><call><name><name>dbCache</name><operator>.</operator><name>requestAndStore</name></name><argument_list>(<argument><expr><name>userAndOrgsResource</name></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><call><name><name>dbCache</name><operator>.</operator><name>loadOrRequest</name></name><argument_list>(<argument><expr><name>userAndOrgsResource</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get repositories for given {@link User}
     * &lt;p/&gt;
     * This method may perform network I/O and should never be called on the
     * UI-thread
     *
     * @param user
     * @param forceReload
     *            if true, cached data will not be returned
     * @return list of repositories
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Repository</name></argument>&gt;</argument_list></name></type> <name>getRepos</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>User</name></type> <name>user</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forceReload</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.AccountDataManager.getRepos(com.meisolsson.githubsdk.model.User,boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>OrganizationRepositories</name></type> <name>resource</name> <init>= <expr><call><name><name>allRepos</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><name>user</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Repository&gt; com.github.pockethub.android.persistence.AccountDataManager.getRepos(com.meisolsson.githubsdk.model.User,boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><ternary><condition><expr><name>forceReload</name></expr> ?</condition><then> <expr><call><name><name>dbCache</name><operator>.</operator><name>requestAndStore</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>dbCache</name>
                <operator>.</operator><name>loadOrRequest</name></name><argument_list>(<argument><expr><name>resource</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get bookmarked issue filters
     * &lt;p/&gt;
     * This method may perform network I/O and should never be called on the
     * UI-thread
     *
     * @return non-null but possibly empty collection of issue filters
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>getIssueFilters</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Collection&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.getIssueFilters()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"issue_filters.ser"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>cached</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>cached</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Collection&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.getIssueFilters()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>cached</name></expr>;</return>}</block>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Collection&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.getIssueFilters()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add issue filter to store
     * &lt;p/&gt;
     * This method may perform file I/O and should never be called on the
     * UI-thread
     *
     * @param filter
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>addIssueFilter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>IssueFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.addIssueFilter(com.github.pockethub.android.core.issue.IssueFilter)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.addIssueFilter(com.github.pockethub.android.core.issue.IssueFilter)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Single</name><operator>.</operator><name>fromCallable</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"issue_filters.ser"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>filters</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>filters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>filters</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>filters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.addIssueFilter(com.github.pockethub.android.core.issue.IssueFilter)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>filter</name></expr>;</return>}</block>
        }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>doOnError</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Exception adding issue filter"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add issue filter from store
     * &lt;p/&gt;
     * This method may perform file I/O and should never be called on the
     * UI-thread
     *
     * @param filter
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>removeIssueFilter</name><parameter_list>(<parameter><decl><type><name>IssueFilter</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.removeIssueFilter(com.github.pockethub.android.core.issue.IssueFilter)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.removeIssueFilter(com.github.pockethub.android.core.issue.IssueFilter)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Single</name><operator>.</operator><name>fromCallable</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>File</name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"issue_filters.ser"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>filters</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>filters</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>filters</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>filters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;IssueFilter&gt; com.github.pockethub.android.persistence.AccountDataManager.removeIssueFilter(com.github.pockethub.android.core.issue.IssueFilter)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>filter</name></expr>;</return>}</block>
        }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>doOnError</name><argument_list>( <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Exception removing issue filter"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>
}</block></class>
</unit>
