<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\persistence\DatabaseCache.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>persistence</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Provider</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Given a PersistableResource, this class will take support loading/storing
 * it's data or requesting fresh data, as appropriate.
 */</comment>
<class><specifier>public</specifier> class <name>DatabaseCache</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"DatabaseCache"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name><name>Provider</name><argument_list type="generic">&lt;<argument><name>CacheHelper</name></argument>&gt;</argument_list></name></type> <name>helperProvider</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>Inject</name></annotation>
    <specifier>public</specifier> <name>DatabaseCache</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExecute</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.persistence.DatabaseCache.DatabaseCache()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></constructor>

    <comment type="block" format="javadoc">/**
     * Get writable database
     *
     * @param helper
     * @return writable database or null if it failed to create/open
     */</comment>
    <function><specifier>protected</specifier> <type><name>SQLiteDatabase</name></type> <name>getWritable</name><parameter_list>(<parameter><decl><type><name>SQLiteOpenHelper</name></type> <name>helper</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getWritable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><try>try <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getWritable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLiteException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Make second attempt</comment>
            <try>try <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getWritable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLiteException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getWritable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="null">null</literal></expr>;</return>}</block>
            }</block></catch></try>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get readable database
     *
     * @param helper
     * @return readable database or null if it failed to create/open
     */</comment>
    <function><specifier>protected</specifier> <type><name>SQLiteDatabase</name></type> <name>getReadable</name><parameter_list>(<parameter><decl><type><name>SQLiteOpenHelper</name></type> <name>helper</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getReadable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><try>try <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getReadable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>helper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLiteException</name></type> <name>e1</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Make second attempt</comment>
            <try>try <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getReadable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>helper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLiteException</name></type> <name>e2</name></decl></parameter>)</parameter_list> <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"android.database.sqlite.SQLiteDatabase com.github.pockethub.android.persistence.DatabaseCache.getReadable(android.database.sqlite.SQLiteOpenHelper)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="null">null</literal></expr>;</return>}</block>
            }</block></catch></try>
        }</block></catch></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Load or request given resources
     *
     * @param persistableResource
     * @return resource
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>loadOrRequest</name><parameter_list>(<parameter><decl><type><name><name>PersistableResource</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>persistableResource</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadOrRequest(android.database.Cursor,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>SQLiteOpenHelper</name></type> <name>helper</name> <init>= <expr><call><name><name>helperProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><call><name>loadFromDB</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>persistableResource</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>items</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"CACHE HIT: Found "</literal> <operator>+</operator> <call><name><name>items</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" items for "</literal>
                        <operator>+</operator> <name>persistableResource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadOrRequest(android.database.Cursor,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>items</name></expr>;</return>}</block>
            }</block></then></if>
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadOrRequest(android.database.Cursor,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>requestAndStore</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>persistableResource</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Request and store given resources
     *
     * @param persistableResource
     * @return resources
     * @throws IOException
     */</comment>
    <function><specifier>public</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>requestAndStore</name><parameter_list>(
            <parameter><decl><type><name><name>PersistableResource</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>persistableResource</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.requestAndStore(android.database.Cursor,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>SQLiteOpenHelper</name></type> <name>helper</name> <init>= <expr><call><name><name>helperProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.requestAndStore(android.database.Cursor,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>requestAndStore</name><argument_list>(<argument><expr><name>helper</name></expr></argument>, <argument><expr><name>persistableResource</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>

    <function><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>requestAndStore</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SQLiteOpenHelper</name></type> <name>helper</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>PersistableResource</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>persistableResource</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.requestAndStore(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><call><name><name>persistableResource</name><operator>.</operator><name>request</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getWritable</name><argument_list>(<argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.requestAndStore(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>items</name></expr>;</return>}</block>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
            <expr_stmt><expr><call><name><name>persistableResource</name><operator>.</operator><name>store</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.requestAndStore(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>items</name></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>loadFromDB</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>SQLiteOpenHelper</name></type> <name>helper</name></decl></parameter>,
            <parameter><decl><type><specifier>final</specifier> <name><name>PersistableResource</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>persistableResource</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadFromDB(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getReadable</name><argument_list>(<argument><expr><name>helper</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>db</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadFromDB(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="null">null</literal></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>persistableResource</name><operator>.</operator><name>getCursor</name></name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <if>if <condition>(<expr><operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadFromDB(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="null">null</literal></expr>;</return>}</block>
            }</block></then></if>

            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>cached</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <do>do <block>{
                <expr_stmt><expr><call><name><name>cached</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>persistableResource</name><operator>.</operator><name>loadFrom</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
            while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition>;</do>
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;E&gt; com.github.pockethub.android.persistence.DatabaseCache.loadFromDB(android.database.Cursor,android.database.sqlite.SQLiteOpenHelper,PersistableResource&lt;E&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>cached</name></expr>;</return>}</block>
        }</block> <finally>finally <block>{
            <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
    }</block></function>
}</block></class>
</unit>
