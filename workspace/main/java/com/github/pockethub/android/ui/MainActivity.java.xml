<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\ui\MainActivity.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>Account</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>SearchManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>NavigationView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>FragmentManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GravityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItemCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>DrawerLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>ActionBarDrawerToggle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>SearchView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>SubMenu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>CookieManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>AccountsHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>LoginActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>user</name><operator>.</operator><name>UserComparator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>persistence</name><operator>.</operator><name>AccountDataManager</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>persistence</name><operator>.</operator><name>CacheHelper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>rx</name><operator>.</operator><name>AutoDisposeUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name><operator>.</operator><name>gist</name><operator>.</operator><name>GistsPagerFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name><operator>.</operator><name>issue</name><operator>.</operator><name>FilterListFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name><operator>.</operator><name>issue</name><operator>.</operator><name>IssueDashboardPagerFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name><operator>.</operator><name>notification</name><operator>.</operator><name>NotificationActivity</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name><operator>.</operator><name>user</name><operator>.</operator><name>HomePagerFragment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AvatarLoader</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>ToastUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>core</name><operator>.</operator><name>TokenStore</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>User</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Provider</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Singleton</name></name>;</import>

<import>import <name><name>butterknife</name><operator>.</operator><name>BindView</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Single</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>android</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>AndroidSchedulers</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>schedulers</name><operator>.</operator><name>Schedulers</name></name>;</import>


<class><specifier>public</specifier> class <name>MainActivity</name> <super><extends>extends <name>BaseActivity</name></extends>
        <implements>implements <name><name>NavigationView</name><operator>.</operator><name>OnNavigationItemSelectedListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"MainActivity"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREF_USER_LEARNED_DRAWER</name> <init>= <expr><literal type="string">"navigation_drawer_learned"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>drawer_layout</name></name></expr></argument>)</argument_list></annotation>
    <specifier>protected</specifier> <type><name>DrawerLayout</name></type> <name>drawerLayout</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>BindView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_view</name></name></expr></argument>)</argument_list></annotation>
    <specifier>protected</specifier> <type><name>NavigationView</name></type> <name>navigationView</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name>AccountDataManager</name></type> <name>accountDataManager</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <specifier>protected</specifier> <type><name><name>Provider</name><argument_list type="generic">&lt;<argument><name>UserComparator</name></argument>&gt;</argument_list></name></type> <name>userComparatorProvider</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>orgs</name> <init>= <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>User</name></type> <name>org</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
    <annotation>@<name>Singleton</name></annotation>
    <specifier>protected</specifier> <type><name>AvatarLoader</name></type> <name>avatars</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>userLearnedDrawer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ActionBarDrawerToggle</name></type> <name>actionBarDrawerToggle</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation>
    <specifier>public</specifier> <type><name>Fragment</name></type> <name>currentFragment</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.onCreate(android.os.Bundle)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>activity_main</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>userLearnedDrawer</name> <operator>=</operator> <call><name><name>sp</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>PREF_USER_LEARNED_DRAWER</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>actionBarDrawerToggle</name> <operator>=</operator> <operator>new</operator> <class><super><name>ActionBarDrawerToggle</name></super><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>drawerLayout</name></expr></argument>, <argument><expr><call><name>getToolbar</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>navigation_drawer_open</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>navigation_drawer_close</name></name></expr></argument>)</argument_list><block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onDrawerOpened</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>drawerView</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.1.onDrawerOpened(android.support.design.widget.NavigationView)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDrawerOpened</name></name><argument_list>(<argument><expr><name>drawerView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><operator>!</operator><name>userLearnedDrawer</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>sp</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name><name>MainActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>sp</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>PREF_USER_LEARNED_DRAWER</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>userLearnedDrawer</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"User learned drawer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.1.onDrawerOpened(android.support.design.widget.NavigationView)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }</block></class></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>setDrawerListener</name></name><argument_list>(<argument><expr><name>actionBarDrawerToggle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>navigationView</name><operator>.</operator><name>setNavigationItemSelectedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>reloadOrgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TokenStore</name></type> <name>tokenStore</name> <init>= <expr><call><name><name>TokenStore</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>tokenStore</name><operator>.</operator><name>getToken</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>AccountManager</name></type> <name>manager</name> <init>= <expr><call><name><name>AccountManager</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Account</name><index>[]</index></name></type> <name>accounts</name> <init>= <expr><call><name><name>manager</name><operator>.</operator><name>getAccountsByType</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>account_type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>accounts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Account</name></type> <name>account</name> <init>= <expr><name><name>accounts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>AccountsHelper</name><operator>.</operator><name>getUserToken</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>account</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>tokenStore</name><operator>.</operator><name>saveToken</name></name><argument_list>(<argument><expr><call><name><name>AccountsHelper</name><operator>.</operator><name>getUserToken</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>account</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.onCreate(android.os.Bundle)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onConfigurationChanged</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>newConfig</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.onConfigurationChanged(android.content.res.Configuration)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onConfigurationChanged</name></name><argument_list>(<argument><expr><name>newConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actionBarDrawerToggle</name><operator>.</operator><name>onConfigurationChanged</name></name><argument_list>(<argument><expr><name>newConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.onConfigurationChanged(android.content.res.Configuration)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.ui.MainActivity.onOptionsItemSelected(android.view.MenuItem)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><call><name><name>actionBarDrawerToggle</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.ui.MainActivity.onOptionsItemSelected(android.view.MenuItem)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.ui.MainActivity.onOptionsItemSelected(android.view.MenuItem)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.onPostCreate(android.os.Bundle)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>actionBarDrawerToggle</name><operator>.</operator><name>syncState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.onPostCreate(android.os.Bundle)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>reloadOrgs</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.reloadOrgs()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>Single</name><operator>.</operator><name>fromCallable</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>AccountUtils</name><operator>.</operator><name>getAccount</name></name><argument_list>(<argument><expr><call><name>getAccountManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>account</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>accountDataManager</name><operator>.</operator><name>getOrgs</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>orgs</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>orgs</name></expr></argument>, <argument><expr><call><name><name>userComparatorProvider</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;
                    return <argument><expr><name>orgs</name></expr></argument>;<argument><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.ui.MainActivity.reloadOrgs()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>;</argument_list></call></expr></expr_stmt>
                }</block></function>)</block>
                <expr_stmt><expr><operator>.</operator><call><name>subscribeOn</name><argument_list>(<argument><expr><call><name><name>Schedulers</name><operator>.</operator><name>io</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>observeOn</name><argument_list>(<argument><expr><call><name><name>AndroidSchedulers</name><operator>.</operator><name>mainThread</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>as</name><argument_list>(<argument><expr><call><name><name>AutoDisposeUtils</name><operator>.</operator><name>bindToLifecycle</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>subscribe</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>onOrgsLoaded</name></expr></argument>,
                        <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block>{
                            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Exception loading organizations"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name><name>ToastUtils</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>error_orgs_load</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt></class>
    }

    @<function><type><name>VisibleForTesting</name>
    <name>void</name></type> <name>onOrgsLoaded</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>orgs</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>orgs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><name>org</name> <operator>=</operator> <call><name><name>orgs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>orgs</name></name> <operator>=</operator> <name>orgs</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setUpNavigationView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Window</name></type> <name>window</name> <init>= <expr><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>window</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><call><name><name>window</name><operator>.</operator><name>getDecorView</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name>switchFragment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HomePagerFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><name>userLearnedDrawer</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>openDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>optionMenu</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>getMenuInflater</name><argument_list>()</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>activity_main</name></name></expr></argument>, <argument><expr><name>optionMenu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SearchManager</name></type> <name>searchManager</name> <init>= <expr><operator>(</operator><name>SearchManager</name><operator>)</operator> <call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>SEARCH_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>MenuItem</name></type> <name>searchItem</name> <init>= <expr><call><name><name>optionMenu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>m_search</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SearchView</name></type> <name>searchView</name> <init>= <expr><operator>(</operator><name>SearchView</name><operator>)</operator> <call><name><name>MenuItemCompat</name><operator>.</operator><name>getActionView</name></name><argument_list>(<argument><expr><name>searchItem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>searchView</name><operator>.</operator><name>setSearchableInfo</name></name><argument_list>(<argument><expr><call><name><name>searchManager</name><operator>.</operator><name>getSearchableInfo</name></name><argument_list>(<argument><expr><call><name>getComponentName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onCreateOptionsMenu</name></name><argument_list>(<argument><expr><name>optionMenu</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Restart loader if default account doesn't match currently loaded</comment>
        <comment type="line">// account</comment>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>currentOrgs</name> <init>= <expr><name>orgs</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>currentOrgs</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>currentOrgs</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>AccountUtils</name><operator>.</operator><name>isUser</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>currentOrgs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>reloadOrgs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>MenuItem</name></argument>,<argument><name>User</name></argument>&gt;</argument_list></name></type> <name>menuItemOrganizationMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setUpHeaderView</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>ImageView</name></type> <name>userImage</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>userRealName</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TextView</name></type> <name>userName</name></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>View</name></type> <name>headerView</name> <init>= <expr><call><name><name>navigationView</name><operator>.</operator><name>getHeaderView</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>userImage</name> <operator>=</operator> <call><name><name>headerView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>user_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ImageView</name></type> <name>notificationIcon</name> <init>= <expr><call><name><name>headerView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>iv_notification</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>userRealName</name> <operator>=</operator> <call><name><name>headerView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>user_real_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>userName</name> <operator>=</operator> <call><name><name>headerView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>user_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>notificationIcon</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt;
                <block type="pseudo"><expr><call><name>startActivity</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>MainActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>NotificationActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>avatars</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>userImage</name></expr></argument>, <argument><expr><name>org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>userName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>userRealName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>org</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>userRealName</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setUpNavigationView</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>setUpHeaderView</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setUpNavigationMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>setUpNavigationMenu</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>MenuItem</name></type> <name>organizationContainer</name> <init>= <expr><call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_organizations</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>organizationContainer</name><operator>.</operator><name>hasSubMenu</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>SubMenu</name></type> <name>organizationsMenu</name> <init>= <expr><call><name><name>organizationContainer</name><operator>.</operator><name>getSubMenu</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>orgs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>User</name></type> <name>organization</name> <init>= <expr><call><name><name>orgs</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><call><name><name>organizationsMenu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><call><name><name>organization</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>MenuItem</name></type> <name>organizationMenuItem</name> <init>= <expr><call><name><name>organizationsMenu</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><call><name><name>organization</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>intValue</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Menu</name><operator>.</operator><name>NONE</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>organization</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>organization</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>organization</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>organizationMenuItem</name><operator>.</operator><name>setIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_github_organization_black_24dp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">//Because of tinting the real image would became a grey block</comment>
                    <comment type="line">//avatars.bind(organizationMenuItem, organization);</comment>
                    <expr_stmt><expr><call><name><name>menuItemOrganizationMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>organizationMenuItem</name></expr></argument>, <argument><expr><name>organization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></then> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Menu item "</literal> <operator>+</operator> <name>organizationContainer</name> <operator>+</operator> <literal type="string">" should have a submenu"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onNavigationItemSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MenuItem</name></type> <name>menuItem</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>itemId</name> <init>= <expr><call><name><name>menuItem</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_home</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchFragment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HomePagerFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>org</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_gists</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchFragment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GistsPagerFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>menuItem</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_issue_dashboard</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchFragment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IssueDashboardPagerFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>menuItem</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_bookmarks</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchFragment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FilterListFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>menuItem</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>itemId</name> <operator>==</operator> <name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_log_out</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>logout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>menuItemOrganizationMap</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>menuItem</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>switchFragment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>HomePagerFragment</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>menuItemOrganizationMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>menuItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>navigationView</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>findItem</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>navigation_home</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setChecked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"MenuItem "</literal> <operator>+</operator> <name>menuItem</name> <operator>+</operator> <literal type="string">" not known"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>logout</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">// Remove cookies so that the login is clean</comment>
        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>CookieManager</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeAllCookies</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>CookieManager</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeAllCookie</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <comment type="line">// Clear all of the cached data</comment>
        <decl_stmt><decl><type><name>CacheHelper</name></type> <name>helper</name> <init>= <expr><operator>new</operator> <call><name>CacheHelper</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><literal type="string">"orgs"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><literal type="string">"users"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>helper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><literal type="string">"repos"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove the account</comment>
        <decl_stmt><decl><type><name>AccountManager</name></type> <name>accountManager</name> <init>= <expr><call><name>getAccountManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>accountType</name> <init>= <expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>account_type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Account</name><index>[]</index></name></type> <name>allGitHubAccounts</name> <init>= <expr><call><name><name>accountManager</name><operator>.</operator><name>getAccountsByType</name></name><argument_list>(<argument><expr><name>accountType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Account</name></type> <name>account</name> <range>: <expr><name>allGitHubAccounts</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP_MR1</name></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>accountManager</name><operator>.</operator><name>removeAccount</name></name><argument_list>(<argument><expr><name>account</name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>bool</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>startLoginActivity</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>accountManager</name><operator>.</operator><name>removeAccount</name></name><argument_list>(<argument><expr><name>account</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>bundle</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>startLoginActivity</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>startLoginActivity</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>in</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>LoginActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_CLEAR_TASK</name></name> <operator>|</operator> <name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>switchFragment</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>fragment</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>organization</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>organization</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><literal type="string">"org"</literal></expr></argument>, <argument><expr><name>organization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <decl_stmt><decl><type><name>FragmentManager</name></type> <name>manager</name> <init>= <expr><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>manager</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>container</name></name></expr></argument>, <argument><expr><name>fragment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>drawerLayout</name><operator>.</operator><name>closeDrawer</name></name><argument_list>(<argument><expr><name><name>GravityCompat</name><operator>.</operator><name>START</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>currentFragment</name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>AccountManager</name></type> <name>getAccountManager</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>AccountManager</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
}
</unit>
