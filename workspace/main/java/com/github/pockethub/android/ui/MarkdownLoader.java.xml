<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\ui\MarkdownLoader.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name><operator>.</operator><name>ImageGetter</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>core</name><operator>.</operator><name>ServiceGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>HtmlUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>request</name><operator>.</operator><name>RequestMarkdown</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>misc</name><operator>.</operator><name>MarkdownService</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Single</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Markdown loader.
 */</comment>
<class><specifier>public</specifier> class <name>MarkdownLoader</name> <block>{

    <comment type="block" format="javadoc">/**
     * Fetches html
     * @param context
     * @param raw
     * @param repository
     * @param imageGetter
     * @param encode
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>CharSequence</name></argument>&gt;</argument_list></name></type> <name>load</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>Repository</name></type> <name>repository</name></decl></parameter>,
                              <parameter><decl><type><name>ImageGetter</name></type> <name>imageGetter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>encode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;CharSequence&gt; com.github.pockethub.android.ui.MarkdownLoader.load(android.content.Context,String,com.meisolsson.githubsdk.model.Repository,android.text.Html.ImageGetter,boolean)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>RequestMarkdown</name></type> <name>markdown</name> <init>= <expr><call><name><name>RequestMarkdown</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>mode</name><argument_list>(<argument><expr><name><name>RequestMarkdown</name><operator>.</operator><name>MODE_GFM</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>text</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>context</name><argument_list>(<argument><expr><ternary><condition><expr><name>repository</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name><name>repository</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repository</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;CharSequence&gt; com.github.pockethub.android.ui.MarkdownLoader.load(android.content.Context,String,com.meisolsson.githubsdk.model.Repository,android.text.Html.ImageGetter,boolean)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MarkdownService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>renderMarkdown</name><argument_list>(<argument><expr><name>markdown</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Response</name><operator>::</operator><name>body</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><ternary><condition><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>html</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><call><name><name>HtmlUtils</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>html</name></expr></argument>, <argument><expr><name>imageGetter</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>html</name></expr></else></ternary></expr></block></lambda></expr></condition></ternary></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>
}</block></class>
</unit>
