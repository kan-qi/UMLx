<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\util\HtmlUtils.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>Style</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name><operator>.</operator><name>ImageGetter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Html</name><operator>.</operator><name>TagHandler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Layout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>LeadingMarginSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>QuoteSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StrikethroughSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>TypefaceSpan</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>xml</name><operator>.</operator><name>sax</name><operator>.</operator><name>XMLReader</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name>;</import>
<import>import static <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name>;</import>
<import>import static <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name><operator>.</operator><name>SPAN_MARK_MARK</name></name>;</import>

<comment type="block" format="javadoc">/**
 * HTML Utilities
 */</comment>
<class><specifier>public</specifier> class <name>HtmlUtils</name> <block>{

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ReplySpan</name> <super><implements>implements <name>LeadingMarginSpan</name></implements></super> <block>{

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>color</name> <init>= <expr><literal type="number">0xffDDDDDD</literal></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>getLeadingMargin</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>first</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.util.HtmlUtils$ReplySpan.getLeadingMargin(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.util.HtmlUtils$ReplySpan.getLeadingMargin(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">18</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>drawLeadingMargin</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Paint</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,
                                      <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>baseline</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>,
                                      <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Layout</name></type> <name>layout</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils$ReplySpan.drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name>Style</name></type> <name>style</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getStyle</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>color</name> <init>= <expr><call><name><name>p</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name>FILL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>color</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>drawRect</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>dir</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>bottom</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils$ReplySpan.drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,CharSequence,int,int,boolean,android.text.Layout)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_ROOT</name> <init>= <expr><literal type="string">"githubroot"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ROOT_START</name> <init>= <expr><literal type="char">'&lt;'</literal> <operator>+</operator> <name>TAG_ROOT</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ROOT_END</name> <init>= <expr><literal type="string">"&lt;/"</literal> <operator>+</operator> <name>TAG_ROOT</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TOGGLE_START</name> <init>= <expr><literal type="string">"&lt;span class=\"email-hidden-toggle\"&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TOGGLE_END</name> <init>= <expr><literal type="string">"&lt;/span&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPLY_START</name> <init>= <expr><literal type="string">"&lt;div class=\"email-quoted-reply\"&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPLY_END</name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNATURE_START</name> <init>= <expr><literal type="string">"&lt;div class=\"email-signature-reply\"&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNATURE_END</name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EMAIL_START</name> <init>= <expr><literal type="string">"&lt;div class=\"email-fragment\"&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EMAIL_END</name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HIDDEN_REPLY_START</name> <init>= <expr><literal type="string">"&lt;div class=\"email-hidden-reply\" style=\" display:none\"&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HIDDEN_REPLY_END</name> <init>= <expr><literal type="string">"&lt;/div&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BREAK</name> <init>= <expr><literal type="string">"&lt;br&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAGRAPH_START</name> <init>= <expr><literal type="string">"&lt;p&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PARAGRAPH_END</name> <init>= <expr><literal type="string">"&lt;/p&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BLOCKQUOTE_START</name> <init>= <expr><literal type="string">"&lt;blockquote&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BLOCKQUOTE_END</name> <init>= <expr><literal type="string">"&lt;/blockquote&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SPACE</name> <init>= <expr><literal type="string">"&amp;nbsp;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PRE_START</name> <init>= <expr><literal type="string">"&lt;pre&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PRE_END</name> <init>= <expr><literal type="string">"&lt;/pre&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CODE_START</name> <init>= <expr><literal type="string">"&lt;code&gt;"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CODE_END</name> <init>= <expr><literal type="string">"&lt;/code&gt;"</literal></expr></init></decl>;</decl_stmt>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>ListSeparator</name> <block>{

        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>ListSeparator</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>ordered</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.util.HtmlUtils$ListSeparator.ListSeparator(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>count</name> <operator>=</operator> <ternary><condition><expr><name>ordered</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.util.HtmlUtils$ListSeparator.ListSeparator(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>ListSeparator</name></type> <name>append</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>indentLevel</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.util.HtmlUtils$ListSeparator com.github.pockethub.android.util.HtmlUtils$ListSeparator.append(android.text.Editable,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>indentLevel</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <if>if <condition>(<expr><name>count</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\u2022'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.util.HtmlUtils$ListSeparator com.github.pockethub.android.util.HtmlUtils$ListSeparator.append(android.text.Editable,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
        }</block></function>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>TagHandler</name></type> <name>TAG_HANDLER</name> <init>= <expr><operator>new</operator> <class><super><name>TagHandler</name></super><argument_list>()</argument_list> <block>{

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_DEL</name> <init>= <expr><literal type="string">"del"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_UL</name> <init>= <expr><literal type="string">"ul"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_OL</name> <init>= <expr><literal type="string">"ol"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_LI</name> <init>= <expr><literal type="string">"li"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_CODE</name> <init>= <expr><literal type="string">"code"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG_PRE</name> <init>= <expr><literal type="string">"pre"</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>indentLevel</name></decl>;</decl_stmt>

        <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>ListSeparator</name></argument>&gt;</argument_list></name></type> <name>listElements</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>handleTag</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>opening</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>tag</name></decl></parameter>,
                              <parameter><decl><type><specifier>final</specifier> <name>Editable</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>XMLReader</name></type> <name>xmlReader</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><call><name><name>TAG_DEL</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>startSpan</name><argument_list>(<argument><expr><operator>new</operator> <call><name>StrikethroughSpan</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>endSpan</name><argument_list>(<argument><expr><name><name>StrikethroughSpan</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>TAG_UL</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>listElements</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ListSeparator</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>indentLevel</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>listElements</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>indentLevel</name><operator>--</operator></expr>;</expr_stmt>
                }</block></else></if>

                <if>if <condition>(<expr><operator>!</operator><name>opening</name> <operator>&amp;&amp;</operator> <name>indentLevel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>TAG_OL</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>listElements</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ListSeparator</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>indentLevel</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name><name>listElements</name><operator>.</operator><name>removeFirst</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>indentLevel</name><operator>--</operator></expr>;</expr_stmt>
                }</block></else></if>
                <if>if <condition>(<expr><operator>!</operator><name>opening</name> <operator>&amp;&amp;</operator> <name>indentLevel</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>TAG_LI</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>opening</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>listElements</name><operator>.</operator><name>getFirst</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>indentLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>TAG_CODE</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>startSpan</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TypefaceSpan</name><argument_list>(<argument><expr><literal type="string">"monospace"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>endSpan</name><argument_list>(<argument><expr><name><name>TypefaceSpan</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>TAG_PRE</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>opening</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name>startSpan</name><argument_list>(<argument><expr><operator>new</operator> <call><name>TypefaceSpan</name><argument_list>(<argument><expr><literal type="string">"monospace"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><call><name>endSpan</name><argument_list>(<argument><expr><name><name>TypefaceSpan</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.1.handleTag(boolean,String,android.text.Editable,org.xml.sax.XMLReader)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>TAG_ROOT</name><operator>.</operator><name>equalsIgnoreCase</name></name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>opening</name></expr>)</condition><then> <block>{
                <comment type="line">// Remove leading newlines</comment>
                <while>while <condition>(<expr><call><name><name>output</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>output</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></while>

                <comment type="line">// Remove trailing newlines</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><name>last</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>output</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{
                    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>last</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>last</name> <operator>=</operator> <call><name><name>output</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></while>

                <decl_stmt><decl><type><name><name>QuoteSpan</name><index>[]</index></name></type> <name>quoteSpans</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>output</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><name><name>QuoteSpan</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>QuoteSpan</name></type> <name>span</name> <range>: <expr><name>quoteSpans</name></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getSpanStart</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getSpanEnd</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>removeSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ReplySpan</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>,
                            <argument><expr><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Object</name></type> <name>getLast</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Spanned</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>kind</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Object com.github.pockethub.android.util.HtmlUtils.getLast(android.text.Spanned,Class&lt;?&gt;)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name><name>Object</name><index>[]</index></name></type> <name>spans</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>kind</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Object com.github.pockethub.android.util.HtmlUtils.getLast(android.text.Spanned,Class&lt;?&gt;)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><ternary><condition><expr><name><name>spans</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>spans</name><index>[<expr><name><name>spans</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>startSpan</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>span</name></decl></parameter>, <parameter><decl><type><name>Editable</name></type> <name>output</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils.startSpan(Object,android.text.Editable)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>SPAN_MARK_MARK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils.startSpan(Object,android.text.Editable)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>endSpan</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Editable</name></type> <name>output</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils.endSpan(Class&lt;?&gt;,android.text.Editable)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>span</name> <init>= <expr><call><name>getLast</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>output</name><operator>.</operator><name>getSpanStart</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>removeSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>start</name> <operator>!=</operator> <name>length</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils.endSpan(Class&lt;?&gt;,android.text.Editable)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Encode HTML
     *
     * @param html
     * @return html
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CharSequence</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>html</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.encode(String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.encode(String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>encode</name><argument_list>(<argument><expr><name>html</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Encode HTML
     *
     * @param html
     * @param imageGetter
     * @return html
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CharSequence</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>html</name></decl></parameter>,
                                      <parameter><decl><type><specifier>final</specifier> <name>ImageGetter</name></type> <name>imageGetter</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.encode(String,android.text.Html.ImageGetter)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.encode(String,android.text.Html.ImageGetter)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="string">""</literal></expr>;</return>}</block>
        }</block></then></if>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.encode(String,android.text.Html.ImageGetter)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Html</name><operator>.</operator><name>fromHtml</name></name><argument_list>(<argument><expr><name>html</name></expr></argument>, <argument><expr><name>imageGetter</name></expr></argument>, <argument><expr><name>TAG_HANDLER</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Format given HTML string so it is ready to be presented in a text view
     *
     * @param html
     * @return formatted HTML
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name>CharSequence</name></type> <name>format</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>html</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.format(String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>html</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.format(String)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="string">""</literal></expr>;</return>}</block>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>html</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.format(String)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="string">""</literal></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>formatted</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>html</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Remove e-mail toggle link</comment>
        <expr_stmt><expr><call><name>strip</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>TOGGLE_START</name></expr></argument>, <argument><expr><name>TOGGLE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove signature</comment>
        <expr_stmt><expr><call><name>strip</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>SIGNATURE_START</name></expr></argument>, <argument><expr><name>SIGNATURE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace div with e-mail content with block quote</comment>
        <expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>REPLY_START</name></expr></argument>, <argument><expr><name>REPLY_END</name></expr></argument>, <argument><expr><name>BLOCKQUOTE_START</name></expr></argument>,
                <argument><expr><name>BLOCKQUOTE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Remove hidden div</comment>
        <expr_stmt><expr><call><name>strip</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>HIDDEN_REPLY_START</name></expr></argument>, <argument><expr><name>HIDDEN_REPLY_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Replace paragraphs with breaks</comment>
        <if>if <condition>(<expr><call><name>replace</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>PARAGRAPH_START</name></expr></argument>, <argument><expr><name>BREAK</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>, <argument><expr><name>PARAGRAPH_END</name></expr></argument>, <argument><expr><name>BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name>formatPres</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>formatEmailFragments</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>trim</name><argument_list>(<argument><expr><name>formatted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>formatted</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ROOT_START</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>formatted</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>ROOT_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.util.HtmlUtils.format(String)"</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>formatted</name></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>StringBuilder</name></type> <name>strip</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>,
                                       <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>suffix</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.strip(StringBuilder,String,String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>suffix</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <call><name><name>prefix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>end</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>+</operator> <call><name><name>suffix</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.strip(StringBuilder,String,String)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>input</name></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>,
                                   <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.util.HtmlUtils.replace(StringBuilder,String,String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.util.HtmlUtils.replace(StringBuilder,String,String)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fromLength</name> <init>= <expr><call><name><name>from</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>toLength</name> <init>= <expr><call><name><name>to</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>fromLength</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>toLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.util.HtmlUtils.replace(StringBuilder,String,String)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>replaceTag</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>,
                                   <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils.replaceTag(StringBuilder,String,String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><call><name>replace</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal> <operator>+</operator> <name>from</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal> <operator>+</operator> <name>to</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>replace</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal> <operator>+</operator> <name>from</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal> <operator>+</operator> <name>to</name> <operator>+</operator> <literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.util.HtmlUtils.replaceTag(StringBuilder,String,String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>StringBuilder</name></type> <name>replace</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>,
                                         <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fromStart</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>fromEnd</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>toStart</name></decl></parameter>,
                                         <parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>toEnd</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.replace(StringBuilder,String,String,String,String)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>fromStart</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>start</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.replace(StringBuilder,String,String,String,String)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>input</name></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fromStartLength</name> <init>= <expr><call><name><name>fromStart</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>fromEndLength</name> <init>= <expr><call><name><name>fromEnd</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>toStartLength</name> <init>= <expr><call><name><name>toStart</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>fromStartLength</name></expr></argument>, <argument><expr><name>toStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>fromEnd</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <name>toStartLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>end</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>end</name></expr></argument>, <argument><expr><name>end</name> <operator>+</operator> <name>fromEndLength</name></expr></argument>, <argument><expr><name>toEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>fromStart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.replace(StringBuilder,String,String,String,String)"</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>input</name></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>StringBuilder</name></type> <name>formatPres</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.formatPres(StringBuilder)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>PRE_START</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>spaceAdvance</name> <init>= <expr><call><name><name>SPACE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>breakAdvance</name> <init>= <expr><call><name><name>BREAK</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>PRE_END</name></expr></argument>, <argument><expr><name>start</name> <operator>+</operator> <call><name><name>PRE_START</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>

            <comment type="line">// Skip over code element</comment>
            <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>CODE_START</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>start</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>start</name> <operator>+=</operator> <call><name><name>CODE_START</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>CODE_END</name></expr></argument>, <argument><expr><name>start</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>end</name> <operator>-</operator> <call><name><name>CODE_END</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>end</name> <operator>-=</operator> <call><name><name>CODE_END</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <switch>switch <condition>(<expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
                    <case>case <expr><literal type="char">' '</literal></expr>:</case>
                        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>start</name> <operator>+=</operator> <name>spaceAdvance</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>end</name> <operator>+=</operator> <name>spaceAdvance</name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'\t'</literal></expr>:</case>
                        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>start</name> <operator>+=</operator> <name>spaceAdvance</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>end</name> <operator>+=</operator> <name>spaceAdvance</name></expr>;</expr_stmt>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>SPACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>start</name> <operator>+=</operator> <name>spaceAdvance</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>end</name> <operator>+=</operator> <name>spaceAdvance</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></for>
                        <break>break;</break>
                    <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
                        <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// Ignore if last character is a newline</comment>
                        <if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>end</name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name>start</name> <operator>+=</operator> <name>breakAdvance</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>end</name> <operator>+=</operator> <name>breakAdvance</name></expr>;</expr_stmt>
                        }</block></then></if>
                        <break>break;</break>
                }</block></switch>
            }</block></for>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>PRE_START</name></expr></argument>, <argument><expr><name>end</name> <operator>+</operator> <call><name><name>PRE_END</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.formatPres(StringBuilder)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>input</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove email fragment 'div' tag and replace newlines with 'br' tags
     *
     * @param input
     * @return input
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>StringBuilder</name></type> <name>formatEmailFragments</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.formatEmailFragments(StringBuilder)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>emailStart</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>EMAIL_START</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>breakAdvance</name> <init>= <expr><call><name><name>BREAK</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>emailStart</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>startLength</name> <init>= <expr><call><name><name>EMAIL_START</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>emailEnd</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>EMAIL_END</name></expr></argument>, <argument><expr><name>emailStart</name> <operator>+</operator> <name>startLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>emailEnd</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <break>break;</break>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>emailEnd</name></expr></argument>, <argument><expr><name>emailEnd</name> <operator>+</operator> <call><name><name>EMAIL_END</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>emailStart</name></expr></argument>, <argument><expr><name>emailStart</name> <operator>+</operator> <name>startLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>fullEmail</name> <init>= <expr><name>emailEnd</name> <operator>-</operator> <name>startLength</name></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>emailStart</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fullEmail</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>BREAK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>breakAdvance</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>fullEmail</name> <operator>+=</operator> <name>breakAdvance</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>

            <expr_stmt><expr><name>emailStart</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>EMAIL_START</name></expr></argument>, <argument><expr><name>fullEmail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.formatEmailFragments(StringBuilder)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>input</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Remove leading and trailing whitespace
     *
     * @param input
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>StringBuilder</name></type> <name>trim</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>StringBuilder</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.trim(StringBuilder)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>breakLength</name> <init>= <expr><call><name><name>BREAK</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <if>if <condition>(<expr><call><name><name>input</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><name>BREAK</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>breakLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>length</name> <operator>&gt;=</operator> <name>breakLength</name>
                    <operator>&amp;&amp;</operator> <call><name><name>input</name><operator>.</operator><name>lastIndexOf</name></name><argument_list>(<argument><expr><name>BREAK</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>length</name> <operator>-</operator> <name>breakLength</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <name>breakLength</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>Character</name><operator>.</operator><name>isWhitespace</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><name>length</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <break>break;</break>
            }</block></else></if>
            <expr_stmt><expr><name>length</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logStaticMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"StringBuilder com.github.pockethub.android.util.HtmlUtils.trim(StringBuilder)"</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>input</name></expr>;</return>}</block>
    }</block></function>
}</block></class>
</unit>
