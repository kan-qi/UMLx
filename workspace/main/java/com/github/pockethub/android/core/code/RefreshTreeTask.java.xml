<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\core\code\RefreshTreeTask.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>code</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>ref</name><operator>.</operator><name>RefUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>core</name><operator>.</operator><name>ServiceGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Commit</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitCommit</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitReference</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitTree</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>git</name><operator>.</operator><name>GitService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>repositories</name><operator>.</operator><name>RepositoryService</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>sql</name><operator>.</operator><name>Ref</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Single</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>SingleEmitter</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>SingleOnSubscribe</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Task to load the tree for a repo's default branch
 */</comment>
<class><specifier>public</specifier> class <name>RefreshTreeTask</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"RefreshTreeTask"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Repository</name></type> <name>repo</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>GitReference</name></type> <name>reference</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create task to refresh repo's tree
     *
     * @param repository
     * @param reference
     */</comment>
    <constructor><specifier>public</specifier> <name>RefreshTreeTask</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Repository</name></type> <name>repository</name></decl></parameter>,
                           <parameter><decl><type><specifier>final</specifier> <name>GitReference</name></type> <name>reference</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.RefreshTreeTask.RefreshTreeTask(android.content.Context,com.meisolsson.githubsdk.model.Repository,com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repo</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <name>reference</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.RefreshTreeTask.RefreshTreeTask(android.content.Context,com.meisolsson.githubsdk.model.Repository,com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isValidRef</name><parameter_list>(<parameter><decl><type><name>GitReference</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.code.RefreshTreeTask.isValidRef(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.code.RefreshTreeTask.isValidRef(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>ref</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>ref</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal>
                <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>ref</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>GitReference</name></argument>&gt;</argument_list></name></type> <name>getValidRef</name><parameter_list>(<parameter><decl><type><name>GitService</name></type> <name>service</name></decl></parameter>, <parameter><decl><type><name>GitReference</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>branch</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;GitReference&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getValidRef(com.meisolsson.githubsdk.service.git.GitService,com.meisolsson.githubsdk.model.git.GitReference,String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><operator>!</operator><call><name>isValidRef</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;GitReference&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getValidRef(com.meisolsson.githubsdk.service.git.GitService,com.meisolsson.githubsdk.model.git.GitReference,String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>service</name><operator>.</operator><name>getGitReference</name></name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>response</name></decl></parameter></parameter_list> -&gt; <block>{
                        <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                            <decl_stmt><decl><type><name>GitReference</name></type> <name>fetchedRef</name> <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><call><name>isValidRef</name><argument_list>(<argument><expr><name>fetchedRef</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;GitReference&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getValidRef(com.meisolsson.githubsdk.service.git.GitService,com.meisolsson.githubsdk.model.git.GitReference,String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>fetchedRef</name></expr>;</return>}</block>
                            }</block></then> <else>else <block>{
                                <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Reference does not have associated commit SHA-1"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                            }</block></else></if>
                        }</block></then> <else>else <block>{
                            <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Request for Git Reference was unsuccessful"</literal></expr></argument>)</argument_list></call></expr>;</throw>
                        }</block></else></if>
                    }</block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
        }</block></then></if>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;GitReference&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getValidRef(com.meisolsson.githubsdk.service.git.GitService,com.meisolsson.githubsdk.model.git.GitReference,String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBranch</name><parameter_list>(<parameter><decl><type><name>GitReference</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;String&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getBranch(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>branch</name> <init>= <expr><call><name><name>RefUtils</name><operator>.</operator><name>getPath</name></name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>branch</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>branch</name> <operator>=</operator> <call><name><name>repo</name><operator>.</operator><name>defaultBranch</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;String&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getBranch(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>ServiceGenerator</name>
                        <operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>RepositoryService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>getRepository</name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>response</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>defaultBranch</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
            }</block></then></if>
        }</block></then></if>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;String&gt; com.github.pockethub.android.core.code.RefreshTreeTask.getBranch(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>FullTree</name></argument>&gt;</argument_list></name></type> <name>refresh</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullTree&gt; com.github.pockethub.android.core.code.RefreshTreeTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>GitService</name></type> <name>gitService</name> <init>= <expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>GitService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullTree&gt; com.github.pockethub.android.core.code.RefreshTreeTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>getBranch</name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>branch</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>branch</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">"heads/"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>branch</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>getValidRef</name><argument_list>(<argument><expr><name>gitService</name></expr></argument>, <argument><expr><name>reference</name></expr></argument>, <argument><expr><name>branch</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>reference</name></decl></parameter></parameter_list> -&gt;
                        <block type="pseudo"><expr><call><name><name>gitService</name><operator>.</operator><name>getGitCommit</name></name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>reference</name><operator>.</operator><name>object</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>sha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Response</name><operator>::</operator><name>body</name></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>zipWith</name><argument_list>(<argument><expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>RefreshTreeModel</name><operator>::</operator><operator>new</operator></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>model</name></decl></parameter></parameter_list> -&gt;
                        <block type="pseudo"><expr><call><name><name>gitService</name><operator>.</operator><name>getGitTreeRecursive</name></name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>model</name><operator>.</operator><name>getCommit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>tree</name><argument_list>()</argument_list></call><operator>.</operator><call><name>sha</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Response</name><operator>::</operator><name>body</name></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>zipWith</name><argument_list>(<argument><expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name><name>model</name><operator>.</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>FullTree</name><operator>::</operator><operator>new</operator></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <class><specifier>private</specifier> class <name>RefreshTreeModel</name> <block>{
        <decl_stmt><decl><specifier>private</specifier> <type><name>GitReference</name></type> <name>ref</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>GitCommit</name></type> <name>commit</name></decl>;</decl_stmt>

        <constructor><specifier>public</specifier> <name>RefreshTreeModel</name><parameter_list>(<parameter><decl><type><name>GitCommit</name></type> <name>commit</name></decl></parameter>, <parameter><decl><type><name>GitReference</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.RefreshTreeModel(com.meisolsson.githubsdk.model.git.GitCommit,com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>commit</name></name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.RefreshTreeModel(com.meisolsson.githubsdk.model.git.GitCommit,com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>GitReference</name></type> <name>getRef</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.git.GitReference com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.getRef()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.git.GitReference com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.getRef()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>ref</name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>setRef</name><parameter_list>(<parameter><decl><type><name>GitReference</name></type> <name>ref</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.setRef(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>ref</name></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.setRef(com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>public</specifier> <type><name>GitCommit</name></type> <name>getCommit</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.git.GitCommit com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.getCommit()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.git.GitCommit com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.getCommit()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>commit</name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>setCommit</name><parameter_list>(<parameter><decl><type><name>GitCommit</name></type> <name>commit</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.setCommit(com.meisolsson.githubsdk.model.git.GitCommit)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>commit</name></name> <operator>=</operator> <name>commit</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.RefreshTreeTask$RefreshTreeModel.setCommit(com.meisolsson.githubsdk.model.git.GitCommit)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

    }</block></class>
}</block></class>
</unit>
