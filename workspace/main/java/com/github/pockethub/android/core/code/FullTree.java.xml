<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\core\code\FullTree.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>code</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>commit</name><operator>.</operator><name>CommitUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>ref</name><operator>.</operator><name>RefUtils</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitEntryType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitReference</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitTree</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>git</name><operator>.</operator><name>GitTreeEntry</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeMap</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>CASE_INSENSITIVE_ORDER</name></name>;</import>

<comment type="block" format="javadoc">/**
 * {@link GitTree} with additional information
 */</comment>
<class><specifier>public</specifier> class <name>FullTree</name> <block>{

    <comment type="block" format="javadoc">/**
     * Entry in a tree
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Entry</name> <super><implements>implements <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Entry</name></argument>&gt;</argument_list></name></implements></super> <block>{

        <comment type="block" format="javadoc">/**
         * Parent folder
         */</comment>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Folder</name></type> <name>parent</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Raw tree entry
         */</comment>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>GitTreeEntry</name></type> <name>entry</name></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Name
         */</comment>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Entry</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Entry.Entry()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Entry.Entry()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>private</specifier> <name>Entry</name><parameter_list>(<parameter><decl><type><name>GitTreeEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>Folder</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Entry.Entry(com.meisolsson.githubsdk.model.git.GitTreeEntry,com.github.pockethub.android.core.code.FullTree$Folder)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>CommitUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Entry.Entry(com.meisolsson.githubsdk.model.git.GitTreeEntry,com.github.pockethub.android.core.code.FullTree$Folder)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isRoot</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.code.FullTree$Entry.isRoot()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.code.FullTree$Entry.isRoot()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>parent</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><name>Entry</name></type> <name>another</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.code.FullTree$Entry.compareTo(com.github.pockethub.android.core.code.FullTree$Entry)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.code.FullTree$Entry.compareTo(com.github.pockethub.android.core.code.FullTree$Entry)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>CASE_INSENSITIVE_ORDER</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>another</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Folder in a tree
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>Folder</name> <super><extends>extends <name>Entry</name></extends></super> <block>{

        <comment type="block" format="javadoc">/**
         * Sub folders
         */</comment>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Folder</name></argument>&gt;</argument_list></name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" format="javadoc">/**
         * Files
         */</comment>
        <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Entry</name></argument>&gt;</argument_list></name></type> <name>files</name> <init>= <expr><operator>new</operator> <call><name><name>TreeMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <constructor><specifier>private</specifier> <name>Folder</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Folder.Folder()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Folder.Folder()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>private</specifier> <name>Folder</name><parameter_list>(<parameter><decl><type><name>GitTreeEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name>Folder</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Folder.Folder(com.meisolsson.githubsdk.model.git.GitTreeEntry,com.github.pockethub.android.core.code.FullTree$Folder)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree$Folder.Folder(com.meisolsson.githubsdk.model.git.GitTreeEntry,com.github.pockethub.android.core.code.FullTree$Folder)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>addFile</name><parameter_list>(<parameter><decl><type><name>GitTreeEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pathSegments</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.FullTree$Folder.addFile(com.meisolsson.githubsdk.model.git.GitTreeEntry,[String,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>pathSegments</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Entry</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>Entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>Folder</name></type> <name>folder</name> <init>= <expr><call><name><name>folders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>pathSegments</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>folder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pathSegments</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.FullTree$Folder.addFile(com.meisolsson.githubsdk.model.git.GitTreeEntry,[String,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>addFolder</name><parameter_list>(<parameter><decl><type><name>GitTreeEntry</name></type> <name>entry</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>pathSegments</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.FullTree$Folder.addFolder(com.meisolsson.githubsdk.model.git.GitTreeEntry,[String,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name><name>pathSegments</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Folder</name></type> <name>folder</name> <init>= <expr><operator>new</operator> <call><name>Folder</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>folder</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>Folder</name></type> <name>folder</name> <init>= <expr><call><name><name>folders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>pathSegments</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>folder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>addFolder</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>pathSegments</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></else></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.FullTree$Folder.addFolder(com.meisolsson.githubsdk.model.git.GitTreeEntry,[String,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>GitTreeEntry</name></type> <name>entry</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.FullTree$Folder.add(com.meisolsson.githubsdk.model.git.GitTreeEntry)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>String</name></type> <name>path</name> <init>= <expr><call><name><name>entry</name><operator>.</operator><name>path</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.code.FullTree$Folder.add(com.meisolsson.githubsdk.model.git.GitTreeEntry)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>GitEntryType</name><operator>.</operator><name>Blob</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>segments</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>segments</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Folder</name></type> <name>folder</name> <init>= <expr><call><name><name>folders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>segments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>folder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>addFile</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <elseif>else <if>if <condition>(<expr><name><name>segments</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Entry</name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name>Entry</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>files</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>file</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>type</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>GitEntryType</name><operator>.</operator><name>Tree</name></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>segments</name> <init>= <expr><call><name><name>path</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>segments</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Folder</name></type> <name>folder</name> <init>= <expr><call><name><name>folders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>segments</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>folder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>addFolder</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>segments</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then> <elseif>else <if>if <condition>(<expr><name><name>segments</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>Folder</name></type> <name>folder</name> <init>= <expr><operator>new</operator> <call><name>Folder</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>folder</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if></elseif></if>
        }</block></function>
    }</block></class>

    <comment type="block" format="javadoc">/**
     * Tree
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>GitTree</name></type> <name>tree</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Root folder
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>Folder</name></type> <name>root</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Reference
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>GitReference</name></type> <name>reference</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Branch where tree is present
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>branch</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create tree with branch
     *
     * @param tree
     * @param reference
     */</comment>
    <constructor><specifier>public</specifier> <name>FullTree</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>GitTree</name></type> <name>tree</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>GitReference</name></type> <name>reference</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree.FullTree(com.meisolsson.githubsdk.model.git.GitTree,com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>tree</name></name> <operator>=</operator> <name>tree</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reference</name></name> <operator>=</operator> <name>reference</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>branch</name></name> <operator>=</operator> <call><name><name>RefUtils</name><operator>.</operator><name>getName</name></name><argument_list>(<argument><expr><name>reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>root</name> <operator>=</operator> <operator>new</operator> <call><name>Folder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>GitTreeEntry</name></argument>&gt;</argument_list></name></type> <name>entries</name> <init>= <expr><call><name><name>tree</name><operator>.</operator><name>tree</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>entries</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>entries</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>GitTreeEntry</name></type> <name>entry</name> <range>: <expr><name>entries</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>root</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.code.FullTree.FullTree(com.meisolsson.githubsdk.model.git.GitTree,com.meisolsson.githubsdk.model.git.GitReference)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
}</block></class>
</unit>
