<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\core\issue\RefreshIssueTask.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>issue</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>HttpImageGetter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>RxPageUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>auto</name><operator>.</operator><name>factory</name><operator>.</operator><name>AutoFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>auto</name><operator>.</operator><name>factory</name><operator>.</operator><name>Provided</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>core</name><operator>.</operator><name>ServiceGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>GitHubComment</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Issue</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>IssueEvent</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Page</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>PullRequest</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>issues</name><operator>.</operator><name>IssueCommentService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>issues</name><operator>.</operator><name>IssueEventService</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>pull_request</name><operator>.</operator><name>PullRequestService</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Single</name></name>;</import>
<import>import <name><name>retrofit2</name><operator>.</operator><name>Response</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Task to load and store an {@link Issue}
 */</comment>
<class><annotation>@<name>AutoFactory</name></annotation>
<specifier>public</specifier> class <name>RefreshIssueTask</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"RefreshIssueTask"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>IssueStore</name></type> <name>store</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Repository</name></type> <name>repo</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>issueNumber</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>HttpImageGetter</name></type> <name>bodyImageGetter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>HttpImageGetter</name></type> <name>commentImageGetter</name></decl>;</decl_stmt>


    <comment type="block" format="javadoc">/**
     * Create task to refresh given issue.
     *
     * @param repo The repository to refresh issue from
     * @param issueNumber The issue's number
     * @param bodyImageGetter {@link HttpImageGetter} to fetch images for the bodies
     */</comment>
    <constructor><specifier>public</specifier> <name>RefreshIssueTask</name><parameter_list>(<parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                            <parameter><decl><type><name>Repository</name></type> <name>repo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>issueNumber</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>HttpImageGetter</name></type> <name>bodyImageGetter</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>HttpImageGetter</name></type> <name>commentImageGetter</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>IssueStore</name></type> <name>store</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.RefreshIssueTask.RefreshIssueTask(@Provided Context,com.meisolsson.githubsdk.model.Repository,int,@Provided HttpImageGetter,@Provided HttpImageGetter,@Provided IssueStore)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>repo</name></name> <operator>=</operator> <name>repo</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>issueNumber</name></name> <operator>=</operator> <name>issueNumber</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bodyImageGetter</name></name> <operator>=</operator> <name>bodyImageGetter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>commentImageGetter</name></name> <operator>=</operator> <name>commentImageGetter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>store</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.RefreshIssueTask.RefreshIssueTask(@Provided Context,com.meisolsson.githubsdk.model.Repository,int,@Provided HttpImageGetter,@Provided HttpImageGetter,@Provided IssueStore)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Fetches an issue and it's comments, event and pull request if applicable.
     *
     * @return {@link Single} for a {@link FullIssue}
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>FullIssue</name></argument>&gt;</argument_list></name></type> <name>refresh</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullIssue&gt; com.github.pockethub.android.core.issue.RefreshIssueTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullIssue&gt; com.github.pockethub.android.core.issue.RefreshIssueTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>store</name><operator>.</operator><name>refreshIssue</name></name><argument_list>(<argument><expr><name>repo</name></expr></argument>, <argument><expr><name>issueNumber</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>issue</name></decl></parameter></parameter_list> -&gt; <block>{
                    <if>if <condition>(<expr><call><name><name>issue</name><operator>.</operator><name>pullRequest</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullIssue&gt; com.github.pockethub.android.core.issue.RefreshIssueTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>getPullRequest</name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>issueNumber</name></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>pullRequest</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>issue</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>pullRequest</name><argument_list>(<argument><expr><name>pullRequest</name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>}</block>
                    }</block></then></if>

                    <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullIssue&gt; com.github.pockethub.android.core.issue.RefreshIssueTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>issue</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
                }</block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>issue</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>getAllComments</name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>issue</name></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>zipWith</name><argument_list>(<argument><expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><name>issue</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><lambda><parameter_list>(<parameter><decl><name>comments</name></decl></parameter>, <parameter><decl><name>issue1</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>FullIssue</name><argument_list>(<argument><expr><name>issue1</name></expr></argument>, <argument><expr><name>comments</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>zipWith</name><argument_list>(<argument><expr><call><name>getAllEvents</name><argument_list>(<argument><expr><call><name><name>repo</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>repo</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>issueNumber</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><lambda><parameter_list>(<parameter><decl><name>fullIssue</name></decl></parameter>, <parameter><decl><name>issueEvents</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>FullIssue</name><argument_list>(<argument><expr><call><name><name>fullIssue</name><operator>.</operator><name>getIssue</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>fullIssue</name><operator>.</operator><name>getComments</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>issueEvents</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>fullIssue</name></decl></parameter></parameter_list> -&gt; <block>{
                    <expr><name>Issue</name> <name>issue</name> <operator>=</operator> <call><name><name>fullIssue</name><operator>.</operator><name>getIssue</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>;
                    <argument><expr><call><name><name>bodyImageGetter</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>issue</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>issue</name><operator>.</operator><name>bodyHtml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
                    for <argument><expr><operator>(</operator><name>GitHubComment</name> <name>comment</name> <operator>:</operator> <call><name><name>fullIssue</name><operator>.</operator><name>getComments</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
                        <expr><call><name><name>commentImageGetter</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>comment</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>comment</name><operator>.</operator><name>bodyHtml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;
                    }</block>
                    <block>{<expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullIssue&gt; com.github.pockethub.android.core.issue.RefreshIssueTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;<return>return <expr><name>fullIssue</name></expr>;</return>}</block></expr></argument></argument_list></call></expr></return>}</block>
                }</block></function>)</block>;</class>
    }

    <comment type="block" format="javadoc">/**
     * Fetches all comments for a given issue.
     *
     * @param login
     * @param name
     * @param issue
     * @return {@link Single}
     */</comment>
    private <function><type><name><name>Single</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>GitHubComment</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAllComments</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Issue</name></type> <name>issue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>issue</name><operator>.</operator><name>comments</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Single</name><operator>.</operator><name>just</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <decl_stmt><decl><type><name>IssueCommentService</name></type> <name>service</name> <init>= <expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                <argument><expr><name><name>IssueCommentService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>RxPageUtil</name><operator>.</operator><name>getAllPages</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt;
                <block type="pseudo"><expr><call><name><name>service</name><operator>.</operator><name>getIssueComments</name></name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>issue</name><operator>.</operator><name>number</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Observable</name><operator>.</operator><name>fromIterable</name></name><argument_list>(<argument><expr><call><name><name>page</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>IssueEvent</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getAllEvents</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>issueNumber</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>IssueEventService</name></type> <name>service</name> <init>= <expr><call><name><name>ServiceGenerator</name>
                <operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>IssueEventService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>RxPageUtil</name><operator>.</operator><name>getAllPages</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt;
                <block type="pseudo"><expr><call><name><name>service</name><operator>.</operator><name>getIssueEvents</name></name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>issueNumber</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Observable</name><operator>.</operator><name>fromIterable</name></name><argument_list>(<argument><expr><call><name><name>page</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>PullRequest</name></argument>&gt;</argument_list></name></type> <name>getPullRequest</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>login</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>,
                                                         <parameter><decl><type><name>int</name></type> <name>issueNumber</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>ServiceGenerator</name><operator>.</operator><name>createService</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>PullRequestService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>getPullRequest</name><argument_list>(<argument><expr><name>login</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>issueNumber</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Response</name><operator>::</operator><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


}
</unit>
