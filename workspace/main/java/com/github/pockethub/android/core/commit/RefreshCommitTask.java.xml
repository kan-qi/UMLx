<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\core\commit\RefreshCommitTask.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>commit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>HttpImageGetter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>RxPageUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>auto</name><operator>.</operator><name>factory</name><operator>.</operator><name>AutoFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>auto</name><operator>.</operator><name>factory</name><operator>.</operator><name>Provided</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>core</name><operator>.</operator><name>ServiceGenerator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>repositories</name><operator>.</operator><name>RepositoryCommentService</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>service</name><operator>.</operator><name>repositories</name><operator>.</operator><name>RepositoryCommitService</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>dagger</name><operator>.</operator><name>Provides</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Observable</name></name>;</import>
<import>import <name><name>io</name><operator>.</operator><name>reactivex</name><operator>.</operator><name>Single</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Task to load a commit by SHA-1 id
 */</comment>
<class><annotation>@<name>AutoFactory</name></annotation>
<specifier>public</specifier> class <name>RefreshCommitTask</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CommitStore</name></type> <name>store</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Repository</name></type> <name>repository</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>id</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>HttpImageGetter</name></type> <name>imageGetter</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>RepositoryCommentService</name></type> <name>service</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * @param repository
     * @param id
     * @param imageGetter
     */</comment>
    <constructor><specifier>public</specifier> <name>RefreshCommitTask</name><parameter_list>(<parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>CommitStore</name></type> <name>store</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>HttpImageGetter</name></type> <name>imageGetter</name></decl></parameter>,
                             <parameter><decl><type><annotation>@<name>Provided</name></annotation> <name>RepositoryCommentService</name></type> <name>service</name></decl></parameter>,
                             <parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>Repository</name></type> <name>repository</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.commit.RefreshCommitTask.RefreshCommitTask(@Provided CommitStore,@Provided HttpImageGetter,@Provided RepositoryCommentService,android.app.Activity,com.meisolsson.githubsdk.model.Repository,String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>service</name></name> <operator>=</operator> <name>service</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>store</name></name> <operator>=</operator> <name>store</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageGetter</name></name> <operator>=</operator> <name>imageGetter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.commit.RefreshCommitTask.RefreshCommitTask(@Provided CommitStore,@Provided HttpImageGetter,@Provided RepositoryCommentService,android.app.Activity,com.meisolsson.githubsdk.model.Repository,String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * Fetches a commit with it's comments.
     *
     * @return Single for a FullCommit
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Single</name><argument_list type="generic">&lt;<argument><name>FullCommit</name></argument>&gt;</argument_list></name></type> <name>refresh</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullCommit&gt; com.github.pockethub.android.core.commit.RefreshCommitTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Single&lt;FullCommit&gt; com.github.pockethub.android.core.commit.RefreshCommitTask.refresh()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>store</name><operator>.</operator><name>refreshCommit</name></name><argument_list>(<argument><expr><name>repository</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>commit</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>RxPageUtil</name><operator>.</operator><name>getAllPages</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>page</name></decl></parameter>)</parameter_list> -&gt;
                        <block type="pseudo"><expr><call><name><name>service</name><operator>.</operator><name>getCommitComments</name></name><argument_list>(<argument><expr><call><name><name>repository</name><operator>.</operator><name>owner</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>login</name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>repository</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>commit</name><operator>.</operator><name>sha</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>flatMap</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>page</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Observable</name><operator>.</operator><name>fromIterable</name></name><argument_list>(<argument><expr><call><name><name>page</name><operator>.</operator><name>items</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>comment</name></decl></parameter></parameter_list> -&gt; <block>{
                            <expr><call><name><name>imageGetter</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>comment</name></expr></argument>, <argument><expr><call><name><name>comment</name><operator>.</operator><name>bodyHtml</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument></argument_list></call></expr></block></lambda></expr></argument>;
                            return <argument><expr><name>comment</name></expr></argument>;</argument_list></call></expr></return>
                        }</block></function>)</block>
                        <expr_stmt><expr><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>comments</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>FullCommit</name><argument_list>(<argument><expr><name>commit</name></expr></argument>, <argument><expr><name>comments</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></expr_stmt></class>)<empty_stmt>;</empty_stmt>
    }
}
</unit>
