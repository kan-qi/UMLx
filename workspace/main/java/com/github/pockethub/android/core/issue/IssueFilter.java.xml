<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\com\github\pockethub\android\core\issue\IssueFilter.java"><comment type="block">/*
 * Copyright (c) 2015 PocketHub
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>com</name><operator>.</operator><name>github</name><operator>.</operator><name>pockethub</name><operator>.</operator><name>android</name><operator>.</operator><name>core</name><operator>.</operator><name>issue</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Label</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Milestone</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>Repository</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>meisolsson</name><operator>.</operator><name>githubsdk</name><operator>.</operator><name>model</name><operator>.</operator><name>User</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import static <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><operator>.</operator><name>CASE_INSENSITIVE_ORDER</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Issue filter containing at least one valid query
 */</comment>
<class><specifier>public</specifier> class <name>IssueFilter</name> <super><implements>implements <name>Parcelable</name>, <name>Cloneable</name>, <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Label</name></argument>&gt;</argument_list></name></implements></super> <block>{

    <comment type="block" format="javadoc">/**
     * Filter field key
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FIELD_FILTER</name> <init>= <expr><literal type="string">"filter"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by issue assignee
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_ASSIGNEE</name> <init>= <expr><literal type="string">"assignee"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by issue's milestone
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_MILESTONE</name> <init>= <expr><literal type="string">"milestone"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by user mentioned in issue
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_MENTIONED</name> <init>= <expr><literal type="string">"mentioned"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by subscribed issues for user
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_SUBSCRIBED</name> <init>= <expr><literal type="string">"subscribed"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by created issues by user
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_CREATED</name> <init>= <expr><literal type="string">"created"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by assigned issues for user
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_ASSIGNED</name> <init>= <expr><literal type="string">"assigned"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by issue's labels
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_LABELS</name> <init>= <expr><literal type="string">"labels"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Filter by issue's state
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILTER_STATE</name> <init>= <expr><literal type="string">"state"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Issue open state filter value
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_OPEN</name> <init>= <expr><literal type="string">"open"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Issue closed state filter value
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATE_CLOSED</name> <init>= <expr><literal type="string">"closed"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Issue body field name
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FIELD_BODY</name> <init>= <expr><literal type="string">"body"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Issue title field name
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FIELD_TITLE</name> <init>= <expr><literal type="string">"title"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Since date field
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FIELD_SINCE</name> <init>= <expr><literal type="string">"since"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Sort direction of output
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FIELD_DIRECTION</name> <init>= <expr><literal type="string">"direction"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Ascending direction sort order
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DIRECTION_ASCENDING</name> <init>= <expr><literal type="string">"asc"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Descending direction sort order
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DIRECTION_DESCENDING</name> <init>= <expr><literal type="string">"desc"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Sort field key
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FIELD_SORT</name> <init>= <expr><literal type="string">"sort"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Sort by created at
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SORT_CREATED</name> <init>= <expr><literal type="string">"created"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Sort by updated at
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SORT_UPDATED</name> <init>= <expr><literal type="string">"updated"</literal></expr></init></decl>;</decl_stmt> 

    <comment type="block" format="javadoc">/**
     * Sort by commented on at
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SORT_COMMENTS</name> <init>= <expr><literal type="string">"comments"</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** serialVersionUID */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">7310646589186299063L</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Repository</name></type> <name>repository</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Label</name></argument>&gt;</argument_list></name></type> <name>labels</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Milestone</name></type> <name>milestone</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>User</name></type> <name>assignee</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>open</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>direction</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>sortType</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Create filter
     *
     * @param repository
     */</comment>
    <constructor><specifier>public</specifier> <name>IssueFilter</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Repository</name></type> <name>repository</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter.IssueFilter(com.meisolsson.githubsdk.model.Repository)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>open</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>direction</name> <operator>=</operator> <name>DIRECTION_DESCENDING</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sortType</name> <operator>=</operator> <name>SORT_CREATED</name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter.IssueFilter(com.meisolsson.githubsdk.model.Repository)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>protected</specifier> <name>IssueFilter</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter.IssueFilter(android.os.Parcel)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>repository</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>Repository</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>labels</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readList</name></name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><call><name><name>Label</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>milestone</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>Milestone</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>assignee</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>User</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>open</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readByte</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>direction</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sortType</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter.IssueFilter(android.os.Parcel)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>IssueFilter</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>IssueFilter</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.1.createFromParcel(android.os.Parcel)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.1.createFromParcel(android.os.Parcel)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>new</operator> <call><name>IssueFilter</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name><name>IssueFilter</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"[com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.1.newArray(int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"[com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.1.newArray(int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><operator>new</operator> <name><name>IssueFilter</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
        }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Set only open issues to be returned
     *
     * @param open
     *            true for open issues, false for closed issues
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>setOpen</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>open</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setOpen(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>open</name></name> <operator>=</operator> <name>open</name></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setOpen(boolean)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Add label to filter
     *
     * @param label
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>addLabel</name><parameter_list>(<parameter><decl><type><name>Label</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.addLabel(com.meisolsson.githubsdk.model.Label)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>label</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.addLabel(com.meisolsson.githubsdk.model.Label)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
        }</block></then></if>
        <if>if <condition>(<expr><name>labels</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>labels</name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>labels</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.addLabel(com.meisolsson.githubsdk.model.Label)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param labels
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>setLabels</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>Label</name></argument>&gt;</argument_list></name></type> <name>labels</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setLabels(Collection&lt;Label&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>labels</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>labels</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>labels</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>this</name><operator>.</operator><name>labels</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>labels</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>labels</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>labels</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></else></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setLabels(Collection&lt;Label&gt;)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return labels
     */</comment>
    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Label</name></argument>&gt;</argument_list></name></type> <name>getLabels</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Label&gt; com.github.pockethub.android.core.issue.IssueFilter.getLabels()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"List&lt;Label&gt; com.github.pockethub.android.core.issue.IssueFilter.getLabels()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>labels</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return repository
     */</comment>
    <function><specifier>public</specifier> <type><name>Repository</name></type> <name>getRepository</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.Repository com.github.pockethub.android.core.issue.IssueFilter.getRepository()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.Repository com.github.pockethub.android.core.issue.IssueFilter.getRepository()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>repository</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param milestone
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>setMilestone</name><parameter_list>(<parameter><decl><type><name>Milestone</name></type> <name>milestone</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setMilestone(com.meisolsson.githubsdk.model.Milestone)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>milestone</name></name> <operator>=</operator> <name>milestone</name></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setMilestone(com.meisolsson.githubsdk.model.Milestone)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return milestone
     */</comment>
    <function><specifier>public</specifier> <type><name>Milestone</name></type> <name>getMilestone</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.Milestone com.github.pockethub.android.core.issue.IssueFilter.getMilestone()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.Milestone com.github.pockethub.android.core.issue.IssueFilter.getMilestone()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>milestone</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param assignee
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>setAssignee</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>assignee</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setAssignee(com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>assignee</name></name> <operator>=</operator> <name>assignee</name></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setAssignee(com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param direction Can be either {@value DIRECTION_ASCENDING} or {@value DIRECTION_ASCENDING}.
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>setDirection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setDirection(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>direction</name></name> <operator>=</operator> <name>direction</name></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setDirection(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @param sortType Can be either {@value SORT_COMMENTS}, {@value SORT_CREATED}
     *                 or {@value SORT_UPDATED}.
     * @return this filter
     */</comment>
    <function><specifier>public</specifier> <type><name>IssueFilter</name></type> <name>setSortType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sortType</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setSortType(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>this</name><operator>.</operator><name>sortType</name></name> <operator>=</operator> <name>sortType</name></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.setSortType(String)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>this</name></expr>;</return>}</block>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSortType</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.core.issue.IssueFilter.getSortType()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.core.issue.IssueFilter.getSortType()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>sortType</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getDirection</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.core.issue.IssueFilter.getDirection()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"String com.github.pockethub.android.core.issue.IssueFilter.getDirection()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>direction</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Are only open issues returned?
     *
     * @return true if open only, false if closed only
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isOpen</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isOpen()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isOpen()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>open</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return assignee
     */</comment>
    <function><specifier>public</specifier> <type><name>User</name></type> <name>getAssignee</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.User com.github.pockethub.android.core.issue.IssueFilter.getAssignee()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.meisolsson.githubsdk.model.User com.github.pockethub.android.core.issue.IssueFilter.getAssignee()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>assignee</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Create a map of all the request parameters represented by this filter
     *
     * @return non-null map of filter request parameters
     */</comment>
    <function><specifier>public</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>toFilterMap</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"Map&lt;String, Object&gt; com.github.pockethub.android.core.issue.IssueFilter.toFilterMap()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FIELD_SORT</name></expr></argument>, <argument><expr><name>sortType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FIELD_DIRECTION</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>assignee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FILTER_ASSIGNEE</name></expr></argument>, <argument><expr><call><name><name>assignee</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>milestone</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FILTER_MILESTONE</name></expr></argument>,
                    <argument><expr><call><name><name>Integer</name><operator>.</operator><name>toString</name></name><argument_list>(<argument><expr><call><name><name>milestone</name><operator>.</operator><name>number</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>labels</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>labels</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>labelsQuery</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Label</name></type> <name>label</name> <range>: <expr><name>labels</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>labelsQuery</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>label</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FILTER_LABELS</name></expr></argument>, <argument><expr><call><name><name>labelsQuery</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>open</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FILTER_STATE</name></expr></argument>, <argument><expr><name>STATE_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>FILTER_STATE</name></expr></argument>, <argument><expr><name>STATE_CLOSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"Map&lt;String, Object&gt; com.github.pockethub.android.core.issue.IssueFilter.toFilterMap()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>filter</name></expr>;</return>}</block>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Get display {@link CharSequence} representing this filter
     *
     * @return display
     */</comment>
    <function><specifier>public</specifier> <type><name>CharSequence</name></type> <name>toDisplay</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.core.issue.IssueFilter.toDisplay()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>segments</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>open</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>segments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"Open issues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>segments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"Closed issues"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <if>if <condition>(<expr><name>assignee</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>segments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"Assignee: "</literal> <operator>+</operator> <call><name><name>assignee</name><operator>.</operator><name>login</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>milestone</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>segments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"Milestone: "</literal> <operator>+</operator> <call><name><name>milestone</name><operator>.</operator><name>title</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>labels</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>labels</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"Labels: "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>Label</name></type> <name>label</name> <range>: <expr><name>labels</name></expr></range></decl></init>)</control> <block>{
                <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>label</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>segments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><call><name><name>segments</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.core.issue.IssueFilter.toDisplay()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="string">""</literal></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>all</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>segment</name> <range>: <expr><name>segments</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>segment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>all</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>all</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>all</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"CharSequence com.github.pockethub.android.core.issue.IssueFilter.toDisplay()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>all</name></expr>;</return>}</block>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.issue.IssueFilter.hashCode()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.issue.IssueFilter.hashCode()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name> <block>{ <expr><name>open</name></expr>,
                <expr><ternary><condition><expr><name>assignee</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>assignee</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>,
                <expr><ternary><condition><expr><name>milestone</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>milestone</name><operator>.</operator><name>number</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>,
                <expr><ternary><condition><expr><name>assignee</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>assignee</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>,
                <expr><ternary><condition><expr><name>repository</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>repository</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>,
                <expr><name>labels</name></expr>, <expr><name>direction</name></expr>, <expr><name>sortType</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(Object,Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(Object,Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(Object,Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><name>Milestone</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Milestone</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.Milestone,com.meisolsson.githubsdk.model.Milestone)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.Milestone,com.meisolsson.githubsdk.model.Milestone)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.Milestone,com.meisolsson.githubsdk.model.Milestone)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>number</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>number</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><name>User</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>User</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.User,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.User,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
        }</block></then></if>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.User,com.meisolsson.githubsdk.model.User)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isEqual</name><parameter_list>(<parameter><decl><type><name>Repository</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Repository</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.Repository,com.meisolsson.githubsdk.model.Repository)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.isEqual(com.meisolsson.githubsdk.model.Repository,com.meisolsson.githubsdk.model.Repository)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>id</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.equals(Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>this</name></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.equals(Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>o</name> <operator>instanceof</operator> <name>IssueFilter</name><operator>)</operator></expr>)</condition><then> <block>{
            <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.equals(Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block>
        }</block></then></if>

        <decl_stmt><decl><type><name>IssueFilter</name></type> <name>other</name> <init>= <expr><operator>(</operator><name>IssueFilter</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
        <block>{<expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"boolean com.github.pockethub.android.core.issue.IssueFilter.equals(Object)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>open</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>open</name></name> <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name>milestone</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>milestone</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name>assignee</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>assignee</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name>repository</name></expr></argument>, <argument><expr><name>repository</name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name>labels</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>labels</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name>sortType</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>sortType</name></name></expr></argument>)</argument_list></call>
                <operator>&amp;&amp;</operator> <call><name>isEqual</name><argument_list>(<argument><expr><name>direction</name></expr></argument>, <argument><expr><name><name>other</name><operator>.</operator><name>direction</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>IssueFilter</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.clone()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"com.github.pockethub.android.core.issue.IssueFilter com.github.pockethub.android.core.issue.IssueFilter.clone()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><try>try <block>{
            <return>return <expr><operator>(</operator><name>IssueFilter</name><operator>)</operator> <call><name><name>super</name><operator>.</operator><name>clone</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>CloneNotSupportedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// This should never happen since this class implements Cloneable</comment>
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Label</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>Label</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.issue.IssueFilter.compare(com.meisolsson.githubsdk.model.Label,com.meisolsson.githubsdk.model.Label)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.issue.IssueFilter.compare(com.meisolsson.githubsdk.model.Label,com.meisolsson.githubsdk.model.Label)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name><name>CASE_INSENSITIVE_ORDER</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>lhs</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rhs</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.issue.IssueFilter.describeContents()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"int com.github.pockethub.android.core.issue.IssueFilter.describeContents()"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodEnter</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.issue.IssueFilter.writeToParcel(android.os.Parcel,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>repository</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeTypedList</name></name><argument_list>(<argument><expr><name>labels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>milestone</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>assignee</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeByte</name></name><argument_list>(<argument><expr><call>(<name>byte</name>) <argument_list>(<argument><expr><ternary><condition><expr><name>open</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>direction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>sortType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>logMethodExit</name></name><argument_list>(<argument><expr><literal type="string">"void com.github.pockethub.android.core.issue.IssueFilter.writeToParcel(android.os.Parcel,int)"</literal></expr></argument>,<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
