<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\mijack\XlogUtils.java"><package>package <name><name>com</name><operator>.</operator><name>mijack</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>RemoteException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Constructor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Member</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>KEY_TO_VALUE</name></name>;</import>
<import>import static <name><name>com</name><operator>.</operator><name>mijack</name><operator>.</operator><name>Xlog</name><operator>.</operator><name>KEY_TO_VALUE2</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Created by Mr.Yuan on 2017/4/1.
 */</comment>
<class><specifier>public</specifier> class <name>XlogUtils</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>processName</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>THREAD_INFO_LOCAL</name> <init>= <expr><operator>new</operator> <call><name><name>ThreadLocal</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>LINE_SPLIT_CHAR</name> <init>= <expr><literal type="char">'\t'</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>PARAMS_SPLIT_CHAR</name> <init>= <expr><literal type="char">'\t'</literal></expr></init></decl>;</decl_stmt>


    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>paramsToString</name><parameter_list>(<parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>objects</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\"params\":["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>objects</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>objects</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>object2String</name><argument_list>(<argument><expr><name><name>objects</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>PARAMS_SPLIT_CHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * å°objectè½¬åæjson
     *
     * @param o
     * @return
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>object2String</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="string">"null"</literal></expr>;</return>
        }</block></then></if>
        <comment type="line">// å¤æ­æ¯å¦ä¸ºåºæ¬ç±»å</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>basicType</name> <init>= <expr><call><name>getBasicType</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>basicType</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"{\"type\":\"%s\",\"data\":\"%s\"}"</literal></expr></argument>, <argument><expr><name>basicType</name></expr></argument>, <argument><expr><call><name><name>o</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>, <argument><expr><call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"hashcode"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>Member</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Member</name></type> <name>member</name> <init>= <expr><operator>(</operator><name>Member</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"method"</literal></expr></argument>,<argument><expr><call><name>method2String</name><argument_list>(<argument><expr><name>member</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"string"</literal></expr></argument>, <argument><expr><call><name><name>o</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>Throwable</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Throwable</name></type> <name>throwable</name> <init>= <expr><operator>(</operator><name>Throwable</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>, <argument><expr><call><name><name>throwable</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>ComponentName</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ComponentName</name></type> <name>componentName</name> <init>= <expr><operator>(</operator><name>ComponentName</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"packageName"</literal></expr></argument>, <argument><expr><call><name><name>componentName</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"shortName"</literal></expr></argument>, <argument><expr><call><name><name>componentName</name><operator>.</operator><name>getShortClassName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>IBinder</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>IBinder</name></type> <name>iBinder</name> <init>= <expr><operator>(</operator><name>IBinder</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>descriptor</name></decl>;</decl_stmt>
            <try>try <block>{
                <expr_stmt><expr><name>descriptor</name> <operator>=</operator> <call><name><name>iBinder</name><operator>.</operator><name>getInterfaceDescriptor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RemoteException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>descriptor</name> <operator>=</operator> <literal type="string">"null"</literal></expr>;</expr_stmt>
            }</block></catch></try>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"descriptor"</literal></expr></argument>, <argument><expr><name>descriptor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>Message</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Message</name></type> <name>message</name> <init>= <expr><operator>(</operator><name>Message</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"what"</literal></expr></argument>, <argument><expr><name><name>message</name><operator>.</operator><name>what</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"arg1"</literal></expr></argument>, <argument><expr><name><name>message</name><operator>.</operator><name>arg1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"arg2"</literal></expr></argument>, <argument><expr><name><name>message</name><operator>.</operator><name>arg2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"target"</literal></expr></argument>, <argument><expr><call><name>object2String</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getTarget</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"obj"</literal></expr></argument>, <argument><expr><call><name>object2String</name><argument_list>(<argument><expr><name><name>message</name><operator>.</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>View</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>View</name></type> <name>view</name> <init>= <expr><operator>(</operator><name>View</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"left"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getLeft</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"right"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getRight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"top"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"bottom"</literal></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getBottom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>o</name> <operator>instanceof</operator> <name>TextView</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>TextView</name></type> <name>tv</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <name>view</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>CharSequence</name></type> <name>text</name> <init>= <expr><call><name><name>tv</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>text</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>CharSequence</name></type> <name>hint</name> <init>= <expr><call><name><name>tv</name><operator>.</operator><name>getHint</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>hint</name> <operator>=</operator> <call><name><name>hint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">"\""</literal></expr></argument>, <argument><expr><literal type="string">"\\\""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"hint"</literal></expr></argument>, <argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getCurrentThreadInfo</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>THREAD_INFO_LOCAL</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>Thread</name></type> <name>currentThread</name> <init>= <expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>THREAD_INFO_LOCAL</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>currentThread</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>identityHashCode</name></name><argument_list>(<argument><expr><name>currentThread</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>THREAD_INFO_LOCAL</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getProcessName</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>processName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><name>processName</name></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>processId</name> <operator>=</operator> <call><name><name>Process</name><operator>.</operator><name>myPid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>BufferedReader</name></type> <name>cmdlineReader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>cmdlineReader</name> <operator>=</operator> <operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(
                    <argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(
                            <argument><expr><literal type="string">"/proc/"</literal> <operator>+</operator> <name>processId</name> <operator>+</operator> <literal type="string">"/cmdline"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><literal type="string">"iso-8859-1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name><name>cmdlineReader</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>processName</name> <operator>=</operator> <call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>processName</name></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>cmdlineReader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <try>try <block>{
                    <expr_stmt><expr><call><name><name>cmdlineReader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></then></if>
        }</block></finally></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>BASIC_TYPES</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{
            <expr><literal type="string">"java.lang.Boolean"</literal></expr>, <expr><literal type="string">"java.lang.Byte"</literal></expr>, <expr><literal type="string">"java.lang.Character"</literal></expr>,
            <expr><literal type="string">"java.lang.Double"</literal></expr>, <expr><literal type="string">"java.lang.Float"</literal></expr>, <expr><literal type="string">"java.lang.Integer"</literal></expr>,
            <expr><literal type="string">"java.lang.Long"</literal></expr>, <expr><literal type="string">"java.lang.Short"</literal></expr>, <expr><literal type="string">"java.lang.Void"</literal></expr>,
            <expr><literal type="string">"boolean"</literal></expr>, <expr><literal type="string">"byte"</literal></expr>, <expr><literal type="string">"char"</literal></expr>, <expr><literal type="string">"double"</literal></expr>, <expr><literal type="string">"float"</literal></expr>, <expr><literal type="string">"int"</literal></expr>, <expr><literal type="string">"long"</literal></expr>, <expr><literal type="string">"short"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getBasicType</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>String</name></type> <name>type</name> <range>: <expr><name>BASIC_TYPES</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <return>return <expr><name>type</name></expr>;</return>
            }</block></then></if>
        }</block></for>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>processId</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getProcessId</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>processName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>getProcessName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>processId</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setProcessName</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>pName</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>processName</name> <operator>=</operator> <name>pName</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>processId</name> <operator>=</operator> <call><name><name>Process</name><operator>.</operator><name>myPid</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>method2String</name><parameter_list>(<parameter><decl><type><name>Member</name></type> <name>member</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
            <if>if <condition>(<expr><name>member</name> <operator>instanceof</operator> <name>Method</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Method</name></type> <name>method</name> <init>= <expr><operator>(</operator><name>Method</name><operator>)</operator> <name>member</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getTypeName</name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getReturnType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getTypeName</name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getDeclaringClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>method</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>params</name> <init>= <expr><call><name><name>method</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getTypeName</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>params</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>member</name> <operator>instanceof</operator> <name>Constructor</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>Constructor</name></type> <name>constructor</name> <init>= <expr><operator>(</operator><name>Constructor</name><operator>)</operator> <name>member</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getTypeName</name><argument_list>(<argument><expr><call><name><name>constructor</name><operator>.</operator><name>getDeclaringClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"&lt;init&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>params</name> <init>= <expr><call><name><name>constructor</name><operator>.</operator><name>getParameterTypes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>params</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getTypeName</name><argument_list>(<argument><expr><name><name>params</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>params</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block></then></if></elseif></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="string">"&lt;"</literal> <operator>+</operator> <name>e</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr>;</return>
        }</block></catch></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getTypeName</name><parameter_list>(<parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
                <decl_stmt><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>cl</name> <init>= <expr><name>type</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>dimensions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while <condition>(<expr><call><name><name>cl</name><operator>.</operator><name>isArray</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
                    <expr_stmt><expr><name>dimensions</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cl</name> <operator>=</operator> <call><name><name>cl</name><operator>.</operator><name>getComponentType</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></while>
                <decl_stmt><decl><type><name>StringBuffer</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>cl</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dimensions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
                <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ <comment type="block">/*FALLTHRU*/</comment> }</block></catch></try>
        }</block></then></if>
        <return>return <expr><call><name><name>type</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
}</block></class>
</unit>
