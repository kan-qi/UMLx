<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\PocketHub\app\src\main\java\mijack\Xlog.java"><package>package <name><name>com</name><operator>.</operator><name>mijack</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Process</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Log</name></name>;</import>


<comment type="block" format="javadoc">/**
* Created by Mr.Yuan on 2017/3/31.
*/</comment>
<class><specifier>public</specifier> class <name>Xlog</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><literal type="string">"Xlog"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_TYPE_EXECUTE</name> <init>= <expr><literal type="string">"execute"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_TYPE_ENTER</name> <init>= <expr><literal type="string">"enter"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_TYPE_EXIT</name> <init>= <expr><literal type="string">"exit"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INSTANCE_METHOD_TYPE</name> <init>= <expr><literal type="string">"instance_method_type"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATIC_METHOD_TYPE</name> <init>= <expr><literal type="string">"static_method_type"</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">//static ObjectMapper objectMapper = new ObjectMapper();</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logMethodExecuteInfo</name><argument_list>(<argument><expr><name>INSTANCE_METHOD_TYPE</name></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logMethodExecuteInfo</name><argument_list>(<argument><expr><name>STATIC_METHOD_TYPE</name></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//Xlog.logMethodEnter(System.identityHashCode(param),method2String(param.method), param.thisObject, param.args);</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodEnter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logMethodEnter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

<comment type="line">//    //Xlog.logMethodEnter(System.identityHashCode(param),method2String(param.method), param.thisObject, param.args);</comment>
<comment type="line">//    public static void logMethodEnter(String methodSign, Object instance, Object[] ...args) {</comment>
<comment type="line">//        logMethodEnter(-1, methodSign, instance, args);</comment>
<comment type="line">//    }</comment>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodEnter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logMethodEnterInfo</name><argument_list>(<argument><expr><name>hookId</name></expr></argument>, <argument><expr><name>INSTANCE_METHOD_TYPE</name></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <comment type="line">//Xlog.logStaticMethodEnter(System.identityHashCode(param),method2String(param.method), param.args);</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodEnter</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logStaticMethodEnter</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodEnter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logMethodEnterInfo</name><argument_list>(<argument><expr><name>hookId</name></expr></argument>, <argument><expr><name>STATIC_METHOD_TYPE</name></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<comment type="line">//Xlog.logStaticMethodExitWithThrowable(System.identityHashCode(param),method2String(param.method), param.getThrowable());</comment>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExitWithThrowable</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>logStaticMethodExitWithThrowable</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExitWithThrowable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>logMethodExitInfo</name><argument_list>(<argument><expr><name>hookId</name></expr></argument>,<argument><expr><name>STATIC_METHOD_TYPE</name></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line">//Xlog.logStaticMethodExit(System.identityHashCode(param),method2String(param.method));</comment>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>logStaticMethodExit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>logMethodExitInfo</name><argument_list>(<argument><expr><name>hookId</name></expr></argument>,<argument><expr><name>STATIC_METHOD_TYPE</name></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>logMethodExitInfo</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>STATIC_METHOD_TYPE</name></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>,<argument><expr><name>index</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line">//Xlog.logMethodExitWithThrowable(System.identityHashCode(param),method2String(param.method), param.thisObject, param.getThrowable());</comment>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExitWithThrowable</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>logMethodExitWithThrowable</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExitWithThrowable</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>logMethodExitInfo</name><argument_list>(<argument><expr><name>hookId</name></expr></argument>,<argument><expr><name>INSTANCE_METHOD_TYPE</name></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>instance</name></expr></argument>,<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>
<comment type="line">//Xlog.logMethodExit(System.identityHashCode(param),method2String(param.method), param.thisObject);</comment>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><call><name>logMethodExit</name><argument_list>(<argument><expr><name>methodSign</name></expr></argument>, <argument><expr><name>instance</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExit</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>logMethodExitInfo</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>INSTANCE_METHOD_TYPE</name></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>,<argument><expr><name>index</name></expr></argument>,<argument><expr><name>instance</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>
<function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>logMethodExitInfo</name><argument_list>(<argument><expr><name>hookId</name></expr></argument>,<argument><expr><name>INSTANCE_METHOD_TYPE</name></expr></argument>,<argument><expr><name>methodSign</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>instance</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExitInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>,<parameter><decl><type><name>String</name></type> <name>methodType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"logType"</literal></expr></argument>, <argument><expr><name>LOG_TYPE_EXIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"processName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"threadName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getCurrentThreadInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hookId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"hookId"</literal></expr></argument>, <argument><expr><name>hookId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodType"</literal></expr></argument>, <argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodSign"</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>INSTANCE_METHOD_TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"instance"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>throwable</name> <operator>!=</operator><literal type="null">null</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"throwable"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>XLoger</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExecuteInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>methodType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"logType"</literal></expr></argument>, <argument><expr><name>LOG_TYPE_EXECUTE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"processName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"threadName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getCurrentThreadInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodType"</literal></expr></argument>, <argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodSign"</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//å¤æ­æ¯å¦æ¯æ¹æ³å¼å§</comment>
        <if>if <condition>(<expr><call><name><name>INSTANCE_METHOD_TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"instance"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>paramsToString</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>XLoger</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodEnterInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodType</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Object</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"logType"</literal></expr></argument>, <argument><expr><name>LOG_TYPE_ENTER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"processName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"threadName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getCurrentThreadInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hookId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"hookId"</literal></expr></argument>, <argument><expr><name>hookId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodType"</literal></expr></argument>, <argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodSign"</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//å¤æ­æ¯å¦æ¯æ¹æ³å¼å§</comment>
        <if>if <condition>(<expr><call><name><name>INSTANCE_METHOD_TYPE</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>methodType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"instance"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>paramsToString</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>XLoger</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TO_VALUE</name> <init>= <expr><literal type="string">"\"%s\":\"%s\""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TO_VALUE2</name> <init>= <expr><literal type="string">"\"%s\":%s"</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logStaticMethodExitWithResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"logType"</literal></expr></argument>, <argument><expr><name>LOG_TYPE_EXIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"processName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"threadName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getCurrentThreadInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hookId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"hookId"</literal></expr></argument>, <argument><expr><name>hookId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodType"</literal></expr></argument>, <argument><expr><name>STATIC_METHOD_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodSign"</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>XLoger</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>logMethodExitWithResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>hookId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>methodSign</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>instance</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"logType"</literal></expr></argument>, <argument><expr><name>LOG_TYPE_EXIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"processName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"threadName"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getCurrentThreadInfo</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"pid"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>getProcessId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>hookId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"hookId"</literal></expr></argument>, <argument><expr><name>hookId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodType"</literal></expr></argument>, <argument><expr><name>INSTANCE_METHOD_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE</name></expr></argument>, <argument><expr><literal type="string">"methodSign"</literal></expr></argument>, <argument><expr><name>methodSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"instance"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>instance</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>KEY_TO_VALUE2</name></expr></argument>, <argument><expr><literal type="string">"result"</literal></expr></argument>, <argument><expr><call><name><name>XlogUtils</name><operator>.</operator><name>object2String</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>XLoger</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
}</block></class>
</unit>
