<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\logsubmit\SubmitLogFragment.java"><comment type="block">/*
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logsubmit</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>ActivityInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION_CODES</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>util</name><operator>.</operator><name>Linkify</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>SimpleTextWatcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logsubmit</name><operator>.</operator><name>util</name><operator>.</operator><name>Scrubber</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>task</name><operator>.</operator><name>ProgressDialogAsyncTask</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<import>import <name><name>okhttp3</name><operator>.</operator><name>MediaType</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>MultipartBody</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>OkHttpClient</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Request</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>RequestBody</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>Response</name></name>;</import>
<import>import <name><name>okhttp3</name><operator>.</operator><name>ResponseBody</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A helper {@link Fragment} to preview and submit logcat information to a public pastebin.
 * Activities that contain this fragment must implement the
 * {@link SubmitLogFragment.OnLogSubmittedListener} interface
 * to handle interaction events.
 * Use the {@link SubmitLogFragment#newInstance} factory method to
 * create an instance of this fragment.
 *
 */</comment>
<class><specifier>public</specifier> class <name>SubmitLogFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SubmitLogFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>API_ENDPOINT</name> <init>= <expr><literal type="string">"https://debuglogs.org"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HEADER_SYSINFO</name> <init>= <expr><literal type="string">"========== SYSINFO ========"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HEADER_LOGCAT</name>  <init>= <expr><literal type="string">"========== LOGCAT ========"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>HEADER_LOGGER</name>  <init>= <expr><literal type="string">"========== LOGGER ========"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type>   <name>okButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type>   <name>cancelButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>     <name>scrollButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>   <name>supportEmailAddress</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>   <name>supportEmailSubject</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>   <name>hackSavedLogUrl</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>  <name>emailActivityWasStarted</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>


  <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type>           <name>logPreview</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>LogPreviewAdapter</name></type>      <name>logPreviewAdapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>OnLogSubmittedListener</name></type> <name>mListener</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Use this factory method to create a new instance of
   * this fragment using the provided parameters.
   *
   * @return A new instance of fragment SubmitLogFragment.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SubmitLogFragment</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>supportEmailAddress</name></decl></parameter>,
                                              <parameter><decl><type><name>String</name></type> <name>supportEmailSubject</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>SubmitLogFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>SubmitLogFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>fragment</name><operator>.</operator><name>supportEmailAddress</name></name> <operator>=</operator> <name>supportEmailAddress</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fragment</name><operator>.</operator><name>supportEmailSubject</name></name> <operator>=</operator> <name>supportEmailSubject</name></expr>;</expr_stmt>

    <return>return <expr><name>fragment</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SubmitLogFragment</name></type> <name>newInstance</name><parameter_list>()</parameter_list>
  <block>{
    <return>return <expr><call><name>newInstance</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <constructor><specifier>public</specifier> <name>SubmitLogFragment</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>,
                           <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// Inflate the layout for this fragment</comment>
    <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>fragment_submit_log</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>mListener</name> <operator>=</operator> <operator>(</operator><name>OnLogSubmittedListener</name><operator>)</operator> <name>activity</name></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ClassCastException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>ClassCastException</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" must implement OnFragmentInteractionListener"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>emailActivityWasStarted</name> <operator>&amp;&amp;</operator> <name>mListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onSuccess</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDetach</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetach</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mListener</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeResources</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>okButton</name>     <operator>=</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cancelButton</name> <operator>=</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>logPreview</name>   <operator>=</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>log_preview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scrollButton</name> <operator>=</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scroll_to_bottom_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name>SubmitToPastebinAsyncTask</name><argument_list>(<argument><expr><call><name><name>logPreviewAdapter</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cancelButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>mListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onCancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scrollButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>logPreview</name><operator>.</operator><name>scrollToPosition</name></name><argument_list>(<argument><expr><call><name><name>logPreviewAdapter</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>logPreview</name><operator>.</operator><name>addOnScrollListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>RecyclerView</name><operator>.</operator><name>OnScrollListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onScrolled</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>LinearLayoutManager</name><operator>)</operator> <call><name><name>recyclerView</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>findLastVisibleItemPosition</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>logPreviewAdapter</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>scrollButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>scrollButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>logPreviewAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>LogPreviewAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>logPreview</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>logPreview</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>logPreviewAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>new</operator> <call><name>PopulateLogcatAsyncTask</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>grabLogcat</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Process</name></type>         <name>process</name>        <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exec</name><argument_list>(<argument><expr><literal type="string">"logcat -d"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>BufferedReader</name></type>  <name>bufferedReader</name> <init>= <expr><operator>new</operator> <call><name>BufferedReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><call><name><name>process</name><operator>.</operator><name>getInputStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type>   <name>log</name>            <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type>          <name>separator</name>      <init>= <expr><call><name><name>System</name><operator>.</operator><name>getProperty</name></name><argument_list>(<argument><expr><literal type="string">"line.separator"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>line</name></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>line</name> <operator>=</operator> <call><name><name>bufferedReader</name><operator>.</operator><name>readLine</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>log</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>separator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
      <return>return <expr><call><name><name>log</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"IOException when trying to read logcat."</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>getIntentForSupportEmail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>logUrl</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>emailSendIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SEND</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>emailSendIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_EMAIL</name></name></expr></argument>,   <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>supportEmailAddress</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>emailSendIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_SUBJECT</name></name></expr></argument>, <argument><expr><name>supportEmailSubject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>emailSendIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(
        <argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TEXT</name></name></expr></argument>,
        <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__please_review_this_log_from_my_app</name></name></expr></argument>, <argument><expr><name>logUrl</name></expr></argument>)</argument_list></call></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>emailSendIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><literal type="string">"message/rfc822"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>emailSendIntent</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleShowChooserForIntent</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>chooserTitle</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type>    <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>ShareIntentListAdapter</name></type> <name>adapter</name> <init>= <expr><call><name><name>ShareIntentListAdapter</name><operator>.</operator><name>getAdapterForIntent</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>chooserTitle</name></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>setAdapter</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{

             <function><annotation>@<name>Override</name></annotation>
             <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
               <decl_stmt><decl><type><name>ActivityInfo</name></type> <name>info</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getItem</name></name><argument_list>(<argument><expr><name>which</name></expr></argument>)</argument_list></call><operator>.</operator><name>activityInfo</name></expr></init></decl>;</decl_stmt>
               <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setClassName</name></name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>packageName</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

               <expr_stmt><expr><name>emailActivityWasStarted</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
             }</block></function>

           }</block></class></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>setOnCancelListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnCancelListener</name></name></super><argument_list>()</argument_list> <block>{

             <function><annotation>@<name>Override</name></annotation>
             <specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialogInterface</name></decl></parameter>)</parameter_list> <block>{
               <if>if <condition>(<expr><name>hackSavedLogUrl</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
                 <block type="pseudo"><expr_stmt><expr><call><name>handleShowSuccessDialog</name><argument_list>(<argument><expr><name>hackSavedLogUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
             }</block></function>

           }</block></class></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>TextView</name></type> <name>handleBuildSuccessTextView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>logUrl</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>TextView</name></type> <name>showText</name> <init>= <expr><operator>new</operator> <call><name>TextView</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>showText</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_SP</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showText</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__copy_this_url_and_add_it_to_your_issue</name></name></expr></argument>, <argument><expr><name>logUrl</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showText</name><operator>.</operator><name>setAutoLinkMask</name></name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showText</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>showText</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>onLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
        <type><name>ClipboardManager</name></type> <name>manager</name> <init>=
            <expr><operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Activity</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>manager</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>logUrl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__copied_to_clipboard</name></name></expr></argument>,
                       <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Linkify</name><operator>.</operator><name>addLinks</name></name><argument_list>(<argument><expr><name>showText</name></expr></argument>, <argument><expr><name><name>Linkify</name><operator>.</operator><name>WEB_URLS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>showText</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleShowSuccessDialog</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>logUrl</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>TextView</name></type>            <name>showText</name> <init>= <expr><call><name>handleBuildSuccessTextView</name><argument_list>(<argument><expr><name>logUrl</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name>  <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__success</name></name></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name>showText</name></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>setCancelable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>setNeutralButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__button_got_it</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
             <function><annotation>@<name>Override</name></annotation>
             <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialogInterface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
               <expr_stmt><expr><call><name><name>dialogInterface</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
               <if>if <condition>(<expr><name>mListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onSuccess</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
             }</block></function>
           }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>supportEmailAddress</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__button_compose_email</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialogInterface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name>handleShowChooserForIntent</name><argument_list>(
              <argument><expr><call><name>getIntentForSupportEmail</name><argument_list>(<argument><expr><name>logUrl</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__choose_email_app</name></name></expr></argument>)</argument_list></call></expr></argument>
          )</argument_list></call></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>hackSavedLogUrl</name> <operator>=</operator> <name>logUrl</name></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>PopulateLogcatAsyncTask</name> <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Context</name></argument>&gt;</argument_list></name></type> <name>weakContext</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PopulateLogcatAsyncTask</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>weakContext</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>String</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>voids</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><call><name><name>weakContext</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>context</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

      <decl_stmt><decl><type><name>Scrubber</name></type> <name>scrubber</name> <init>= <expr><operator>new</operator> <call><name>Scrubber</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>newLogs</name></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>t1</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>logs</name> <init>= <expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPersistentLogger</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLogs</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Fetch our logs : "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>t1</name><operator>)</operator> <operator>+</operator> <literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>t2</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>newLogs</name> <operator>=</operator> <call><name><name>scrubber</name><operator>.</operator><name>scrub</name></name><argument_list>(<argument><expr><name>logs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Scrub our logs: "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>t2</name><operator>)</operator> <operator>+</operator> <literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve new logs."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>newLogs</name> <operator>=</operator> <literal type="string">"Failed to retrieve logs."</literal></expr>;</expr_stmt>
      }</block></catch></try>

      <decl_stmt><decl><type><name>long</name></type> <name>t3</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>logcat</name> <init>= <expr><call><name>grabLogcat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Fetch logcat: "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>t3</name><operator>)</operator> <operator>+</operator> <literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>long</name></type> <name>t4</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>scrubbedLogcat</name> <init>= <expr><call><name><name>scrubber</name><operator>.</operator><name>scrub</name></name><argument_list>(<argument><expr><name>logcat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Scrub logcat: "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>t4</name><operator>)</operator> <operator>+</operator> <literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>HEADER_SYSINFO</name> <operator>+</operator> <literal type="string">"\n\n"</literal> <operator>+</operator>
             <call><name>buildDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"\n\n\n"</literal> <operator>+</operator>
             <name>HEADER_LOGCAT</name> <operator>+</operator> <literal type="string">"\n\n"</literal> <operator>+</operator>
             <name>scrubbedLogcat</name> <operator>+</operator> <literal type="string">"\n\n\n"</literal> <operator>+</operator>
             <name>HEADER_LOGGER</name> <operator>+</operator> <literal type="string">"\n\n"</literal> <operator>+</operator>
             <name>newLogs</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPreExecute</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>logPreviewAdapter</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__loading_logs</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>logcat</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><name>logcat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>logcat</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>mListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onFailure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <return>return;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>logPreviewAdapter</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>logcat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>okButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SubmitToPastebinAsyncTask</name> <super><extends>extends <name><name>ProgressDialogAsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>,<argument><name>Void</name></argument>,<argument><name>String</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>         <name>paste</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SubmitToPastebinAsyncTask</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>paste</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__submitting</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__uploading_logs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paste</name></name> <operator>=</operator> <name>paste</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>String</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>voids</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>OkHttpClient</name></type> <name>client</name>   <init>= <expr><operator>new</operator> <call><name><name>OkHttpClient</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Response</name></type>     <name>response</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>url</name><argument_list>(<argument><expr><name>API_ENDPOINT</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ResponseBody</name></type> <name>body</name>     <init>= <expr><call><name><name>response</name><operator>.</operator><name>body</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>response</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>body</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unsuccessful response: "</literal> <operator>+</operator> <name>response</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name>JSONObject</name></type>            <name>json</name>   <init>= <expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>string</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>                <name>url</name>    <init>= <expr><call><name><name>json</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"url"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>JSONObject</name></type>            <name>fields</name> <init>= <expr><call><name><name>json</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>                <name>item</name>   <init>= <expr><call><name><name>fields</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>MultipartBody</name><operator>.</operator><name>Builder</name></name></type> <name>post</name>   <init>= <expr><operator>new</operator> <call><name><name>MultipartBody</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>      <name>keys</name>   <init>= <expr><call><name><name>fields</name><operator>.</operator><name>keys</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>post</name><operator>.</operator><name>addFormDataPart</name></name><argument_list>(<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>String</name></type> <name>key</name> <init>= <expr><call><name><name>keys</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>post</name><operator>.</operator><name>addFormDataPart</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><call><name><name>fields</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><call><name><name>post</name><operator>.</operator><name>addFormDataPart</name></name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><call><name><name>RequestBody</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name><name>MediaType</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"text/plain"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>paste</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>Response</name></type> <name>postResponse</name> <init>= <expr><call><name><name>client</name><operator>.</operator><name>newCall</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Request</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>url</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><call><name><name>post</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>postResponse</name><operator>.</operator><name>isSuccessful</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Bad response: "</literal> <operator>+</operator> <name>postResponse</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <return>return <expr><name>API_ENDPOINT</name> <operator>+</operator> <literal type="string">"/"</literal> <operator>+</operator> <name>item</name></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>JSONException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"ImageActivity"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>response</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPostExecute</name></name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>response</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>handleShowSuccessDialog</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Response was null from Gist API."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>log_submit_activity__network_failure</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>
  }</block></class>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>asMegs</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>bytes</name> <operator>/</operator> <literal type="number">1048576L</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMemoryUsage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Runtime</name></type> <name>info</name> <init>= <expr><call><name><name>Runtime</name><operator>.</operator><name>getRuntime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>totalMemory</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>, <argument><expr><literal type="string">"%dM (%.2f%% free, %dM max)"</literal></expr></argument>,
                         <argument><expr><call><name>asMegs</name><argument_list>(<argument><expr><call><name><name>info</name><operator>.</operator><name>totalMemory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><operator>(</operator><name>float</name><operator>)</operator><call><name><name>info</name><operator>.</operator><name>freeMemory</name></name><argument_list>()</argument_list></call> <operator>/</operator> <call><name><name>info</name><operator>.</operator><name>totalMemory</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">100f</literal></expr></argument>,
                         <argument><expr><call><name>asMegs</name><argument_list>(<argument><expr><call><name><name>info</name><operator>.</operator><name>maxMemory</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMemoryClass</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>          <name>lowMem</name>          <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name> <operator>&amp;&amp;</operator> <call><name><name>activityManager</name><operator>.</operator><name>isLowRamDevice</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>lowMem</name> <operator>=</operator> <literal type="string">", low-mem device"</literal></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><call><name><name>activityManager</name><operator>.</operator><name>getMemoryClass</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>lowMem</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>buildDescription</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>PackageManager</name></type> <name>pm</name>      <init>= <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>StringBuilder</name></type>  <name>builder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>


    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Device  : "</literal></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MANUFACTURER</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>MODEL</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>PRODUCT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Android : "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>VERSION</name><operator>.</operator><name>RELEASE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>VERSION</name><operator>.</operator><name>INCREMENTAL</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>DISPLAY</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">")\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Memory  : "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getMemoryUsage</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Memclass: "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>getMemoryClass</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"OS Host : "</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>HOST</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"App     : "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>getApplicationLabel</name></name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>getApplicationInfo</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
             <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call>
             <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>pm</name><operator>.</operator><name>getPackageInfo</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>versionName</name></expr></argument>)</argument_list></call>
             <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></type> <name>nnfe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"Unknown\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <return>return <expr><call><name><name>builder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This interface must be implemented by activities that contain this
   * fragment to allow an interaction in this fragment to be communicated
   * to the activity and potentially other fragments contained in that
   * activity.
   * &lt;p&gt;
   * See the Android Training lesson &lt;a href=
   * "http://developer.android.com/training/basics/fragments/communicating.html"
   * &gt;Communicating with Other Fragments&lt;/a&gt; for more information.
   */</comment>
  <interface><specifier>public</specifier> interface <name>OnLogSubmittedListener</name> <block>{
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onCancel</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>LogPreviewAdapter</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name><name>Adapter</name><argument_list type="generic">&lt;<argument><name>LogPreviewViewHolder</name></argument>&gt;</argument_list></name></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>lines</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>LogPreviewViewHolder</name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>LogPreviewViewHolder</name><argument_list>(<argument><expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>item_log_preview</name></name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><name>LogPreviewViewHolder</name></type> <name>holder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>bind</name></name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onViewRecycled</name><parameter_list>(<parameter><decl><type><name>LogPreviewViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>holder</name><operator>.</operator><name>unbind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>lines</name><operator>.</operator><name>length</name></name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>lines</name> <operator>=</operator> <call><name><name>text</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>String</name></type> <name>getText</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>Util</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>LogPreviewViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>lines</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>      <name>index</name></decl>;</decl_stmt>

    <constructor><name>LogPreviewViewHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>text</name> <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <name>itemView</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>lines</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lines</name></name> <operator>=</operator> <name>lines</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name><name>lines</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>unbind</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>text</name><operator>.</operator><name>removeTextChangedListener</name></name><argument_list>(<argument><expr><name>textWatcher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SimpleTextWatcher</name></type> <name>textWatcher</name> <init>= <expr><operator>new</operator> <class><super><name>SimpleTextWatcher</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>lines</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>lines</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
  }</block></class>
}</block></class>
</unit>
