<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contacts\avatars\ResourceContactPhoto.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>avatars</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>LayerDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DrawableRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AppCompatResources</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>amulyakhare</name><operator>.</operator><name>textdrawable</name><operator>.</operator><name>TextDrawable</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>makeramen</name><operator>.</operator><name>roundedimageview</name><operator>.</operator><name>RoundedDrawable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ThemeUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>ResourceContactPhoto</name> <super><implements>implements <name>FallbackContactPhoto</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>resourceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>callCardResourceId</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ResourceContactPhoto</name><parameter_list>(<parameter><decl><type><annotation>@<name>DrawableRes</name></annotation> <name>int</name></type> <name>resourceId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>, <argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ResourceContactPhoto</name><parameter_list>(<parameter><decl><type><annotation>@<name>DrawableRes</name></annotation> <name>int</name></type> <name>resourceId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>DrawableRes</name></annotation> <name>int</name></type> <name>callCardResourceId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>resourceId</name></name>         <operator>=</operator> <name>resourceId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callCardResourceId</name></name> <operator>=</operator> <name>callCardResourceId</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Drawable</name></type> <name>asDrawable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>asDrawable</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Drawable</name></type> <name>asDrawable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>inverted</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Drawable</name></type>        <name>background</name> <init>= <expr><call><name><name>TextDrawable</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>buildRound</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>inverted</name></expr> ?</condition><then> <expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr> </then><else>: <expr><name>color</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>RoundedDrawable</name></type> <name>foreground</name> <init>= <expr><operator>(</operator><name>RoundedDrawable</name><operator>)</operator> <call><name><name>RoundedDrawable</name><operator>.</operator><name>fromDrawable</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><name>resourceId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>foreground</name><operator>.</operator><name>setScaleType</name></name><argument_list>(<argument><expr><name><name>ImageView</name><operator>.</operator><name>ScaleType</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>inverted</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>foreground</name><operator>.</operator><name>setColorFilter</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>SRC_ATOP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Drawable</name></type> <name>gradient</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDrawable</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>ThemeUtil</name><operator>.</operator><name>isDarkTheme</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>avatar_gradient_dark</name></name></expr>
                                                                                          </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>avatar_gradient_light</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>ExpandingLayerDrawable</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Drawable</name><index>[]</index></name> <block>{<expr><name>background</name></expr>, <expr><name>foreground</name></expr>, <expr><name>gradient</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Drawable</name></type> <name>asCallCard</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>AppCompatResources</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>callCardResourceId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ExpandingLayerDrawable</name> <super><extends>extends <name>LayerDrawable</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>ExpandingLayerDrawable</name><parameter_list>(<parameter><decl><type><name><name>Drawable</name><index>[]</index></name></type> <name>layers</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>layers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getIntrinsicWidth</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getIntrinsicHeight</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></function>
  }</block></class>

}</block></class>
</unit>
