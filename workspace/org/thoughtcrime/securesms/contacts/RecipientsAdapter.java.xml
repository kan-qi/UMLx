<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contacts\RecipientsAdapter.java"><comment type="block">/*
 * Copyright (C) 2008 Esmertec AG.
 * Copyright (C) 2008 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientsFormatter</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Annotation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ResourceCursorAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This adapter is used to filter contacts on both name and number.
 */</comment>
<class><specifier>public</specifier> class <name>RecipientsAdapter</name> <super><extends>extends <name>ResourceCursorAdapter</name></extends></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CONTACT_ID_INDEX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_INDEX</name>       <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NUMBER_INDEX</name>     <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LABEL_INDEX</name>      <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NAME_INDEX</name>       <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ContentResolver</name></type> <name>mContentResolver</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>ContactAccessor</name></type> <name>mContactAccessor</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>RecipientsAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>recipient_filter_item</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mContext</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mContentResolver</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mContactAccessor</name> <operator>=</operator> <call><name><name>ContactAccessor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>CharSequence</name></type> <name>convertToString</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>RecipientsAdapter</name><operator>.</operator><name>NAME_INDEX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>RecipientsAdapter</name><operator>.</operator><name>TYPE_INDEX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>number</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>RecipientsAdapter</name><operator>.</operator><name>NUMBER_INDEX</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>label</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>RecipientsAdapter</name><operator>.</operator><name>LABEL_INDEX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>displayLabel</name> <init>= <expr><call><name><name>mContactAccessor</name><operator>.</operator><name>phoneTypeToString</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>number</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <return>return <expr><name>number</name></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <comment type="line">// Names with commas are the bane of the recipient editor's existence.</comment>
            <comment type="line">// We've worked around them by using spans, but there are edge cases</comment>
            <comment type="line">// where the spans get deleted. Furthermore, having commas in names</comment>
            <comment type="line">// can be confusing to the user since commas are used as separators</comment>
            <comment type="line">// between recipients. The best solution is to simply remove commas</comment>
            <comment type="line">// from names.</comment>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <call><name><name>name</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><literal type="string">", "</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call>
                       <operator>.</operator><call><name>replace</name><argument_list>(<argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// Make sure we leave a space between parts of names.</comment>
        }</block></else></if>

        <decl_stmt><decl><type><name>String</name></type> <name>nameAndNumber</name> <init>= <expr><call><name><name>RecipientsFormatter</name><operator>.</operator><name>formatNameAndNumber</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SpannableString</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>nameAndNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>out</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                        <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                        <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>String</name></type> <name>person_id</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>RecipientsAdapter</name><operator>.</operator><name>CONTACT_ID_INDEX</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><literal type="string">"person_id"</literal></expr></argument>, <argument><expr><name>person_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                    <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><literal type="string">"label"</literal></expr></argument>, <argument><expr><call><name><name>displayLabel</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                    <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>              
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Annotation</name><argument_list>(<argument><expr><literal type="string">"number"</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>,
                    <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>bindView</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>TextView</name></type> <name>name</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>name</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>NAME_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TextView</name></type> <name>label</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>label</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>TYPE_INDEX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>label</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>mContactAccessor</name><operator>.</operator><name>phoneTypeToString</name></name><argument_list>(<argument><expr><name>mContext</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>LABEL_INDEX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TextView</name></type> <name>number</name> <init>= <expr><operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>number</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>number</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"("</literal> <operator>+</operator> <call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>NUMBER_INDEX</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Cursor</name></type> <name>runQueryOnBackgroundThread</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{
       <return>return <expr><call><name><name>mContactAccessor</name><operator>.</operator><name>getCursorForRecipientFilter</name></name><argument_list>( <argument><expr><name>constraint</name></expr></argument>, <argument><expr><name>mContentResolver</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Returns true if all the characters are meaningful as digits
     * in a phone number -- letters, digits, and a few punctuation marks.
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier>  <type><name>boolean</name></type> <name>usefulAsDigits</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>cons</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>cons</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>cons</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal><operator>)</operator></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'('</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">')'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'+'</literal><operator>)</operator>
                    <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'#'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'*'</literal><operator>)</operator></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator></expr>)</condition><then> <block>{
                <continue>continue;</continue>
            }</block></then></if>

            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></for>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
}</block></class>
</unit>
