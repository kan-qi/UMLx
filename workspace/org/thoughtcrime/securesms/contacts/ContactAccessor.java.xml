<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contacts\ContactAccessor.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>MergeCursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name><operator>.</operator><name>Contacts</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>PhoneNumberUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name><operator>.</operator><name>GroupRecord</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class was originally a layer of indirection between
 * ContactAccessorNewApi and ContactAccesorOldApi, which corresponded
 * to the API changes between 1.x and 2.x.
 *
 * Now that we no longer support 1.x, this class mostly serves as a place
 * to encapsulate Contact-related logic.  It's still a singleton, mostly
 * just because that's how it's currently called from everywhere.
 *
 * @author Moxie Marlinspike
 */</comment>

<class><specifier>public</specifier> class <name>ContactAccessor</name> <block>{

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PUSH_COLUMN</name> <init>= <expr><literal type="string">"push"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>ContactAccessor</name></type> <name>instance</name> <init>= <expr><operator>new</operator> <call><name>ContactAccessor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>ContactAccessor</name></type> <name>getInstance</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>instance</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>getAllContactsWithNumbers</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument> ,<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block></try>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>getAllSystemContacts</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr>, <expr><name><name>Phone</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>, <expr><name><name>Phone</name><operator>.</operator><name>LABEL</name></name></expr>, <expr><name><name>Phone</name><operator>.</operator><name>PHOTO_URI</name></name></expr>, <expr><name><name>Phone</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>Phone</name><operator>.</operator><name>LOOKUP_KEY</name></name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSystemContact</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type>      <name>uri</name>        <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>PhoneLookup</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>PhoneLookup</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>, <expr><name><name>PhoneLookup</name><operator>.</operator><name>LOOKUP_KEY</name></name></expr>,
                                       <expr><name><name>PhoneLookup</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>PhoneLookup</name><operator>.</operator><name>NUMBER</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>   <name>cursor</name>     <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ContactData</name></argument>&gt;</argument_list></name></type> <name>getContactsWithPush</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>ContentResolver</name></type> <name>resolver</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>inProjection</name>    <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>PhoneLookup</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>PhoneLookup</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type>           <name>registeredAddresses</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getRecipientDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRegistered</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Collection</name><argument_list type="generic">&lt;<argument><name>ContactData</name></argument>&gt;</argument_list></name></type> <name>lookupData</name>          <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>registeredAddresses</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Address</name></type> <name>registeredAddress</name> <range>: <expr><name>registeredAddresses</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>Uri</name></type>    <name>uri</name>          <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>PhoneLookup</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>registeredAddress</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Cursor</name></type> <name>lookupCursor</name> <init>= <expr><call><name><name>resolver</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>inProjection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{
        <if>if <condition>(<expr><name>lookupCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>lookupCursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><specifier>final</specifier> <name>ContactData</name></type> <name>contactData</name> <init>= <expr><operator>new</operator> <call><name>ContactData</name><argument_list>(<argument><expr><call><name><name>lookupCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>lookupCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>contactData</name><operator>.</operator><name>numbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NumberData</name><argument_list>(<argument><expr><literal type="string">"TextSecure"</literal></expr></argument>, <argument><expr><call><name><name>registeredAddress</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>lookupData</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>contactData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block> <finally>finally <block>{
        <if>if <condition>(<expr><name>lookupCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><call><name><name>lookupCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></finally></try>
    }</block></for>

    <return>return <expr><name>lookupData</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>getNameFromContact</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>}</block></expr></argument>,
                                                  <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>ContactData</name></type> <name>getContactData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getContactData</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>getNameFromContact</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getLastPathSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>ContactData</name></type> <name>getContactData</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ContactData</name></type> <name>contactData</name> <init>= <expr><operator>new</operator> <call><name>ContactData</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>numberCursor</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>numberCursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                                                        <argument><expr><name><name>Phone</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                                                        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>contactData</name><operator>.</operator><name>id</name></name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>numberCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>numberCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>type</name>         <init>= <expr><call><name><name>numberCursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>numberCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>label</name>     <init>= <expr><call><name><name>numberCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>numberCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>LABEL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>number</name>    <init>= <expr><call><name><name>numberCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>numberCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>typeLabel</name> <init>= <expr><call><name><name>Phone</name><operator>.</operator><name>getTypeLabel</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>contactData</name><operator>.</operator><name>numbers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>NumberData</name><argument_list>(<argument><expr><name>typeLabel</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>numberCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>numberCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><name>contactData</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getNumbersForThreadSearchFilter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>constraint</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>numberList</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name>                 <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>,
                                                                       <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                  <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>numberList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <decl_stmt><decl><type><name><name>GroupDatabase</name><operator>.</operator><name>Reader</name></name></type> <name>reader</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GroupRecord</name></type> <name>record</name></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>reader</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGroupsFilteredByTitle</name><argument_list>(<argument><expr><name>constraint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><operator>(</operator><name>record</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>numberList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getEncodedId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>reader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_to_self</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>constraint</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name><name>numberList</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>numberList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>numberList</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>CharSequence</name></type> <name>phoneTypeToString</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>mContext</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>label</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Phone</name><operator>.</operator><name>getTypeLabel</name></name><argument_list>(<argument><expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>NumberData</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>NumberData</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>NumberData</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>NumberData</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>NumberData</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>NumberData</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <name><name>NumberData</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>NumberData</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>NumberData</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>number</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>type</name>   <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ContactData</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>ContactData</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>ContactData</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>ContactData</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>ContactData</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>ContactData</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <name><name>ContactData</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NumberData</name></argument>&gt;</argument_list></name></type> <name>numbers</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ContactData</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>      <operator>=</operator> <name>id</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>    <operator>=</operator> <name>name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>numbers</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>NumberData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>ContactData</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>id</name>      <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>name</name>    <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>numbers</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>NumberData</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>readTypedList</name></name><argument_list>(<argument><expr><name>numbers</name></expr></argument>, <argument><expr><name><name>NumberData</name><operator>.</operator><name>CREATOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeTypedList</name></name><argument_list>(<argument><expr><name>numbers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <comment type="block" format="javadoc">/***
   * If the code below looks shitty to you, that's because it was taken
   * directly from the Android source, where shitty code is all you get.
   */</comment>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>getCursorForRecipientFilter</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>constraint</name></decl></parameter>,
      <parameter><decl><type><name>ContentResolver</name></type> <name>mContentResolver</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>SORT_ORDER</name> <init>= <expr><name><name>Contacts</name><operator>.</operator><name>TIMES_CONTACTED</name></name> <operator>+</operator> <literal type="string">" DESC,"</literal> <operator>+</operator>
                              <name><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
                              <name><name>Contacts</name><operator>.</operator><name>Data</name><operator>.</operator><name>IS_SUPER_PRIMARY</name></name> <operator>+</operator> <literal type="string">" DESC,"</literal> <operator>+</operator>
                              <name><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>PROJECTION_PHONE</name> <init>= <expr><block>{
        <expr><name><name>Phone</name><operator>.</operator><name>_ID</name></name></expr>,                  <comment type="line">// 0</comment>
        <expr><name><name>Phone</name><operator>.</operator><name>CONTACT_ID</name></name></expr>,           <comment type="line">// 1</comment>
        <expr><name><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr>,                 <comment type="line">// 2</comment>
        <expr><name><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr>,               <comment type="line">// 3</comment>
        <expr><name><name>Phone</name><operator>.</operator><name>LABEL</name></name></expr>,                <comment type="line">// 4</comment>
        <expr><name><name>Phone</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>,         <comment type="line">// 5</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>phone</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>cons</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>constraint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cons</name> <operator>=</operator> <call><name><name>constraint</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>RecipientsAdapter</name><operator>.</operator><name>usefulAsDigits</name></name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>phone</name> <operator>=</operator> <call><name><name>PhoneNumberUtils</name><operator>.</operator><name>convertKeypadLettersToDigits</name></name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>phone</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>PhoneNumberUtils</name><operator>.</operator><name>isWellFormedSmsAddress</name></name><argument_list>(<argument><expr><name>phone</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>phone</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>phone</name> <operator>=</operator> <call><name><name>phone</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>
    }</block></then></if>
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>selection</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%s=%s OR %s=%s OR %s=%s"</literal></expr></argument>,
                                     <argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></argument>,
                                     <argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr></argument>,
                                     <argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></argument>,
                                     <argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE_WORK_MOBILE</name></name></expr></argument>,
                                     <argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></argument>,
                                     <argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE_MMS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>phoneCursor</name> <init>= <expr><call><name><name>mContentResolver</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>,
                                                <argument><expr><name>PROJECTION_PHONE</name></expr></argument>,
                                                <argument><expr><literal type="null">null</literal></expr></argument>,
                                                <argument><expr><literal type="null">null</literal></expr></argument>,
                                                <argument><expr><name>SORT_ORDER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>phone</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>ArrayList</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>ArrayList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                    <comment type="line">// ID</comment>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Long</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>                       <comment type="line">// CONTACT_ID</comment>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>Phone</name><operator>.</operator><name>TYPE_CUSTOM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>     <comment type="line">// TYPE</comment>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>phone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                  <comment type="line">// NUMBER</comment>

    <comment type="block">/*
    * The "\u00A0" keeps Phone.getDisplayLabel() from deciding
    * to display the default label ("Home") next to the transformation
    * of the letters into numbers.
    */</comment>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="string">"\u00A0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>                               <comment type="line">// LABEL</comment>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                                   <comment type="line">// NAME</comment>

      <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ArrayList</name></argument>&gt;</argument_list></name></type> <name>wrap</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ArrayList</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>wrap</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>ArrayListCursor</name></type> <name>translated</name> <init>= <expr><operator>new</operator> <call><name>ArrayListCursor</name><argument_list>(<argument><expr><name>PROJECTION_PHONE</name></expr></argument>, <argument><expr><name>wrap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>MergeCursor</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Cursor</name><index>[]</index></name> <block>{ <expr><name>translated</name></expr>, <expr><name>phoneCursor</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><name>phoneCursor</name></expr>;</return>
    }</block></else></if>
  }</block></function>

}</block></class>
</unit>
