<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\contacts\ContactsDatabase.java"><comment type="block">/*
 * Copyright (C) 2013 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>accounts</name><operator>.</operator><name>Account</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentProviderOperation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>OperationApplicationException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>CursorWrapper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>MatrixCursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>MergeCursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>RemoteException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>BaseColumns</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name><operator>.</operator><name>RawContacts</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Database to supply all types of contacts that TextSecure needs to know about
 *
 * @author Jake McGinty
 */</comment>
<class><specifier>public</specifier> class <name>ContactsDatabase</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>              <init>= <expr><call><name><name>ContactsDatabase</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONTACT_MIMETYPE</name> <init>= <expr><literal type="string">"vnd.android.cursor.item/vnd.org.thoughtcrime.securesms.contact"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CALL_MIMETYPE</name>    <init>= <expr><literal type="string">"vnd.android.cursor.item/vnd.org.thoughtcrime.securesms.call"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SYNC</name>             <init>= <expr><literal type="string">"__TS"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NAME_COLUMN</name>         <init>= <expr><literal type="string">"name"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NUMBER_COLUMN</name>       <init>= <expr><literal type="string">"number"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NUMBER_TYPE_COLUMN</name>  <init>= <expr><literal type="string">"number_type"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LABEL_COLUMN</name>        <init>= <expr><literal type="string">"label"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONTACT_TYPE_COLUMN</name> <init>= <expr><literal type="string">"contact_type"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NORMAL_TYPE</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PUSH_TYPE</name>    <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NEW_TYPE</name>     <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RECENT_TYPE</name>  <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DIVIDER_TYPE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ContactsDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>  <operator>=</operator> <name>context</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>synchronized</specifier>  <type><name>void</name></type> <name>removeDeletedRawContacts</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Account</name></type> <name>account</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>currentContactsUri</name> <init>= <expr><call><name><name>RawContacts</name><operator>.</operator><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call>
                                                    <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_NAME</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                                                    <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_TYPE</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call>
                                                    <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CALLER_IS_SYNCADAPTER</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
                                                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>BaseColumns</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>RawContacts</name><operator>.</operator><name>SYNC1</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>currentContactsUri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name><name>RawContacts</name><operator>.</operator><name>DELETED</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"1"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>rawContactId</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Deleting raw contact: "</literal> <operator>+</operator> <call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>rawContactId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><name>currentContactsUri</name></expr></argument>, <argument><expr><name><name>RawContacts</name><operator>.</operator><name>_ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>rawContactId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>setRegisteredUsers</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Account</name></type> <name>account</name></decl></parameter>,
                                              <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>registeredAddressList</name></decl></parameter>,
                                              <parameter><decl><type><name>boolean</name></type> <name>remove</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>RemoteException</name></expr></argument>, <argument><expr><name>OperationApplicationException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type>                        <name>registeredAddressSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>registeredAddressList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name>           <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>SignalContact</name></argument>&gt;</argument_list></name></type>         <name>currentContacts</name>      <init>= <expr><call><name>getSignalRawContacts</name><argument_list>(<argument><expr><name>account</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>                 <name>registeredChunks</name>     <init>= <expr><call><name><name>Util</name><operator>.</operator><name>chunk</name></name><argument_list>(<argument><expr><name>registeredAddressList</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>registeredChunk</name> <range>: <expr><name>registeredChunks</name></expr></range></decl></init>)</control> <block>{
      <for>for <control>(<init><decl><type><name>Address</name></type> <name>registeredAddress</name> <range>: <expr><name>registeredChunk</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>currentContacts</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>registeredAddress</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>SystemContactInfo</name></argument>&gt;</argument_list></name></type> <name>systemContactInfo</name> <init>= <expr><call><name>getSystemContactInfo</name><argument_list>(<argument><expr><name>registeredAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>systemContactInfo</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Adding number: "</literal> <operator>+</operator> <name>registeredAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>addTextSecureRawContact</name><argument_list>(<argument><expr><name>operations</name></expr></argument>, <argument><expr><name>account</name></expr></argument>, <argument><expr><call><name><name>systemContactInfo</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>number</name></expr></argument>,
                                    <argument><expr><call><name><name>systemContactInfo</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name></expr></argument>, <argument><expr><call><name><name>systemContactInfo</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></for>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>operations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>applyBatch</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AUTHORITY</name></name></expr></argument>, <argument><expr><name>operations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>SignalContact</name></argument>&gt;</argument_list></name></name></type> <name>currentContactEntry</name> <range>: <expr><call><name><name>currentContacts</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>registeredAddressSet</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>remove</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Removing number: "</literal> <operator>+</operator> <call><name><name>currentContactEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>removeTextSecureRawContact</name><argument_list>(<argument><expr><name>operations</name></expr></argument>, <argument><expr><name>account</name></expr></argument>, <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isVoiceSupported</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Adding voice support: "</literal> <operator>+</operator> <call><name><name>currentContactEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addContactVoiceSupport</name><argument_list>(<argument><expr><name>operations</name></expr></argument>, <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isStringEquals</name></name><argument_list>(<argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRawDisplayName</name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAggregateDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Updating display name: "</literal> <operator>+</operator> <call><name><name>currentContactEntry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateDisplayName</name><argument_list>(<argument><expr><name>operations</name></expr></argument>, <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAggregateDisplayName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>currentContactEntry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayNameSource</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></for>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>operations</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>applyOperationsInBatches</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AUTHORITY</name></name></expr></argument>, <argument><expr><name>operations</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"Recycle"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Cursor</name></type> <name>querySystemContacts</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>uri</name> <operator>=</operator> <name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>CONTENT_URI</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name><name>uri</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>REMOVE_DUPLICATE_ENTRIES</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>,
                                       <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr>,
                                       <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr>,
                                       <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>LABEL</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>sort</name> <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>DISPLAY_NAME</name></name> <operator>+</operator> <literal type="string">" COLLATE LOCALIZED ASC"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>projectionMap</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <constructor_decl><name>put</name><parameter_list>(<parameter><decl><type><name>NAME_COLUMN</name></type></decl></parameter>, <parameter><decl><type><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>DISPLAY_NAME</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <constructor_decl><name>put</name><parameter_list>(<parameter><decl><type><name>NUMBER_COLUMN</name></type></decl></parameter>, <parameter><decl><type><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>NUMBER</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <constructor_decl><name>put</name><parameter_list>(<parameter><decl><type><name>NUMBER_TYPE_COLUMN</name></type></decl></parameter>, <parameter><decl><type><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <constructor_decl><name>put</name><parameter_list>(<parameter><decl><type><name>LABEL_COLUMN</name></type></decl></parameter>, <parameter><decl><type><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>LABEL</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>formattedNumber</name> <init>= <expr><literal type="string">"REPLACE(REPLACE(REPLACE(REPLACE(data1,' ',''),'-',''),'(',''),')','')"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>excludeSelection</name> <init>= <expr><literal type="string">"("</literal> <operator>+</operator> <name>formattedNumber</name> <operator>+</operator><literal type="string">" NOT IN "</literal> <operator>+</operator>
            <literal type="string">"(SELECT data1 FROM view_data WHERE "</literal><operator>+</operator><name>formattedNumber</name><operator>+</operator><literal type="string">" = data1) "</literal> <operator>+</operator>
            <literal type="string">"OR "</literal><operator>+</operator><name>formattedNumber</name><operator>+</operator><literal type="string">" = data1)"</literal> <operator>+</operator>
            <literal type="string">"AND "</literal> <operator>+</operator> <name>formattedNumber</name> <operator>+</operator> <literal type="string">"NOT IN (SELECT "</literal><operator>+</operator><name>formattedNumber</name><operator>+</operator><literal type="string">" FROM view_data where mimetype = '"</literal><operator>+</operator><name>CONTACT_MIMETYPE</name><operator>+</operator><literal type="string">"')"</literal></expr></init></decl> ;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>fallbackSelection</name> <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>SYNC2</name></name> <operator>+</operator> <literal type="string">" IS NULL OR "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>SYNC2</name></name> <operator>+</operator> <literal type="string">" != '"</literal> <operator>+</operator> <name>SYNC</name> <operator>+</operator> <literal type="string">"'"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>excludeSelection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>fallbackSelection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <return>return <expr><operator>new</operator> <call><name>ProjectionMappingCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>projectionMap</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>CONTACT_TYPE_COLUMN</name></expr></argument>, <argument><expr><name>NORMAL_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"Recycle"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Cursor</name></type> <name>queryTextSecureContacts</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>filter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>,
                                        <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA1</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type>  <name>sort</name> <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name> <operator>+</operator> <literal type="string">" COLLATE LOCALIZED ASC"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>projectionMap</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list><block>{<block>{
      <constructor_decl><name>put</name><parameter_list>(<parameter><decl><type><name>NAME_COLUMN</name></type></decl></parameter>, <parameter><decl><type><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
      <constructor_decl><name>put</name><parameter_list>(<parameter><decl><type><name>NUMBER_COLUMN</name></type></decl></parameter>, <parameter><decl><type><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA1</name></name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                  <argument><expr><name>projection</name></expr></argument>,
                                                  <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                                                  <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>CONTACT_MIMETYPE</name></expr>}</block></expr></argument>,
                                                  <argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                  <argument><expr><name>projection</name></expr></argument>,
                                                  <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ? AND ("</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name> <operator>+</operator> <literal type="string">" LIKE ? OR "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA1</name></name> <operator>+</operator> <literal type="string">" LIKE ?)"</literal></expr></argument>,
                                                  <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>CONTACT_MIMETYPE</name></expr>,
                                                                <expr><literal type="string">"%"</literal> <operator>+</operator> <name>filter</name> <operator>+</operator> <literal type="string">"%"</literal></expr>, <expr><literal type="string">"%"</literal> <operator>+</operator> <name>filter</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>,
                                                  <argument><expr><name>sort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_to_self</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>SystemContactInfo</name></argument>&gt;</argument_list></name></type> <name>self</name>      <init>= <expr><call><name>getSystemContactInfo</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type>                     <name>shouldAdd</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>self</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>boolean</name></type> <name>nameMatch</name>   <init>= <expr><call><name><name>self</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>self</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>name</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>filter</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>boolean</name></type> <name>numberMatch</name> <init>= <expr><call><name><name>self</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><name>number</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>self</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name><name>number</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>shouldAdd</name> <operator>=</operator> <operator>!</operator><name>nameMatch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>numberMatch</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>shouldAdd</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>MatrixCursor</name></type> <name>selfCursor</name> <init>= <expr><operator>new</operator> <call><name>MatrixCursor</name><argument_list>(<argument><expr><name>projection</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>selfCursor</name><operator>.</operator><name>addRow</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>Object</name><index>[]</index></name><block>{ <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>note_to_self</name></name></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name>cursor</name> <operator>=</operator> <ternary><condition><expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>selfCursor</name></expr> </then><else>: <expr><operator>new</operator> <call><name>MergeCursor</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Cursor</name><index>[]</index></name><block>{ <expr><name>cursor</name></expr>, <expr><name>selfCursor</name></expr> }</block></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></else></if>

    <return>return <expr><operator>new</operator> <call><name>ProjectionMappingCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>projectionMap</name></expr></argument>,
                                       <argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>LABEL_COLUMN</name></expr></argument>, <argument><expr><literal type="string">"TextSecure"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>NUMBER_TYPE_COLUMN</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>CONTACT_TYPE_COLUMN</name></expr></argument>, <argument><expr><name>PUSH_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Cursor</name></type> <name>getNameDetails</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>GIVEN_NAME</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>FAMILY_NAME</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>PREFIX</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>SUFFIX</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>MIDDLE_NAME</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                              <argument><expr><name>projection</name></expr></argument>,
                                              <argument><expr><name>selection</name></expr></argument>,
                                              <argument><expr><name>args</name></expr></argument>,
                                              <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getOrganizationName</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Organization</name><operator>.</operator><name>COMPANY</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Organization</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                            <argument><expr><name>projection</name></expr></argument>,
                                                            <argument><expr><name>selection</name></expr></argument>,
                                                            <argument><expr><name>args</name></expr></argument>,
                                                            <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
    <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></try>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Cursor</name></type> <name>getPhoneDetails</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>LABEL</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
        <argument><expr><name>projection</name></expr></argument>,
        <argument><expr><name>selection</name></expr></argument>,
        <argument><expr><name>args</name></expr></argument>,
        <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Cursor</name></type> <name>getEmailDetails</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>ADDRESS</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>TYPE</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>LABEL</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Email</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                              <argument><expr><name>projection</name></expr></argument>,
                                              <argument><expr><name>selection</name></expr></argument>,
                                              <argument><expr><name>args</name></expr></argument>,
                                              <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Cursor</name></type> <name>getPostalAddressDetails</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>TYPE</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>LABEL</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>STREET</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>POBOX</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>NEIGHBORHOOD</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>CITY</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>REGION</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>POSTCODE</name></name></expr>,
                                         <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>COUNTRY</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredPostal</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                              <argument><expr><name>projection</name></expr></argument>,
                                              <argument><expr><name>selection</name></expr></argument>,
                                              <argument><expr><name>args</name></expr></argument>,
                                              <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getAvatarUri</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Photo</name><operator>.</operator><name>PHOTO_URI</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Photo</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                            <argument><expr><name>projection</name></expr></argument>,
                                                            <argument><expr><name>selection</name></expr></argument>,
                                                            <argument><expr><name>args</name></expr></argument>,
                                                            <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
    <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>uri</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      }</block></then></if>
    }</block></try>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>



  <function><specifier>private</specifier> <type><name>void</name></type> <name>addContactVoiceSupport</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name></decl></parameter>,
                                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rawContactId</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newUpdate</name></name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withSelection</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>_ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>rawContactId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>SYNC4</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><call><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CALLER_IS_SYNCADAPTER</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>RAW_CONTACT_ID</name></name></expr></argument>, <argument><expr><name>rawContactId</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name>CALL_MIMETYPE</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA1</name></name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA2</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA3</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ContactsDatabase_signal_call_s</name></name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withYieldAllowed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateDisplayName</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name></decl></parameter>,
                                 <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>displayName</name></decl></parameter>,
                                 <parameter><decl><type><name>long</name></type> <name>rawContactId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>displayNameSource</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>dataUri</name> <init>= <expr><call><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call>
                                                   <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CALLER_IS_SYNCADAPTER</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>displayNameSource</name> <operator>!=</operator> <name><name>ContactsContract</name><operator>.</operator><name>DisplayNameSources</name><operator>.</operator><name>STRUCTURED_NAME</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><name>dataUri</name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>RAW_CONTACT_ID</name></name></expr></argument>, <argument><expr><name>rawContactId</name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newUpdate</name></name><argument_list>(<argument><expr><name>dataUri</name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>withSelection</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>RAW_CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                                                            <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>rawContactId</name></expr></argument>)</argument_list></call></expr>, <expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr>}</block></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call>
                                             <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>addTextSecureRawContact</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name></decl></parameter>,
                                       <parameter><decl><type><name>Account</name></type> <name>account</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>e164number</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>displayName</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>aggregateId</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>index</name>   <init>= <expr><call><name><name>operations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Uri</name></type> <name>dataUri</name> <init>= <expr><call><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call>
                                                   <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CALLER_IS_SYNCADAPTER</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_NAME</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_TYPE</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>SYNC1</name></name></expr></argument>, <argument><expr><name>e164number</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>SYNC4</name></name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><name>dataUri</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValueBackReference</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>RAW_CONTACT_ID</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr></argument>, <argument><expr><name>displayName</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>StructuredName</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><name>dataUri</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValueBackReference</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>RAW_CONTACT_ID</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>NUMBER</name></name></expr></argument>, <argument><expr><name>e164number</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CommonDataKinds</name><operator>.</operator><name>Phone</name><operator>.</operator><name>TYPE_OTHER</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>SYNC2</name></name></expr></argument>, <argument><expr><name>SYNC</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><name>dataUri</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValueBackReference</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>RAW_CONTACT_ID</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name>CONTACT_MIMETYPE</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA1</name></name></expr></argument>, <argument><expr><name>e164number</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA2</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA3</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ContactsDatabase_message_s</name></name></expr></argument>, <argument><expr><name>e164number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withYieldAllowed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newInsert</name></name><argument_list>(<argument><expr><name>dataUri</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValueBackReference</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>RAW_CONTACT_ID</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>MIMETYPE</name></name></expr></argument>, <argument><expr><name>CALL_MIMETYPE</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA1</name></name></expr></argument>, <argument><expr><name>e164number</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA2</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>app_name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Data</name><operator>.</operator><name>DATA3</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ContactsDatabase_signal_call_s</name></name></expr></argument>, <argument><expr><name>e164number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withYieldAllowed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newUpdate</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AggregationExceptions</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AggregationExceptions</name><operator>.</operator><name>RAW_CONTACT_ID1</name></name></expr></argument>, <argument><expr><name>aggregateId</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValueBackReference</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AggregationExceptions</name><operator>.</operator><name>RAW_CONTACT_ID2</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withValue</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AggregationExceptions</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>AggregationExceptions</name><operator>.</operator><name>TYPE_KEEP_TOGETHER</name></name></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>removeTextSecureRawContact</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name></decl></parameter>,
                                          <parameter><decl><type><name>Account</name></type> <name>account</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>rowId</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>operations</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>ContentProviderOperation</name><operator>.</operator><name>newDelete</name></name><argument_list>(<argument><expr><call><name><name>RawContacts</name><operator>.</operator><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call>
                                                                             <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_NAME</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                                                                             <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_TYPE</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call>
                                                                             <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>CALLER_IS_SYNCADAPTER</name></name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withYieldAllowed</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>withSelection</name><argument_list>(<argument><expr><name><name>BaseColumns</name><operator>.</operator><name>_ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>rowId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call>
                                           <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>SignalContact</name></argument>&gt;</argument_list></name></type> <name>getSignalRawContacts</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Account</name></type> <name>account</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>currentContactsUri</name> <init>= <expr><call><name><name>RawContacts</name><operator>.</operator><name>CONTENT_URI</name><operator>.</operator><name>buildUpon</name></name><argument_list>()</argument_list></call>
                                                    <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_NAME</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call>
                                                    <operator>.</operator><call><name>appendQueryParameter</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>ACCOUNT_TYPE</name></name></expr></argument>, <argument><expr><name><name>account</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>SignalContact</name></argument>&gt;</argument_list></name></type> <name>signalContacts</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>                      <name>cursor</name>         <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>BaseColumns</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>RawContacts</name><operator>.</operator><name>SYNC1</name></name></expr>, <expr><name><name>RawContacts</name><operator>.</operator><name>SYNC4</name></name></expr>, <expr><name><name>RawContacts</name><operator>.</operator><name>CONTACT_ID</name></name></expr>, <expr><name><name>RawContacts</name><operator>.</operator><name>DISPLAY_NAME_PRIMARY</name></name></expr>, <expr><name><name>RawContacts</name><operator>.</operator><name>DISPLAY_NAME_SOURCE</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>currentContactsUri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>Address</name></type> <name>currentAddress</name>              <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>    <name>rawContactId</name>                <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>    <name>contactId</name>                   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>  <name>supportsVoice</name>               <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>  <name>rawContactDisplayName</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>  <name>aggregateDisplayName</name>        <init>= <expr><call><name>getDisplayName</name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>     <name>rawContactDisplayNameSource</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>signalContacts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>currentAddress</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SignalContact</name><argument_list>(<argument><expr><name>rawContactId</name></expr></argument>, <argument><expr><name>supportsVoice</name></expr></argument>, <argument><expr><name>rawContactDisplayName</name></expr></argument>, <argument><expr><name>aggregateDisplayName</name></expr></argument>, <argument><expr><name>rawContactDisplayNameSource</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><name>signalContacts</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>SystemContactInfo</name></argument>&gt;</argument_list></name></type> <name>getSystemContactInfo</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>address</name><operator>.</operator><name>isPhone</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>Uri</name></type>      <name>uri</name>          <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name>   <init>= <expr><block>{<expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>NUMBER</name></name></expr>,
                             <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>_ID</name></name></expr>,
                             <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>   <name>numberCursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>   <name>idCursor</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>numberCursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>numberCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>numberCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type>  <name>systemNumber</name>  <init>= <expr><call><name><name>numberCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Address</name></type> <name>systemAddress</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>systemNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>systemAddress</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>idCursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>RawContacts</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>RawContacts</name><operator>.</operator><name>_ID</name></name></expr>}</block></expr></argument>,
                                                        <argument><expr><name><name>RawContacts</name><operator>.</operator><name>CONTACT_ID</name></name> <operator>+</operator> <literal type="string">" = ? "</literal></expr></argument>,
                                                        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>numberCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                                                        <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>idCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>idCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SystemContactInfo</name><argument_list>(<argument><expr><call><name><name>numberCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>numberCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>idCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>
        }</block></then></if>
      }</block></while>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>numberCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>numberCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>idCursor</name>     <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>idCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getDisplayName</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>contactId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                       <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>}</block></expr></argument>,
                                                       <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>_ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                                                       <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>contactId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                                                       <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></else></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>applyOperationsInBatches</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ContentResolver</name></type> <name>contentResolver</name></decl></parameter>,
                                        <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>authority</name></decl></parameter>,
                                        <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>operations</name></decl></parameter>,
                                        <parameter><decl><type><name>int</name></type> <name>batchSize</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>OperationApplicationException</name></expr></argument>, <argument><expr><name>RemoteException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>batches</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>chunk</name></name><argument_list>(<argument><expr><name>operations</name></expr></argument>, <argument><expr><name>batchSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ContentProviderOperation</name></argument>&gt;</argument_list></name></type> <name>batch</name> <range>: <expr><name>batches</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>contentResolver</name><operator>.</operator><name>applyBatch</name></name><argument_list>(<argument><expr><name>authority</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>batch</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ProjectionMappingCursor</name> <super><extends>extends <name>CursorWrapper</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type>    <name>projectionMap</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><index>[]</index></name></type> <name>extras</name></decl>;</decl_stmt>

    <constructor><annotation>@<name>SafeVarargs</name></annotation>
    <name>ProjectionMappingCursor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>,
                            <parameter><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>projectionMap</name></decl></parameter>,
                            <parameter><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name><modifier>...</modifier></type> <name>extras</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>projectionMap</name></name> <operator>=</operator> <name>projectionMap</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>extras</name></name>        <operator>=</operator> <name>extras</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getColumnCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>extras</name><operator>.</operator><name>length</name></name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getColumnIndex</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>extras</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>extras</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name><name>first</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>i</name></expr>;</return>
        }</block></then></if>
      }</block></for>

      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><call><name><name>projectionMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getColumnIndexOrThrow</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IllegalArgumentException</name></expr></argument></throws> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><call><name>getColumnIndex</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>index</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Bad column name!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then>
      <else>else             <block type="pseudo"><return>return <expr><name>index</name></expr>;</return></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getColumnName</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>baseColumnCount</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>columnIndex</name> <operator>&gt;=</operator> <name>baseColumnCount</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>columnIndex</name> <operator>-</operator> <name>baseColumnCount</name></expr></init></decl>;</decl_stmt>
        <return>return <expr><name><name>extras</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</return>
      }</block></then></if>

      <return>return <expr><call><name>getReverseProjection</name><argument_list>(<argument><expr><call><name><name>super</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>getColumnNames</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>names</name>    <init>= <expr><call><name><name>super</name><operator>.</operator><name>getColumnNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>allNames</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>names</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name><name>extras</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>names</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>allNames</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>getReverseProjection</name><argument_list>(<argument><expr><name><name>names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>extras</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>allNames</name><index>[<expr><name><name>names</name><operator>.</operator><name>length</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>extras</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
      }</block></for>

      <return>return <expr><name>allNames</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>columnIndex</name> <operator>&gt;=</operator> <call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>columnIndex</name> <operator>-</operator> <call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>Integer</name><operator>)</operator><name><name>extras</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return>
      }</block></then></if>

      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>columnIndex</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>columnIndex</name> <operator>&gt;=</operator> <call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name>columnIndex</name> <operator>-</operator> <call><name><name>super</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>String</name><operator>)</operator><name><name>extras</name><index>[<expr><name>offset</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return>
      }</block></then></if>

      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>columnIndex</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getReverseProjection</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>columnName</name></decl></parameter>)</parameter_list> <block>{
      <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>projectionMap</name><operator>.</operator><name>entrySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
      }</block></for>

      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SystemContactInfo</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>id</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SystemContactInfo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name>   <operator>=</operator> <name>name</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>number</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>     <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SignalContact</name> <block>{

              <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>supportsVoice</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>rawDisplayName</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>aggregateDisplayName</name></decl>;</decl_stmt>
              <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>displayNameSource</name></decl>;</decl_stmt>

    <constructor><name>SignalContact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>,
                  <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>supportsVoice</name></decl></parameter>,
                  <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>rawDisplayName</name></decl></parameter>,
                  <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>aggregateDisplayName</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>displayNameSource</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>                   <operator>=</operator> <name>id</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>supportsVoice</name></name>        <operator>=</operator> <name>supportsVoice</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rawDisplayName</name></name>       <operator>=</operator> <name>rawDisplayName</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>aggregateDisplayName</name></name> <operator>=</operator> <name>aggregateDisplayName</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>displayNameSource</name></name>    <operator>=</operator> <name>displayNameSource</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isVoiceSupported</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><literal type="string">"true"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>supportsVoice</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><name>String</name></type> <name>getRawDisplayName</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>rawDisplayName</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation>
    <type><name>String</name></type> <name>getAggregateDisplayName</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>aggregateDisplayName</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getDisplayNameSource</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>displayNameSource</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
