<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mediasend\MediaSendFragment.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>view</name><operator>.</operator><name>ContextThemeWrapper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>TransportOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ComposeText</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ControllableViewPager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>InputAwareLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>SendButton</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiDrawer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiEditText</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiToggle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>SimpleTextWatcher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediapreview</name><operator>.</operator><name>MediaRailAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>ScribbleView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>CharacterCalculator</name><operator>.</operator><name>CharacterState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Stopwatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ThemeUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>views</name><operator>.</operator><name>Stub</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Allows the user to edit and caption a set of media items before choosing to send them.
 */</comment>
<class><specifier>public</specifier> class <name>MediaSendFragment</name> <super><extends>extends <name>Fragment</name></extends> <implements>implements <name><name>ViewTreeObserver</name><operator>.</operator><name>OnGlobalLayoutListener</name></name>,
                                                           <name><name>MediaRailAdapter</name><operator>.</operator><name>RailItemListener</name></name>,
                                                           <name><name>InputAwareLayout</name><operator>.</operator><name>OnKeyboardShownListener</name></name>,
                                                           <name><name>InputAwareLayout</name><operator>.</operator><name>OnKeyboardHiddenListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MediaSendFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_BODY</name>      <init>= <expr><literal type="string">"body"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TRANSPORT</name> <init>= <expr><literal type="string">"transport"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LOCALE</name>    <init>= <expr><literal type="string">"locale"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>InputAwareLayout</name></type>  <name>hud</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SendButton</name></type>        <name>sendButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>              <name>addButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ComposeText</name></type>       <name>composeText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>         <name>composeContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiEditText</name></type>     <name>captionText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiToggle</name></type>       <name>emojiToggle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>EmojiDrawer</name></argument>&gt;</argument_list></name></type> <name>emojiDrawer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>         <name>playbackControlsContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>          <name>charactersLeft</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ControllableViewPager</name></type>         <name>fragmentPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>MediaSendFragmentPagerAdapter</name></type> <name>fragmentPagerAdapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type>                  <name>mediaRail</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>MediaRailAdapter</name></type>              <name>mediaRailAdapter</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                <name>visibleHeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>MediaSendViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Controller</name></type>         <name>controller</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Locale</name></type>             <name>locale</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Rect</name></type> <name>visibleBounds</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MediaSendFragment</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TransportOption</name></type> <name>transport</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_BODY</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_TRANSPORT</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name>KEY_LOCALE</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MediaSendFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>MediaSendFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fragment</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>requireActivity</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Controller</name><operator>)</operator></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Parent activity must implement controller interface."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><name>controller</name> <operator>=</operator> <operator>(</operator><name>Controller</name><operator>)</operator> <call><name>requireActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ThemeUtil</name><operator>.</operator><name>getThemedInflater</name></name><argument_list>(<argument><expr><call><name>requireActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>inflater</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>TextSecure_DarkTheme</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>mediasend_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>locale</name> <operator>=</operator> <operator>(</operator><name>Locale</name><operator>)</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializable</name><argument_list>(<argument><expr><name>KEY_LOCALE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initViewModel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>requireActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addFlags</name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_FULLSCREEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>requireActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clearFlags</name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_FORCE_NOT_FULLSCREEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>hud</name>                       <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_hud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sendButton</name>                <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_send_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>composeText</name>               <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_compose_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>composeContainer</name>          <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_compose_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>captionText</name>               <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>emojiToggle</name>               <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_emoji_toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>emojiDrawer</name>               <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_emoji_drawer_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fragmentPager</name>             <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mediaRail</name>                 <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_media_rail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>addButton</name>                 <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_add_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>playbackControlsContainer</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_playback_controls_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>charactersLeft</name>            <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_characters_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>sendButtonBkg</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>mediasend_send_button_bkg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>hud</name><operator>.</operator><name>isKeyboardOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>hideSoftkey</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>processMedia</name><argument_list>(<argument><expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>getAllMedia</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>getSavedState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>addOnTransportChangedListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>newTransport</name></decl></parameter>, <parameter><decl><name>manuallySelected</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name>presentCharactersRemaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setTransport</name></name><argument_list>(<argument><expr><name>newTransport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sendButtonBkg</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><call><name><name>newTransport</name><operator>.</operator><name>getBackgroundColor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sendButtonBkg</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>invalidateSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ComposeKeyPressedListener</name></type> <name>composeKeyPressedListener</name> <init>= <expr><operator>new</operator> <call><name>ComposeKeyPressedListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setOnKeyListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>captionText</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>fragmentPagerAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>MediaSendFragmentPagerAdapter</name><argument_list>(<argument><expr><call><name>requireActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportFragmentManager</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fragmentPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>fragmentPagerAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>FragmentPageChangeListener</name></type> <name>pageChangeListener</name> <init>= <expr><operator>new</operator> <call><name>FragmentPageChangeListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fragmentPager</name><operator>.</operator><name>addOnPageChangeListener</name></name><argument_list>(<argument><expr><name>pageChangeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fragmentPager</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>pageChangeListener</name><operator>.</operator><name>onPageSelected</name></name><argument_list>(<argument><expr><call><name><name>fragmentPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>mediaRailAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>MediaRailAdapter</name><argument_list>(<argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaRail</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>LinearLayoutManager</name><operator>.</operator><name>HORIZONTAL</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaRail</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>mediaRailAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>getRootView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getViewTreeObserver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addOnGlobalLayoutListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>addOnKeyboardShownListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>addOnKeyboardHiddenListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>captionText</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SimpleTextWatcher</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>onCaptionChanged</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TransportOption</name></type> <name>transportOption</name> <init>= <expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name>KEY_TRANSPORT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>setTransport</name></name><argument_list>(<argument><expr><name>transportOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>disableTransport</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>transportOption</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TransportOption</name><operator>.</operator><name>Type</name><operator>.</operator><name>SMS</name></name></expr> ?</condition><then> <expr><name><name>TransportOption</name><operator>.</operator><name>Type</name><operator>.</operator><name>TEXTSECURE</name></name></expr> </then><else>: <expr><name><name>TransportOption</name><operator>.</operator><name>Type</name><operator>.</operator><name>SMS</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>KEY_BODY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isSystemEmojiPreferred</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>onEmojiToggleClicked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>restoreState</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getDrawState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>saveDrawState</name></name><argument_list>(<argument><expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>getSavedState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onGlobalLayout</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>getRootView</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowVisibleDisplayFrame</name><argument_list>(<argument><expr><name>visibleBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>currentVisibleHeight</name> <init>= <expr><call><name><name>visibleBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>currentVisibleHeight</name> <operator>!=</operator> <name>visibleHeight</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>height</name> <operator>=</operator> <name>currentVisibleHeight</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>layout</name></name><argument_list>(<argument><expr><name><name>visibleBounds</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>visibleBounds</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>visibleBounds</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>visibleBounds</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>visibleHeight</name> <operator>=</operator> <name>currentVisibleHeight</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRailItemClicked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>distanceFromActive</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>onPageChanged</name></name><argument_list>(<argument><expr><call><name><name>fragmentPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>distanceFromActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRailItemDeleteClicked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>distanceFromActive</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>onMediaItemRemoved</name></name><argument_list>(<argument><expr><call><name><name>fragmentPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>distanceFromActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onKeyboardShown</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>composeText</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>composeContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>captionText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>captionText</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mediaRail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>composeContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onKeyboardHidden</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>composeContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>viewModel</name><operator>.</operator><name>getSelectedMedia</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>viewModel</name><operator>.</operator><name>getSelectedMedia</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mediaRail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>captionText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onTouchEventsNeeded</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>needed</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>fragmentPager</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>needed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>handleBackPress</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>hud</name><operator>.</operator><name>isInputOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>hideCurrentInput</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initViewModel</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>requireActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>MediaSendViewModel</name><operator>.</operator><name>Factory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MediaRepository</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>MediaSendViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getSelectedMedia</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>media</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>Util</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onNoMediaAvailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>setMedia</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>mediaRail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>media</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>:  <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>captionText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><call><name><name>media</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name><name>media</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCaption</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaRailAdapter</name><operator>.</operator><name>setMedia</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>position</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>position</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>position</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

      <expr_stmt><expr><call><name><name>fragmentPager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaRailAdapter</name><operator>.</operator><name>setActivePosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaRail</name><operator>.</operator><name>smoothScrollToPosition</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>getAllMedia</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>captionText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>getAllMedia</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCaption</name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name>View</name></type> <name>playbackControls</name> <init>= <expr><call><name><name>fragmentPagerAdapter</name><operator>.</operator><name>getPlaybackControls</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>playbackControls</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>playbackControls</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>playbackControlsContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>playbackControlsContainer</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>playbackControls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>playbackControlsContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>bucketId</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>bucketId</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>bucketId</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>sendButton</name><operator>.</operator><name>getSelectedTransport</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSms</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>addButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>controller</name><operator>.</operator><name>onAddMediaClicked</name></name><argument_list>(<argument><expr><call><name><name>bucketId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getError</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>error</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>error</name> <operator>==</operator> <name><name>MediaSendViewModel</name><operator>.</operator><name>Error</name><operator>.</operator><name>ITEM_TOO_LARGE</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaSendActivity_an_item_was_removed_because_it_exceeded_the_size_limit</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>EmojiEditText</name></type> <name>getActiveInputField</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>captionText</name><operator>.</operator><name>hasFocus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>captionText</name></expr>;</return></block></then>
    <else>else                        <block type="pseudo"><return>return <expr><name>composeText</name></expr>;</return></block></else></if>
  }</block></function>


  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentCharactersRemaining</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>          <name>messageBody</name>     <init>= <expr><call><name><name>composeText</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransportOption</name></type> <name>transportOption</name> <init>= <expr><call><name><name>sendButton</name><operator>.</operator><name>getSelectedTransport</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CharacterState</name></type>  <name>characterState</name>  <init>= <expr><call><name><name>transportOption</name><operator>.</operator><name>calculateCharacters</name></name><argument_list>(<argument><expr><name>messageBody</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>characterState</name><operator>.</operator><name>charactersRemaining</name></name> <operator>&lt;=</operator> <literal type="number">15</literal> <operator>||</operator> <name><name>characterState</name><operator>.</operator><name>messagesSpent</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>charactersLeft</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>,
                                           <argument><expr><literal type="string">"%d/%d (%d)"</literal></expr></argument>,
                                           <argument><expr><name><name>characterState</name><operator>.</operator><name>charactersRemaining</name></name></expr></argument>,
                                           <argument><expr><name><name>characterState</name><operator>.</operator><name>maxTotalMessageSize</name></name></expr></argument>,
                                           <argument><expr><name><name>characterState</name><operator>.</operator><name>messagesSpent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>charactersLeft</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>charactersLeft</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onEmojiToggleClicked</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>emojiDrawer</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>attach</name></name><argument_list>(<argument><expr><call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setEmojiEventListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>EmojiDrawer</name><operator>.</operator><name>EmojiEventListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onKeyEvent</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>keyEvent</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name>getActiveInputField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>dispatchKeyEvent</name><argument_list>(<argument><expr><name>keyEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onEmojiSelected</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>emoji</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name>getActiveInputField</name><argument_list>()</argument_list></call><operator>.</operator><call><name>insertEmoji</name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>hud</name><operator>.</operator><name>getCurrentInput</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>showSoftkey</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>hideSoftkey</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>hud</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>hud</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>processMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>mediaList</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>savedState</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>, <argument><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>futures</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Media</name></type> <name>media</name> <range>: <expr><name>mediaList</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>Object</name></type> <name>state</name> <init>= <expr><call><name><name>savedState</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>state</name> <operator>instanceof</operator> <name><name>ScribbleView</name><operator>.</operator><name>SavedState</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name><name>ScribbleView</name><operator>.</operator><name>SavedState</name></name><operator>)</operator> <name>state</name><operator>)</operator><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>futures</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><call><name><name>ScribbleView</name><operator>.</operator><name>renderImage</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>ScribbleView</name><operator>.</operator><name>SavedState</name></name><operator>)</operator> <name>state</name></expr></argument>, <argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

      <decl_stmt><decl><specifier>private</specifier> <type><name>Stopwatch</name></type>   <name>renderTimer</name></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name>Runnable</name></type>    <name>progressTimer</name></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name>AlertDialog</name></type> <name>dialog</name></decl>;</decl_stmt>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>renderTimer</name>   <operator>=</operator> <operator>new</operator> <call><name>Stopwatch</name><argument_list>(<argument><expr><literal type="string">"ProcessMedia"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>progressTimer</name> <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block>{
          <expr_stmt><expr><name>dialog</name> <operator>=</operator> <operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ContextThemeWrapper</name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>TextSecure_MediaSendProgressDialog</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>setView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>progress_dialog</name></name></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>setCancelable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call>
                                  <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>getWindow</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLayout</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>mediasend_progress_dialog_size</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>mediasend_progress_dialog_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><name>progressTimer</name></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>voids</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Context</name></type>     <name>context</name>      <init>= <expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>updatedMedia</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mediaList</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>Media</name></type> <name>media</name> <range>: <expr><name>mediaList</name></expr></range></decl></init>)</control> <block>{
          <if>if <condition>(<expr><call><name><name>futures</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
              <decl_stmt><decl><type><name>Bitmap</name></type>                 <name>bitmap</name>   <init>= <expr><call><name><name>futures</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type>  <name>baos</name>     <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>JPEG</name></name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <decl_stmt><decl><type><name>Uri</name></type>   <name>uri</name>     <init>= <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_JPEG</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>Media</name></type> <name>updated</name> <init>= <expr><operator>new</operator> <call><name>Media</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_JPEG</name></name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>baos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name><name>updatedMedia</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>renderTimer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"item"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
              <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to render image. Using base image."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>updatedMedia</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>updatedMedia</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></for>
        <return>return <expr><name>updatedMedia</name></expr>;</return>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onSendClicked</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><call><name><name>composeText</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>sendButton</name><operator>.</operator><name>getSelectedTransport</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>cancelRunnableOnMain</name></name><argument_list>(<argument><expr><name>progressTimer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>dialog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>dialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>renderTimer</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>FragmentPageChangeListener</name> <super><extends>extends <name><name>ViewPager</name><operator>.</operator><name>SimpleOnPageChangeListener</name></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>onPageChanged</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>ComposeKeyPressedListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnKeyListener</name></name>, <name><name>View</name><operator>.</operator><name>OnClickListener</name></name>, <name>TextWatcher</name>, <name><name>View</name><operator>.</operator><name>OnFocusChangeListener</name></name></implements></super> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>beforeLength</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onKey</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyCode</name></decl></parameter>, <parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>keyCode</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isEnterSendsEnabled</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>dispatchKeyEvent</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyEvent</name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr></argument>, <argument><expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>dispatchKeyEvent</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyEvent</name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr></argument>, <argument><expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
          }</block></then></if>
        }</block></then></if>
      }</block></then></if>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>hud</name><operator>.</operator><name>showSoftkey</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>beforeLength</name> <operator>=</operator> <call><name><name>composeText</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>presentCharactersRemaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onFocusChange</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{}</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>Controller</name> <block>{
    <function_decl><type><name>void</name></type> <name>onAddMediaClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bucketId</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onSendClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TransportOption</name></type> <name>transport</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onNoMediaAvailable</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
