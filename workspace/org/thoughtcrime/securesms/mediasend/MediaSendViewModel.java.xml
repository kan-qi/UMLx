<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mediasend\MediaSendViewModel.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProvider</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MediaConstraints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SingleLiveEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manages the observable datasets available in {@link MediaSendActivity}.
 */</comment>
<class>class <name>MediaSendViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MediaRepository</name></type>                    <name>repository</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>       <name>selectedMedia</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>       <name>bucketMedia</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type>           <name>position</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>  <name>bucketId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>MediaFolder</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>folders</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>SingleLiveEvent</name><argument_list type="generic">&lt;<argument><name>Error</name></argument>&gt;</argument_list></name></type>             <name>error</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type>                   <name>savedDrawState</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>MediaConstraints</name></type> <name>mediaConstraints</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>MediaSendViewModel</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaRepository</name></type> <name>repository</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name>     <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedMedia</name></name>  <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bucketMedia</name></name>    <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name>       <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bucketId</name></name>       <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>folders</name></name>        <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>error</name></name>          <operator>=</operator> <operator>new</operator> <call><name><name>SingleLiveEvent</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>savedDrawState</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>position</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>setMediaConstraints</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaConstraints</name></type> <name>mediaConstraints</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaConstraints</name></name> <operator>=</operator> <name>mediaConstraints</name></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>setInitialSelectedMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>newMedia</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>repository</name><operator>.</operator><name>getPopulatedMedia</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>newMedia</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>populatedMedia</name></decl></parameter></parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>filteredMedia</name> <init>= <expr><call><name>getFilteredMedia</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>populatedMedia</name></expr></argument>, <argument><expr><name>mediaConstraints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>filteredMedia</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>newMedia</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><name><name>Error</name><operator>.</operator><name>ITEM_TOO_LARGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name>boolean</name></type> <name>allBucketsPopulated</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>filteredMedia</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reduce</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>populated</name></decl></parameter>, <parameter><decl><name>m</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><name>populated</name> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>selectedMedia</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><name>filteredMedia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bucketId</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>allBucketsPopulated</name></expr> ?</condition><then> <expr><call><name>computeBucketId</name><argument_list>(<argument><expr><name>filteredMedia</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>onSelectedMediaChanged</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>newMedia</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>filteredMedia</name> <init>= <expr><call><name>getFilteredMedia</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>newMedia</name></expr></argument>, <argument><expr><name>mediaConstraints</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>filteredMedia</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>newMedia</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>error</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name><name>Error</name><operator>.</operator><name>ITEM_TOO_LARGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>selectedMedia</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>filteredMedia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>position</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>filteredMedia</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>onFolderSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bucketId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>bucketId</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>bucketId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bucketMedia</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>onPageChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>position</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>onMediaItemRemoved</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>selectedMedia</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selectedMedia</name><operator>.</operator><name>setValue</name></name><argument_list>(<argument><expr><call><name><name>selectedMedia</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>onCaptionChanged</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>newCaption</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>position</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>selectedMedia</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>selectedMedia</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><call><name><name>position</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCaption</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>newCaption</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><name>newCaption</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><type><name>void</name></type> <name>saveDrawState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>savedDrawState</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>savedDrawState</name><operator>.</operator><name>putAll</name></name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>, <argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>getDrawState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>savedDrawState</name></expr>;</return>
  }</block></function>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getSelectedMedia</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>selectedMedia</name></expr>;</return>
  }</block></function>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getMediaInBucket</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bucketId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>repository</name><operator>.</operator><name>getMediaInBucket</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bucketId</name></expr></argument>, <argument><expr><name>bucketMedia</name><operator>::</operator><name>postValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bucketMedia</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation> <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>MediaFolder</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getFolders</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>repository</name><operator>.</operator><name>getFolders</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>folders</name><operator>::</operator><name>postValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>folders</name></expr>;</return>
  }</block></function>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getPosition</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>position</name></expr>;</return>
  }</block></function>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getBucketId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>bucketId</name></expr>;</return>
  }</block></function>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>Error</name></argument>&gt;</argument_list></name></type> <name>getError</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>error</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>computeBucketId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>media</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>media</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBucketId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>String</name></type> <name>candidate</name> <init>= <expr><call><name><name>media</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBucketId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>media</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBucketId</name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name><name>Media</name><operator>.</operator><name>ALL_MEDIA_BUCKET_ID</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>getFilteredMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaConstraints</name></type> <name>mediaConstraints</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>MediaUtil</name><operator>.</operator><name>isGif</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>       <operator>||</operator>
                                        <call><name><name>MediaUtil</name><operator>.</operator><name>isImageType</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                                        <call><name><name>MediaUtil</name><operator>.</operator><name>isVideoType</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                           <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt; <block>{</block>
                             return (MediaUtil.isImageType(m.getMimeType(</lambda></expr></argument>)</argument_list></call></expr></return>)</block> &amp;&amp; !MediaUtil.isGif<parameter_list>(<parameter><decl/></parameter></parameter_list>m.getMimeType<parameter_list>()</parameter_list></function>)</block></class>)               <expr_stmt><expr><operator>||</operator>
                                    <operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isGif</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>mediaConstraints</name><operator>.</operator><name>getGifMaxSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
                                    <operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isVideoType</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>mediaConstraints</name><operator>.</operator><name>getVideoMaxSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
                           })<expr_stmt><expr><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  }

  enum <expr_stmt><expr><name>Error</name> <block>{
    <expr><name>ITEM_TOO_LARGE</name></expr>
  }</block>

  <specifier>static</specifier> <name>class</name> <name>Factory</name> extends <name><name>ViewModelProvider</name><operator>.</operator><name>NewInstanceFactory</name></name> <block>{

    <expr><specifier>private</specifier> <name>final</name> <name>MediaRepository</name> <name>repository</name></expr>;

    <expr><call><name>Factory</name><argument_list>(<argument><expr><annotation>@<name>NonNull</name></annotation> <name>MediaRepository</name> <name>repository</name></expr></argument>)</argument_list></call> <block>{
      <expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;
    }</block>

    @<name>Override</name>
    <specifier>public</specifier> @<name><name>NonNull</name> <argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>ViewModel</name></extends></argument>&gt;</argument_list></name> <name>T</name> <call><name>create</name><argument_list>(<argument><expr><annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name> <name>modelClass</name></expr></argument>)</argument_list></call> <block>{
      <return>return <expr><call><name><name>modelClass</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MediaSendViewModel</name><argument_list>(<argument><expr><name>repository</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></expr>
    }</block></expr></expr_stmt>
  }
}
</unit>
