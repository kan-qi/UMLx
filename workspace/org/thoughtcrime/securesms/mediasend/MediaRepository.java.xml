<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mediasend\MediaRepository.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Environment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name><operator>.</operator><name>Images</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name><operator>.</operator><name>Video</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>OpenableColumns</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Handles the retrieval of media present on the user's device.
 */</comment>
<class>class <name>MediaRepository</name> <block>{

  <comment type="block" format="javadoc">/**
   * Retrieves a list of folders that contain media.
   */</comment>
  <function><type><name>void</name></type> <name>getFolders</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>MediaFolder</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name>getFolders</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Retrieves a list of media items (images and videos) that are present int he specified bucket.
   */</comment>
  <function><type><name>void</name></type> <name>getMediaInBucket</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bucketId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name>getMediaInBucket</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bucketId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Given an existing list of {@link Media}, this will ensure that the media is populate with as
   * much data as we have, like width/height.
   */</comment>
  <function><type><name>void</name></type> <name>getPopulatedMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>allMatch</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>isPopulated</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name>getPopulatedMedia</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MediaFolder</name></argument>&gt;</argument_list></name></type> <name>getFolders</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>FolderResult</name></type> <name>imageFolders</name>       <init>= <expr><call><name>getFolders</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FolderResult</name></type> <name>videoFolders</name>       <init>= <expr><call><name>getFolders</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>Video</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FolderData</name></argument>&gt;</argument_list></name></type> <name>folders</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>imageFolders</name><operator>.</operator><name>getFolderData</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>Map</name><operator>.</operator><name><name>Entry</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FolderData</name></argument>&gt;</argument_list></name></name></type> <name>entry</name> <range>: <expr><call><name><name>videoFolders</name><operator>.</operator><name>getFolderData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>entrySet</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>folders</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementCount</name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>entry</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>entry</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></for>

    <decl_stmt><decl><type><name>String</name></type>            <name>cameraBucketId</name> <init>= <expr><ternary><condition><expr><call><name><name>imageFolders</name><operator>.</operator><name>getCameraBucketId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>imageFolders</name><operator>.</operator><name>getCameraBucketId</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>videoFolders</name><operator>.</operator><name>getCameraBucketId</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FolderData</name></type>        <name>cameraFolder</name>   <init>= <expr><ternary><condition><expr><name>cameraBucketId</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>folders</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>cameraBucketId</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MediaFolder</name></argument>&gt;</argument_list></name></type> <name>mediaFolders</name>   <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>folders</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>folder</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>MediaFolder</name><argument_list>(<argument><expr><call><name><name>folder</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                                                 <argument><expr><call><name><name>folder</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                                                 <argument><expr><call><name><name>folder</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                                                 <argument><expr><call><name><name>folder</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                                                 <argument><expr><name><name>MediaFolder</name><operator>.</operator><name>FolderType</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>sorted</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>o1</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call><operator>.</operator><call><name>compareTo</name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toLowerCase</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                                                  <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Uri</name></type> <name>allMediaThumbnail</name> <init>= <expr><ternary><condition><expr><call><name><name>imageFolders</name><operator>.</operator><name>getThumbnailTimestamp</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>videoFolders</name><operator>.</operator><name>getThumbnailTimestamp</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>imageFolders</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>videoFolders</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>allMediaThumbnail</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>allMediaCount</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>mediaFolders</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reduce</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>count</name></decl></parameter>, <parameter><decl><name>folder</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><name>count</name> <operator>+</operator> <call><name><name>folder</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>cameraFolder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>allMediaCount</name> <operator>+=</operator> <call><name><name>cameraFolder</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>mediaFolders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>MediaFolder</name><argument_list>(<argument><expr><name>allMediaThumbnail</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaRepository_all_media</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>allMediaCount</name></expr></argument>, <argument><expr><name><name>Media</name><operator>.</operator><name>ALL_MEDIA_BUCKET_ID</name></name></expr></argument>, <argument><expr><name><name>MediaFolder</name><operator>.</operator><name>FolderType</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>cameraFolder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mediaFolders</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>MediaFolder</name><argument_list>(<argument><expr><call><name><name>cameraFolder</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraFolder</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraFolder</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraFolder</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MediaFolder</name><operator>.</operator><name>FolderType</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>mediaFolders</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>FolderResult</name></type> <name>getFolders</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>contentUri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>                  <name>cameraPath</name>         <init>= <expr><call><name><name>Environment</name><operator>.</operator><name>getExternalStoragePublicDirectory</name></name><argument_list>(<argument><expr><name><name>Environment</name><operator>.</operator><name>DIRECTORY_DCIM</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"Camera"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>                  <name>cameraBucketId</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Uri</name></type>                     <name>globalThumbnail</name>    <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>                    <name>thumbnailTimestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FolderData</name></argument>&gt;</argument_list></name></type> <name>folders</name>            <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATA</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>BUCKET_ID</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>BUCKET_DISPLAY_NAME</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>selection</name>  <init>= <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATA</name></name> <operator>+</operator> <literal type="string">" NOT NULL"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>sortBy</name>     <init>= <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>BUCKET_DISPLAY_NAME</name></name> <operator>+</operator> <literal type="string">" COLLATE NOCASE ASC, "</literal> <operator>+</operator> <name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name> <operator>+</operator> <literal type="string">" DESC"</literal></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>contentUri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>sortBy</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type>     <name>path</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>projection</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Uri</name></type>        <name>thumbnail</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>fromFile</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>     <name>bucketId</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>projection</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>     <name>title</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>projection</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>       <name>timestamp</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>projection</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>FolderData</name></type> <name>folder</name>    <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>folders</name></expr></argument>, <argument><expr><name>bucketId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>FolderData</name><argument_list>(<argument><expr><name>thumbnail</name></expr></argument>, <argument><expr><name>title</name></expr></argument>, <argument><expr><name>bucketId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>folder</name><operator>.</operator><name>incrementCount</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>folders</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>bucketId</name></expr></argument>, <argument><expr><name>folder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>cameraBucketId</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>path</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>cameraPath</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>cameraBucketId</name> <operator>=</operator> <name>bucketId</name></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>timestamp</name> <operator>&gt;</operator> <name>thumbnailTimestamp</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>globalThumbnail</name>    <operator>=</operator> <name>thumbnail</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>thumbnailTimestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block></try>

    <return>return <expr><operator>new</operator> <call><name>FolderResult</name><argument_list>(<argument><expr><name>cameraBucketId</name></expr></argument>, <argument><expr><name>globalThumbnail</name></expr></argument>, <argument><expr><name>thumbnailTimestamp</name></expr></argument>, <argument><expr><name>folders</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>getMediaInBucket</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bucketId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>images</name> <init>= <expr><call><name>getMediaInBucket</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bucketId</name></expr></argument>, <argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>videos</name> <init>= <expr><call><name>getMediaInBucket</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>bucketId</name></expr></argument>, <argument><expr><name><name>Video</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name>  <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>images</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>videos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>media</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>images</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>media</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>videos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Long</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><call><name><name>o2</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>o1</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>media</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>getMediaInBucket</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bucketId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>contentUri</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasOrienation</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name>         <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>      <name>selection</name>     <init>= <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>BUCKET_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATA</name></name> <operator>+</operator> <literal type="string">" NOT NULL"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type>    <name>selectionArgs</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name>bucketId</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>      <name>sortBy</name>        <init>= <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name> <operator>+</operator> <literal type="string">" DESC"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>projection</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>hasOrienation</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>projection</name> <operator>=</operator> <ternary><condition><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>MIME_TYPE</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>ORIENTATION</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>WIDTH</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>HEIGHT</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>SIZE</name></name></expr>}</block></expr>
                                               </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>MIME_TYPE</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>ORIENTATION</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>SIZE</name></name></expr>}</block></expr></else></ternary></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>projection</name> <operator>=</operator> <ternary><condition><expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>MIME_TYPE</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>WIDTH</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>HEIGHT</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>SIZE</name></name></expr>}</block></expr>
                                               </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>_ID</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>MIME_TYPE</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name></expr>, <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>SIZE</name></name></expr>}</block></expr></else></ternary></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>Media</name><operator>.</operator><name>ALL_MEDIA_BUCKET_ID</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>bucketId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>selection</name>     <operator>=</operator> <name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATA</name></name> <operator>+</operator> <literal type="string">" NOT NULL"</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>selectionArgs</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>contentUri</name></expr></argument>, <argument><expr><name>projection</name></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>selectionArgs</name></expr></argument>, <argument><expr><name>sortBy</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>Uri</name></type>    <name>uri</name>         <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>contentUri</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mimetype</name>    <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>MIME_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>   <name>dateTaken</name>   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>DATE_TAKEN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>orientation</name> <init>= <expr><ternary><condition><expr><name>hasOrienation</name></expr> ?</condition><then> <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>ORIENTATION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>width</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>height</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>   <name>size</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>width</name>  <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><call><name>getWidthColumn</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><call><name>getHeightColumn</name><argument_list>(<argument><expr><name>orientation</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>media</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Media</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mimetype</name></expr></argument>, <argument><expr><name>dateTaken</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>bucketId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>

    <return>return <expr><name>media</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>getPopulatedMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>m</name></decl></parameter></parameter_list> -&gt; <block>{
      <try>try <block>{
        <if>if <condition>(<expr><call><name>isPopulated</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><name>m</name></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>PartAuthority</name><operator>.</operator><name>isLocalUri</name></name><argument_list>(<argument><expr><call><name><name>m</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><call><name>getLocallyPopulatedMedia</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
          <return>return <expr><call><name>getContentResolverPopulatedMedia</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>m</name></expr>;</return>
      }</block></catch></try>
    }</block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"SuspiciousNameCombination"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>String</name></type> <name>getWidthColumn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>orientation</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>orientation</name> <operator>==</operator> <literal type="number">180</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>WIDTH</name></name></expr>;</return></block></then>
    <else>else                                        <block type="pseudo"><return>return <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>HEIGHT</name></name></expr>;</return></block></else></if>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"SuspiciousNameCombination"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>String</name></type> <name>getHeightColumn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>orientation</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>orientation</name> <operator>==</operator> <literal type="number">180</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>HEIGHT</name></name></expr>;</return></block></then>
    <else>else                                        <block type="pseudo"><return>return <expr><name><name>Images</name><operator>.</operator><name>Media</name><operator>.</operator><name>WIDTH</name></name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isPopulated</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Media</name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>media</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>media</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>media</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Media</name></type> <name>getLocallyPopulatedMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Media</name></type> <name>media</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>int</name></type>  <name>width</name>  <init>= <expr><call><name><name>media</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>height</name> <init>= <expr><call><name><name>media</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>size</name>   <init>= <expr><call><name><name>media</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>optionalSize</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><call><name><name>optionalSize</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>optionalSize</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>MediaUtil</name><operator>.</operator><name>getMediaSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dimens</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getDimensions</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>width</name>  <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name>Media</name><argument_list>(<argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Media</name></type> <name>getContentResolverPopulatedMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Media</name></type> <name>media</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>int</name></type>  <name>width</name>  <init>= <expr><call><name><name>media</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>height</name> <init>= <expr><call><name><name>media</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>size</name>   <init>= <expr><call><name><name>media</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
        <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name><name>OpenableColumns</name><operator>.</operator><name>SIZE</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>OpenableColumns</name><operator>.</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></try>
    }</block></then></if>

    <if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>MediaUtil</name><operator>.</operator><name>getMediaSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dimens</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getDimensions</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>width</name>  <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name>Media</name><argument_list>(<argument><expr><call><name><name>media</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getMimeType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getBucketId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>media</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FolderResult</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>                  <name>cameraBucketId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Uri</name></type>                     <name>thumbnail</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                    <name>thumbnailTimestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FolderData</name></argument>&gt;</argument_list></name></type> <name>folderData</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>FolderResult</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>cameraBucketId</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>thumbnail</name></decl></parameter>,
                         <parameter><decl><type><name>long</name></type> <name>thumbnailTimestamp</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FolderData</name></argument>&gt;</argument_list></name></type> <name>folderData</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cameraBucketId</name></name>     <operator>=</operator> <name>cameraBucketId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>thumbnail</name></name>          <operator>=</operator> <name>thumbnail</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>thumbnailTimestamp</name></name> <operator>=</operator> <name>thumbnailTimestamp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>folderData</name></name>         <operator>=</operator> <name>folderData</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getCameraBucketId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>cameraBucketId</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getThumbnail</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>thumbnail</name></expr>;</return>
    }</block></function>

    <function><type><name>long</name></type> <name>getThumbnailTimestamp</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>thumbnailTimestamp</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>FolderData</name></argument>&gt;</argument_list></name></type> <name>getFolderData</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>folderData</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FolderData</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Uri</name></type>    <name>thumbnail</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>bucketId</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>FolderData</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>thumbnail</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>title</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>bucketId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>thumbnail</name></name> <operator>=</operator> <name>thumbnail</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>title</name></name>     <operator>=</operator> <name>title</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bucketId</name></name>  <operator>=</operator> <name>bucketId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>Uri</name></type> <name>getThumbnail</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>thumbnail</name></expr>;</return>
    }</block></function>

    <function><type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>title</name></expr>;</return>
    }</block></function>

    <function><type><name>String</name></type> <name>getBucketId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>bucketId</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>incrementCount</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name>incrementCount</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>incrementCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>amount</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>amount</name></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <interface>interface <name><name>Callback</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>void</name></type> <name>onComplete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
