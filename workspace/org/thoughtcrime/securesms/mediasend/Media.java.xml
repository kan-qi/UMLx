<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mediasend\Media.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Represents a piece of media that the user has on their device.
 */</comment>
<class><specifier>public</specifier> class <name>Media</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ALL_MEDIA_BUCKET_ID</name> <init>= <expr><literal type="string">"org.thoughtcrime.securesms.ALL_MEDIA"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Uri</name></type>    <name>uri</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>mimeType</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>date</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>width</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>height</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>size</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>bucketId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>caption</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Media</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>mimeType</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>bucketId</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>caption</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name>      <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mimeType</name></name> <operator>=</operator> <name>mimeType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>date</name></name>     <operator>=</operator> <name>date</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name>    <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name>   <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name>     <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bucketId</name></name> <operator>=</operator> <name>bucketId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>caption</name></name>  <operator>=</operator> <name>caption</name></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>protected</specifier> <name>Media</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>uri</name>      <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readParcelable</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getClassLoader</name></name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>date</name>     <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>width</name>    <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>height</name>   <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name>     <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>readLong</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bucketId</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>caption</name>  <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>Uri</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>uri</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>getMimeType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>mimeType</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getDate</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>date</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>width</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>height</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>size</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBucketId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>bucketId</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCaption</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>caption</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setCaption</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>caption</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>caption</name></name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>caption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeLong</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>bucketId</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>caption</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Media</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>Media</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Media</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <name><name>Media</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>Media</name></type> <name>media</name> <init>= <expr><operator>(</operator><name>Media</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>uri</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>media</name><operator>.</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>uri</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
