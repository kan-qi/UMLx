<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobmanager\util\Base64.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block">/*
 * Copyright (C) 2010 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Utilities for encoding and decoding the Base64 representation of
 * binary data.  See RFCs &lt;a
 * href="http://www.ietf.org/rfc/rfc2045.txt"&gt;2045&lt;/a&gt; and &lt;a
 * href="http://www.ietf.org/rfc/rfc3548.txt"&gt;3548&lt;/a&gt;.
 */</comment>
<class><specifier>public</specifier> class <name>Base64</name> <block>{
  <comment type="block" format="javadoc">/**
   * Default values for encoder/decoder flags.
   */</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Encoder flag bit to omit the padding '=' characters at the end
   * of the output (if any).
   */</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO_PADDING</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Encoder flag bit to omit all line terminators (i.e., the output
   * will be on one long line).
   */</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO_WRAP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Encoder flag bit to indicate lines should be terminated with a
   * CRLF pair instead of just an LF.  Has no effect if {@code
   * NO_WRAP} is specified as well.
   */</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CRLF</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Encoder/decoder flag bit to indicate using the "URL and
   * filename safe" variant of Base64 (see RFC 3548 section 4) where
   * {@code -} and {@code _} are used in place of {@code +} and
   * {@code /}.
   */</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>URL_SAFE</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Flag to pass to {@link android.util.Base64OutputStream} to indicate that it
   * should not close the output stream it is wrapping when it
   * itself is closed.
   */</comment>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO_CLOSE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">//  --------------------------------------------------------</comment>
  <comment type="line">//  shared code</comment>
  <comment type="line">//  --------------------------------------------------------</comment>

  <comment type="block">/* package */</comment> <class><specifier>static</specifier> <specifier>abstract</specifier> class <name>Coder</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Encode/decode another block of input data.  this.output is
     * provided by the caller, and must be big enough to hold all
     * the coded data.  On exit, this.opwill be set to the length
     * of the coded data.
     *
     * @param finish true if this is the final call to process for
     *        this object.  Will finalize the coder state and
     *        include any final bytes in the output.
     *
     * @return true if the input so far is good; false if some
     *         error has been detected in the input stream..
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>finish</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * @return the maximum number of bytes a call to process()
     * could produce for the given number of input bytes.  This may
     * be an overestimate.
     */</comment>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>maxOutputSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></class>

  <comment type="line">//  --------------------------------------------------------</comment>
  <comment type="line">//  decoding</comment>
  <comment type="line">//  --------------------------------------------------------</comment>

  <comment type="block" format="javadoc">/**
   * Decode the Base64-encoded data in input and return the data in
   * a new byte array.
   *
   * &lt;p&gt;The padding '=' characters at the end are considered optional, but
   * if any are present, there must be the correct number of them.
   *
   * @param str    the input String to decode, which is converted to
   *               bytes using the default charset
   * @param flags  controls certain features of the decoded output.
   *               Pass {@code DEFAULT} to decode standard Base64.
   *
   * @throws IllegalArgumentException if the input contains
   * incorrect padding
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>decode</name><argument_list>(<argument><expr><call><name><name>str</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Decode the Base64-encoded data in input and return the data in
   * a new byte array.
   *
   * &lt;p&gt;The padding '=' characters at the end are considered optional, but
   * if any are present, there must be the correct number of them.
   *
   * @param input the input array to decode
   * @param flags  controls certain features of the decoded output.
   *               Pass {@code DEFAULT} to decode standard Base64.
   *
   * @throws IllegalArgumentException if the input contains
   * incorrect padding
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>decode</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Decode the Base64-encoded data in input and return the data in
   * a new byte array.
   *
   * &lt;p&gt;The padding '=' characters at the end are considered optional, but
   * if any are present, there must be the correct number of them.
   *
   * @param input  the data to decode
   * @param offset the position within the input array at which to start
   * @param len    the number of bytes of input to decode
   * @param flags  controls certain features of the decoded output.
   *               Pass {@code DEFAULT} to decode standard Base64.
   *
   * @throws IllegalArgumentException if the input contains
   * incorrect padding
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// Allocate space for the most data the input could represent.</comment>
    <comment type="line">// (It could contain less if it contains whitespace, etc.)</comment>
    <decl_stmt><decl><type><name>Decoder</name></type> <name>decoder</name> <init>= <expr><operator>new</operator> <call><name>Decoder</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>len</name><operator>*</operator><literal type="number">3</literal><operator>/</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>decoder</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"bad base-64"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <comment type="line">// Maybe we got lucky and allocated exactly enough output space.</comment>
    <if>if <condition>(<expr><name><name>decoder</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name><name>decoder</name><operator>.</operator><name>output</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
      <return>return <expr><name><name>decoder</name><operator>.</operator><name>output</name></name></expr>;</return>
    }</block></then></if>

    <comment type="line">// Need to shorten the array, so allocate a new one of the</comment>
    <comment type="line">// right size and copy.</comment>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>temp</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>decoder</name><operator>.</operator><name>op</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>.</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>decoder</name><operator>.</operator><name>op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>temp</name></expr>;</return>
  }</block></function>

  <comment type="block">/* package */</comment> <class><specifier>static</specifier> class <name>Decoder</name> <super><extends>extends <name>Coder</name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * Lookup table for turning bytes into their position in the
     * Base64 alphabet.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>DECODE</name><index>[]</index></name> <init>= <expr><block>{
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>,
        <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,
        <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,
        <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Decode lookup table for the "web safe" variant (RFC 3548
     * sec. 4) where - and _ replace + and /.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name><name>DECODE_WEBSAFE</name><index>[]</index></name> <init>= <expr><block>{
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>,  <expr><literal type="number">0</literal></expr>,  <expr><literal type="number">1</literal></expr>,  <expr><literal type="number">2</literal></expr>,  <expr><literal type="number">3</literal></expr>,  <expr><literal type="number">4</literal></expr>,  <expr><literal type="number">5</literal></expr>,  <expr><literal type="number">6</literal></expr>,  <expr><literal type="number">7</literal></expr>,  <expr><literal type="number">8</literal></expr>,  <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>,
        <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">63</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">40</literal></expr>,
        <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Non-data values in the DECODE arrays. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SKIP</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>EQUALS</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * States 0-3 are reading through the next input tuple.
     * State 4 is having read one '=' and expecting exactly
     * one more.
     * State 5 is expecting no more data or padding characters
     * in the input.
     * State 6 is the error state; an error has been detected
     * in the input and no future input can "fix" it.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>state</name></decl>;</decl_stmt>   <comment type="line">// state number (0 to 6)</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>value</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name><name>int</name><index>[]</index></name></type> <name>alphabet</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Decoder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>alphabet</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>URL_SAFE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>DECODE</name></expr> </then><else>: <expr><name>DECODE_WEBSAFE</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return an overestimate for the number of bytes {@code
     * len} bytes could decode to.
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>maxOutputSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name>len</name> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Decode another block of input data.
     *
     * @return true if the state machine is still healthy.  false if
     *         bad base-64 data has been detected in the input stream.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

      <comment type="line">// Using local variables makes the decoder about 12%</comment>
      <comment type="line">// faster than if we manipulate the member variables in</comment>
      <comment type="line">// the loop.  (Even alphabet makes a measurable</comment>
      <comment type="line">// difference, which is somewhat surprising to me since</comment>
      <comment type="line">// the member variable is final.)</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><name><name>this</name><operator>.</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><name><name>this</name><operator>.</operator><name>value</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><name><name>this</name><operator>.</operator><name>output</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>alphabet</name> <init>= <expr><name><name>this</name><operator>.</operator><name>alphabet</name></name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{
        <comment type="line">// Try the fast path:  we're starting a new tuple and the</comment>
        <comment type="line">// next four bytes of the input stream are all data</comment>
        <comment type="line">// bytes.  This corresponds to going through states</comment>
        <comment type="line">// 0-1-2-3-0.  We expect to use this method for most of</comment>
        <comment type="line">// the data.</comment>
        <comment type="line">//</comment>
        <comment type="line">// If any of the next four bytes of input are non-data</comment>
        <comment type="line">// (whitespace, etc.), value will end up negative.  (All</comment>
        <comment type="line">// the non-data values in decode are small negative</comment>
        <comment type="line">// numbers, so shifting any of them up and or'ing them</comment>
        <comment type="line">// together will result in a value with its top bit set.)</comment>
        <comment type="line">//</comment>
        <comment type="line">// You can remove this whole block and the output should</comment>
        <comment type="line">// be the same, just slower.</comment>
        <if>if <condition>(<expr><name>state</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <while>while <condition>(<expr><name>p</name><operator>+</operator><literal type="number">4</literal> <operator>&lt;=</operator> <name>len</name> <operator>&amp;&amp;</operator>
              <operator>(</operator><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>alphabet</name><index>[<expr><name><name>input</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>|</operator>
                  <operator>(</operator><name><name>alphabet</name><index>[<expr><name><name>input</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>
                  <operator>(</operator><name><name>alphabet</name><index>[<expr><name><name>input</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator>
                  <operator>(</operator><name><name>alphabet</name><index>[<expr><name><name>input</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
          }</block></while>
          <if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>len</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then></if>

        <comment type="line">// The fast path isn't available -- either we've read a</comment>
        <comment type="line">// partial tuple, or the next four input bytes aren't all</comment>
        <comment type="line">// data, or whatever.  Fall back to the slower state</comment>
        <comment type="line">// machine implementation.</comment>

        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>alphabet</name><index>[<expr><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
          <case>case <expr><literal type="number">0</literal></expr>:</case>
            <if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>value</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
              <expr_stmt><expr><operator>++</operator><name>state</name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>SKIP</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if></elseif></if>
            <break>break;</break>

          <case>case <expr><literal type="number">1</literal></expr>:</case>
            <if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>d</name></expr>;</expr_stmt>
              <expr_stmt><expr><operator>++</operator><name>state</name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>SKIP</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if></elseif></if>
            <break>break;</break>

          <case>case <expr><literal type="number">2</literal></expr>:</case>
            <if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>d</name></expr>;</expr_stmt>
              <expr_stmt><expr><operator>++</operator><name>state</name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>EQUALS</name></expr>)</condition><then> <block>{
              <comment type="line">// Emit the last (partial) output tuple;</comment>
              <comment type="line">// expect exactly one more padding character.</comment>
              <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>SKIP</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if></elseif></if>
            <break>break;</break>

          <case>case <expr><literal type="number">3</literal></expr>:</case>
            <if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
              <comment type="line">// Emit the output triple and return to state 0.</comment>
              <expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>|</operator> <name>d</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name>value</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>EQUALS</name></expr>)</condition><then> <block>{
              <comment type="line">// Emit the last (partial) output tuple;</comment>
              <comment type="line">// expect no further data or padding characters.</comment>
              <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>state</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>SKIP</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if></elseif></if>
            <break>break;</break>

          <case>case <expr><literal type="number">4</literal></expr>:</case>
            <if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>EQUALS</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><operator>++</operator><name>state</name></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>SKIP</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if></elseif></if>
            <break>break;</break>

          <case>case <expr><literal type="number">5</literal></expr>:</case>
            <if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>SKIP</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
              <return>return <expr><literal type="boolean">false</literal></expr>;</return>
            }</block></then></if>
            <break>break;</break>
        }</block></switch>
      }</block></while>

      <if>if <condition>(<expr><operator>!</operator><name>finish</name></expr>)</condition><then> <block>{
        <comment type="line">// We're out of input, but a future call could provide</comment>
        <comment type="line">// more.</comment>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>

      <comment type="line">// Done reading input.  Now figure out where we are left in</comment>
      <comment type="line">// the state machine and finish up.</comment>

      <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <comment type="line">// Output length is a multiple of three.  Fine.</comment>
          <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <comment type="line">// Read one extra input byte, which isn't enough to</comment>
          <comment type="line">// make another output byte.  Illegal.</comment>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <comment type="line">// Read two extra input bytes, enough to emit 1 more</comment>
          <comment type="line">// output byte.  Fine.</comment>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
          <comment type="line">// Read three extra input bytes, enough to emit 2 more</comment>
          <comment type="line">// output bytes.  Fine.</comment>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>) <argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>
          <comment type="line">// Read one padding '=' when we expected 2.  Illegal.</comment>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        <case>case <expr><literal type="number">5</literal></expr>:</case>
          <comment type="line">// Read all the padding '='s we expected and no more.</comment>
          <comment type="line">// Fine.</comment>
          <break>break;</break>
      }</block></switch>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <comment type="line">//  --------------------------------------------------------</comment>
  <comment type="line">//  encoding</comment>
  <comment type="line">//  --------------------------------------------------------</comment>

  <comment type="block" format="javadoc">/**
   * Base64-encode the given data and return a newly allocated
   * String with the result.
   *
   * @param input  the data to encode
   * @param flags  controls certain features of the encoded output.
   *               Passing {@code DEFAULT} results in output that
   *               adheres to RFC 2045.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeToString</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"US-ASCII"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// US-ASCII is guaranteed to be available.</comment>
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Base64-encode the given data and return a newly allocated
   * String with the result.
   *
   * @param input  the data to encode
   * @param offset the position within the input array at which to
   *               start
   * @param len    the number of bytes of input to encode
   * @param flags  controls certain features of the encoded output.
   *               Passing {@code DEFAULT} results in output that
   *               adheres to RFC 2045.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeToString</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"US-ASCII"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// US-ASCII is guaranteed to be available.</comment>
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Base64-encode the given data and return a newly allocated
   * byte[] with the result.
   *
   * @param input  the data to encode
   * @param flags  controls certain features of the encoded output.
   *               Passing {@code DEFAULT} results in output that
   *               adheres to RFC 2045.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>encode</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>input</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Base64-encode the given data and return a newly allocated
   * byte[] with the result.
   *
   * @param input  the data to encode
   * @param offset the position within the input array at which to
   *               start
   * @param len    the number of bytes of input to encode
   * @param flags  controls certain features of the encoded output.
   *               Passing {@code DEFAULT} results in output that
   *               adheres to RFC 2045.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encode</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Encoder</name></type> <name>encoder</name> <init>= <expr><operator>new</operator> <call><name>Encoder</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Compute the exact length of the array we will produce.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>output_len</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Account for the tail of the data and the padding bytes, if any.</comment>
    <if>if <condition>(<expr><name><name>encoder</name><operator>.</operator><name>do_padding</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">3</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>output_len</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else>else <block>{
      <switch>switch <condition>(<expr><name>len</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{
        <case>case <expr><literal type="number">0</literal></expr>:</case> <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>output_len</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>output_len</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <break>break;</break>
      }</block></switch>
    }</block></else></if>

    <comment type="line">// Account for the newlines, if any.</comment>
    <if>if <condition>(<expr><name><name>encoder</name><operator>.</operator><name>do_newline</name></name> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>output_len</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>Encoder</name><operator>.</operator><name>LINE_GROUPS</name></name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
          <operator>(</operator><ternary><condition><expr><name><name>encoder</name><operator>.</operator><name>do_cr</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>encoder</name><operator>.</operator><name>output</name></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>output_len</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>encoder</name><operator>.</operator><name>process</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <assert>assert <expr><name><name>encoder</name><operator>.</operator><name>op</name></name> <operator>==</operator> <name>output_len</name></expr>;</assert>

    <return>return <expr><name><name>encoder</name><operator>.</operator><name>output</name></name></expr>;</return>
  }</block></function>

  <comment type="block">/* package */</comment> <class><specifier>static</specifier> class <name>Encoder</name> <super><extends>extends <name>Coder</name></extends></super> <block>{
    <comment type="block" format="javadoc">/**
     * Emit a new line every this many output tuples.  Corresponds to
     * a 76-character line length (the maximum allowable according to
     * &lt;a href="http://www.ietf.org/rfc/rfc2045.txt"&gt;RFC 2045&lt;/a&gt;).
     */</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LINE_GROUPS</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Lookup table for turning Base64 alphabet positions (6 bits)
     * into output bytes.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>byte</name></type> <name><name>ENCODE</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>,
        <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>,
        <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>,
        <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'+'</literal></expr>, <expr><literal type="char">'/'</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/**
     * Lookup table for turning Base64 alphabet positions (6 bits)
     * into output bytes.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>byte</name></type> <name><name>ENCODE_WEBSAFE</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'J'</literal></expr>, <expr><literal type="char">'K'</literal></expr>, <expr><literal type="char">'L'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'P'</literal></expr>,
        <expr><literal type="char">'Q'</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'U'</literal></expr>, <expr><literal type="char">'V'</literal></expr>, <expr><literal type="char">'W'</literal></expr>, <expr><literal type="char">'X'</literal></expr>, <expr><literal type="char">'Y'</literal></expr>, <expr><literal type="char">'Z'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'b'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'f'</literal></expr>,
        <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'j'</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="char">'o'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'q'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'v'</literal></expr>,
        <expr><literal type="char">'w'</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'y'</literal></expr>, <expr><literal type="char">'z'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'3'</literal></expr>, <expr><literal type="char">'4'</literal></expr>, <expr><literal type="char">'5'</literal></expr>, <expr><literal type="char">'6'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><literal type="char">'_'</literal></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>tail</name></decl>;</decl_stmt>
    <comment type="block">/* package */</comment> <decl_stmt><decl><type><name>int</name></type> <name>tailLen</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>do_padding</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>do_newline</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>public</specifier> <name>boolean</name></type> <name>do_cr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <specifier>private</specifier> <name><name>byte</name><index>[]</index></name></type> <name>alphabet</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Encoder</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>output</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>output</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>do_padding</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NO_PADDING</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>do_newline</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>NO_WRAP</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>do_cr</name> <operator>=</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>CRLF</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>alphabet</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>URL_SAFE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ENCODE</name></expr> </then><else>: <expr><name>ENCODE_WEBSAFE</name></expr></else></ternary></expr>;</expr_stmt>

      <expr_stmt><expr><name>tail</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tailLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name>count</name> <operator>=</operator> <ternary><condition><expr><name>do_newline</name></expr> ?</condition><then> <expr><name>LINE_GROUPS</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * @return an overestimate for the number of bytes {@code
     * len} bytes could encode to.
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>maxOutputSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name>len</name> <operator>*</operator> <literal type="number">8</literal><operator>/</operator><literal type="number">5</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>process</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>finish</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// Using local variables makes the encoder about 9% faster.</comment>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>alphabet</name> <init>= <expr><name><name>this</name><operator>.</operator><name>alphabet</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>output</name> <init>= <expr><name><name>this</name><operator>.</operator><name>output</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>this</name><operator>.</operator><name>count</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name>offset</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// First we need to concatenate the tail of the previous call</comment>
      <comment type="line">// with any input bytes available now and see if we can empty</comment>
      <comment type="line">// the tail.</comment>

      <switch>switch <condition>(<expr><name>tailLen</name></expr>)</condition> <block>{
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <comment type="line">// There was no tail.</comment>
          <break>break;</break>

        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <if>if <condition>(<expr><name>p</name><operator>+</operator><literal type="number">2</literal> <operator>&lt;=</operator> <name>len</name></expr>)</condition><then> <block>{
            <comment type="line">// A 1-byte tail with at least 2 bytes of</comment>
            <comment type="line">// input available now.</comment>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
                <operator>(</operator><operator>(</operator><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
                <operator>(</operator><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>tailLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          }</block></then></if><empty_stmt>;</empty_stmt>
          <break>break;</break>

        <case>case <expr><literal type="number">2</literal></expr>:</case>
          <if>if <condition>(<expr><name>p</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>len</name></expr>)</condition><then> <block>{
            <comment type="line">// A 2-byte tail with at least 1 byte of input.</comment>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
                <operator>(</operator><operator>(</operator><name><name>tail</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
                <operator>(</operator><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>tailLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          }</block></then></if>
          <break>break;</break>
      }</block></switch>

      <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>--</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>do_cr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block></then></if>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>count</name> <operator>=</operator> <name>LINE_GROUPS</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>

      <comment type="line">// At this point either there is no tail, or there are fewer</comment>
      <comment type="line">// than 3 bytes of input available.</comment>

      <comment type="line">// The main loop, turning 3 input bytes into 4 output bytes on</comment>
      <comment type="line">// each iteration.</comment>
      <while>while <condition>(<expr><name>p</name><operator>+</operator><literal type="number">3</literal> <operator>&lt;=</operator> <name>len</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>input</name><index>[<expr><name>p</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name><name>input</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><name><name>input</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>op</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>--</operator><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>do_cr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block></then></if>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>count</name> <operator>=</operator> <name>LINE_GROUPS</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>finish</name></expr>)</condition><then> <block>{
        <comment type="line">// Finish up the tail of the input.  Note that we need to</comment>
        <comment type="line">// consume any bytes in tail before any bytes</comment>
        <comment type="line">// remaining in input; there should be at most two bytes</comment>
        <comment type="line">// total.</comment>

        <if>if <condition>(<expr><name>p</name><operator>-</operator><name>tailLen</name> <operator>==</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><name>tailLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>tail</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>tailLen</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>do_padding</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
          }</block></then></if>
          <if>if <condition>(<expr><name>do_newline</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>do_cr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>p</name><operator>-</operator><name>tailLen</name> <operator>==</operator> <name>len</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><name>tailLen</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>tail</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator>
              <operator>(</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><name>tailLen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>tail</name><index>[<expr><name>t</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name><name>input</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>tailLen</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>alphabet</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>]</index></name></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>do_padding</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'='</literal></expr>;</expr_stmt>
          }</block></then></if>
          <if>if <condition>(<expr><name>do_newline</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>do_cr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>do_newline</name> <operator>&amp;&amp;</operator> <name>op</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>count</name> <operator>!=</operator> <name>LINE_GROUPS</name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>do_cr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\r'</literal></expr>;</expr_stmt></block></then></if>
          <expr_stmt><expr><name><name>output</name><index>[<expr><name>op</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <assert>assert <expr><name>tailLen</name> <operator>==</operator> <literal type="number">0</literal></expr>;</assert>
        <assert>assert <expr><name>p</name> <operator>==</operator> <name>len</name></expr>;</assert>
      }</block></then> <else>else <block>{
        <comment type="line">// Save the leftovers in tail to be consumed on the next</comment>
        <comment type="line">// call to encodeInternal.</comment>

        <if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>len</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>tail</name><index>[<expr><name>tailLen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>len</name><operator>-</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>tail</name><index>[<expr><name>tailLen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>tail</name><index>[<expr><name>tailLen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>input</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
      }</block></else></if>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>op</name></name> <operator>=</operator> <name>op</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <constructor><specifier>private</specifier> <name>Base64</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>   <comment type="line">// don't instantiate</comment>
}</block></class>
</unit>
