<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobmanager\persistence\JobSerializer.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>persistence</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>EncryptionKeys</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>Job</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A JobSerializer is responsible for serializing and deserializing persistent jobs.
 */</comment>
<interface><specifier>public</specifier> interface <name>JobSerializer</name> <block>{

  <comment type="block" format="javadoc">/**
   * Serialize a job object into a string.
   * @param job The Job to serialize.
   * @return The serialized Job.
   * @throws IOException if serialization fails.
   */</comment>
  <function_decl><specifier>public</specifier> <type><name>String</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Deserialize a String into a Job.
   * @param keys Optional encryption keys that could have been used.
   * @param encrypted True if the job was encrypted using the encryption keys.
   * @param serialized The serialized Job.
   * @return The deserialized Job.
   * @throws IOException If the Job deserialization fails.
   */</comment>
  <function_decl><specifier>public</specifier> <type><name>Job</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name>EncryptionKeys</name></type> <name>keys</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>encrypted</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>serialized</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>;</function_decl>

}</block></interface>
</unit>
