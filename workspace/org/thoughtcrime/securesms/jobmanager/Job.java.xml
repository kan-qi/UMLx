<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobmanager\Job.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>dependencies</name><operator>.</operator><name>ContextDependent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>requirements</name><operator>.</operator><name>NetworkRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>requirements</name><operator>.</operator><name>SqlCipherMigrationRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name><operator>.</operator><name>GenericForegroundService</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>ListenableWorker</name><operator>.</operator><name>Result</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Worker</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkerParameters</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Job</name> <super><extends>extends <name>Worker</name></extends> <implements>implements <name>Serializable</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">4658540468214421276L</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>Job</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>WorkLockManager</name></type> <name>WORK_LOCK_MANAGER</name> <init>= <expr><operator>new</operator> <call><name>WorkLockManager</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RETRY_COUNT</name>        <init>= <expr><literal type="string">"Job_retry_count"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RETRY_UNTIL</name>        <init>= <expr><literal type="string">"Job_retry_until"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SUBMIT_TIME</name>        <init>= <expr><literal type="string">"Job_submit_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_FAILED</name>             <init>= <expr><literal type="string">"Job_failed"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_REQUIRES_NETWORK</name>   <init>= <expr><literal type="string">"Job_requires_network"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_REQUIRES_SQLCIPHER</name> <init>= <expr><literal type="string">"Job_requires_sqlcipher"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>JobParameters</name></type> <name>parameters</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Job</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>WorkerParameters</name></type> <name>workerParams</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>workerParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Invoked when a job is first created in our own codebase.
   */</comment>
  <constructor><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"RestrictedApi"</literal></expr></argument>)</argument_list></annotation>
  <specifier>protected</specifier> <name>Job</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>JobParameters</name></type> <name>parameters</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">//noinspection ConstantConditions</comment>
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>WorkerParameters</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parameters</name></name> <operator>=</operator> <name>parameters</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Result</name></type> <name>doWork</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"doWork()"</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <init>(<decl><type><name><name>WorkLockManager</name><operator>.</operator><name>WorkLock</name></name></type> <name>workLock</name> <init>= <expr><call><name><name>WORK_LOCK_MANAGER</name><operator>.</operator><name>acquire</name></name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <decl_stmt><decl><type><name>Result</name></type> <name>result</name> <init>= <expr><call><name><name>workLock</name><operator>.</operator><name>getResult</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>doWorkInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>workLock</name><operator>.</operator><name>setResult</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"Using result from preempted run ("</literal> <operator>+</operator> <name>result</name> <operator>+</operator> <literal type="string">")."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <return>return <expr><name>result</name></expr>;</return>
    }</block></try>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Result</name></type> <name>doWorkInternal</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Data</name></type> <name>data</name> <init>= <expr><call><name>getInputData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"doWorkInternal()"</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>injectDependencies</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>this</name> <operator>instanceof</operator> <name>ContextDependent</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ContextDependent</name><operator>)</operator><name>this</name><operator>)</operator><operator>.</operator><call><name>setContext</name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>boolean</name></type> <name>foregroundRunning</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SafeData</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>KEY_FAILED</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failing due to a failure earlier in the chain."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name>withinRetryLimits</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failing after hitting the retry limit."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name>requirementsMet</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"Retrying due to unmet requirements."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>retry</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name>needsForegroundService</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Running a foreground service with description '"</literal> <operator>+</operator> <call><name>getDescription</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"' to aid in job execution."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GenericForegroundService</name><operator>.</operator><name>startForegroundTask</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getDescription</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>foregroundRunning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>onRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"Successfully completed."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>success</name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>onShouldRetry</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"Retrying after a retryable exception."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>retry</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><literal type="string">"Failing due to an exception."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>cancel</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></catch> <finally>finally <block>{
      <if>if <condition>(<expr><name>foregroundRunning</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Stopping the foreground service."</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>GenericForegroundService</name><operator>.</operator><name>stopForegroundTask</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onStopped</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><literal type="string">"onStopped()"</literal> <operator>+</operator> <call><name>logSuffix</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>final</specifier> <type><name>void</name></type> <name>onSubmit</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>UUID</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name>buildLog</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="string">"onSubmit() network: "</literal> <operator>+</operator> <operator>(</operator><operator>new</operator> <call><name>NetworkRequirement</name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>this</name> <operator>instanceof</operator> <name>ContextDependent</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ContextDependent</name><operator>)</operator> <name>this</name><operator>)</operator><operator>.</operator><call><name>setContext</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>onAdded</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * @return A string that represents what the task does. Will be shown in a foreground notification
   *         if necessary.
   */</comment>
  <function><specifier>protected</specifier> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Job_working_in_the_background</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Called after a run has finished and we've determined a retry is required, but before the next
   * attempt is run.
   */</comment>
  <function><specifier>protected</specifier> <type><name>void</name></type> <name>onRetry</name><parameter_list>()</parameter_list> <block>{ }</block></function>

  <comment type="block" format="javadoc">/**
   * Called after a job has been added to the JobManager queue. Invoked off the main thread, so its
   * safe to do longer-running work. However, work should finish relatively quickly, as it will
   * block the submission of future tasks.
   */</comment>
  <function><specifier>protected</specifier> <type><name>void</name></type> <name>onAdded</name><parameter_list>()</parameter_list> <block>{ }</block></function>

  <comment type="block" format="javadoc">/**
   * All instance state needs to be persisted in the provided {@link Data.Builder} so that it can
   * be restored in {@link #initialize(SafeData)}.
   * @param dataBuilder The builder where you put your state.
   * @return The result of {@code dataBuilder.build()}.
   */</comment>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Data</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Data</name><operator>.</operator><name>Builder</name></name></type> <name>dataBuilder</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Restore all of your instance state from the provided {@link Data}. It should contain all of
   * the data put in during {@link #serialize(Data.Builder)}.
   * @param data Where your data is stored.
   */</comment>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SafeData</name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Called to actually execute the job.
   * @throws Exception
   */</comment>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onRun</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws>;</function_decl>

  <comment type="block" format="javadoc">/**
   * Called if a job fails to run (onShouldRetry returned false, or the number of retries exceeded
   * the job's configured retry count.
   */</comment>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onCanceled</name><parameter_list>()</parameter_list>;</function_decl>

  <comment type="block" format="javadoc">/**
   * If onRun() throws an exception, this method will be called to determine whether the
   * job should be retried.
   *
   * @param exception The exception onRun() threw.
   * @return true if onRun() should be called again, false otherwise.
   */</comment>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>onShouldRetry</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><annotation>@<name>Nullable</name></annotation> <type><name>JobParameters</name></type> <name>getJobParameters</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>parameters</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Result</name></type> <name>success</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Result</name><operator>.</operator><name>success</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Result</name></type> <name>retry</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>onRetry</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Result</name><operator>.</operator><name>retry</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Result</name></type> <name>cancel</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>onCanceled</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Result</name><operator>.</operator><name>success</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Data</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>KEY_FAILED</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>requirementsMet</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Data</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>met</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>data</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>KEY_REQUIRES_SQLCIPHER</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>met</name> <operator>&amp;=</operator> <operator>new</operator> <call><name>SqlCipherMigrationRequirement</name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>met</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>withinRetryLimits</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Data</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type>  <name>retryCount</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_RETRY_COUNT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>retryUntil</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>KEY_RETRY_UNTIL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>retryCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name>getRunAttemptCount</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>retryCount</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>retryUntil</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>needsForegroundService</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Data</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>NetworkRequirement</name></type> <name>networkRequirement</name> <init>= <expr><operator>new</operator> <call><name>NetworkRequirement</name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>            <name>requiresNetwork</name>    <init>= <expr><call><name><name>data</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name>KEY_REQUIRES_NETWORK</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>requiresNetwork</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>networkRequirement</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>log</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name>buildLog</name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>warn</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>warn</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Throwable</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name>buildLog</name><argument_list>(<argument><expr><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>buildLog</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>UUID</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="string">"["</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">"] "</literal> <operator>+</operator> <call><name>getClass</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" :: "</literal> <operator>+</operator> <name>message</name></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>String</name></type> <name>logSuffix</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>timeSinceSubmission</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getInputData</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>(<argument><expr><name>KEY_SUBMIT_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><literal type="string">" (Time since submission: "</literal> <operator>+</operator> <name>timeSinceSubmission</name> <operator>+</operator> <literal type="string">" ms, Run attempt: "</literal> <operator>+</operator> <call><name>getRunAttemptCount</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", isStopped: "</literal> <operator>+</operator> <call><name>isStopped</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr>;</return>
  }</block></function>
}</block></class>
</unit>
