<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobmanager\JobManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>BackoffPolicy</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Constraints</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>ExistingWorkPolicy</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>NetworkType</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>OneTimeWorkRequest</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkContinuation</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkManager</name></name>;</import>

<class><specifier>public</specifier> class <name>JobManager</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>JobManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Constraints</name></type> <name>NETWORK_CONSTRAINT</name> <init>= <expr><operator>new</operator> <call><name><name>Constraints</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                                                                       <operator>.</operator><call><name>setRequiredNetworkType</name><argument_list>(<argument><expr><name><name>NetworkType</name><operator>.</operator><name>CONNECTED</name></name></expr></argument>)</argument_list></call>
                                                                       <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Executor</name></type> <name>executor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>     <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>WorkManager</name></type> <name>workManager</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>JobManager</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>WorkManager</name></type> <name>workManager</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>     <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>workManager</name></name> <operator>=</operator> <name>workManager</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>Chain</name></type> <name>startChain</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>startChain</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Chain</name></type> <name>startChain</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Job</name></extends></argument>&gt;</argument_list></name></type> <name>jobs</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Chain</name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>JobParameters</name></type> <name>jobParameters</name> <init>= <expr><call><name><name>job</name><operator>.</operator><name>getJobParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>jobParameters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Jobs must have JobParameters at this stage. ("</literal> <operator>+</operator> <call><name><name>job</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name>startChain</name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>enqueue</name><argument_list>(<argument><expr><call><name><name>jobParameters</name><operator>.</operator><name>getSoloChainParameters</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>enqueueChain</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Chain</name></type> <name>chain</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ChainParameters</name></type> <name>chainParameters</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>workManager</name><operator>.</operator><name>pruneWork</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResult</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> | <type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to prune work."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Job</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>                <name>jobListChain</name>     <init>= <expr><call><name><name>chain</name><operator>.</operator><name>getJobListChain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>OneTimeWorkRequest</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>requestListChain</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>jobListChain</name></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>jobList</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>jobList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>jobList</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>jobList</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>toWorkRequest</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                                              <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>jobListChain</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Enqueued an empty chain."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>jobListChain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>jobListChain</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
          <expr_stmt><expr><call><name><name>jobListChain</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>onSubmit</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>requestListChain</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></for>

      <decl_stmt><decl><type><name>WorkContinuation</name></type> <name>continuation</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>chainParameters</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ExistingWorkPolicy</name></type> <name>policy</name> <init>= <expr><ternary><condition><expr><call><name><name>chainParameters</name><operator>.</operator><name>shouldIgnoreDuplicates</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>ExistingWorkPolicy</name><operator>.</operator><name>KEEP</name></name></expr> </then><else>: <expr><name><name>ExistingWorkPolicy</name><operator>.</operator><name>APPEND</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>continuation</name> <operator>=</operator> <call><name><name>workManager</name><operator>.</operator><name>beginUniqueWork</name></name><argument_list>(<argument><expr><call><name><name>chainParameters</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>policy</name></expr></argument>, <argument><expr><call><name><name>requestListChain</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>continuation</name> <operator>=</operator> <call><name><name>workManager</name><operator>.</operator><name>beginWith</name></name><argument_list>(<argument><expr><call><name><name>requestListChain</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>requestListChain</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>continuation</name> <operator>=</operator> <call><name><name>continuation</name><operator>.</operator><name>then</name></name><argument_list>(<argument><expr><call><name><name>requestListChain</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><call><name><name>continuation</name><operator>.</operator><name>enqueue</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }</block></function>

  <function><specifier>private</specifier> <type><name>OneTimeWorkRequest</name></type> <name>toWorkRequest</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>JobParameters</name></type> <name>jobParameters</name> <init>= <expr><call><name><name>job</name><operator>.</operator><name>getJobParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>jobParameters</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Jobs must have JobParameters at this stage. ("</literal> <operator>+</operator> <call><name><name>job</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSimpleName</name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Data</name><operator>.</operator><name>Builder</name></name></type> <name>dataBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>Data</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name><name>Job</name><operator>.</operator><name>KEY_RETRY_COUNT</name></name></expr></argument>, <argument><expr><call><name><name>jobParameters</name><operator>.</operator><name>getRetryCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name><name>Job</name><operator>.</operator><name>KEY_RETRY_UNTIL</name></name></expr></argument>, <argument><expr><call><name><name>jobParameters</name><operator>.</operator><name>getRetryUntil</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name><name>Job</name><operator>.</operator><name>KEY_SUBMIT_TIME</name></name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Job</name><operator>.</operator><name>KEY_REQUIRES_NETWORK</name></name></expr></argument>, <argument><expr><call><name><name>jobParameters</name><operator>.</operator><name>requiresNetwork</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name><name>Job</name><operator>.</operator><name>KEY_REQUIRES_SQLCIPHER</name></name></expr></argument>, <argument><expr><call><name><name>jobParameters</name><operator>.</operator><name>requiresSqlCipher</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Data</name></type> <name>data</name> <init>= <expr><call><name><name>job</name><operator>.</operator><name>serialize</name></name><argument_list>(<argument><expr><name>dataBuilder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>OneTimeWorkRequest</name><operator>.</operator><name>Builder</name></name></type> <name>requestBuilder</name> <init>= <expr><operator>new</operator> <call><name><name>OneTimeWorkRequest</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name><name>job</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                      <operator>.</operator><call><name>setInputData</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call>
                                                                      <operator>.</operator><call><name>setBackoffCriteria</name><argument_list>(<argument><expr><name><name>BackoffPolicy</name><operator>.</operator><name>LINEAR</name></name></expr></argument>, <argument><expr><name><name>OneTimeWorkRequest</name><operator>.</operator><name>MIN_BACKOFF_MILLIS</name></name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>jobParameters</name><operator>.</operator><name>requiresNetwork</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>requestBuilder</name><operator>.</operator><name>setConstraints</name></name><argument_list>(<argument><expr><name>NETWORK_CONSTRAINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>requestBuilder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> class <name>Chain</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Job</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>jobs</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Chain</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Job</name></extends></argument>&gt;</argument_list></name></type> <name>jobs</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>jobs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Chain</name></type> <name>then</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Job</name></type> <name>job</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>then</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>job</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Chain</name></type> <name>then</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Job</name></argument>&gt;</argument_list></name></type> <name>jobs</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>jobs</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>jobs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>enqueue</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ChainParameters</name></type> <name>chainParameters</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>enqueueChain</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>chainParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>Job</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getJobListChain</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>jobs</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
