<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobmanager\WorkLockManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>UUID</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Semaphore</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>ListenableWorker</name><operator>.</operator><name>Result</name></name>;</import>

<class>class <name>WorkLockManager</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>UUID</name></argument>, <argument><name>WorkLock</name></argument>&gt;</argument_list></name></type> <name>locks</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><type><name>WorkLock</name></type> <name>acquire</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>WorkLock</name></type> <name>workLock</name></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <expr_stmt><expr><name>workLock</name> <operator>=</operator> <call><name><name>locks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>workLock</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>workLock</name> <operator>=</operator> <operator>new</operator> <call><name>WorkLock</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>workLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>workLock</name><operator>.</operator><name>increment</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>

    <expr_stmt><expr><call><name><name>workLock</name><operator>.</operator><name>getLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>acquireUninterruptibly</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>workLock</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>release</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>WorkLock</name></type> <name>lock</name></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <expr_stmt><expr><name>lock</name> <operator>=</operator> <call><name><name>locks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>lock</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Released a lock that was already removed from use."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>lock</name><operator>.</operator><name>decrementAndGet</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>locks</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></synchronized>

    <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>getLock</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class>class <name>WorkLock</name> <super><implements>implements <name>Closeable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Semaphore</name></type> <name>lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>UUID</name></type>      <name>uuid</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Result</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>count</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>WorkLock</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>UUID</name></type> <name>uuid</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uuid</name></name> <operator>=</operator> <name>uuid</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lock</name></name> <operator>=</operator> <operator>new</operator> <call><name>Semaphore</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>increment</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>decrementAndGet</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
      <return>return <expr><name>count</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Semaphore</name></type> <name>getLock</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>lock</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setResult</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Result</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>result</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation> <type><name>Result</name></type> <name>getResult</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>result</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>WorkLockManager</name><operator>.</operator><name>this</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
