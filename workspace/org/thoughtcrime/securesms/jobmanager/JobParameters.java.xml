<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobmanager\JobParameters.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>requirements</name><operator>.</operator><name>NetworkBackoffRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>requirements</name><operator>.</operator><name>NetworkRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>requirements</name><operator>.</operator><name>Requirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>requirements</name><operator>.</operator><name>NetworkOrServiceRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>requirements</name><operator>.</operator><name>SqlCipherMigrationRequirement</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The set of parameters that describe a {@link org.thoughtcrime.securesms.jobmanager.Job}.
 */</comment>
<class><specifier>public</specifier> class <name>JobParameters</name> <super><implements>implements <name>Serializable</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">4880456378402584584L</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Requirement</name></argument>&gt;</argument_list></name></type> <name>requirements</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>           <name>requiresNetwork</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>           <name>requiresSqlCipher</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>               <name>retryCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>              <name>retryUntil</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>            <name>groupId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>           <name>ignoreDuplicates</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>JobParameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>groupId</name></decl></parameter>,
                        <parameter><decl><type><name>boolean</name></type> <name>ignoreDuplicates</name></decl></parameter>,
                        <parameter><decl><type><name>boolean</name></type> <name>requiresNetwork</name></decl></parameter>,
                        <parameter><decl><type><name>boolean</name></type> <name>requiresSqlCipher</name></decl></parameter>,
                        <parameter><decl><type><name>int</name></type> <name>retryCount</name></decl></parameter>,
                        <parameter><decl><type><name>long</name></type> <name>retryUntil</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupId</name></name>           <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreDuplicates</name></name>  <operator>=</operator> <name>ignoreDuplicates</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requirements</name></name>      <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requiresNetwork</name></name>   <operator>=</operator> <name>requiresNetwork</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requiresSqlCipher</name></name> <operator>=</operator> <name>requiresSqlCipher</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retryCount</name></name>        <operator>=</operator> <name>retryCount</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retryUntil</name></name>        <operator>=</operator> <name>retryUntil</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>shouldIgnoreDuplicates</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>ignoreDuplicates</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>requiresNetwork</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>requiresNetwork</name> <operator>||</operator> <call><name>hasNetworkRequirement</name><argument_list>(<argument><expr><name>requirements</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>requiresSqlCipher</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>requiresSqlCipher</name> <operator>||</operator> <call><name>hasSqlCipherRequirement</name><argument_list>(<argument><expr><name>requirements</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasNetworkRequirement</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Requirement</name></argument>&gt;</argument_list></name></type> <name>requirements</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>requirements</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>requirements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <for>for <control>(<init><decl><type><name>Requirement</name></type> <name>requirement</name> <range>: <expr><name>requirements</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>requirement</name> <operator>instanceof</operator> <name>NetworkRequirement</name>          <operator>||</operator>
          <name>requirement</name> <operator>instanceof</operator> <name>NetworkOrServiceRequirement</name> <operator>||</operator>
          <name>requirement</name> <operator>instanceof</operator> <name>NetworkBackoffRequirement</name></expr>)</condition><then>
      <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasSqlCipherRequirement</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Requirement</name></argument>&gt;</argument_list></name></type> <name>requirements</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>requirements</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>requirements</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <for>for <control>(<init><decl><type><name>Requirement</name></type> <name>requirement</name> <range>: <expr><name>requirements</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>requirement</name> <operator>instanceof</operator> <name>SqlCipherMigrationRequirement</name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getRetryCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>retryCount</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getRetryUntil</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>retryUntil</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>ChainParameters</name></type> <name>getSoloChainParameters</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>ChainParameters</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                              <operator>.</operator><call><name>setGroupId</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>ignoreDuplicates</name><argument_list>(<argument><expr><name>ignoreDuplicates</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * @return a builder used to construct JobParameters.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>getGroupId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>groupId</name></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Builder</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>               <name>retryCount</name>           <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>              <name>retryDuration</name>        <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>            <name>groupId</name>              <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>           <name>ignoreDuplicates</name>     <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>           <name>requiresNetwork</name>      <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>           <name>requiresSqlCipher</name>    <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>withNetworkRequirement</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>requiresNetwork</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Deprecated</name></annotation>
    <specifier>public</specifier> <type><name>Builder</name></type> <name>withSqlCipherRequirement</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>requiresSqlCipher</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specify how many times the job should be retried if execution fails but onShouldRetry() returns
     * true.
     *
     * @param retryCount The number of times the job should be retried.
     * @return the builder.
     */</comment>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>withRetryCount</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>retryCount</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retryCount</name></name>    <operator>=</operator> <name>retryCount</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retryDuration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specify for how long we should keep retrying this job. Ignored if retryCount is set.
     * @param duration The duration (in ms) for how long we should keep retrying this job for.
     * @return the builder
     */</comment>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>withRetryDuration</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retryDuration</name></name> <operator>=</operator> <name>duration</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>retryCount</name></name>    <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Specify a groupId the job should belong to.  Jobs with the same groupId are guaranteed to be
     * executed serially.
     *
     * @param groupId The job's groupId.
     * @return the builder.
     */</comment>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>withGroupId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * If true, only one job with this groupId can be active at a time. If a job with the same
     * groupId is already running, then subsequent jobs will be ignored silently. Only has an effect
     * if a groupId has been specified via {@link #withGroupId(String)}.
     * &lt;p /&gt;
     * Defaults to false.
     *
     * @param ignoreDuplicates Whether to ignore duplicates.
     * @return the builder
     */</comment>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>withDuplicatesIgnored</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>ignoreDuplicates</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ignoreDuplicates</name></name> <operator>=</operator> <name>ignoreDuplicates</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * @return the JobParameters instance that describes a Job.
     */</comment>
    <function><specifier>public</specifier> <type><name>JobParameters</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>JobParameters</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>ignoreDuplicates</name></expr></argument>, <argument><expr><name>requiresNetwork</name></expr></argument>, <argument><expr><name>requiresSqlCipher</name></expr></argument>, <argument><expr><name>retryCount</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>retryDuration</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
