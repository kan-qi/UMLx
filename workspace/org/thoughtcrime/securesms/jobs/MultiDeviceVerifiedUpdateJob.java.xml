<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobs\MultiDeviceVerifiedUpdateJob.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>SafeData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UnidentifiedAccessUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>dependencies</name><operator>.</operator><name>InjectableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>JobParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>requirements</name><operator>.</operator><name>NetworkRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>SignalServiceMessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UntrustedIdentityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>multidevice</name><operator>.</operator><name>SignalServiceSyncMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>multidevice</name><operator>.</operator><name>VerifiedMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>PushNetworkException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkerParameters</name></name>;</import>

<class><specifier>public</specifier> class <name>MultiDeviceVerifiedUpdateJob</name> <super><extends>extends <name>ContextJob</name></extends> <implements>implements <name>InjectableType</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MultiDeviceVerifiedUpdateJob</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_DESTINATION</name>     <init>= <expr><literal type="string">"destination"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_IDENTITY_KEY</name>    <init>= <expr><literal type="string">"identity_key"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_VERIFIED_STATUS</name> <init>= <expr><literal type="string">"verified_status"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TIMESTAMP</name>       <init>= <expr><literal type="string">"timestamp"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation>
  <specifier>transient</specifier> <type><name>SignalServiceMessageSender</name></type> <name>messageSender</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>         <name>destination</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type>         <name>identityKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>VerifiedStatus</name></type> <name>verifiedStatus</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>           <name>timestamp</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>MultiDeviceVerifiedUpdateJob</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>WorkerParameters</name></type> <name>workerParameters</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>workerParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>MultiDeviceVerifiedUpdateJob</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>destination</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>, <parameter><decl><type><name>VerifiedStatus</name></type> <name>verifiedStatus</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>JobParameters</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>withNetworkRequirement</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>withGroupId</name><argument_list>(<argument><expr><literal type="string">"__MULTI_DEVICE_VERIFIED_UPDATE__"</literal></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>destination</name></name>    <operator>=</operator> <call><name><name>destination</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identityKey</name></name>    <operator>=</operator> <call><name><name>identityKey</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>verifiedStatus</name></name> <operator>=</operator> <name>verifiedStatus</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name>      <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SafeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>destination</name>    <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_DESTINATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>verifiedStatus</name> <operator>=</operator> <call><name><name>VerifiedStatus</name><operator>.</operator><name>forState</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_VERIFIED_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>timestamp</name>      <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>KEY_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>identityKey</name> <operator>=</operator> <call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_IDENTITY_KEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Data</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Data</name><operator>.</operator><name>Builder</name></name></type> <name>dataBuilder</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>dataBuilder</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_DESTINATION</name></expr></argument>, <argument><expr><name>destination</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>KEY_IDENTITY_KEY</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>KEY_VERIFIED_STATUS</name></expr></argument>, <argument><expr><call><name><name>verifiedStatus</name><operator>.</operator><name>toInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name>KEY_TIMESTAMP</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRun</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UntrustedIdentityException</name></expr></argument></throws> <block>{
    <try>try <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isMultiDevice</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Not multi device..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><name>destination</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No destination..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>Address</name></type>                       <name>canonicalDestination</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name></name></type> <name>verifiedState</name>        <init>= <expr><call><name>getVerifiedState</name><argument_list>(<argument><expr><name>verifiedStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>VerifiedMessage</name></type>               <name>verifiedMessage</name>      <init>= <expr><operator>new</operator> <call><name>VerifiedMessage</name><argument_list>(<argument><expr><call><name><name>canonicalDestination</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IdentityKey</name><argument_list>(<argument><expr><name>identityKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>verifiedState</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>messageSender</name><operator>.</operator><name>sendMessage</name></name><argument_list>(<argument><expr><call><name><name>SignalServiceSyncMessage</name><operator>.</operator><name>forVerified</name></name><argument_list>(<argument><expr><name>verifiedMessage</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>UnidentifiedAccessUtil</name><operator>.</operator><name>getAccessFor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name></name></type> <name>getVerifiedState</name><parameter_list>(<parameter><decl><type><name>VerifiedStatus</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name></name></type> <name>verifiedState</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>status</name></expr>)</condition> <block>{
      <case>case <expr><name>DEFAULT</name></expr>:</case>    <expr_stmt><expr><name>verifiedState</name> <operator>=</operator> <name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name><operator>.</operator><name>DEFAULT</name></name></expr>;</expr_stmt>    <break>break;</break>
      <case>case <expr><name>VERIFIED</name></expr>:</case>   <expr_stmt><expr><name>verifiedState</name> <operator>=</operator> <name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name><operator>.</operator><name>VERIFIED</name></name></expr>;</expr_stmt>   <break>break;</break>
      <case>case <expr><name>UNVERIFIED</name></expr>:</case> <expr_stmt><expr><name>verifiedState</name> <operator>=</operator> <name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name><operator>.</operator><name>UNVERIFIED</name></name></expr>;</expr_stmt> <break>break;</break>
      <default>default:</default> <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unknown status: "</literal> <operator>+</operator> <name>verifiedStatus</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></switch>

    <return>return <expr><name>verifiedState</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onShouldRetry</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>exception</name> <operator>instanceof</operator> <name>PushNetworkException</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCanceled</name><parameter_list>()</parameter_list> <block>{

  }</block></function>
}</block></class>
</unit>
