<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobs\AttachmentUploadJob.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>DatabaseAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>PointerAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>dependencies</name><operator>.</operator><name>InjectableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>events</name><operator>.</operator><name>PartProgressEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>JobParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>SafeData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MediaConstraints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MediaStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MmsException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>transport</name><operator>.</operator><name>UndeliverableMessageException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>SignalServiceMessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceAttachmentPointer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>PushNetworkException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>net</name><operator>.</operator><name>ssl</name><operator>.</operator><name>SSLException</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkerParameters</name></name>;</import>

<class><specifier>public</specifier> class <name>AttachmentUploadJob</name> <super><extends>extends <name>ContextJob</name></extends> <implements>implements <name>InjectableType</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>AttachmentUploadJob</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_ROW_ID</name>    <init>= <expr><literal type="string">"row_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_UNIQUE_ID</name> <init>= <expr><literal type="string">"unique_id"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>AttachmentId</name></type>               <name>attachmentId</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation> <type><name>SignalServiceMessageSender</name></type> <name>messageSender</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AttachmentUploadJob</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>WorkerParameters</name></type> <name>workerParameters</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>workerParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>protected</specifier> <name>AttachmentUploadJob</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttachmentId</name></type> <name>attachmentId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>JobParameters</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>withNetworkRequirement</name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>withRetryDuration</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachmentId</name></name> <operator>=</operator> <name>attachmentId</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SafeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachmentId</name></name> <operator>=</operator> <operator>new</operator> <call><name>AttachmentId</name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>KEY_ROW_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>data</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>KEY_UNIQUE_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Data</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Data</name><operator>.</operator><name>Builder</name></name></type> <name>dataBuilder</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>dataBuilder</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>KEY_ROW_ID</name></expr></argument>, <argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getRowId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name>KEY_UNIQUE_ID</name></expr></argument>, <argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getUniqueId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRun</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>AttachmentDatabase</name></type> <name>database</name>           <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DatabaseAttachment</name></type> <name>databaseAttachment</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>getAttachment</name></name><argument_list>(<argument><expr><name>attachmentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>databaseAttachment</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Cannot find the specified attachment."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>MediaConstraints</name></type>               <name>mediaConstraints</name> <init>= <expr><call><name><name>MediaConstraints</name><operator>.</operator><name>getPushMediaConstraints</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Attachment</name></type>                     <name>scaledAttachment</name> <init>= <expr><call><name>scaleAndStripExif</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>mediaConstraints</name></expr></argument>, <argument><expr><name>databaseAttachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignalServiceAttachment</name></type>        <name>localAttachment</name>  <init>= <expr><call><name>getAttachmentFor</name><argument_list>(<argument><expr><name>scaledAttachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignalServiceAttachmentPointer</name></type> <name>remoteAttachment</name> <init>= <expr><call><name><name>messageSender</name><operator>.</operator><name>uploadAttachment</name></name><argument_list>(<argument><expr><call><name><name>localAttachment</name><operator>.</operator><name>asStream</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Attachment</name></type>                     <name>attachment</name>       <init>= <expr><call><name><name>PointerAttachment</name><operator>.</operator><name>forPointer</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>remoteAttachment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>updateAttachmentAfterUpload</name></name><argument_list>(<argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onCanceled</name><parameter_list>()</parameter_list> <block>{ }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>boolean</name></type> <name>onShouldRetry</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>exception</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>exception</name> <operator>instanceof</operator> <name>PushNetworkException</name> <operator>||</operator>
           <name>exception</name> <operator>instanceof</operator> <name>SSLException</name>         <operator>||</operator>
           <name>exception</name> <operator>instanceof</operator> <name>ConnectException</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SignalServiceAttachment</name></type> <name>getAttachmentFor</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <if>if <condition>(<expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Assertion failed, outgoing attachment has no data!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
      <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>SignalServiceAttachment</name><operator>.</operator><name>newStreamBuilder</name></name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>withStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withContentType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withLength</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withFileName</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withVoiceNote</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>isVoiceNote</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withWidth</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withHeight</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withCaption</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>withListener</name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>total</name></decl></parameter>, <parameter><decl><name>progress</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postSticky</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartProgressEvent</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Couldn't open attachment"</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Attachment</name></type> <name>scaleAndStripExif</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentDatabase</name></type> <name>attachmentDatabase</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaConstraints</name></type> <name>constraints</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>UndeliverableMessageException</name></expr></argument></throws>
  <block>{
    <try>try <block>{
      <if>if <condition>(<expr><call><name><name>constraints</name><operator>.</operator><name>isSatisfied</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isJpeg</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>MediaStream</name></type> <name>stripped</name> <init>= <expr><call><name><name>constraints</name><operator>.</operator><name>getResizedMedia</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><call><name><name>attachmentDatabase</name><operator>.</operator><name>updateAttachmentData</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>stripped</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>attachment</name></expr>;</return>
        }</block></else></if>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>constraints</name><operator>.</operator><name>canResize</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MediaStream</name></type> <name>resized</name> <init>= <expr><call><name><name>constraints</name><operator>.</operator><name>getResizedMedia</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>attachmentDatabase</name><operator>.</operator><name>updateAttachmentData</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>, <argument><expr><name>resized</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if></elseif> <else>else <block>{
        <throw>throw <expr><operator>new</operator> <call><name>UndeliverableMessageException</name><argument_list>(<argument><expr><literal type="string">"Size constraints could not be met!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></else></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>MmsException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>UndeliverableMessageException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>
}</block></class>
</unit>
