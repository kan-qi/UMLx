<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobs\PushGroupUpdateJob.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UnidentifiedAccessUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name><operator>.</operator><name>GroupRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>dependencies</name><operator>.</operator><name>InjectableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>JobParameters</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>SafeData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>GroupUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>SignalServiceMessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UntrustedIdentityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceAttachmentStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceDataMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceGroup</name><operator>.</operator><name>Type</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>SignalServiceAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>PushNetworkException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkerParameters</name></name>;</import>

<class><specifier>public</specifier> class <name>PushGroupUpdateJob</name> <super><extends>extends <name>ContextJob</name></extends> <implements>implements <name>InjectableType</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PushGroupUpdateJob</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_SOURCE</name>   <init>= <expr><literal type="string">"source"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_GROUP_ID</name> <init>= <expr><literal type="string">"group_id"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation> <specifier>transient</specifier> <type><name>SignalServiceMessageSender</name></type> <name>messageSender</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>source</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>groupId</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>PushGroupUpdateJob</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>WorkerParameters</name></type> <name>workerParameters</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>workerParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PushGroupUpdateJob</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>JobParameters</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>withNetworkRequirement</name><argument_list>()</argument_list></call>
                                <operator>.</operator><call><name>withRetryDuration</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                <operator>.</operator><call><name>create</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>source</name></name>  <operator>=</operator> <name>source</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name>groupId</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SafeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>source</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_SOURCE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>groupId</name> <operator>=</operator> <call><name><name>GroupUtil</name><operator>.</operator><name>getDecodedId</name></name><argument_list>(<argument><expr><call><name><name>data</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>KEY_GROUP_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Data</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Data</name><operator>.</operator><name>Builder</name></name></type> <name>dataBuilder</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>dataBuilder</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name>KEY_SOURCE</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>KEY_GROUP_ID</name></expr></argument>, <argument><expr><call><name><name>GroupUtil</name><operator>.</operator><name>getEncodedId</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRun</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>UntrustedIdentityException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>GroupDatabase</name></type>           <name>groupDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>GroupRecord</name></argument>&gt;</argument_list></name></type>   <name>record</name>        <init>= <expr><call><name><name>groupDatabase</name><operator>.</operator><name>getGroup</name></name><argument_list>(<argument><expr><call><name><name>GroupUtil</name><operator>.</operator><name>getEncodedId</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SignalServiceAttachment</name></type> <name>avatar</name>        <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>record</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No information for group record info request: "</literal> <operator>+</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatar</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>avatar</name> <operator>=</operator> <call><name><name>SignalServiceAttachmentStream</name><operator>.</operator><name>newStreamBuilder</name></name><argument_list>()</argument_list></call>
                                            <operator>.</operator><call><name>withContentType</name><argument_list>(<argument><expr><literal type="string">"image/jpeg"</literal></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>withStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>withLength</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatar</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>members</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Address</name></type> <name>member</name> <range>: <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMembers</name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>members</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>member</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>SignalServiceGroup</name></type> <name>groupContext</name> <init>= <expr><call><name><name>SignalServiceGroup</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name><name>Type</name><operator>.</operator><name>UPDATE</name></name></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>withAvatar</name><argument_list>(<argument><expr><name>avatar</name></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>withId</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>withMembers</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>withName</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Address</name></type>   <name>groupAddress</name>   <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>GroupUtil</name><operator>.</operator><name>getEncodedId</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Recipient</name></type> <name>groupRecipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>groupAddress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SignalServiceDataMessage</name></type> <name>message</name> <init>= <expr><call><name><name>SignalServiceDataMessage</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                               <operator>.</operator><call><name>asGroupMessage</name><argument_list>(<argument><expr><name>groupContext</name></expr></argument>)</argument_list></call>
                                                               <operator>.</operator><call><name>withTimestamp</name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                               <operator>.</operator><call><name>withExpiration</name><argument_list>(<argument><expr><call><name><name>groupRecipient</name><operator>.</operator><name>getExpireMessages</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                               <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>messageSender</name><operator>.</operator><name>sendMessage</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SignalServiceAddress</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><call><name><name>UnidentifiedAccessUtil</name><operator>.</operator><name>getAccessFor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onShouldRetry</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>e</name> <operator>instanceof</operator> <name>PushNetworkException</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCanceled</name><parameter_list>()</parameter_list> <block>{

  }</block></function>
}</block></class>
</unit>
