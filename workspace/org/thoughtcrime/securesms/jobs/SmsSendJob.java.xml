<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\jobs\SmsSendJob.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>PhoneNumberUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>SmsManager</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>SafeData</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>requirements</name><operator>.</operator><name>NetworkOrServiceRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>requirements</name><operator>.</operator><name>ServiceRequirement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>NoSuchMessageException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>SmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>MessageNotifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name><operator>.</operator><name>SmsDeliveryListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>transport</name><operator>.</operator><name>RetryLaterException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>transport</name><operator>.</operator><name>UndeliverableMessageException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>NumberUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>JobParameters</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>

<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>androidx</name><operator>.</operator><name>work</name><operator>.</operator><name>WorkerParameters</name></name>;</import>

<class><specifier>public</specifier> class <name>SmsSendJob</name> <super><extends>extends <name>SendJob</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>serialVersionUID</name> <init>= <expr><operator>-</operator><literal type="number">5118520036244759718L</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>              <init>= <expr><call><name><name>SmsSendJob</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MAX_ATTEMPTS</name>     <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_MESSAGE_ID</name>   <init>= <expr><literal type="string">"message_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_RUN_ATTEMPT</name>  <init>= <expr><literal type="string">"run_attempt"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>messageId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>  <name>runAttempt</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SmsSendJob</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>WorkerParameters</name></type> <name>workerParameters</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>workerParameters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>SmsSendJob</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>SmsSendJob</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>runAttempt</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>constructParameters</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageId</name></name>  <operator>=</operator> <name>messageId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>runAttempt</name></name> <operator>=</operator> <name>runAttempt</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SafeData</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>messageId</name>  <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>runAttempt</name> <operator>=</operator> <call><name><name>data</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_RUN_ATTEMPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Data</name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Data</name><operator>.</operator><name>Builder</name></name></type> <name>dataBuilder</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>dataBuilder</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name>KEY_MESSAGE_ID</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>KEY_RUN_ATTEMPT</name></expr></argument>, <argument><expr><name>runAttempt</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAdded</name><parameter_list>()</parameter_list> <block>{
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSend</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoSuchMessageException</name></expr></argument>, <argument><expr><name>RequirementNotMetException</name></expr></argument>, <argument><expr><name>TooManyRetriesException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>requirementsMet</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No service. Retrying."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>RequirementNotMetException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></then></if>

    <if>if <condition>(<expr><name>runAttempt</name> <operator>&gt;=</operator> <name>MAX_ATTEMPTS</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Hit the retry limit. Failing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>TooManyRetriesException</name><argument_list>()</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>SmsDatabase</name></type>      <name>database</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SmsMessageRecord</name></type> <name>record</name>   <init>= <expr><call><name><name>database</name><operator>.</operator><name>getMessage</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>record</name><operator>.</operator><name>isPending</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>record</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Message "</literal> <operator>+</operator> <name>messageId</name> <operator>+</operator> <literal type="string">" was already sent. Ignoring."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <try>try <block>{
      <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Sending message: "</literal> <operator>+</operator> <name>messageId</name> <operator>+</operator> <literal type="string">" (attempt "</literal> <operator>+</operator> <name>runAttempt</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>deliver</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Sent message: "</literal> <operator>+</operator> <name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UndeliverableMessageException</name></type> <name>ude</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>markAsSentFailed</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>notifyMessageDeliveryFailed</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onShouldRetry</name><parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCanceled</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCanceled() messageId: "</literal> <operator>+</operator> <name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name></type>      <name>threadId</name>  <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipientForThreadId</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>markAsSentFailed</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>threadId</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>notifyMessageDeliveryFailed</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>requirementsMet</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isWifiSmsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>NetworkOrServiceRequirement</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>new</operator> <call><name>ServiceRequirement</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>deliver</name><parameter_list>(<parameter><decl><type><name>SmsMessageRecord</name></type> <name>message</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>UndeliverableMessageException</name></expr></argument></throws>
  <block>{
    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isSecure</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>message</name><operator>.</operator><name>isKeyExchange</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>message</name><operator>.</operator><name>isEndSession</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>UndeliverableMessageException</name><argument_list>(<argument><expr><literal type="string">"Trying to send a secure SMS?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>String</name></type> <name>recipient</name> <init>= <expr><call><name><name>message</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// See issue #1516 for bug report, and discussion on commits related to #4833 for problems</comment>
    <comment type="line">// related to the original fix to #1516. This still may not be a correct fix if networks allow</comment>
    <comment type="line">// SMS/MMS sending to alphanumeric recipients other than email addresses, but should also</comment>
    <comment type="line">// help to fix issue #3099.</comment>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>NumberUtil</name><operator>.</operator><name>isValidEmail</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>recipient</name> <operator>=</operator> <call><name><name>PhoneNumberUtils</name><operator>.</operator><name>stripSeparators</name></name><argument_list>(<argument><expr><call><name><name>PhoneNumberUtils</name><operator>.</operator><name>convertKeypadLettersToDigits</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>NumberUtil</name><operator>.</operator><name>isValidSmsOrEmail</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>UndeliverableMessageException</name><argument_list>(<argument><expr><literal type="string">"Not a valid SMS destination! "</literal> <operator>+</operator> <name>recipient</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>messages</name>                <init>= <expr><call><name><name>SmsManager</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>divideMessage</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>sentIntents</name>      <init>= <expr><call><name>constructSentIntents</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messages</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>deliveredIntents</name> <init>= <expr><call><name>constructDeliveredIntents</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messages</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// NOTE 11/04/14 -- There's apparently a bug where for some unknown recipients</comment>
    <comment type="line">// and messages, this will throw an NPE.  We have no idea why, so we're just</comment>
    <comment type="line">// catching it and marking the message as a failure.  That way at least it doesn't</comment>
    <comment type="line">// repeatedly crash every time you start the app.</comment>
    <try>try <block>{
      <expr_stmt><expr><call><name>getSmsManagerFor</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendMultipartTextMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>messages</name></expr></argument>, <argument><expr><name>sentIntents</name></expr></argument>, <argument><expr><name>deliveredIntents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> | <type><name>IllegalArgumentException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>npe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Recipient: "</literal> <operator>+</operator> <name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>log</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Message Parts: "</literal> <operator>+</operator> <call><name><name>messages</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <try>try <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>messages</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <expr_stmt><expr><call><name>getSmsManagerFor</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendTextMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>messages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                        <argument><expr><call><name><name>sentIntents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                        <argument><expr><ternary><condition><expr><name>deliveredIntents</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>deliveredIntents</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> | <type><name>IllegalArgumentException</name></type> <name>npe2</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>npe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>UndeliverableMessageException</name><argument_list>(<argument><expr><name>npe2</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>warn</name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>UndeliverableMessageException</name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>constructSentIntents</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>,
                                                        <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>messages</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>secure</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>sentIntents</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>messages</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>ignored</name> <range>: <expr><name>messages</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>sentIntents</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                 <argument><expr><call><name>constructSentIntent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>secure</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>sentIntents</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>constructDeliveredIntents</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>messages</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isSmsDeliveryReportsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>PendingIntent</name></argument>&gt;</argument_list></name></type> <name>deliveredIntents</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>messages</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>ignored</name> <range>: <expr><name>messages</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>deliveredIntents</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                      <argument><expr><call><name>constructDeliveredIntent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,
                                                      <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>deliveredIntents</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>constructSentIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>,
                                       <parameter><decl><type><name>boolean</name></type> <name>upgraded</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>push</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>pending</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>SmsDeliveryListener</name><operator>.</operator><name>SENT_SMS_ACTION</name></name></expr></argument>,
                                <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal> <operator>+</operator> <name>messageId</name> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SmsDeliveryListener</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"message_id"</literal></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"run_attempt"</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>runAttempt</name></expr></argument>, <argument><expr><call><name>getRunAttemptCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"upgraded"</literal></expr></argument>, <argument><expr><name>upgraded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"push"</literal></expr></argument>, <argument><expr><name>push</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>pending</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Intent</name></type> <name>constructDeliveredIntent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>pending</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>SmsDeliveryListener</name><operator>.</operator><name>DELIVERED_SMS_ACTION</name></name></expr></argument>,
                                <argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"custom://"</literal> <operator>+</operator> <name>messageId</name> <operator>+</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>SmsDeliveryListener</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pending</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><literal type="string">"message_id"</literal></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>pending</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SmsManager</name></type> <name>getSmsManagerFor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>subscriptionId</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">22</literal> <operator>&amp;&amp;</operator> <name>subscriptionId</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>SmsManager</name><operator>.</operator><name>getSmsManagerForSubscriptionId</name></name><argument_list>(<argument><expr><name>subscriptionId</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>SmsManager</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>JobParameters</name></type> <name>constructParameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>JobParameters</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><call><name><name>JobParameters</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                 <operator>.</operator><call><name>withRetryCount</name><argument_list>(<argument><expr><name>MAX_ATTEMPTS</name></expr></argument>)</argument_list></call>
                                                 <operator>.</operator><call><name>withGroupId</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>TooManyRetriesException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{ }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>RequirementNotMetException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{ }</block></class>

}</block></class>
</unit>
