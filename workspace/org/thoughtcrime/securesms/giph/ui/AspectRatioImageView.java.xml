<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\giph\ui\AspectRatioImageView.java"><comment type="block">/*
 * Copyright (C) 2015 Twitter, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>giph</name><operator>.</operator><name>ui</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>


<comment type="block" format="javadoc">/**
 * AspectRatioImageView maintains an aspect ratio by adjusting the width or height dimension. The
 * aspect ratio (width to height ratio) and adjustment dimension can be configured.
 */</comment>
<class><specifier>public</specifier> class <name>AspectRatioImageView</name> <super><extends>extends <name>ImageView</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>DEFAULT_ASPECT_RATIO</name> <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_ADJUST_DIMENSION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// defined by attrs.xml enum</comment>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADJUST_DIMENSION_HEIGHT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ADJUST_DIMENSION_WIDTH</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>aspectRatio</name></decl>;</decl_stmt>         <comment type="line">// width to height ratio</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>dimensionToAdjust</name></decl>;</decl_stmt>      <comment type="line">// ADJUST_DIMENSION_HEIGHT or ADJUST_DIMENSION_WIDTH</comment>

  <constructor><specifier>public</specifier> <name>AspectRatioImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>AspectRatioImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    final TypedArray a = context.obtainStyledAttributes(attrs,</comment>
<comment type="line">//                                                        R.styleable.tw__AspectRatioImageView);</comment>
<comment type="line">//    try {</comment>
<comment type="line">//      aspectRatio = a.getFloat(R.styleable.tw__AspectRatioImageView_tw__image_aspect_ratio,</comment>
<comment type="line">//                               DEFAULT_ASPECT_RATIO);</comment>
<comment type="line">//      dimensionToAdjust</comment>
<comment type="line">//          = a.getInt(R.styleable.tw__AspectRatioImageView_tw__image_dimension_to_adjust,</comment>
<comment type="line">//                     DEFAULT_ADJUST_DIMENSION);</comment>
<comment type="line">//    } finally {</comment>
<comment type="line">//      a.recycle();</comment>
<comment type="line">//    }</comment>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>double</name></type> <name>getAspectRatio</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>aspectRatio</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getDimensionToAdjust</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>dimensionToAdjust</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the aspect ratio that should be respected during measurement.
   *
   * @param aspectRatio desired width to height ratio
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setAspectRatio</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>aspectRatio</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>aspectRatio</name></name> <operator>=</operator> <name>aspectRatio</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Resets the size to 0.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>resetSize</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getMeasuredHeight</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>measure</name><argument_list>(<argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>layout</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>getMeasuredHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>dimensionToAdjust</name> <operator>==</operator> <name>ADJUST_DIMENSION_HEIGHT</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>calculateHeight</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>aspectRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>calculateWidth</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>aspectRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the height that will satisfy the width to height aspect ratio, keeping the given
   * width fixed.
   */</comment>
  <function><type><name>int</name></type> <name>calculateHeight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ratio</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>ratio</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>width</name> <operator>/</operator> <name>ratio</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the width that will satisfy the width to height aspect ratio, keeping the given
   * height fixed.
   */</comment>
  <function><type><name>int</name></type> <name>calculateWidth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>ratio</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>round</name></name><argument_list>(<argument><expr><name>height</name> <operator>*</operator> <name>ratio</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class></unit>
