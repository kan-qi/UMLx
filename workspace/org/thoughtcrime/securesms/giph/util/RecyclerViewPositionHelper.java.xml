<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\giph\util\RecyclerViewPositionHelper.java"><comment type="line">// From https://gist.github.com/mipreamble/b6d4b3d65b0b4775a22e#file-recyclerviewpositionhelper-java</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>giph</name><operator>.</operator><name>util</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>OrientationHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<class><specifier>public</specifier> class <name>RecyclerViewPositionHelper</name> <block>{

  <decl_stmt><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>recyclerView</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>LayoutManager</name></name></type> <name>layoutManager</name></decl>;</decl_stmt>

  <constructor><name>RecyclerViewPositionHelper</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recyclerView</name></name> <operator>=</operator> <name>recyclerView</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>layoutManager</name></name> <operator>=</operator> <call><name><name>recyclerView</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>RecyclerViewPositionHelper</name></type> <name>createHelper</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>recyclerView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>(<argument><expr><literal type="string">"Recycler View is null"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <return>return <expr><operator>new</operator> <call><name>RecyclerViewPositionHelper</name><argument_list>(<argument><expr><name>recyclerView</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the adapter item count.
   *
   * @return The total number on items in a layout manager
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>layoutManager</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>layoutManager</name><operator>.</operator><name>getItemCount</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the adapter position of the first visible view. This position does not include
   * adapter changes that were dispatched after the last layout pass.
   *
   * @return The adapter position of the first visible item or {@link RecyclerView#NO_POSITION} if
   * there aren't any visible items.
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>findFirstVisibleItemPosition</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name>findOneVisibleChild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>layoutManager</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>child</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr> </then><else>: <expr><call><name><name>recyclerView</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the adapter position of the first fully visible view. This position does not include
   * adapter changes that were dispatched after the last layout pass.
   *
   * @return The adapter position of the first fully visible item or
   * {@link RecyclerView#NO_POSITION} if there aren't any visible items.
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>findFirstCompletelyVisibleItemPosition</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name>findOneVisibleChild</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>layoutManager</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>child</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr> </then><else>: <expr><call><name><name>recyclerView</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the adapter position of the last visible view. This position does not include
   * adapter changes that were dispatched after the last layout pass.
   *
   * @return The adapter position of the last visible view or {@link RecyclerView#NO_POSITION} if
   * there aren't any visible items
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>findLastVisibleItemPosition</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name>findOneVisibleChild</name><argument_list>(<argument><expr><call><name><name>layoutManager</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>child</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr> </then><else>: <expr><call><name><name>recyclerView</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the adapter position of the last fully visible view. This position does not include
   * adapter changes that were dispatched after the last layout pass.
   *
   * @return The adapter position of the last fully visible view or
   * {@link RecyclerView#NO_POSITION} if there aren't any visible items.
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>findLastCompletelyVisibleItemPosition</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name>findOneVisibleChild</name><argument_list>(<argument><expr><call><name><name>layoutManager</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>child</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr> </then><else>: <expr><call><name><name>recyclerView</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><type><name>View</name></type> <name>findOneVisibleChild</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fromIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>toIndex</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>completelyVisible</name></decl></parameter>,
                           <parameter><decl><type><name>boolean</name></type> <name>acceptPartiallyVisible</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>OrientationHelper</name></type> <name>helper</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>layoutManager</name><operator>.</operator><name>canScrollVertically</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>helper</name> <operator>=</operator> <call><name><name>OrientationHelper</name><operator>.</operator><name>createVerticalHelper</name></name><argument_list>(<argument><expr><name>layoutManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>helper</name> <operator>=</operator> <call><name><name>OrientationHelper</name><operator>.</operator><name>createHorizontalHelper</name></name><argument_list>(<argument><expr><name>layoutManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>start</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>getStartAfterPadding</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>end</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>getEndAfterPadding</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>next</name> <init>= <expr><ternary><condition><expr><name>toIndex</name> <operator>&gt;</operator> <name>fromIndex</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type> <name>partiallyVisible</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>fromIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>toIndex</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>next</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>layoutManager</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childStart</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>getDecoratedStart</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childEnd</name> <init>= <expr><call><name><name>helper</name><operator>.</operator><name>getDecoratedEnd</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name><name>childStart</name> <argument_list type="generic">&lt; <argument><name>end</name> <operator>&amp;&amp;</operator> <name>childEnd</name></argument> &gt;</argument_list></name> <name>start</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>completelyVisible</name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>childStart</name> <operator>&gt;=</operator> <name>start</name> <operator>&amp;&amp;</operator> <name>childEnd</name> <operator>&lt;=</operator> <name>end</name></expr>)</condition><then> <block>{
            <return>return <expr><name>child</name></expr>;</return>
          }</block></then> <elseif>else <if>if <condition>(<expr><name>acceptPartiallyVisible</name> <operator>&amp;&amp;</operator> <name>partiallyVisible</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partiallyVisible</name> <operator>=</operator> <name>child</name></expr>;</expr_stmt>
          }</block></then></if></elseif></if>
        }</block></then> <else>else <block>{
          <return>return <expr><name>child</name></expr>;</return>
        }</block></else></if>
      }</block></then></if>
    }</block></for>
    <return>return <expr><name>partiallyVisible</name></expr>;</return>
  }</block></function>
}</block></class></unit>
