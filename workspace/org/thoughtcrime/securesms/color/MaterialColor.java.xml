<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\color\MaterialColor.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>color</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ColorInt</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ColorRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ThemeUtil</name><operator>.</operator><name>isDarkTheme</name></name>;</import>

<enum><specifier>public</specifier> enum <name>MaterialColor</name> <block>{
  <decl><name>CRIMSON</name>    <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_crimson</name></name></expr></argument>,     <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_crimson_tint</name></name></expr></argument>,     <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_crimson_shade</name></name></expr></argument>,     <argument><expr><literal type="string">"red"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>VERMILLION</name> <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_vermillion</name></name></expr></argument>,  <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_vermillion_tint</name></name></expr></argument>,  <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_vermillion_shade</name></name></expr></argument>,  <argument><expr><literal type="string">"orange"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>BURLAP</name>     <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_burlap</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_burlap_tint</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_burlap_shade</name></name></expr></argument>,      <argument><expr><literal type="string">"brown"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>FOREST</name>     <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_forest</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_forest_tint</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_forest_shade</name></name></expr></argument>,      <argument><expr><literal type="string">"green"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>WINTERGREEN</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_wintergreen</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_wintergreen_tint</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_wintergreen_shade</name></name></expr></argument>, <argument><expr><literal type="string">"light_green"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>TEAL</name>       <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_teal</name></name></expr></argument>,        <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_teal_tint</name></name></expr></argument>,        <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_teal_shade</name></name></expr></argument>,        <argument><expr><literal type="string">"teal"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>BLUE</name>       <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_blue</name></name></expr></argument>,        <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_blue_tint</name></name></expr></argument>,        <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_blue_shade</name></name></expr></argument>,        <argument><expr><literal type="string">"blue"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>INDIGO</name>     <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_indigo</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_indigo_tint</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_indigo_shade</name></name></expr></argument>,      <argument><expr><literal type="string">"indigo"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>VIOLET</name>     <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_violet</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_violet_tint</name></name></expr></argument>,      <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_violet_shade</name></name></expr></argument>,      <argument><expr><literal type="string">"purple"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>PLUM</name>       <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_plumb</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_plumb_tint</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_plumb_shade</name></name></expr></argument>,       <argument><expr><literal type="string">"pink"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>TAUPE</name>      <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_taupe</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_taupe_tint</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_taupe_shade</name></name></expr></argument>,       <argument><expr><literal type="string">"blue_grey"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>STEEL</name>      <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_steel</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_steel_tint</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_steel_shade</name></name></expr></argument>,       <argument><expr><literal type="string">"grey"</literal></expr></argument>)</argument_list></decl>,
  <decl><name>GROUP</name>      <argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_group</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_group_tint</name></name></expr></argument>,       <argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>conversation_group_shade</name></name></expr></argument>,       <argument><expr><literal type="string">"blue"</literal></expr></argument>)</argument_list></decl>;

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>MaterialColor</name></argument>&gt;</argument_list></name></type> <name>COLOR_MATCHES</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>MaterialColor</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"red"</literal></expr></argument>,         <argument><expr><name>CRIMSON</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"deep_orange"</literal></expr></argument>, <argument><expr><name>CRIMSON</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"orange"</literal></expr></argument>,      <argument><expr><name>VERMILLION</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"amber"</literal></expr></argument>,       <argument><expr><name>VERMILLION</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"brown"</literal></expr></argument>,       <argument><expr><name>BURLAP</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"yellow"</literal></expr></argument>,      <argument><expr><name>BURLAP</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"pink"</literal></expr></argument>,        <argument><expr><name>PLUM</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"purple"</literal></expr></argument>,      <argument><expr><name>VIOLET</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"deep_purple"</literal></expr></argument>, <argument><expr><name>VIOLET</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"indigo"</literal></expr></argument>,      <argument><expr><name>INDIGO</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"blue"</literal></expr></argument>,        <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"light_blue"</literal></expr></argument>,  <argument><expr><name>BLUE</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"cyan"</literal></expr></argument>,        <argument><expr><name>TEAL</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"teal"</literal></expr></argument>,        <argument><expr><name>TEAL</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"green"</literal></expr></argument>,       <argument><expr><name>FOREST</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"light_green"</literal></expr></argument>, <argument><expr><name>WINTERGREEN</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"lime"</literal></expr></argument>,        <argument><expr><name>WINTERGREEN</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"blue_grey"</literal></expr></argument>,   <argument><expr><name>TAUPE</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"grey"</literal></expr></argument>,        <argument><expr><name>STEEL</name></expr></argument>)</argument_list></call></expr>;
    <expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"group_color"</literal></expr></argument>, <argument><expr><name>GROUP</name></expr></argument>)</argument_list></call></expr>;
  }</block>}</block></class></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>mainColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>tintColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>shadeColor</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>serialized</name></decl>;</decl_stmt>


  <constructor><name>MaterialColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>mainColor</name></decl></parameter>, <parameter><decl><type><annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>tintColor</name></decl></parameter>, <parameter><decl><type><annotation>@<name>ColorRes</name></annotation> <name>int</name></type> <name>shadeColor</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>serialized</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mainColor</name></name>  <operator>=</operator> <name>mainColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>tintColor</name></name>  <operator>=</operator> <name>tintColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shadeColor</name></name> <operator>=</operator> <name>shadeColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>serialized</name></name> <operator>=</operator> <name>serialized</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>toConversationColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>mainColor</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>toAvatarColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isDarkTheme</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>shadeColor</name></expr> </then><else>: <expr><name>mainColor</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>toActionBarColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>mainColor</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>toStatusBarColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>shadeColor</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>ColorRes</name></annotation> <type><name>int</name></type> <name>toQuoteBarColorResource</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>outgoing</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>outgoing</name></expr>)</condition><then> <block>{
      <return>return <expr><ternary><condition><expr><call><name>isDarkTheme</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>tintColor</name></expr> </then><else>: <expr><name>shadeColor</name></expr></else></ternary></expr> ;</return>
    }</block></then></if>
    <return>return <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>core_white</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>toQuoteBackgroundColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>outgoing</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>outgoing</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>toConversationColor</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><ternary><condition><expr><call><name>isDarkTheme</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">0.2</literal> <operator>*</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">0.4</literal> <operator>*</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>red</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>green</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>blue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isDarkTheme</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>transparent_black_70</name></name></expr>
                                                                </then><else>: <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>transparent_white_aa</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>ColorInt</name></annotation> <type><name>int</name></type> <name>toQuoteFooterColor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>outgoing</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>outgoing</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name>toConversationColor</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>alpha</name> <init>= <expr><ternary><condition><expr><call><name>isDarkTheme</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">0.4</literal> <operator>*</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">0.6</literal> <operator>*</operator> <literal type="number">255</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><name>alpha</name></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>red</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>green</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>blue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>isDarkTheme</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>transparent_black_90</name></name></expr>
                                                                </then><else>: <expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>transparent_white_bb</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>represents</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colorValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>mainColor</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>colorValue</name> <operator>||</operator>
           <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>tintColor</name></expr></argument>)</argument_list></call>  <operator>==</operator> <name>colorValue</name> <operator>||</operator>
           <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name>shadeColor</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>colorValue</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>serialized</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MaterialColor</name></type> <name>fromSerialized</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>serialized</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>UnknownColorException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><call><name><name>COLOR_MATCHES</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>COLOR_MATCHES</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <throw>throw <expr><operator>new</operator> <call><name>UnknownColorException</name><argument_list>(<argument><expr><literal type="string">"Unknown color: "</literal> <operator>+</operator> <name>serialized</name></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>UnknownColorException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>UnknownColorException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>
}</block></enum>
</unit>
