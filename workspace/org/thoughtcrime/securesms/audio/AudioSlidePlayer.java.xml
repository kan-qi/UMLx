<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\audio\AudioSlidePlayer.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>audio</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Sensor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>SensorEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>SensorEventListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>SensorManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Message</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>C</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>DefaultLoadControl</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>DefaultRenderersFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>ExoPlaybackException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>ExoPlayer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>ExoPlayerFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>LoadControl</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>Player</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>SimpleExoPlayer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>audio</name><operator>.</operator><name>AudioAttributes</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>extractor</name><operator>.</operator><name>DefaultExtractorsFactory</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>source</name><operator>.</operator><name>ExtractorMediaSource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>source</name><operator>.</operator><name>MediaSource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>trackselection</name><operator>.</operator><name>DefaultTrackSelector</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>exoplayer2</name><operator>.</operator><name>upstream</name><operator>.</operator><name>DefaultDataSourceFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentServer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>AudioSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>

<class><specifier>public</specifier> class <name>AudioSlidePlayer</name> <super><implements>implements <name>SensorEventListener</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>AudioSlidePlayer</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>AudioSlidePlayer</name></argument>&gt;</argument_list></name></type> <name>playing</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>Context</name></type>           <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>AudioSlide</name></type>        <name>slide</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>Handler</name></type>           <name>progressEventHandler</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>AudioManager</name></type>      <name>audioManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>SensorManager</name></type>     <name>sensorManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>Sensor</name></type>            <name>proximitySensor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>WakeLock</name></type>          <name>wakeLock</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Listener</name></argument>&gt;</argument_list></name></type> <name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>SimpleExoPlayer</name></type>         <name>mediaPlayer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>AttachmentServer</name></type>        <name>audioAttachmentServer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><name>long</name></type>                    <name>startTime</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <type><name>AudioSlidePlayer</name></type> <name>createFor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                        <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AudioSlide</name></type> <name>slide</name></decl></parameter>,
                                                        <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><call><name><name>playing</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAudioSlide</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setListener</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>new</operator> <call><name>AudioSlidePlayer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>, <argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <constructor><specifier>private</specifier> <name>AudioSlidePlayer</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AudioSlide</name></type> <name>slide</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>              <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slide</name></name>                <operator>=</operator> <name>slide</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name>             <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressEventHandler</name></name> <operator>=</operator> <operator>new</operator> <call><name>ProgressEventHandler</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioManager</name></name>         <operator>=</operator> <operator>(</operator><name>AudioManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>AUDIO_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sensorManager</name></name>        <operator>=</operator> <operator>(</operator><name>SensorManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>SENSOR_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>proximitySensor</name></name>      <operator>=</operator> <call><name><name>sensorManager</name><operator>.</operator><name>getDefaultSensor</name></name><argument_list>(<argument><expr><name><name>Sensor</name><operator>.</operator><name>TYPE_PROXIMITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">21</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wakeLock</name></name> <operator>=</operator> <call><name><name>ServiceUtil</name><operator>.</operator><name>getPowerManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>newWakeLock</name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>PROXIMITY_SCREEN_OFF_WAKE_LOCK</name></name></expr></argument>, <argument><expr><name>TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wakeLock</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>play</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>progress</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name>play</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>play</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>earpiece</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>mediaPlayer</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <decl_stmt><decl><type><name>LoadControl</name></type> <name>loadControl</name> <init>= <expr><operator>new</operator> <call><name><name>DefaultLoadControl</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBufferDurationsMs</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createDefaultLoadControl</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaPlayer</name></name>           <operator>=</operator> <call><name><name>ExoPlayerFactory</name><operator>.</operator><name>newSimpleInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DefaultRenderersFactory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>DefaultTrackSelector</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>loadControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioAttachmentServer</name></name> <operator>=</operator> <operator>new</operator> <call><name>AttachmentServer</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startTime</name></name>             <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>audioAttachmentServer</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>mediaPlayer</name><operator>.</operator><name>prepare</name></name><argument_list>(<argument><expr><call><name>createMediaSource</name><argument_list>(<argument><expr><call><name><name>audioAttachmentServer</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaPlayer</name><operator>.</operator><name>setPlayWhenReady</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaPlayer</name><operator>.</operator><name>setAudioAttributes</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>AudioAttributes</name><operator>.</operator><name>Builder</name></name><argument_list>()</argument_list></call>
                                                      <operator>.</operator><call><name>setContentType</name><argument_list>(<argument><expr><ternary><condition><expr><name>earpiece</name></expr> ?</condition><then> <expr><name><name>C</name><operator>.</operator><name>CONTENT_TYPE_SPEECH</name></name></expr> </then><else>: <expr><name><name>C</name><operator>.</operator><name>CONTENT_TYPE_MUSIC</name></name></expr></else></ternary></expr></argument>)</argument_list></call>
                                                      <operator>.</operator><call><name>setUsage</name><argument_list>(<argument><expr><ternary><condition><expr><name>earpiece</name></expr> ?</condition><then> <expr><name><name>C</name><operator>.</operator><name>USAGE_VOICE_COMMUNICATION</name></name></expr> </then><else>: <expr><name><name>C</name><operator>.</operator><name>USAGE_MEDIA</name></name></expr></else></ternary></expr></argument>)</argument_list></call>
                                                      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaPlayer</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Player</name><operator>.</operator><name>EventListener</name></name></super><argument_list>()</argument_list> <block>{

      <decl_stmt><decl><type><name>boolean</name></type> <name>started</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onPlayerStateChanged</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>playWhenReady</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>playbackState</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onPlayerStateChanged("</literal> <operator>+</operator> <name>playWhenReady</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>playbackState</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>playbackState</name></expr>)</condition> <block>{
          <case>case <expr><name><name>Player</name><operator>.</operator><name>STATE_READY</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onPrepared() "</literal> <operator>+</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getBufferedPercentage</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"% buffered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{
              <if>if <condition>(<expr><name>mediaPlayer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

              <if>if <condition>(<expr><name>started</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Already started. Ignoring."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
              }</block></then></if>

              <expr_stmt><expr><name>started</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

              <if>if <condition>(<expr><name>progress</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>mediaPlayer</name><operator>.</operator><name>seekTo</name></name><argument_list>(<argument><expr><call>(<name>long</name>) <argument_list>(<argument><expr><call><name><name>mediaPlayer</name><operator>.</operator><name>getDuration</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>progress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>

              <expr_stmt><expr><call><name><name>sensorManager</name><operator>.</operator><name>registerListener</name></name><argument_list>(<argument><expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>proximitySensor</name></expr></argument>, <argument><expr><name><name>SensorManager</name><operator>.</operator><name>SENSOR_DELAY_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><call><name>setPlaying</name><argument_list>(<argument><expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></synchronized>

            <expr_stmt><expr><call><name>notifyOnStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressEventHandler</name><operator>.</operator><name>sendEmptyMessage</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

          <case>case <expr><name><name>Player</name><operator>.</operator><name>STATE_ENDED</name></name></expr>:</case>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onComplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <synchronized>synchronized <init>(<expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{
              <expr_stmt><expr><name>mediaPlayer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

              <if>if <condition>(<expr><name>audioAttachmentServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>audioAttachmentServer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>audioAttachmentServer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
              }</block></then></if>

              <expr_stmt><expr><call><name><name>sensorManager</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <if>if <condition>(<expr><name>wakeLock</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>wakeLock</name><operator>.</operator><name>isHeld</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
            }</block></synchronized>

            <expr_stmt><expr><call><name>notifyOnStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>progressEventHandler</name><operator>.</operator><name>removeMessages</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></switch>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onPlayerError</name><parameter_list>(<parameter><decl><type><name>ExoPlaybackException</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"MediaPlayer Error: "</literal> <operator>+</operator> <name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AudioSlidePlayer_error_playing_audio</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <synchronized>synchronized <init>(<expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr>)</init> <block>{
          <expr_stmt><expr><name>mediaPlayer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>audioAttachmentServer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>audioAttachmentServer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>audioAttachmentServer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
          }</block></then></if>

          <expr_stmt><expr><call><name><name>sensorManager</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>wakeLock</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>wakeLock</name><operator>.</operator><name>isHeld</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>RELEASE_FLAG_WAIT_FOR_NO_PROXIMITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></synchronized>

        <expr_stmt><expr><call><name>notifyOnStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressEventHandler</name><operator>.</operator><name>removeMessages</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>MediaSource</name></type> <name>createMediaSource</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>ExtractorMediaSource</name><operator>.</operator><name>Factory</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultDataSourceFactory</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>BuildConfig</name><operator>.</operator><name>USER_AGENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>setExtractorsFactory</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DefaultExtractorsFactory</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConstantBitrateSeekingEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                   <operator>.</operator><call><name>createMediaSource</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Stop called!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>removePlaying</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>mediaPlayer</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mediaPlayer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mediaPlayer</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>audioAttachmentServer</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>audioAttachmentServer</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>sensorManager</name><operator>.</operator><name>unregisterListener</name></name><argument_list>(<argument><expr><name><name>AudioSlidePlayer</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaPlayer</name></name>           <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioAttachmentServer</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>stopAll</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>playing</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>mediaPlayer</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>mediaPlayer</name><operator>.</operator><name>getPlaybackState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Player</name><operator>.</operator><name>STATE_READY</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>notifyOnStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>AudioSlide</name></type> <name>getAudioSlide</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>slide</name></expr>;</return>
  }</block></function>


  <function><specifier>private</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getProgress</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>mediaPlayer</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getCurrentPosition</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getDuration</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0D</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getCurrentPosition</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getDuration</name></name><argument_list>()</argument_list></call></expr></argument>,
                        <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getCurrentPosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyOnStart</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyOnStop</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyOnProgress</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>getListener</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onProgress</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><name>millis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Listener</name></type> <name>getListener</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Listener</name></type> <name>listener</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>listener</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>listener</name></expr>;</return></block></then>
    <else>else                  <block type="pseudo"><return>return <expr><operator>new</operator> <class><super><name>Listener</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{}</block></function>
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list> <block>{}</block></function>
    }</block></class></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPlaying</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AudioSlidePlayer</name></type> <name>player</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>playing</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>player</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyOnStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>playing</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removePlaying</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AudioSlidePlayer</name></type> <name>player</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>playing</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>playing</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>player</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>playing</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSensorChanged</name><parameter_list>(<parameter><decl><type><name>SensorEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>sensor</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Sensor</name><operator>.</operator><name>TYPE_PROXIMITY</name></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><name>mediaPlayer</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mediaPlayer</name><operator>.</operator><name>getPlaybackState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>Player</name><operator>.</operator><name>STATE_READY</name></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>streamType</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">5f</literal> <operator>&amp;&amp;</operator> <name><name>event</name><operator>.</operator><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <call><name><name>proximitySensor</name><operator>.</operator><name>getMaximumRange</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>streamType</name> <operator>=</operator> <name><name>AudioManager</name><operator>.</operator><name>STREAM_VOICE_CALL</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>streamType</name> <operator>=</operator> <name><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>streamType</name> <operator>==</operator> <name><name>AudioManager</name><operator>.</operator><name>STREAM_VOICE_CALL</name></name> <operator>&amp;&amp;</operator>
        <call><name><name>mediaPlayer</name><operator>.</operator><name>getAudioStreamType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>streamType</name> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isWiredHeadsetOn</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>double</name></type> <name>position</name> <init>= <expr><call><name><name>mediaPlayer</name><operator>.</operator><name>getCurrentPosition</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>duration</name> <init>= <expr><call><name><name>mediaPlayer</name><operator>.</operator><name>getDuration</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>progress</name> <init>= <expr><name>position</name> <operator>/</operator> <name>duration</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>wakeLock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{
        <expr_stmt><expr><call><name>play</name><argument_list>(<argument><expr><name>progress</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>streamType</name> <operator>==</operator> <name><name>AudioManager</name><operator>.</operator><name>STREAM_MUSIC</name></name> <operator>&amp;&amp;</operator>
               <call><name><name>mediaPlayer</name><operator>.</operator><name>getAudioStreamType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>streamType</name> <operator>&amp;&amp;</operator>
               <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name> <operator>&gt;</operator> <literal type="number">500</literal></expr>)</condition><then>
    <block>{
      <if>if <condition>(<expr><name>wakeLock</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name>stop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyOnStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAccuracyChanged</name><parameter_list>(<parameter><decl><type><name>Sensor</name></type> <name>sensor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>accuracy</name></decl></parameter>)</parameter_list> <block>{

  }</block></function>

  <interface><specifier>public</specifier> interface <name>Listener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onProgress</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>progress</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>millis</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ProgressEventHandler</name> <super><extends>extends <name>Handler</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>AudioSlidePlayer</name></argument>&gt;</argument_list></name></type> <name>playerReference</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ProgressEventHandler</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AudioSlidePlayer</name></type> <name>player</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>playerReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>handleMessage</name><parameter_list>(<parameter><decl><type><name>Message</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>AudioSlidePlayer</name></type> <name>player</name> <init>= <expr><call><name><name>playerReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>player</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>player</name><operator>.</operator><name>mediaPlayer</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name>isPlayerActive</name><argument_list>(<argument><expr><name><name>player</name><operator>.</operator><name>mediaPlayer</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Double</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>progress</name> <init>= <expr><call><name><name>player</name><operator>.</operator><name>getProgress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>player</name><operator>.</operator><name>notifyOnProgress</name></name><argument_list>(<argument><expr><name><name>progress</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sendEmptyMessageDelayed</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isPlayerActive</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SimpleExoPlayer</name></type> <name>player</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>player</name><operator>.</operator><name>getPlaybackState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Player</name><operator>.</operator><name>STATE_READY</name></name> <operator>||</operator> <call><name><name>player</name><operator>.</operator><name>getPlaybackState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>Player</name><operator>.</operator><name>STATE_BUFFERING</name></name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
