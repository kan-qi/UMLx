<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\service\DirectShareService.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ComponentName</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Icon</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>service</name><operator>.</operator><name>chooser</name><operator>.</operator><name>ChooserTarget</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>service</name><operator>.</operator><name>chooser</name><operator>.</operator><name>ChooserTargetService</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RequiresApi</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ShareActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ThreadDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>ThreadRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<class><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name>api</name> <operator>=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>DirectShareService</name> <super><extends>extends <name>ChooserTargetService</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>DirectShareService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ChooserTarget</name></argument>&gt;</argument_list></name></type> <name>onGetChooserTargets</name><parameter_list>(<parameter><decl><type><name>ComponentName</name></type> <name>targetActivityName</name></decl></parameter>,
                                                 <parameter><decl><type><name>IntentFilter</name></type> <name>matchedFilter</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>ChooserTarget</name></argument>&gt;</argument_list></name></type> <name>results</name>        <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ComponentName</name></type>       <name>componentName</name>  <init>= <expr><operator>new</operator> <call><name>ComponentName</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ShareActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ThreadDatabase</name></type>      <name>threadDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>              <name>cursor</name>         <init>= <expr><call><name><name>threadDatabase</name><operator>.</operator><name>getDirectShareList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>ThreadDatabase</name><operator>.</operator><name>Reader</name></name></type> <name>reader</name> <init>= <expr><call><name><name>threadDatabase</name><operator>.</operator><name>readerFor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ThreadRecord</name></type> <name>record</name></decl>;</decl_stmt>

      <while>while <condition>(<expr><operator>(</operator><name>record</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>results</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type>    <name>name</name>      <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>toShortString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><type><name>Bitmap</name></type> <name>avatar</name></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>recipient</name><operator>.</operator><name>getContactPhoto</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <try>try <block>{
              <expr_stmt><expr><name>avatar</name> <operator>=</operator> <call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>asBitmap</name><argument_list>()</argument_list></call>
                               <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getContactPhoto</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>circleCrop</name><argument_list>()</argument_list></call>
                               <operator>.</operator><call><name>submit</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>notification_large_icon_width</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>notification_large_icon_width</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                               <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
              <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>avatar</name> <operator>=</operator> <call><name>getFallbackDrawable</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>avatar</name> <operator>=</operator> <call><name>getFallbackDrawable</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>

          <decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name><name>Parcel</name><operator>.</operator><name>obtain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>writeParcelable</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putLong</name></name><argument_list>(<argument><expr><name><name>ShareActivity</name><operator>.</operator><name>EXTRA_THREAD_ID</name></name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putByteArray</name></name><argument_list>(<argument><expr><name><name>ShareActivity</name><operator>.</operator><name>EXTRA_ADDRESS_MARSHALLED</name></name></expr></argument>, <argument><expr><call><name><name>parcel</name><operator>.</operator><name>marshall</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name><name>ShareActivity</name><operator>.</operator><name>EXTRA_DISTRIBUTION_TYPE</name></name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getDistributionType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>bundle</name><operator>.</operator><name>setClassLoader</name></name><argument_list>(<argument><expr><call><name>getClassLoader</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ChooserTarget</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name><name>Icon</name><operator>.</operator><name>createWithBitmap</name></name><argument_list>(<argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><name>componentName</name></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      }</block></while>

      <return>return <expr><name>results</name></expr>;</return>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Bitmap</name></type> <name>getFallbackDrawable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>createFromDrawable</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getFallbackContactPhotoDrawable</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>notification_large_icon_width</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                         <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>notification_large_icon_height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
