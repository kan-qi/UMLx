<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\service\ApplicationMigrationService.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Notification</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Service</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Binder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ConversationListActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsMigrator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsMigrator</name><operator>.</operator><name>ProgressDescription</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>NotificationChannels</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>

<comment type="line">// FIXME: This class is nuts.</comment>
<class><specifier>public</specifier> class <name>ApplicationMigrationService</name> <super><extends>extends <name>Service</name></extends>
    <implements>implements <name><name>SmsMigrator</name><operator>.</operator><name>SmsMigrationProgressListener</name></name></implements></super>
<block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>               <init>= <expr><call><name><name>ApplicationMigrationService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MIGRATE_DATABASE</name>  <init>= <expr><literal type="string">"org.thoughtcrime.securesms.ApplicationMigration.MIGRATE_DATABSE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>COMPLETED_ACTION</name>  <init>= <expr><literal type="string">"org.thoughtcrime.securesms.ApplicationMigrationService.COMPLETED"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREFERENCES_NAME</name>  <init>= <expr><literal type="string">"SecureSMS"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATABASE_MIGRATED</name> <init>= <expr><literal type="string">"migrated"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>BroadcastReceiver</name></type> <name>completedReceiver</name> <init>= <expr><operator>new</operator> <call><name>CompletedReceiver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Binder</name></type> <name>binder</name>                       <init>= <expr><operator>new</operator> <call><name>ApplicationMigrationBinder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Executor</name></type> <name>executor</name>                   <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Handler</name></argument>&gt;</argument_list></name></type>     <name>handler</name>      <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>notification</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ImportState</name></type>                <name>state</name>        <init>= <expr><operator>new</operator> <call><name>ImportState</name><argument_list>(<argument><expr><name><name>ImportState</name><operator>.</operator><name>STATE_IDLE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>registerCompletedReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>onStartCommand</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startId</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>intent</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>START_NOT_STICKY</name></expr>;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>MIGRATE_DATABASE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImportRunnable</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>START_NOT_STICKY</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>unregisterCompletedReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>IBinder</name></type> <name>onBind</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>binder</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setImportStateHandler</name><parameter_list>(<parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>registerCompletedReceiver</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>IntentFilter</name></type> <name>filter</name> <init>= <expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>filter</name><operator>.</operator><name>addAction</name></name><argument_list>(<argument><expr><name>COMPLETED_ACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>completedReceiver</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>unregisterCompletedReceiver</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>completedReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyImportComplete</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>COMPLETED_ACTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sendOrderedBroadcast</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>progressUpdate</name><parameter_list>(<parameter><decl><type><name>ProgressDescription</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImportState</name><argument_list>(<argument><expr><name><name>ImportState</name><operator>.</operator><name>STATE_MIGRATING_IN_PROGRESS</name></name></expr></argument>, <argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>ImportState</name></type> <name>getState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>state</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setState</name><parameter_list>(<parameter><decl><type><name>ImportState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>state</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>handler</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Handler</name></type> <name>handler</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>handler</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>handler</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>handler</name><operator>.</operator><name>obtainMessage</name></name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>progress</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sendToTarget</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>progress</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>state</name><operator>.</operator><name>progress</name><operator>.</operator><name>secondaryComplete</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>updateBackgroundNotification</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>progress</name><operator>.</operator><name>primaryTotal</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>progress</name><operator>.</operator><name>primaryComplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateBackgroundNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>total</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>complete</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>notification</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><name>complete</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>NotificationManager</name><operator>)</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator>
      <operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><literal type="number">4242</literal></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>initializeBackgroundNotification</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>NotificationChannels</name><operator>.</operator><name>OTHER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon_notification</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setLargeIcon</name></name><argument_list>(<argument><expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeResource</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon_notification</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentTitle</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ApplicationMigrationService_importing_text_messages</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ApplicationMigrationService_import_in_progress</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setOngoing</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ConversationListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>stopForeground</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startForeground</name><argument_list>(<argument><expr><literal type="number">4242</literal></expr></argument>, <argument><expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>builder</name></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> class <name>ImportRunnable</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <constructor><name>ImportRunnable</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>notification</name>              <operator>=</operator> <call><name>initializeBackgroundNotification</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>PowerManager</name></type> <name>powerManager</name> <init>= <expr><operator>(</operator><name>PowerManager</name><operator>)</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>POWER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>WakeLock</name></type>     <name>wakeLock</name>     <init>= <expr><call><name><name>powerManager</name><operator>.</operator><name>newWakeLock</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>PARTIAL_WAKE_LOCK</name></name></expr></argument>, <argument><expr><literal type="string">"Migration"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{
        <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImportState</name><argument_list>(<argument><expr><name><name>ImportState</name><operator>.</operator><name>STATE_MIGRATING_BEGIN</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>SmsMigrator</name><operator>.</operator><name>migrateDatabase</name></name><argument_list>(<argument><expr><name><name>ApplicationMigrationService</name><operator>.</operator><name>this</name></name></expr></argument>,
                                    <argument><expr><name><name>ApplicationMigrationService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setState</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImportState</name><argument_list>(<argument><expr><name><name>ImportState</name><operator>.</operator><name>STATE_MIGRATING_COMPLETE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setDatabaseImported</name><argument_list>(<argument><expr><name><name>ApplicationMigrationService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stopForeground</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyImportComplete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stopSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block> <finally>finally <block>{
        <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> class <name>ApplicationMigrationBinder</name> <super><extends>extends <name>Binder</name></extends></super> <block>{
    <function><specifier>public</specifier> <type><name>ApplicationMigrationService</name></type> <name>getService</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>ApplicationMigrationService</name><operator>.</operator><name>this</name></name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CompletedReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>NotificationCompat</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>NotificationChannels</name><operator>.</operator><name>OTHER</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setSmallIcon</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>icon_notification</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentTitle</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ApplicationMigrationService_import_complete</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentText</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ApplicationMigrationService_system_database_import_is_complete</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setContentIntent</name></name><argument_list>(<argument><expr><call><name><name>PendingIntent</name><operator>.</operator><name>getActivity</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ConversationListActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setWhen</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setDefaults</name></name><argument_list>(<argument><expr><name><name>Notification</name><operator>.</operator><name>DEFAULT_VIBRATE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setAutoCancel</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Notification</name></type> <name>notification</name> <init>= <expr><call><name><name>builder</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>NotificationManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>NOTIFICATION_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>notify</name><argument_list>(<argument><expr><literal type="number">31337</literal></expr></argument>, <argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ImportState</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_IDLE</name>                  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_MIGRATING_BEGIN</name>       <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_MIGRATING_IN_PROGRESS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATE_MIGRATING_COMPLETE</name>    <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>public</specifier> <type><name>int</name></type>                 <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><name>ProgressDescription</name></type> <name>progress</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ImportState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>, <parameter><decl><type><name>ProgressDescription</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>state</name></name>    <operator>=</operator> <name>state</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progress</name></name> <operator>=</operator> <name>progress</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDatabaseImported</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>DATABASE_MIGRATED</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setDatabaseImported</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><name>PREFERENCES_NAME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>DATABASE_MIGRATED</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
