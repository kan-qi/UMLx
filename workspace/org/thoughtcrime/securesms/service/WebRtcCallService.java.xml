<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\service\WebRtcCallService.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Service</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>HandlerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>IBinder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>ResultReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>TelephonyManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>WebRtcCallActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>ContactAccessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UnidentifiedAccessUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name><operator>.</operator><name>VibrateState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>dependencies</name><operator>.</operator><name>InjectableType</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>events</name><operator>.</operator><name>WebRtcViewModel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>MessageNotifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>FutureTaskListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ListenableFutureTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CallNotificationBuilder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>IncomingPstnCallReceiver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnectionFactoryOptions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnectionWrapper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnectionWrapper</name><operator>.</operator><name>PeerConnectionException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>UncaughtExceptionHandlerManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Connected</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Data</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>WebRtcDataProtos</name><operator>.</operator><name>Hangup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>audio</name><operator>.</operator><name>BluetoothStateManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>audio</name><operator>.</operator><name>OutgoingRinger</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>audio</name><operator>.</operator><name>SignalAudioManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>locks</name><operator>.</operator><name>LockManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>AudioTrack</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>DataChannel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>DefaultVideoDecoderFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>DefaultVideoEncoderFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>EglBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>IceCandidate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>MediaConstraints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>MediaStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnectionFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>RtpReceiver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>SessionDescription</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>SurfaceViewRenderer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>VideoDecoderFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>VideoEncoderFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>VideoTrack</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>SignalServiceAccountManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>SignalServiceMessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>crypto</name><operator>.</operator><name>UntrustedIdentityException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>AnswerMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>BusyMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>HangupMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>IceUpdateMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>OfferMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>SignalServiceCallMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>calls</name><operator>.</operator><name>TurnServerInfo</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>SignalServiceAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>push</name><operator>.</operator><name>exceptions</name><operator>.</operator><name>UnregisteredUserException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>internal</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CountDownLatch</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executors</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ScheduledExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>inject</name><operator>.</operator><name>Inject</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CallNotificationBuilder</name><operator>.</operator><name>TYPE_ESTABLISHED</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CallNotificationBuilder</name><operator>.</operator><name>TYPE_INCOMING_CONNECTING</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CallNotificationBuilder</name><operator>.</operator><name>TYPE_INCOMING_RINGING</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CallNotificationBuilder</name><operator>.</operator><name>TYPE_OUTGOING_RINGING</name></name>;</import>

<class><specifier>public</specifier> class <name>WebRtcCallService</name> <super><extends>extends <name>Service</name></extends> <implements>implements <name>InjectableType</name>,
                                                          <name><name>PeerConnection</name><operator>.</operator><name>Observer</name></name>,
                                                          <name><name>DataChannel</name><operator>.</operator><name>Observer</name></name>,
                                                          <name><name>BluetoothStateManager</name><operator>.</operator><name>BluetoothStateListener</name></name>,
                                                          <name><name>PeerConnectionWrapper</name><operator>.</operator><name>CameraEventListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>WebRtcCallService</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>CallState</name> <block>{
    <decl><name>STATE_IDLE</name></decl>, <decl><name>STATE_DIALING</name></decl>, <decl><name>STATE_ANSWERING</name></decl>, <decl><name>STATE_REMOTE_RINGING</name></decl>, <decl><name>STATE_LOCAL_RINGING</name></decl>, <decl><name>STATE_CONNECTED</name></decl>
  }</block></enum>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATA_CHANNEL_NAME</name> <init>= <expr><literal type="string">"signaling"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_REMOTE_ADDRESS</name>     <init>= <expr><literal type="string">"remote_address"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_MUTE</name>               <init>= <expr><literal type="string">"mute_value"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_AVAILABLE</name>          <init>= <expr><literal type="string">"enabled_value"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_REMOTE_DESCRIPTION</name> <init>= <expr><literal type="string">"remote_description"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_TIMESTAMP</name>          <init>= <expr><literal type="string">"timestamp"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_CALL_ID</name>            <init>= <expr><literal type="string">"call_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_ICE_SDP</name>            <init>= <expr><literal type="string">"ice_sdp"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_ICE_SDP_MID</name>        <init>= <expr><literal type="string">"ice_sdp_mid"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_ICE_SDP_LINE_INDEX</name> <init>= <expr><literal type="string">"ice_sdp_line_index"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXTRA_RESULT_RECEIVER</name>    <init>= <expr><literal type="string">"result_receiver"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_INCOMING_CALL</name>        <init>= <expr><literal type="string">"CALL_INCOMING"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_OUTGOING_CALL</name>        <init>= <expr><literal type="string">"CALL_OUTGOING"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_ANSWER_CALL</name>          <init>= <expr><literal type="string">"ANSWER_CALL"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_DENY_CALL</name>            <init>= <expr><literal type="string">"DENY_CALL"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_LOCAL_HANGUP</name>         <init>= <expr><literal type="string">"LOCAL_HANGUP"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_SET_MUTE_AUDIO</name>       <init>= <expr><literal type="string">"SET_MUTE_AUDIO"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_SET_MUTE_VIDEO</name>       <init>= <expr><literal type="string">"SET_MUTE_VIDEO"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_FLIP_CAMERA</name>          <init>= <expr><literal type="string">"FLIP_CAMERA"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_BLUETOOTH_CHANGE</name>     <init>= <expr><literal type="string">"BLUETOOTH_CHANGE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_WIRED_HEADSET_CHANGE</name> <init>= <expr><literal type="string">"WIRED_HEADSET_CHANGE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_SCREEN_OFF</name>           <init>= <expr><literal type="string">"SCREEN_OFF"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_CHECK_TIMEOUT</name>        <init>= <expr><literal type="string">"CHECK_TIMEOUT"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_IS_IN_CALL_QUERY</name>     <init>= <expr><literal type="string">"IS_IN_CALL"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_RESPONSE_MESSAGE</name>  <init>= <expr><literal type="string">"RESPONSE_MESSAGE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_ICE_MESSAGE</name>       <init>= <expr><literal type="string">"ICE_MESSAGE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_ICE_CANDIDATE</name>     <init>= <expr><literal type="string">"ICE_CANDIDATE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_CALL_CONNECTED</name>    <init>= <expr><literal type="string">"CALL_CONNECTED"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_REMOTE_HANGUP</name>     <init>= <expr><literal type="string">"REMOTE_HANGUP"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_REMOTE_BUSY</name>       <init>= <expr><literal type="string">"REMOTE_BUSY"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_REMOTE_VIDEO_MUTE</name> <init>= <expr><literal type="string">"REMOTE_VIDEO_MUTE"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTION_ICE_CONNECTED</name>     <init>= <expr><literal type="string">"ICE_CONNECTED"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>CallState</name></type>   <name>callState</name>          <init>= <expr><name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>CameraState</name></type> <name>localCameraState</name>   <init>= <expr><name><name>CameraState</name><operator>.</operator><name>UNKNOWN</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>     <name>microphoneEnabled</name>  <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>     <name>remoteVideoEnabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>     <name>bluetoothAvailable</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Inject</name></annotation> <specifier>public</specifier> <type><name>SignalServiceMessageSender</name></type>  <name>messageSender</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Inject</name></annotation> <specifier>public</specifier> <type><name>SignalServiceAccountManager</name></type> <name>accountManager</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>PeerConnectionFactory</name></type>      <name>peerConnectionFactory</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SignalAudioManager</name></type>         <name>audioManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>BluetoothStateManager</name></type>      <name>bluetoothStateManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>WiredHeadsetStateReceiver</name></type>  <name>wiredHeadsetStateReceiver</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>PowerButtonReceiver</name></type>        <name>powerButtonReceiver</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>LockManager</name></type>                <name>lockManager</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>IncomingPstnCallReceiver</name></type>        <name>callReceiver</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>UncaughtExceptionHandlerManager</name></type> <name>uncaughtExceptionHandlerManager</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>Long</name></type>                   <name>callId</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>Recipient</name></type>              <name>recipient</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>PeerConnectionWrapper</name></type>  <name>peerConnection</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>DataChannel</name></type>            <name>dataChannel</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IceUpdateMessage</name></argument>&gt;</argument_list></name></type> <name>pendingOutgoingIceUpdates</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IceCandidate</name></argument>&gt;</argument_list></name></type>     <name>pendingIncomingIceUpdates</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>SurfaceViewRenderer</name></type> <name>localRenderer</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>SurfaceViewRenderer</name></type> <name>remoteRenderer</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>EglBase</name></type>             <name>eglBase</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ExecutorService</name></type>          <name>serviceExecutor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ExecutorService</name></type>          <name>networkExecutor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newSingleThreadExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ScheduledExecutorService</name></type> <name>timeoutExecutor</name> <init>= <expr><call><name><name>Executors</name><operator>.</operator><name>newScheduledThreadPool</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initializeResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>registerIncomingPstnCallReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerUncaughtExceptionHandler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerWiredHeadsetStateReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>onStartCommand</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onStartCommand..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>intent</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>START_NOT_STICKY</name></expr>;</return></block></then></if>

    <expr_stmt><expr><call><name><name>serviceExecutor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <if>if      <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_INCOMING_CALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isBusy</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>handleBusyCall</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_REMOTE_BUSY</name></expr></argument>)</argument_list></call></expr>)</condition><then>               <block type="pseudo"><expr_stmt><expr><call><name>handleBusyMessage</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_INCOMING_CALL</name></expr></argument>)</argument_list></call></expr>)</condition><then>             <block type="pseudo"><expr_stmt><expr><call><name>handleIncomingCall</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_OUTGOING_CALL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isIdle</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>handleOutgoingCall</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_ANSWER_CALL</name></expr></argument>)</argument_list></call></expr>)</condition><then>               <block type="pseudo"><expr_stmt><expr><call><name>handleAnswerCall</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_DENY_CALL</name></expr></argument>)</argument_list></call></expr>)</condition><then>                 <block type="pseudo"><expr_stmt><expr><call><name>handleDenyCall</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_LOCAL_HANGUP</name></expr></argument>)</argument_list></call></expr>)</condition><then>              <block type="pseudo"><expr_stmt><expr><call><name>handleLocalHangup</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_REMOTE_HANGUP</name></expr></argument>)</argument_list></call></expr>)</condition><then>             <block type="pseudo"><expr_stmt><expr><call><name>handleRemoteHangup</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_SET_MUTE_AUDIO</name></expr></argument>)</argument_list></call></expr>)</condition><then>            <block type="pseudo"><expr_stmt><expr><call><name>handleSetMuteAudio</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_SET_MUTE_VIDEO</name></expr></argument>)</argument_list></call></expr>)</condition><then>            <block type="pseudo"><expr_stmt><expr><call><name>handleSetMuteVideo</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_FLIP_CAMERA</name></expr></argument>)</argument_list></call></expr>)</condition><then>           <block type="pseudo"><expr_stmt><expr><call><name>handleSetCameraFlip</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_BLUETOOTH_CHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then>          <block type="pseudo"><expr_stmt><expr><call><name>handleBluetoothChange</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_WIRED_HEADSET_CHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then>      <block type="pseudo"><expr_stmt><expr><call><name>handleWiredHeadsetChange</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><operator>(</operator><name>ACTION_SCREEN_OFF</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><then>              <block type="pseudo"><expr_stmt><expr><call><name>handleScreenOffChange</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_REMOTE_VIDEO_MUTE</name></expr></argument>)</argument_list></call></expr>)</condition><then>         <block type="pseudo"><expr_stmt><expr><call><name>handleRemoteVideoMute</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_RESPONSE_MESSAGE</name></expr></argument>)</argument_list></call></expr>)</condition><then>          <block type="pseudo"><expr_stmt><expr><call><name>handleResponseMessage</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_ICE_MESSAGE</name></expr></argument>)</argument_list></call></expr>)</condition><then>               <block type="pseudo"><expr_stmt><expr><call><name>handleRemoteIceCandidate</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_ICE_CANDIDATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>             <block type="pseudo"><expr_stmt><expr><call><name>handleLocalIceCandidate</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_ICE_CONNECTED</name></expr></argument>)</argument_list></call></expr>)</condition><then>             <block type="pseudo"><expr_stmt><expr><call><name>handleIceConnected</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_CALL_CONNECTED</name></expr></argument>)</argument_list></call></expr>)</condition><then>            <block type="pseudo"><expr_stmt><expr><call><name>handleCallConnected</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_CHECK_TIMEOUT</name></expr></argument>)</argument_list></call></expr>)</condition><then>             <block type="pseudo"><expr_stmt><expr><call><name>handleCheckTimeout</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>ACTION_IS_IN_CALL_QUERY</name></expr></argument>)</argument_list></call></expr>)</condition><then>          <block type="pseudo"><expr_stmt><expr><call><name>handleIsInCallQuery</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>START_NOT_STICKY</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDestroy</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>callReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>callReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>uncaughtExceptionHandlerManager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>uncaughtExceptionHandlerManager</name><operator>.</operator><name>unregister</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>bluetoothStateManager</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bluetoothStateManager</name><operator>.</operator><name>onDestroy</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>wiredHeadsetStateReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>wiredHeadsetStateReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>wiredHeadsetStateReceiver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>powerButtonReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>powerButtonReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>powerButtonReceiver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBluetoothStateChanged</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isAvailable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onBluetoothStateChanged: "</literal> <operator>+</operator> <name>isAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_BLUETOOTH_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_AVAILABLE</name></expr></argument>, <argument><expr><name>isAvailable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCameraSwitchCompleted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraState</name></type> <name>newCameraState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localCameraState</name></name> <operator>=</operator> <name>newCameraState</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>


  <comment type="line">// Initializers</comment>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeResources</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>injectDependencies</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callState</name></name>             <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockManager</name></name>           <operator>=</operator> <operator>new</operator> <call><name>LockManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioManager</name></name>          <operator>=</operator> <operator>new</operator> <call><name>SignalAudioManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothStateManager</name></name> <operator>=</operator> <operator>new</operator> <call><name>BluetoothStateManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>messageSender</name><operator>.</operator><name>setSoTimeoutMillis</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>accountManager</name><operator>.</operator><name>setSoTimeoutMillis</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>registerIncomingPstnCallReceiver</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>callReceiver</name> <operator>=</operator> <operator>new</operator> <call><name>IncomingPstnCallReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>callReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><literal type="string">"android.intent.action.PHONE_STATE"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>registerUncaughtExceptionHandler</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>uncaughtExceptionHandlerManager</name> <operator>=</operator> <operator>new</operator> <call><name>UncaughtExceptionHandlerManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uncaughtExceptionHandlerManager</name><operator>.</operator><name>registerHandler</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ProximityLockRelease</name><argument_list>(<argument><expr><name>lockManager</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>registerWiredHeadsetStateReceiver</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>wiredHeadsetStateReceiver</name> <operator>=</operator> <operator>new</operator> <call><name>WiredHeadsetStateReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>action</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">21</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>action</name> <operator>=</operator> <name><name>AudioManager</name><operator>.</operator><name>ACTION_HEADSET_PLUG</name></name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>action</name> <operator>=</operator> <name><name>Intent</name><operator>.</operator><name>ACTION_HEADSET_PLUG</name></name></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>wiredHeadsetStateReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>registerPowerButtonReceiver</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>powerButtonReceiver</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>powerButtonReceiver</name> <operator>=</operator> <operator>new</operator> <call><name>PowerButtonReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>registerReceiver</name><argument_list>(<argument><expr><name>powerButtonReceiver</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_SCREEN_OFF</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>unregisterPowerButtonReceiver</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>powerButtonReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>powerButtonReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>powerButtonReceiver</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <comment type="line">// Handlers</comment>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleIncomingCall</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"handleIncomingCall()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Incoming on non-idle"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>offer</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_DESCRIPTION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callState</name></name>                 <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_ANSWERING</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callId</name></name>                    <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pendingIncomingIceUpdates</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name>                 <operator>=</operator> <call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>isIncomingMessageExpired</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>insertMissedCall</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_INCOMING_CONNECTING</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>timeoutExecutor</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TimeoutRunnable</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initializeVideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>retrieveTurnServers</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>SuccessOnlyListener</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callState</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSuccessContinue</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
          <decl_stmt><decl><type><name>boolean</name></type> <name>isSystemContact</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>Permissions</name><operator>.</operator><name>hasAny</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_CONTACTS</name></name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_CONTACTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>isSystemContact</name> <operator>=</operator> <call><name><name>ContactAccessor</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isSystemContact</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>

          <decl_stmt><decl><type><name>boolean</name></type> <name>isAlwaysTurn</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isTurnOnly</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name></name>   <operator>=</operator> <operator>new</operator> <call><name>PeerConnectionWrapper</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>peerConnectionFactory</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>localRenderer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>eglBase</name></expr></argument>, <argument><expr><operator>!</operator><name>isSystemContact</name> <operator>||</operator> <name>isAlwaysTurn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>localCameraState</name></name> <operator>=</operator> <call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>getCameraState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setRemoteDescription</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SessionDescription</name><argument_list>(<argument><expr><name><name>SessionDescription</name><operator>.</operator><name>Type</name><operator>.</operator><name>OFFER</name></name></expr></argument>, <argument><expr><name>offer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>PROCESSING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>SessionDescription</name></type> <name>sdp</name> <init>= <expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>createAnswer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MediaConstraints</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Answer SDP: "</literal> <operator>+</operator> <name><name>sdp</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setLocalDescription</name></name><argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>listenableFutureTask</name> <init>= <expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forAnswer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AnswerMessage</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><name><name>sdp</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <for>for <control>(<init><decl><type><name>IceCandidate</name></type> <name>candidate</name> <range>: <expr><name>pendingIncomingIceUpdates</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>addIceCandidate</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
          <expr_stmt><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>pendingIncomingIceUpdates</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>listenableFutureTask</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>FailureListener</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>callState</name></name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list> <block>{
            <function><annotation>@<name>Override</name></annotation>
            <specifier>public</specifier> <type><name>void</name></type> <name>onFailureContinue</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
              <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>insertMissedCall</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></function>
          }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PeerConnectionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleOutgoingCall</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"handleOutgoingCall..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Dialing from non-idle?"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <try>try <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callState</name></name>                 <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name>                 <operator>=</operator> <call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callId</name></name>                    <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pendingOutgoingIceUpdates</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>initializeVideo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_OUTGOING</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IN_CALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>initializeAudioForCall</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>startOutgoingRinger</name></name><argument_list>(<argument><expr><name><name>OutgoingRinger</name><operator>.</operator><name>Type</name><operator>.</operator><name>RINGING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bluetoothStateManager</name><operator>.</operator><name>setWantsConnection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_OUTGOING_RINGING</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertOutgoingCall</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>timeoutExecutor</name><operator>.</operator><name>schedule</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TimeoutRunnable</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>retrieveTurnServers</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>SuccessOnlyListener</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callState</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onSuccessContinue</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>isAlwaysTurn</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isTurnOnly</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name></name> <operator>=</operator> <operator>new</operator> <call><name>PeerConnectionWrapper</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>peerConnectionFactory</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>localRenderer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>eglBase</name></expr></argument>, <argument><expr><name>isAlwaysTurn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>localCameraState</name></name> <operator>=</operator> <call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>getCameraState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>dataChannel</name></name>    <operator>=</operator> <call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>createDataChannel</name></name><argument_list>(<argument><expr><name>DATA_CHANNEL_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>registerObserver</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>SessionDescription</name></type> <name>sdp</name> <init>= <expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>createOffer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MediaConstraints</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setLocalDescription</name></name><argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Sending offer: "</literal> <operator>+</operator> <name><name>sdp</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>listenableFutureTask</name> <init>= <expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forOffer</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OfferMessage</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><name><name>sdp</name><operator>.</operator><name>description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>listenableFutureTask</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>FailureListener</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>callState</name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list> <block>{
              <function><annotation>@<name>Override</name></annotation>
              <specifier>public</specifier> <type><name>void</name></type> <name>onFailureContinue</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><name>error</name> <operator>instanceof</operator> <name>UntrustedIdentityException</name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>UNTRUSTED_IDENTITY</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>UntrustedIdentityException</name><operator>)</operator><name>error</name><operator>)</operator><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>error</name> <operator>instanceof</operator> <name>UnregisteredUserException</name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>NO_SUCH_USER</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>error</name> <operator>instanceof</operator> <name>IOException</name></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>NETWORK_FAILURE</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></elseif></if>

                <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></function>
            }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PeerConnectionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleResponseMessage</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got response: "</literal> <operator>+</operator> <call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_DESCRIPTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name> <operator>||</operator> <operator>!</operator><call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got answer for recipient and call id we're not currently dialing: "</literal> <operator>+</operator> <call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><name>peerConnection</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>pendingOutgoingIceUpdates</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>pendingOutgoingIceUpdates</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>listenableFutureTask</name> <init>= <expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forIceUpdates</name></name><argument_list>(<argument><expr><name>pendingOutgoingIceUpdates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>listenableFutureTask</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>FailureListener</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>callState</name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list> <block>{
          <function><annotation>@<name>Override</name></annotation>
          <specifier>public</specifier> <type><name>void</name></type> <name>onFailureContinue</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>NETWORK_FAILURE</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setRemoteDescription</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SessionDescription</name><argument_list>(<argument><expr><name><name>SessionDescription</name><operator>.</operator><name>Type</name><operator>.</operator><name>ANSWER</name></name></expr></argument>, <argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_DESCRIPTION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pendingOutgoingIceUpdates</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>PeerConnectionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleRemoteIceCandidate</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"handleRemoteIceCandidate..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>IceCandidate</name></type> <name>candidate</name> <init>= <expr><operator>new</operator> <call><name>IceCandidate</name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP_MID</name></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP_LINE_INDEX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                <argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if       <condition>(<expr><name>peerConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>           <block type="pseudo"><expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>addIceCandidate</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><name>pendingIncomingIceUpdates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>pendingIncomingIceUpdates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleLocalIceCandidate</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name> <operator>||</operator> <operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"State is now idle, ignoring ice candidate..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>recipient</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>callId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert: "</literal> <operator>+</operator> <name>callState</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>callId</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>IceUpdateMessage</name></type> <name>iceUpdateMessage</name> <init>= <expr><operator>new</operator> <call><name>IceUpdateMessage</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP_MID</name></expr></argument>)</argument_list></call></expr></argument>,
                                                             <argument><expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP_LINE_INDEX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                             <argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>pendingOutgoingIceUpdates</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Adding to pending ice candidates..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pendingOutgoingIceUpdates</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>iceUpdateMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>listenableFutureTask</name> <init>= <expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forIceUpdate</name></name><argument_list>(<argument><expr><name>iceUpdateMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>listenableFutureTask</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>FailureListener</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><name>callState</name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onFailureContinue</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>NETWORK_FAILURE</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleIceConnected</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_ANSWERING</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callState</name></name> <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>INTERACTIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_INCOMING</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>startCallCardActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>initializeAudioForCall</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isCallNotificationsEnabled</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Uri</name></type>          <name>ringtone</name>     <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCallRingtone</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>VibrateState</name></type> <name>vibrateState</name> <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>resolve</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCallVibrate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>ringtone</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ringtone</name> <operator>=</operator> <call><name><name>TextSecurePreferences</name><operator>.</operator><name>getCallNotificationRingtone</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>startIncomingRinger</name></name><argument_list>(<argument><expr><name>ringtone</name></expr></argument>, <argument><expr><name>vibrateState</name> <operator>==</operator> <name><name>VibrateState</name><operator>.</operator><name>ENABLED</name></name> <operator>||</operator> <operator>(</operator><name>vibrateState</name> <operator>==</operator> <name><name>VibrateState</name><operator>.</operator><name>DEFAULT</name></name> <operator>&amp;&amp;</operator> <call><name><name>TextSecurePreferences</name><operator>.</operator><name>isCallNotificationVibrateEnabled</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>registerPowerButtonReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_INCOMING_RINGING</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callState</name></name> <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_REMOTE_RINGING</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_RINGING</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCallConnected</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_REMOTE_RINGING</name></name> <operator>&amp;&amp;</operator> <name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring call connected for unknown state: "</literal> <operator>+</operator> <name>callState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring connected for unknown call id: "</literal> <operator>+</operator> <call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>recipient</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>peerConnection</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>dataChannel</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>startCommunication</name></name><argument_list>(<argument><expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_REMOTE_RINGING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bluetoothStateManager</name><operator>.</operator><name>setWantsConnection</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>callState</name> <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_CONNECTED</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IN_VIDEO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                              <block type="pseudo"><expr_stmt><expr><call><name><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IN_CALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_CONNECTED</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>unregisterPowerButtonReceiver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_ESTABLISHED</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setCommunicationMode</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioEnabled</name></name><argument_list>(<argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setVideoEnabled</name></name><argument_list>(<argument><expr><call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DataChannel</name><operator>.</operator><name>Buffer</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                     <operator>.</operator><call><name>setVideoStreamingStatus</name><argument_list>(<argument><expr><call><name><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                                                                                   <operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call>
                                                                                                                                   <operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                     <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleBusyCall</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>      <name>callId</name>    <init>= <expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>O</name></name></expr>)</condition><then> <block>{
      <switch>switch <condition>(<expr><name>callState</name></expr>)</condition> <block>{
        <case>case <expr><name>STATE_DIALING</name></expr>:</case>
        <case>case <expr><name>STATE_REMOTE_RINGING</name></expr>:</case> <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_OUTGOING_RINGING</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break>break;</break>
        <case>case <expr><name>STATE_IDLE</name></expr>:</case>           <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_INCOMING_CONNECTING</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <break>break;</break>
        <case>case <expr><name>STATE_ANSWERING</name></expr>:</case>      <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_INCOMING_CONNECTING</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
        <case>case <expr><name>STATE_LOCAL_RINGING</name></expr>:</case>  <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_INCOMING_RINGING</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break>break;</break>
        <case>case <expr><name>STATE_CONNECTED</name></expr>:</case>      <expr_stmt><expr><call><name>setCallInProgressNotification</name><argument_list>(<argument><expr><name>TYPE_ESTABLISHED</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <break>break;</break>
        <default>default:</default>                   <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></switch>
    }</block></then></if>

    <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>stopForeground</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forBusy</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>BusyMessage</name><argument_list>(<argument><expr><name>callId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>insertMissedCall</name><argument_list>(<argument><expr><call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleBusyMessage</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"handleBusyMessage..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name>getRemoteRecipient</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type>      <name>callId</name>    <init>= <expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name> <operator>||</operator> <operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>recipient</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got busy message for inactive session..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_BUSY</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>startOutgoingRinger</name></name><argument_list>(<argument><expr><name><name>OutgoingRinger</name><operator>.</operator><name>Type</name><operator>.</operator><name>BUSY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_LOCAL_HANGUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><call><name><name>intent</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_ADDRESS</name></expr></argument>, <argument><expr><call><name><name>intent</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>, <argument><expr><name><name>WebRtcCallActivity</name><operator>.</operator><name>BUSY_SIGNAL_DELAY_FINISH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCheckTimeout</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>callId</name></name> <operator>!=</operator> <literal type="null">null</literal>                                   <operator>&amp;&amp;</operator>
        <name><name>this</name><operator>.</operator><name>callId</name></name> <operator>==</operator> <call><name><name>intent</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <name><name>this</name><operator>.</operator><name>callState</name></name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_CONNECTED</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Timing out call: "</literal> <operator>+</operator> <name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_DISCONNECTED</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>callState</name></name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_ANSWERING</name></name> <operator>||</operator> <name><name>this</name><operator>.</operator><name>callState</name></name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>insertMissedCall</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleIsInCallQuery</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ResultReceiver</name></type> <name>resultReceiver</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name>EXTRA_RESULT_RECEIVER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>resultReceiver</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>resultReceiver</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>insertMissedCall</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>signal</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>messageAndThreadId</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertMissedCall</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>updateNotification</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>messageAndThreadId</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleAnswerCall</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Can only answer from ringing!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>peerConnection</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>dataChannel</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>recipient</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>callId</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertReceivedCall</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setVideoEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DataChannel</name><operator>.</operator><name>Buffer</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConnected</name><argument_list>(<argument><expr><call><name><name>Connected</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_ADDRESS</name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>handleCallConnected</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDenyCall</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Can only deny from ringing!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>recipient</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>callId</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>dataChannel</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DataChannel</name><operator>.</operator><name>Buffer</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setHangup</name><argument_list>(<argument><expr><call><name><name>Hangup</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forHangup</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HangupMessage</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertMissedCall</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>terminate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleLocalHangup</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>dataChannel</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>callId</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>accountManager</name><operator>.</operator><name>cancelInFlightRequests</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>messageSender</name><operator>.</operator><name>cancelInFlightRequests</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DataChannel</name><operator>.</operator><name>Buffer</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setHangup</name><argument_list>(<argument><expr><call><name><name>Hangup</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><call><name><name>SignalServiceCallMessage</name><operator>.</operator><name>forHangup</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>HangupMessage</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_DISCONNECTED</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>terminate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleRemoteHangup</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><call><name>getCallId</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"hangup for non-active call..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"assert"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>callState</name></name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name> <operator>||</operator> <name><name>this</name><operator>.</operator><name>callState</name></name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_REMOTE_RINGING</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>RECIPIENT_UNAVAILABLE</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_DISCONNECTED</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>callState</name></name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_ANSWERING</name></name> <operator>||</operator> <name><name>this</name><operator>.</operator><name>callState</name></name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>insertMissedCall</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>terminate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleSetMuteAudio</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>muted</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>EXTRA_MUTE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>microphoneEnabled</name></name> <operator>=</operator> <operator>!</operator><name>muted</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>peerConnection</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioEnabled</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>microphoneEnabled</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleSetMuteVideo</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>      <name>muted</name>        <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>EXTRA_MUTE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>peerConnection</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setVideoEnabled</name></name><argument_list>(<argument><expr><operator>!</operator><name>muted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localCameraState</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>getCameraState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>callId</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>dataChannel</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>send</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>DataChannel</name><operator>.</operator><name>Buffer</name></name><argument_list>(<argument><expr><call><name><name>ByteBuffer</name><operator>.</operator><name>wrap</name></name><argument_list>(<argument><expr><call><name><name>Data</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                       <operator>.</operator><call><name>setVideoStreamingStatus</name><argument_list>(<argument><expr><call><name><name>WebRtcDataProtos</name><operator>.</operator><name>VideoStreamingStatus</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                                                                                     <operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call>
                                                                                                                                     <operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><operator>!</operator><name>muted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                       <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_CONNECTED</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IN_VIDEO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else                              <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IN_CALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isSpeakerphoneOn</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isBluetoothScoOn</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isWiredHeadsetOn</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setSpeakerphoneOn</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleSetCameraFlip</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"handleSetCameraFlip()..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>peerConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>flipCamera</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>localCameraState</name> <operator>=</operator> <call><name><name>peerConnection</name><operator>.</operator><name>getCameraState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleBluetoothChange</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bluetoothAvailable</name></name> <operator>=</operator> <call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>EXTRA_AVAILABLE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleWiredHeadsetChange</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"handleWiredHeadsetChange..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_CONNECTED</name></name> <operator>||</operator>
        <name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name>   <operator>||</operator>
        <name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_REMOTE_RINGING</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>      <name>present</name>      <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>EXTRA_AVAILABLE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>present</name> <operator>&amp;&amp;</operator> <call><name><name>audioManager</name><operator>.</operator><name>isSpeakerphoneOn</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setSpeakerphoneOn</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setBluetoothScoOn</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>present</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isSpeakerphoneOn</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isBluetoothScoOn</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>localCameraState</name><operator>.</operator><name>isEnabled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setSpeakerphoneOn</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>

      <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><call><name>viewModelStateFor</name><argument_list>(<argument><expr><name>callState</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleScreenOffChange</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_ANSWERING</name></name> <operator>||</operator>
        <name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_LOCAL_RINGING</name></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Silencing incoming ringer..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>silenceIncomingRinger</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleRemoteVideoMute</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>muted</name>  <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getBooleanExtra</name></name><argument_list>(<argument><expr><name>EXTRA_MUTE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>    <name>callId</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>this</name><operator>.</operator><name>callState</name></name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_CONNECTED</name></name> <operator>||</operator> <operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got video toggle for inactive call, ignoring..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteVideoEnabled</name></name> <operator>=</operator> <operator>!</operator><name>muted</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sendMessage</name><argument_list>(<argument><expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_CONNECTED</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="line">/// Helper Methods</comment>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isBusy</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>TelephonyManager</name></type> <name>telephonyManager</name> <init>= <expr><operator>(</operator><name>TelephonyManager</name><operator>)</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name>TELEPHONY_SERVICE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>callState</name> <operator>!=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name> <operator>||</operator> <call><name><name>telephonyManager</name><operator>.</operator><name>getCallState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>TelephonyManager</name><operator>.</operator><name>CALL_STATE_IDLE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isIdle</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isIncomingMessageExpired</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>intent</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>EXTRA_TIMESTAMP</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeVideo</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainSync</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><name>eglBase</name>        <operator>=</operator> <call><name><name>EglBase</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>localRenderer</name>  <operator>=</operator> <operator>new</operator> <call><name>SurfaceViewRenderer</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>remoteRenderer</name> <operator>=</operator> <operator>new</operator> <call><name>SurfaceViewRenderer</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>localRenderer</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>eglBase</name><operator>.</operator><name>getEglBaseContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>remoteRenderer</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><call><name><name>eglBase</name><operator>.</operator><name>getEglBaseContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>VideoEncoderFactory</name></type> <name>encoderFactory</name> <init>= <expr><operator>new</operator> <call><name>DefaultVideoEncoderFactory</name><argument_list>(<argument><expr><call><name><name>eglBase</name><operator>.</operator><name>getEglBaseContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>VideoDecoderFactory</name></type> <name>decoderFactory</name> <init>= <expr><operator>new</operator> <call><name>DefaultVideoDecoderFactory</name><argument_list>(<argument><expr><call><name><name>eglBase</name><operator>.</operator><name>getEglBaseContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>peerConnectionFactory</name> <operator>=</operator> <call><name><name>PeerConnectionFactory</name><operator>.</operator><name>builder</name></name><argument_list>()</argument_list></call>
                                                   <operator>.</operator><call><name>setOptions</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PeerConnectionFactoryOptions</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>setVideoEncoderFactory</name><argument_list>(<argument><expr><name>encoderFactory</name></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>setVideoDecoderFactory</name><argument_list>(<argument><expr><name>decoderFactory</name></expr></argument>)</argument_list></call>
                                                   <operator>.</operator><call><name>createPeerConnectionFactory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setCallInProgressNotification</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>startForeground</name><argument_list>(<argument><expr><name><name>CallNotificationBuilder</name><operator>.</operator><name>WEBRTC_NOTIFICATION</name></name></expr></argument>,
                    <argument><expr><call><name><name>CallNotificationBuilder</name><operator>.</operator><name>getCallInProgressNotification</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>terminate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>PROCESSING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stopForeground</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_DIALING</name></name> <operator>||</operator> <name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_REMOTE_RINGING</name></name> <operator>||</operator> <name>callState</name> <operator>==</operator> <name><name>CallState</name><operator>.</operator><name>STATE_CONNECTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bluetoothStateManager</name><operator>.</operator><name>setWantsConnection</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>peerConnection</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>peerConnection</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>eglBase</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>localRenderer</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>remoteRenderer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>localRenderer</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>remoteRenderer</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>eglBase</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>localRenderer</name>  <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>remoteRenderer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>eglBase</name>        <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callState</name></name>                 <operator>=</operator> <name><name>CallState</name><operator>.</operator><name>STATE_IDLE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localCameraState</name></name>          <operator>=</operator> <name><name>CameraState</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name>                 <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callId</name></name>                    <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>microphoneEnabled</name></name>         <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>remoteVideoEnabled</name></name>        <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pendingOutgoingIceUpdates</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>pendingIncomingIceUpdates</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>


  <function><specifier>private</specifier> <type><name>void</name></type> <name>sendMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>WebRtcViewModel</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type>             <name>recipient</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraState</name></type>           <name>localCameraState</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type>               <name>remoteVideoEnabled</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type>               <name>bluetoothAvailable</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type>               <name>microphoneEnabled</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postSticky</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WebRtcViewModel</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>localRenderer</name></expr></argument>, <argument><expr><name>remoteRenderer</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>sendMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>WebRtcViewModel</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type>             <name>recipient</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>IdentityKey</name></type>           <name>identityKey</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraState</name></type>           <name>localCameraState</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type>               <name>remoteVideoEnabled</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type>               <name>bluetoothAvailable</name></decl></parameter>,
                                    <parameter><decl><type><name>boolean</name></type>               <name>microphoneEnabled</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postSticky</name><argument_list>(<argument><expr><operator>new</operator> <call><name>WebRtcViewModel</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>, <argument><expr><name>localCameraState</name></expr></argument>, <argument><expr><name>localRenderer</name></expr></argument>, <argument><expr><name>remoteRenderer</name></expr></argument>, <argument><expr><name>remoteVideoEnabled</name></expr></argument>, <argument><expr><name>bluetoothAvailable</name></expr></argument>, <argument><expr><name>microphoneEnabled</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>sendMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>Recipient</name></type> <name>recipient</name></decl></parameter>,
                                                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>SignalServiceCallMessage</name></type> <name>callMessage</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>callable</name> <init>= <expr><operator>new</operator> <class><super><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>Boolean</name></type> <name>call</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name><name>messageSender</name><operator>.</operator><name>sendCallMessage</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SignalServiceAddress</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPhoneString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>UnidentifiedAccessUtil</name><operator>.</operator><name>getAccessFor</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>callMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>listenableFutureTask</name> <init>= <expr><operator>new</operator> <call><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>callable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>serviceExecutor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>networkExecutor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>listenableFutureTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>listenableFutureTask</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>startCallCardActivity</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>activityIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>activityIntent</name><operator>.</operator><name>setClass</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>activityIntent</name><operator>.</operator><name>setFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_ACTIVITY_NEW_TASK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>activityIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="line">///</comment>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Recipient</name></type> <name>getRemoteRecipient</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Address</name></type> <name>remoteAddress</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getParcelableExtra</name></name><argument_list>(<argument><expr><name>EXTRA_REMOTE_ADDRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>remoteAddress</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"No recipient in intent!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <return>return <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>remoteAddress</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>getCallId</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>intent</name><operator>.</operator><name>getLongExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>


  <function><annotation>@<name>Nullable</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>IBinder</name></type> <name>onBind</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <comment type="line">/// PeerConnection Observer</comment>
  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSignalingChange</name><parameter_list>(<parameter><decl><type><name><name>PeerConnection</name><operator>.</operator><name>SignalingState</name></name></type> <name>newState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onSignalingChange: "</literal> <operator>+</operator> <name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onIceConnectionChange</name><parameter_list>(<parameter><decl><type><name><name>PeerConnection</name><operator>.</operator><name>IceConnectionState</name></name></type> <name>newState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onIceConnectionChange:"</literal> <operator>+</operator> <name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>newState</name> <operator>==</operator> <name><name>PeerConnection</name><operator>.</operator><name>IceConnectionState</name><operator>.</operator><name>CONNECTED</name></name> <operator>||</operator>
        <name>newState</name> <operator>==</operator> <name><name>PeerConnection</name><operator>.</operator><name>IceConnectionState</name><operator>.</operator><name>COMPLETED</name></name></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_ICE_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>newState</name> <operator>==</operator> <name><name>PeerConnection</name><operator>.</operator><name>IceConnectionState</name><operator>.</operator><name>FAILED</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_REMOTE_HANGUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>callId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onIceConnectionReceivingChange</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>receiving</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onIceConnectionReceivingChange:"</literal> <operator>+</operator> <name>receiving</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onIceGatheringChange</name><parameter_list>(<parameter><decl><type><name><name>PeerConnection</name><operator>.</operator><name>IceGatheringState</name></name></type> <name>newState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onIceGatheringChange:"</literal> <operator>+</operator> <name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onIceCandidate</name><parameter_list>(<parameter><decl><type><name>IceCandidate</name></type> <name>candidate</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onIceCandidate:"</literal> <operator>+</operator> <name>candidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_ICE_CANDIDATE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP_MID</name></expr></argument>, <argument><expr><name><name>candidate</name><operator>.</operator><name>sdpMid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP_LINE_INDEX</name></expr></argument>, <argument><expr><name><name>candidate</name><operator>.</operator><name>sdpMLineIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_ICE_SDP</name></expr></argument>, <argument><expr><name><name>candidate</name><operator>.</operator><name>sdp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onIceCandidatesRemoved</name><parameter_list>(<parameter><decl><type><name><name>IceCandidate</name><index>[]</index></name></type> <name>candidates</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onIceCandidatesRemoved:"</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>candidates</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>candidates</name><operator>.</operator><name>length</name></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAddStream</name><parameter_list>(<parameter><decl><type><name>MediaStream</name></type> <name>stream</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onAddStream:"</literal> <operator>+</operator> <name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>AudioTrack</name></type> <name>audioTrack</name> <range>: <expr><name><name>stream</name><operator>.</operator><name>audioTracks</name></name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>audioTrack</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if <condition>(<expr><name><name>stream</name><operator>.</operator><name>videoTracks</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>stream</name><operator>.</operator><name>videoTracks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>VideoTrack</name></type> <name>videoTrack</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>videoTracks</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>videoTrack</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>videoTrack</name><operator>.</operator><name>addSink</name></name><argument_list>(<argument><expr><name>remoteRenderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAddTrack</name><parameter_list>(<parameter><decl><type><name>RtpReceiver</name></type> <name>rtpReceiver</name></decl></parameter>, <parameter><decl><type><name><name>MediaStream</name><index>[]</index></name></type> <name>mediaStreams</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onAddTrack: "</literal> <operator>+</operator> <name>mediaStreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRemoveStream</name><parameter_list>(<parameter><decl><type><name>MediaStream</name></type> <name>stream</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onRemoveStream:"</literal> <operator>+</operator> <name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDataChannel</name><parameter_list>(<parameter><decl><type><name>DataChannel</name></type> <name>dataChannel</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onDataChannel:"</literal> <operator>+</operator> <call><name><name>dataChannel</name><operator>.</operator><name>label</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>dataChannel</name><operator>.</operator><name>label</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>DATA_CHANNEL_NAME</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>dataChannel</name></name> <operator>=</operator> <name>dataChannel</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>dataChannel</name><operator>.</operator><name>registerObserver</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRenegotiationNeeded</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onRenegotiationNeeded"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// TODO renegotiate</comment>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBufferedAmountChange</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onBufferedAmountChange: "</literal> <operator>+</operator> <name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onStateChange</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onStateChange"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onMessage</name><parameter_list>(<parameter><decl><type><name><name>DataChannel</name><operator>.</operator><name>Buffer</name></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onMessage..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>buffer</name><operator>.</operator><name>data</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>buffer</name><operator>.</operator><name>data</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Data</name></type> <name>dataMessage</name> <init>= <expr><call><name><name>Data</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>dataMessage</name><operator>.</operator><name>hasConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"hasConnected..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_CALL_CONNECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><call><name><name>dataMessage</name><operator>.</operator><name>getConnected</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>dataMessage</name><operator>.</operator><name>hasHangup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"hasHangup..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_REMOTE_HANGUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><call><name><name>dataMessage</name><operator>.</operator><name>getHangup</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>dataMessage</name><operator>.</operator><name>hasVideoStreamingStatus</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"hasVideoStreamingStatus..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_REMOTE_VIDEO_MUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><call><name><name>dataMessage</name><operator>.</operator><name>getVideoStreamingStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_MUTE</name></expr></argument>, <argument><expr><operator>!</operator><call><name><name>dataMessage</name><operator>.</operator><name>getVideoStreamingStatus</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEnabled</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidProtocolBufferException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>retrieveTurnServers</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callable</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{
        <decl_stmt><decl><type><name>TurnServerInfo</name></type> <name>turnServerInfo</name> <init>= <expr><call><name><name>accountManager</name><operator>.</operator><name>getTurnServerInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>url</name> <range>: <expr><call><name><name>turnServerInfo</name><operator>.</operator><name>getUrls</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
          <if>if <condition>(<expr><call><name><name>url</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"turn"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><call><name><name>turnServerInfo</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>turnServerInfo</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></for>

      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <return>return <expr><name>results</name></expr>;</return>
    }</block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>futureTask</name> <init>= <expr><operator>new</operator> <call><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>callable</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>serviceExecutor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>networkExecutor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>futureTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>futureTask</name></expr>;</return>
  }</block></function>

  <comment type="line">////</comment>

  <function><specifier>private</specifier> <type><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name></name></type> <name>viewModelStateFor</name><parameter_list>(<parameter><decl><type><name>CallState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>state</name></expr>)</condition> <block>{
      <case>case <expr><name>STATE_CONNECTED</name></expr>:</case>      <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_CONNECTED</name></name></expr>;</return>
      <case>case <expr><name>STATE_DIALING</name></expr>:</case>        <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_OUTGOING</name></name></expr>;</return>
      <case>case <expr><name>STATE_REMOTE_RINGING</name></expr>:</case> <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_RINGING</name></name></expr>;</return>
      <case>case <expr><name>STATE_LOCAL_RINGING</name></expr>:</case>  <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_INCOMING</name></name></expr>;</return>
      <case>case <expr><name>STATE_ANSWERING</name></expr>:</case>      <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_INCOMING</name></name></expr>;</return>
      <case>case <expr><name>STATE_IDLE</name></expr>:</case>           <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_DISCONNECTED</name></name></expr>;</return>
    }</block></switch>

    <return>return <expr><name><name>WebRtcViewModel</name><operator>.</operator><name>State</name><operator>.</operator><name>CALL_DISCONNECTED</name></name></expr>;</return>
  }</block></function>

  <comment type="line">///</comment>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>WiredHeadsetStateReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>state</name> <init>= <expr><call><name><name>intent</name><operator>.</operator><name>getIntExtra</name></name><argument_list>(<argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Intent</name></type> <name>serviceIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>serviceIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>ACTION_WIRED_HEADSET_CHANGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>serviceIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>EXTRA_AVAILABLE</name></name></expr></argument>, <argument><expr><name>state</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>serviceIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PowerButtonReceiver</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>Intent</name><operator>.</operator><name>ACTION_SCREEN_OFF</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>serviceIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>serviceIntent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>ACTION_SCREEN_OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>serviceIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>TimeoutRunnable</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>callId</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>TimeoutRunnable</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>callId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callId</name></name> <operator>=</operator> <name>callId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>ACTION_CHECK_TIMEOUT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_CALL_ID</name></expr></argument>, <argument><expr><name>callId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>startService</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ProximityLockRelease</name> <super><implements>implements <name><name>Thread</name><operator>.</operator><name>UncaughtExceptionHandler</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LockManager</name></type> <name>lockManager</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ProximityLockRelease</name><parameter_list>(<parameter><decl><type><name>LockManager</name></type> <name>lockManager</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lockManager</name></name> <operator>=</operator> <name>lockManager</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>uncaughtException</name><parameter_list>(<parameter><decl><type><name>Thread</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Uncaught exception - releasing proximity lock"</literal></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lockManager</name><operator>.</operator><name>updatePhoneState</name></name><argument_list>(<argument><expr><name><name>LockManager</name><operator>.</operator><name>PhoneState</name><operator>.</operator><name>IDLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>abstract</specifier> class <name><name>StateAwareListener</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name> <super><implements>implements <name><name>FutureTaskListener</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CallState</name></type> <name>expectedState</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>      <name>expectedCallId</name></decl>;</decl_stmt>

    <constructor><name>StateAwareListener</name><parameter_list>(<parameter><decl><type><name>CallState</name></type> <name>expectedState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expectedCallId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expectedState</name></name>  <operator>=</operator> <name>expectedState</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expectedCallId</name></name> <operator>=</operator> <name>expectedCallId</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name>isConsistentState</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"State has changed since request, aborting success callback..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>onSuccessContinue</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name>isConsistentState</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"State has changed since request, aborting failure callback..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>onFailureContinue</name><argument_list>(<argument><expr><call><name><name>throwable</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isConsistentState</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>expectedState</name></name> <operator>==</operator> <name>callState</name> <operator>&amp;&amp;</operator> <call><name><name>Util</name><operator>.</operator><name>isEquals</name></name><argument_list>(<argument><expr><name>callId</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>expectedCallId</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onSuccessContinue</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onFailureContinue</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></class>

  <class><specifier>private</specifier> <specifier>abstract</specifier> class <name><name>FailureListener</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>StateAwareListener</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <constructor><name>FailureListener</name><parameter_list>(<parameter><decl><type><name>CallState</name></type> <name>expectedState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expectedCallId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>expectedState</name></expr></argument>, <argument><expr><name>expectedCallId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSuccessContinue</name><parameter_list>(<parameter><decl><type><name>V</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{}</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>abstract</specifier> class <name><name>SuccessOnlyListener</name><parameter_list>&lt;<parameter><name>V</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>StateAwareListener</name><argument_list type="generic">&lt;<argument><name>V</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <constructor><name>SuccessOnlyListener</name><parameter_list>(<parameter><decl><type><name>CallState</name></type> <name>expectedState</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expectedCallId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>expectedState</name></expr></argument>, <argument><expr><name>expectedCallId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onFailureContinue</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></function>
  }</block></class>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isCallActive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"isCallActive()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HandlerThread</name></type> <name>handlerThread</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>handlerThread</name> <operator>=</operator> <operator>new</operator> <call><name>HandlerThread</name><argument_list>(<argument><expr><literal type="string">"webrtc-callback"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>handlerThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>ResultReceiver</name></type> <name>resultReceiver</name> <init>= <expr><operator>new</operator> <class><super><name>ResultReceiver</name></super><argument_list>(<argument><expr><operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>handlerThread</name><operator>.</operator><name>getLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list> <block>{
        <function><specifier>protected</specifier> <type><name>void</name></type> <name>onReceiveResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>resultData</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got result..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>resultCode</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_IS_IN_CALL_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_RESULT_RECEIVER</name></expr></argument>, <argument><expr><name>resultReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Blocking on result..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch> <finally>finally <block>{
      <if>if <condition>(<expr><name>handlerThread</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>handlerThread</name><operator>.</operator><name>quit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>isCallActive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ResultReceiver</name></type> <name>resultReceiver</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>WebRtcCallService</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name>ACTION_IS_IN_CALL_QUERY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name>EXTRA_RESULT_RECEIVER</name></expr></argument>, <argument><expr><name>resultReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startService</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
