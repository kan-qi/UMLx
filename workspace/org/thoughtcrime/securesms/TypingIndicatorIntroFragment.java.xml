<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\TypingIndicatorIntroFragment.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>TypingIndicatorView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>MultiDeviceConfigurationUpdateJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<class><specifier>public</specifier> class <name>TypingIndicatorIntroFragment</name> <super><extends>extends <name>Fragment</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><name>Controller</name></type> <name>controller</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>TypingIndicatorIntroFragment</name></type> <name>newInstance</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>TypingIndicatorIntroFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>TypingIndicatorIntroFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bundle</name></type>                       <name>args</name>     <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fragment</name></expr>;</return>
  }</block></function>

  <constructor><specifier>public</specifier> <name>TypingIndicatorIntroFragment</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Controller</name><operator>)</operator></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Parent activity must implement the Controller interface."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><name>controller</name> <operator>=</operator> <operator>(</operator><name>Controller</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>View</name></type> <name>view</name>      <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>experience_upgrade_typing_indicators_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type> <name>yesButton</name> <init>= <expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>experience_yes_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>View</name></type> <name>noButton</name>  <init>= <expr><call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>experience_no_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TypingIndicatorView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>typing_indicator</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>startAnimation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>yesButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onButtonClicked</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>noButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>onButtonClicked</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>view</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onButtonClicked</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>typingEnabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setTypingIndicatorsEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>typingEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                      <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MultiDeviceConfigurationUpdateJob</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>,
                                                                 <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isReadReceiptsEnabled</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                                 <argument><expr><name>typingEnabled</name></expr></argument>,
                                                                 <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isShowUnidentifiedDeliveryIndicatorsEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                                 <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isLinkPreviewsEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTypingIndicatorsFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>Controller</name> <block>{
    <function_decl><type><name>void</name></type> <name>onTypingIndicatorsFinished</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
