<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\search\SearchRepository.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>search</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>MergeCursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>


<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>ContactAccessor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>ContactsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>CursorList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsColumns</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ThreadDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>ThreadRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>search</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>search</name><operator>.</operator><name>model</name><operator>.</operator><name>SearchResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Stopwatch</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Executor</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Manages data retrieval for search.
 */</comment>
<class><specifier>public</specifier> class <name>SearchRepository</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SearchRepository</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Character</name></argument>&gt;</argument_list></name></type> <name>BANNED_CHARACTERS</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <static>static <block>{
    <comment type="line">// Several ranges of invalid ASCII characters</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">33</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">47</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>BANNED_CHARACTERS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">58</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>BANNED_CHARACTERS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">91</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">96</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>BANNED_CHARACTERS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">126</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>BANNED_CHARACTERS</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>)</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></static>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>          <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SearchDatabase</name></type>   <name>searchDatabase</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ContactsDatabase</name></type> <name>contactsDatabase</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ThreadDatabase</name></type>   <name>threadDatabase</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ContactAccessor</name></type>  <name>contactAccessor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Executor</name></type>         <name>executor</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SearchRepository</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SearchDatabase</name></type> <name>searchDatabase</name></decl></parameter>,
                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ContactsDatabase</name></type> <name>contactsDatabase</name></decl></parameter>,
                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ThreadDatabase</name></type> <name>threadDatabase</name></decl></parameter>,
                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ContactAccessor</name></type> <name>contactAccessor</name></decl></parameter>,
                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Executor</name></type> <name>executor</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>          <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>searchDatabase</name></name>   <operator>=</operator> <name>searchDatabase</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactsDatabase</name></name> <operator>=</operator> <name>contactsDatabase</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadDatabase</name></name>   <operator>=</operator> <name>threadDatabase</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactAccessor</name></name>  <operator>=</operator> <name>contactAccessor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>executor</name></name>         <operator>=</operator> <name>executor</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>query</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name>SearchResult</name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name><name>SearchResult</name><operator>.</operator><name>EMPTY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name>Stopwatch</name></type> <name>timer</name> <init>= <expr><operator>new</operator> <call><name>Stopwatch</name><argument_list>(<argument><expr><literal type="string">"FtsQuery"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>cleanQuery</name> <init>= <expr><call><name>sanitizeQuery</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"clean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>contacts</name> <init>= <expr><call><name>queryContacts</name><argument_list>(<argument><expr><name>cleanQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"contacts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>ThreadRecord</name></argument>&gt;</argument_list></name></type> <name>conversations</name> <init>= <expr><call><name>queryConversations</name><argument_list>(<argument><expr><name>cleanQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"conversations"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>MessageResult</name></argument>&gt;</argument_list></name></type> <name>messages</name> <init>= <expr><call><name>queryMessages</name><argument_list>(<argument><expr><name>cleanQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"messages"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>timer</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SearchResult</name><argument_list>(<argument><expr><name>cleanQuery</name></expr></argument>, <argument><expr><name>contacts</name></expr></argument>, <argument><expr><name>conversations</name></expr></argument>, <argument><expr><name>messages</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>query</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>MessageResult</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><call><name><name>CursorList</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>MessageResult</name></argument>&gt;</argument_list></name></type> <name>messages</name> <init>= <expr><call><name>queryMessages</name><argument_list>(<argument><expr><call><name>sanitizeQuery</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"[ConversationQuery] "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>+</operator> <literal type="string">" ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name>messages</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>queryContacts</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>Permissions</name><operator>.</operator><name>hasAny</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_CONTACTS</name></name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_CONTACTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>CursorList</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>Cursor</name></type>      <name>textSecureContacts</name> <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>queryTextSecureContacts</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>      <name>systemContacts</name>     <init>= <expr><call><name><name>contactsDatabase</name><operator>.</operator><name>querySystemContacts</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MergeCursor</name></type> <name>contacts</name>           <init>= <expr><operator>new</operator> <call><name>MergeCursor</name><argument_list>(<argument><expr><operator>new</operator> <name><name>Cursor</name><index>[]</index></name><block>{ <expr><name>textSecureContacts</name></expr>, <expr><name>systemContacts</name></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name><name>CursorList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>contacts</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RecipientModelBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>ThreadRecord</name></argument>&gt;</argument_list></name></type> <name>queryConversations</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>  <name>numbers</name>   <init>= <expr><call><name><name>contactAccessor</name><operator>.</operator><name>getNumbersForThreadSearchFilter</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>addresses</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>numbers</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>number</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>conversations</name> <init>= <expr><call><name><name>threadDatabase</name><operator>.</operator><name>getFilteredConversationList</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>conversations</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>CursorList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>conversations</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ThreadModelBuilder</name><argument_list>(<argument><expr><name>threadDatabase</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                                 </then><else>: <expr><call><name><name>CursorList</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>MessageResult</name></argument>&gt;</argument_list></name></type> <name>queryMessages</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>messages</name> <init>= <expr><call><name><name>searchDatabase</name><operator>.</operator><name>queryMessages</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>messages</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>CursorList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messages</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MessageModelBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                            </then><else>: <expr><call><name><name>CursorList</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>CursorList</name><argument_list type="generic">&lt;<argument><name>MessageResult</name></argument>&gt;</argument_list></name></type> <name>queryMessages</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>messages</name> <init>= <expr><call><name><name>searchDatabase</name><operator>.</operator><name>queryMessages</name></name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>messages</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>CursorList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messages</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MessageModelBuilder</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                            </then><else>: <expr><call><name><name>CursorList</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Unfortunately {@link DatabaseUtils#sqlEscapeString(String)} is not sufficient for our purposes.
   * MATCH queries have a separate format of their own that disallow most "special" characters.
   *
   * Also, SQLite can't search for apostrophes, meaning we can't normally find words like "I'm".
   * However, if we replace the apostrophe with a space, then the query will find the match.
   */</comment>
  <function><specifier>private</specifier> <type><name>String</name></type> <name>sanitizeQuery</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>out</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>query</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name><name>query</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>BANNED_CHARACTERS</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\''</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></for>

    <return>return <expr><call><name><name>out</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>RecipientModelBuilder</name> <super><implements>implements <name><name>CursorList</name><operator>.</operator><name><name>ModelBuilder</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><name>RecipientModelBuilder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Recipient</name></type> <name>build</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ThreadModelBuilder</name> <super><implements>implements <name><name>CursorList</name><operator>.</operator><name><name>ModelBuilder</name><argument_list type="generic">&lt;<argument><name>ThreadRecord</name></argument>&gt;</argument_list></name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ThreadDatabase</name></type> <name>threadDatabase</name></decl>;</decl_stmt>

    <constructor><name>ThreadModelBuilder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ThreadDatabase</name></type> <name>threadDatabase</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadDatabase</name></name> <operator>=</operator> <name>threadDatabase</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>ThreadRecord</name></type> <name>build</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>threadDatabase</name><operator>.</operator><name>readerFor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCurrent</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>MessageModelBuilder</name> <super><implements>implements <name><name>CursorList</name><operator>.</operator><name><name>ModelBuilder</name><argument_list type="generic">&lt;<argument><name>MessageResult</name></argument>&gt;</argument_list></name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

    <constructor><name>MessageModelBuilder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>MessageResult</name></type> <name>build</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Address</name></type>   <name>conversationAddress</name>   <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndex</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>CONVERSATION_ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Address</name></type>   <name>messageAddress</name>        <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>MESSAGE_ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type> <name>conversationRecipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>conversationAddress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type> <name>messageRecipient</name>      <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageAddress</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>    <name>body</name>                  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>SNIPPET</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>receivedMs</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsSmsColumns</name><operator>.</operator><name>NORMALIZED_DATE_RECEIVED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>threadId</name>              <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsSmsColumns</name><operator>.</operator><name>THREAD_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>MessageResult</name><argument_list>(<argument><expr><name>conversationRecipient</name></expr></argument>, <argument><expr><name>messageRecipient</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>receivedMs</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name><name>Callback</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
