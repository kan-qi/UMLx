<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\TransportOption.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DrawableRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>CharacterCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>CharacterCalculator</name><operator>.</operator><name>CharacterState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<class><specifier>public</specifier> class <name>TransportOption</name> <super><implements>implements <name>Parcelable</name></implements></super> <block>{

  <enum><specifier>public</specifier> enum <name>Type</name> <block>{
    <decl><name>SMS</name></decl>,
    <decl><name>TEXTSECURE</name></decl>
  }</block></enum>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>                             <name>drawable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>                             <name>backgroundColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type>                 <name>text</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Type</name></type>                   <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>String</name></type>                 <name>composeHint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>CharacterCalculator</name></type>    <name>characterCalculator</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>CharSequence</name></argument>&gt;</argument_list></name></type> <name>simName</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type>      <name>simSubscriptionId</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TransportOption</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Type</name></type> <name>type</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>DrawableRes</name></annotation> <name>int</name></type> <name>drawable</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>backgroundColor</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>composeHint</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CharacterCalculator</name></type> <name>characterCalculator</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>drawable</name></expr></argument>, <argument><expr><name>backgroundColor</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>composeHint</name></expr></argument>, <argument><expr><name>characterCalculator</name></expr></argument>,
         <argument><expr><name><name>Optional</name><operator>.</operator></name>&lt;<name>CharSequence</name><operator>&gt;</operator><call><name>absent</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Optional</name><operator>.</operator></name>&lt;<name>Integer</name><operator>&gt;</operator><call><name>absent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>TransportOption</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Type</name></type> <name>type</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>DrawableRes</name></annotation> <name>int</name></type> <name>drawable</name></decl></parameter>,
                         <parameter><decl><type><name>int</name></type> <name>backgroundColor</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>composeHint</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CharacterCalculator</name></type> <name>characterCalculator</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>CharSequence</name></argument>&gt;</argument_list></name></type> <name>simName</name></decl></parameter>,
                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>simSubscriptionId</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name>                <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>drawable</name></name>            <operator>=</operator> <name>drawable</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>backgroundColor</name></name>     <operator>=</operator> <name>backgroundColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>text</name></name>                <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>composeHint</name></name>         <operator>=</operator> <name>composeHint</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>characterCalculator</name></name> <operator>=</operator> <name>characterCalculator</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>simName</name></name>             <operator>=</operator> <name>simName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>simSubscriptionId</name></name>   <operator>=</operator> <name>simSubscriptionId</name></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><name>TransportOption</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>Type</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>CharacterCalculator</name><operator>.</operator><name>readFromParcel</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>TextUtils</name><operator>.</operator><name>CHAR_SEQUENCE_CREATOR</name><operator>.</operator><name>createFromParcel</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><ternary><condition><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readInt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Type</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>type</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isType</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>type</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSms</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>type</name> <operator>==</operator> <name><name>Type</name><operator>.</operator><name>SMS</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>CharacterState</name></type> <name>calculateCharacters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>messageBody</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>characterCalculator</name><operator>.</operator><name>calculateCharacters</name></name><argument_list>(<argument><expr><name>messageBody</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>DrawableRes</name></annotation> <type><name>int</name></type> <name>getDrawable</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>drawable</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getBackgroundColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>backgroundColor</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getComposeHint</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>composeHint</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getDescription</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>text</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>CharSequence</name></argument>&gt;</argument_list></name></type> <name>getSimName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>simName</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getSimSubscriptionId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>simSubscriptionId</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><call><name><name>type</name><operator>.</operator><name>name</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><name>backgroundColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>composeHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>CharacterCalculator</name><operator>.</operator><name>writeToParcel</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>characterCalculator</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TextUtils</name><operator>.</operator><name>writeToParcel</name></name><argument_list>(<argument><expr><call><name><name>simName</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>simSubscriptionId</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><call><name><name>simSubscriptionId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Creator</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>TransportOption</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>TransportOption</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>TransportOption</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <name><name>TransportOption</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>
}</block></class>
</unit>
