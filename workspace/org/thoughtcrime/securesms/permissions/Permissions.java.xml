<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\permissions\Permissions.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DrawableRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Display</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>LRUCache</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>Permissions</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>PermissionsRequest</name></argument>&gt;</argument_list></name></type> <name>OUTSTANDING</name> <init>= <expr><operator>new</operator> <call><name><name>LRUCache</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PermissionsBuilder</name></type> <name>with</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>PermissionsBuilder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActivityPermissionObject</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PermissionsBuilder</name></type> <name>with</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>PermissionsBuilder</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FragmentPermissionObject</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>PermissionsBuilder</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PermissionObject</name></type> <name>permissionObject</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>requestedPermissions</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Runnable</name></type> <name>allGrantedListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Runnable</name></type> <name>anyDeniedListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Runnable</name></type> <name>anyPermanentlyDeniedListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>Runnable</name></type> <name>anyResultListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someGrantedListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someDeniedListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>somePermanentlyDeniedListener</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>DrawableRes</name></annotation> <type><name><name>int</name><index>[]</index></name></type>  <name>rationalDialogHeader</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier>              <type><name>String</name></type> <name>rationaleDialogMessage</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>ifNecesary</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>condition</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>PermissionsBuilder</name><parameter_list>(<parameter><decl><type><name>PermissionObject</name></type> <name>permissionObject</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>permissionObject</name></name> <operator>=</operator> <name>permissionObject</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>request</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>requestedPermissions</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>requestedPermissions</name></name> <operator>=</operator> <name>requestedPermissions</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>ifNecessary</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifNecesary</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>ifNecessary</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>condition</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>ifNecesary</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>condition</name></name>  <operator>=</operator> <name>condition</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>withRationaleDialog</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <annotation>@<name>DrawableRes</name></annotation> <name>int</name><modifier>...</modifier></type> <name>headers</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rationalDialogHeader</name></name>   <operator>=</operator> <name>headers</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rationaleDialogMessage</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>withPermanentDenialDialog</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>onAnyPermanentlyDenied</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SettingsDialogListener</name><argument_list>(<argument><expr><call><name><name>permissionObject</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onAllGranted</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>allGrantedListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allGrantedListener</name></name> <operator>=</operator> <name>allGrantedListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onAnyDenied</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>anyDeniedListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anyDeniedListener</name></name> <operator>=</operator> <name>anyDeniedListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"WeakerAccess"</literal></expr></argument>)</argument_list></annotation>
    <specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onAnyPermanentlyDenied</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>anyPermanentlyDeniedListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anyPermanentlyDeniedListener</name></name> <operator>=</operator> <name>anyPermanentlyDeniedListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onAnyResult</name><parameter_list>(<parameter><decl><type><name>Runnable</name></type> <name>anyResultListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anyResultListener</name></name> <operator>=</operator> <name>anyResultListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onSomeGranted</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someGrantedListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>someGrantedListener</name></name> <operator>=</operator> <name>someGrantedListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onSomeDenied</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someDeniedListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>someDeniedListener</name></name> <operator>=</operator> <name>someDeniedListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>PermissionsBuilder</name></type> <name>onSomePermanentlyDenied</name><parameter_list>(<parameter><decl><type><name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>somePermanentlyDeniedListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>somePermanentlyDeniedListener</name></name> <operator>=</operator> <name>somePermanentlyDeniedListener</name></expr>;</expr_stmt>
      <return>return <expr><name>this</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>execute</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>PermissionsRequest</name></type> <name>request</name> <init>= <expr><operator>new</operator> <call><name>PermissionsRequest</name><argument_list>(<argument><expr><name>allGrantedListener</name></expr></argument>, <argument><expr><name>anyDeniedListener</name></expr></argument>, <argument><expr><name>anyPermanentlyDeniedListener</name></expr></argument>, <argument><expr><name>anyResultListener</name></expr></argument>,
                                                          <argument><expr><name>someGrantedListener</name></expr></argument>, <argument><expr><name>someDeniedListener</name></expr></argument>, <argument><expr><name>somePermanentlyDeniedListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>ifNecesary</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>permissionObject</name><operator>.</operator><name>hasAll</name></name><argument_list>(<argument><expr><name>requestedPermissions</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>condition</name><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>executePreGrantedPermissionsRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>rationaleDialogMessage</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>rationalDialogHeader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>executePermissionsRequestWithRationale</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><call><name>executePermissionsRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>executePreGrantedPermissionsRequest</name><parameter_list>(<parameter><decl><type><name>PermissionsRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>grantResults</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><name><name>requestedPermissions</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>grantResults</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>grantResults</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>;</expr_stmt></block></for>

      <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name>requestedPermissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>requestedPermissions</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ConstantConditions"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>void</name></type> <name>executePermissionsRequestWithRationale</name><parameter_list>(<parameter><decl><type><name>PermissionsRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>RationaleDialog</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><call><name><name>permissionObject</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rationaleDialogMessage</name></expr></argument>, <argument><expr><name>rationalDialogHeader</name></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Permissions_continue</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>executePermissionsRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>setNegativeButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Permissions_not_now</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name>executeNoPermissionsRequest</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call>
                     <operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call>
                     <operator>.</operator><call><name>setLayout</name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>permissionObject</name><operator>.</operator><name>getWindowWidth</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">.75</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>executePermissionsRequest</name><parameter_list>(<parameter><decl><type><name>PermissionsRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>requestCode</name> <init>= <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><literal type="number">65434</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

      <synchronized>synchronized <init>(<expr><name>OUTSTANDING</name></expr>)</init> <block>{
        <expr_stmt><expr><call><name><name>OUTSTANDING</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></synchronized>

      <for>for <control>(<init><decl><type><name>String</name></type> <name>permission</name> <range>: <expr><name>requestedPermissions</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>addMapping</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>, <argument><expr><call><name><name>permissionObject</name><operator>.</operator><name>shouldShouldPermissionRationale</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><call><name><name>permissionObject</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>requestedPermissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>executeNoPermissionsRequest</name><parameter_list>(<parameter><decl><type><name>PermissionsRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <block>{
      <for>for <control>(<init><decl><type><name>String</name></type> <name>permission</name> <range>: <expr><name>requestedPermissions</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>addMapping</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>permissions</name>  <init>= <expr><call><name>filterNotGranted</name><argument_list>(<argument><expr><call><name><name>permissionObject</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>requestedPermissions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type>    <name>grantResults</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToInt</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>permission</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name><name>PackageManager</name><operator>.</operator><name>PERMISSION_DENIED</name></name></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>showDialog</name>   <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>permissions</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>fill</name></name><argument_list>(<argument><expr><name>showDialog</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>, <argument><expr><name>showDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

  }</block></class>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestPermissions</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><call><name>filterNotGranted</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>requestPermissions</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Fragment</name></type> <name>fragment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><call><name>filterNotGranted</name><argument_list>(<argument><expr><call><name><name>fragment</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>filterNotGranted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>permission</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr></block></lambda></expr></argument>)</argument_list></call>
                 <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call>
                 <operator>.</operator><call><name>toArray</name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasAny</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name> <operator>||</operator>
        <call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>anyMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>permission</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>

  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasAll</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name> <operator>||</operator>
        <call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>permissions</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>allMatch</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>permission</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>ContextCompat</name><operator>.</operator><name>checkSelfPermission</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</return>

  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>Fragment</name></type> <name>fragment</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>onRequestPermissionsResult</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FragmentPermissionObject</name><argument_list>(<argument><expr><name>fragment</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>onRequestPermissionsResult</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ActivityPermissionObject</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PermissionObject</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>PermissionsRequest</name></type> <name>resultListener</name></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>OUTSTANDING</name></expr>)</init> <block>{
      <expr_stmt><expr><name>resultListener</name> <operator>=</operator> <call><name><name>OUTSTANDING</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>

    <if>if <condition>(<expr><name>resultListener</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <decl_stmt><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>shouldShowRationaleDialog</name> <init>= <expr><operator>new</operator> <name><name>boolean</name><index>[<expr><name><name>permissions</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>permissions</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>grantResults</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>shouldShowRationaleDialog</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>shouldShouldPermissionRationale</name></name><argument_list>(<argument><expr><name><name>permissions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name><name>resultListener</name><operator>.</operator><name>onResult</name></name><argument_list>(<argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>, <argument><expr><name>shouldShowRationaleDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Intent</name></type> <name>getApplicationSettingsIntent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Settings</name><operator>.</operator><name>ACTION_APPLICATION_DETAILS_SETTINGS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>fromParts</name></name><argument_list>(<argument><expr><literal type="string">"package"</literal></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>intent</name></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>abstract</specifier> <specifier>static</specifier> class <name>PermissionObject</name> <block>{

    <function_decl><specifier>abstract</specifier> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><specifier>abstract</specifier> <type><name>boolean</name></type> <name>shouldShouldPermissionRationale</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>permission</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>abstract</specifier> <type><name>boolean</name></type> <name>hasAll</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><specifier>abstract</specifier> <type><name>void</name></type> <name>requestPermissions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><type><name>int</name></type> <name>getWindowWidth</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>WindowManager</name></type>  <name>windowManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getWindowManager</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Display</name></type>        <name>display</name>       <init>= <expr><call><name><name>windowManager</name><operator>.</operator><name>getDefaultDisplay</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name>       <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>getMetrics</name></name><argument_list>(<argument><expr><name>metrics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name><name>metrics</name><operator>.</operator><name>widthPixels</name></name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ActivityPermissionObject</name> <super><extends>extends <name>PermissionObject</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Activity</name></type> <name>activity</name></decl>;</decl_stmt>

    <constructor><name>ActivityPermissionObject</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>activity</name></name> <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>activity</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>shouldShouldPermissionRationale</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>permission</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>ActivityCompat</name><operator>.</operator><name>shouldShowRequestPermissionRationale</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>hasAll</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>Permissions</name><operator>.</operator><name>hasAll</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>requestPermissions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FragmentPermissionObject</name> <super><extends>extends <name>PermissionObject</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>Fragment</name></type> <name>fragment</name></decl>;</decl_stmt>

    <constructor><name>FragmentPermissionObject</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Fragment</name></type> <name>fragment</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fragment</name></name> <operator>=</operator> <name>fragment</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>fragment</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>shouldShouldPermissionRationale</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>permission</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>fragment</name><operator>.</operator><name>shouldShowRequestPermissionRationale</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>hasAll</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>Permissions</name><operator>.</operator><name>hasAll</name></name><argument_list>(<argument><expr><call><name><name>fragment</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>requestPermissions</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>permissions</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>requestPermissions</name></name><argument_list>(<argument><expr><name>fragment</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SettingsDialogListener</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>Context</name></argument>&gt;</argument_list></name></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>                 <name>message</name></decl>;</decl_stmt>

    <constructor><name>SettingsDialogListener</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>Context</name></type> <name>context</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>context</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>context</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Permissions_permission_required</name></name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>setMessage</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>setPositiveButton</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>Permissions_continue</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialog</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><call><name>getApplicationSettingsIntent</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>setNegativeButton</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
