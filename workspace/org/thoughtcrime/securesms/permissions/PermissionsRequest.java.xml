<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\permissions\PermissionsRequest.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class>class <name>PermissionsRequest</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>PRE_REQUEST_MAPPING</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>allGrantedListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>anyDeniedListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>anyPermanentlyDeniedListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>anyResultListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someGrantedListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someDeniedListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>somePermanentlyDeniedListener</name></decl>;</decl_stmt>

  <constructor><name>PermissionsRequest</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>allGrantedListener</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>anyDeniedListener</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>anyPermanentlyDeniedListener</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>anyResultListener</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someGrantedListener</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>someDeniedListener</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>somePermanentlyDeniedListener</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allGrantedListener</name></name>            <operator>=</operator> <name>allGrantedListener</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anyDeniedListener</name></name>             <operator>=</operator> <name>anyDeniedListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anyPermanentlyDeniedListener</name></name>  <operator>=</operator> <name>anyPermanentlyDeniedListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>anyResultListener</name></name>             <operator>=</operator> <name>anyResultListener</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>someGrantedListener</name></name>           <operator>=</operator> <name>someGrantedListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>someDeniedListener</name></name>            <operator>=</operator> <name>someDeniedListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>somePermanentlyDeniedListener</name></name> <operator>=</operator> <name>somePermanentlyDeniedListener</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>, <parameter><decl><type><name><name>boolean</name><index>[]</index></name></type> <name>shouldShowRationaleDialog</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>granted</name>           <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>permissions</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>denied</name>            <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>permissions</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>permanentlyDenied</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>permissions</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>permissions</name><operator>.</operator><name>length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>grantResults</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>PackageManager</name><operator>.</operator><name>PERMISSION_GRANTED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>granted</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>permissions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>preRequestShouldShowRationaleDialog</name> <init>= <expr><call><name><name>PRE_REQUEST_MAPPING</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>permissions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>(</operator><name>somePermanentlyDeniedListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>||</operator> <name>anyPermanentlyDeniedListener</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>!</operator><name>preRequestShouldShowRationaleDialog</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shouldShowRationaleDialog</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
          <expr_stmt><expr><call><name><name>permanentlyDenied</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>permissions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>denied</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name><name>permissions</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></else></if>
    }</block></for>

    <if>if <condition>(<expr><name>allGrantedListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>granted</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>denied</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>permanentlyDenied</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>allGrantedListener</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>someGrantedListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>granted</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>someGrantedListener</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>granted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <if>if <condition>(<expr><call><name><name>denied</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>anyDeniedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>anyDeniedListener</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>someDeniedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>someDeniedListener</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>denied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>permanentlyDenied</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>anyPermanentlyDeniedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>anyPermanentlyDeniedListener</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>somePermanentlyDeniedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>somePermanentlyDeniedListener</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>permanentlyDenied</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>anyResultListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>anyResultListener</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><type><name>void</name></type> <name>addMapping</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>permission</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>shouldShowRationaleDialog</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>PRE_REQUEST_MAPPING</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>permission</name></expr></argument>, <argument><expr><name>shouldShowRationaleDialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
