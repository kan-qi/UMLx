<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\ViewUtil.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2015 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION_CODES</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>IdRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>LayoutRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>FastOutSlowInInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewStub</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AlphaAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name><operator>.</operator><name>LayoutParams</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>views</name><operator>.</operator><name>Stub</name></name>;</import>

<class><specifier>public</specifier> class <name>ViewUtil</name> <block>{
  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setBackground</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Drawable</name></type> <name>drawable</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setBackgroundDrawable</name></name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setY</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ViewCompat</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>params</name><operator>.</operator><name>topMargin</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>getY</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>ViewCompat</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>topMargin</name></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setX</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ViewCompat</name><operator>.</operator><name>setX</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>params</name><operator>.</operator><name>leftMargin</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>getX</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>ViewCompat</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>LayoutParams</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>leftMargin</name></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>swapChildInPlace</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>toRemove</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>toAdd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultIndex</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>childIndex</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>indexOfChild</name></name><argument_list>(<argument><expr><name>toRemove</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>childIndex</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>removeView</name></name><argument_list>(<argument><expr><name>toRemove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>toAdd</name></expr></argument>, <argument><expr><ternary><condition><expr><name>childIndex</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>childIndex</name></expr> </then><else>: <expr><name>defaultIndex</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>View</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>inflateStub</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>stubId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call>(<name>T</name>)<argument_list>(<argument><expr><operator>(</operator><name>ViewStub</name><operator>)</operator><call><name><name>parent</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>stubId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>View</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>findById</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>parent</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>View</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>findById</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>T</name><operator>)</operator> <call><name><name>parent</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>View</name></extends></parameter>&gt;</parameter_list> <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>findStubById</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><annotation>@<name>IdRes</name></annotation> <name>int</name></type> <name>resId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><operator>(</operator><name>ViewStub</name><operator>)</operator><call><name><name>parent</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name>resId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Animation</name></type> <name>getAlphaAnimation</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Animation</name></type> <name>anim</name> <init>= <expr><operator>new</operator> <call><name>AlphaAnimation</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FastOutSlowInInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>anim</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>fadeIn</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>animateIn</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><call><name>getAlphaAnimation</name><argument_list>(<argument><expr><literal type="number">0f</literal></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>fadeOut</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>fadeOut</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>fadeOut</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visibility</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>animateOut</name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><call><name>getAlphaAnimation</name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>animateOut</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Animation</name></type> <name>animation</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>visibility</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>SettableFuture</name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name>SettableFuture</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>visibility</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setAnimationListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Animation</name><operator>.</operator><name>AnimationListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationStart</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationRepeat</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{}</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>visibility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>future</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>animateIn</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Animation</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>view</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setStartTime</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name>View</name></extends></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>inflate</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>   <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>,
                                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation>   <name>ViewGroup</name></type>      <name>parent</name></decl></parameter>,
                                           <parameter><decl><type><annotation>@<name>LayoutRes</name></annotation> <name>int</name></type>            <name>layoutResId</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call>(<name>T</name>)<argument_list>(<argument><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name>layoutResId</name></expr></argument>, <argument><expr><name>parent</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"RtlHardcoded"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setTextViewGravityStart</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>TextView</name></type> <name>textView</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>DynamicLanguage</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>LAYOUT_DIRECTION_RTL</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>RIGHT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>setGravity</name></name><argument_list>(<argument><expr><name><name>Gravity</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>mirrorIfRtl</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name> <operator>&amp;&amp;</operator>
        <call><name><name>DynamicLanguage</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>LAYOUT_DIRECTION_RTL</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setScaleX</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>dpToPx</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dp</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><name>dp</name> <operator>*</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>updateLayoutParams</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>width</name>  <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getLeftMargin</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>leftMargin</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>rightMargin</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getRightMargin</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>rightMargin</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>leftMargin</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLeftMargin</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>margin</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>leftMargin</name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>rightMargin</name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>forceLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setTopMargin</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>margin</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name><name>ViewGroup</name><operator>.</operator><name>MarginLayoutParams</name></name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>topMargin</name> <operator>=</operator> <name>margin</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>requestLayout</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPaddingTop</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPaddingBottom</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>view</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>view</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
