<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\ShortCodeUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>NumberParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>PhoneNumberUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>Phonenumber</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>ShortNumberInfo</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>ShortCodeUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ShortCodeUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>SHORT_COUNTRIES</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"NU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"TK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"NC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"AC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>}</block></class></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isShortCode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>localNumber</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>PhoneNumberUtil</name></type>         <name>util</name>              <init>= <expr><call><name><name>PhoneNumberUtil</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>localNumberObject</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                  <name>localCountryCode</name>  <init>= <expr><call><name><name>util</name><operator>.</operator><name>getRegionCodeForNumber</name></name><argument_list>(<argument><expr><name>localNumberObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                  <name>bareNumber</name>        <init>= <expr><call><name><name>number</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^0-9+]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// libphonenumber seems incorrect for Russia and a few other countries with 4 digit short codes.</comment>
      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SHORT_COUNTRIES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>shortCode</name> <init>= <expr><call><name><name>util</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>ShortNumberInfo</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPossibleShortNumberForRegion</name><argument_list>(<argument><expr><name>shortCode</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

}</block></class>
</unit>
