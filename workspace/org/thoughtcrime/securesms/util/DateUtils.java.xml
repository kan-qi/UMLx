<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\DateUtils.java"><comment type="block">/*
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateFormat</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>SimpleDateFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Date</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Utility methods to help display dates in a nice, easily readable way.
 */</comment>
<class><specifier>public</specifier> class <name>DateUtils</name> <super><extends>extends <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type>           <name>TAG</name>         <init>= <expr><call><name><name>DateUtils</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>SimpleDateFormat</name></type> <name>DATE_FORMAT</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyyMMdd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWithin</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>millis</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>span</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>millis</name> <operator>&lt;=</operator> <call><name><name>unit</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name>span</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isYesterday</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>when</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DateUtils</name><operator>.</operator><name>isToday</name></name><argument_list>(<argument><expr><name>when</name> <operator>+</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>convertDelta</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>millis</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>to</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>millis</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFormattedDateTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>template</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>localizedPattern</name> <init>= <expr><call><name>getLocalizedPattern</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>localizedPattern</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getBriefRelativeTimeSpanString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>c</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DateUtils_just_now</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>mins</name> <init>= <expr><call><name>convertDelta</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>c</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DateUtils_minutes_ago</name></name></expr></argument>, <argument><expr><name>mins</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>hours</name> <init>= <expr><call><name>convertDelta</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>c</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>hours_ago</name></name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>getFormattedDateTime</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="string">"EEE"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">365</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>getFormattedDateTime</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="string">"MMM d"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <return>return <expr><call><name>getFormattedDateTime</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="string">"MMM d, yyyy"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getExtendedRelativeTimeSpanString</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>c</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DateUtils_just_now</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>mins</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>convert</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>timestamp</name></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>c</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DateUtils_minutes_ago</name></name></expr></argument>, <argument><expr><name>mins</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>format</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if      <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>,   <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"EEE "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">365</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"MMM d, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <else>else                                              <block type="pseudo"><expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"MMM d, yyyy, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

      <if>if <condition>(<expr><call><name><name>DateFormat</name><operator>.</operator><name>is24HourFormat</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"HH:mm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else                              <block type="pseudo"><expr_stmt><expr><call><name><name>format</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"hh:mm a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

      <return>return <expr><call><name>getFormattedDateTime</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><call><name><name>format</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getDayPrecisionTimeSpanString</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SimpleDateFormat</name></type> <name>simpleDateFormat</name> <init>= <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><literal type="string">"yyyyMMdd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>simpleDateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>simpleDateFormat</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DeviceListItem_today</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>format</name></decl>;</decl_stmt>

      <if>if      <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">"EEE "</literal></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><call><name>isWithin</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">365</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">"MMM d"</literal></expr>;</expr_stmt></block></then></if></elseif>
      <else>else                                              <block type="pseudo"><expr_stmt><expr><name>format</name> <operator>=</operator> <literal type="string">"MMM d, yyy"</literal></expr>;</expr_stmt></block></else></if>

      <return>return <expr><call><name>getFormattedDateTime</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SimpleDateFormat</name></type> <name>getDetailedDateFormatter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>dateFormatPattern</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>DateFormat</name><operator>.</operator><name>is24HourFormat</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>dateFormatPattern</name> <operator>=</operator> <call><name>getLocalizedPattern</name><argument_list>(<argument><expr><literal type="string">"MMM d, yyyy HH:mm:ss zzz"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>dateFormatPattern</name> <operator>=</operator> <call><name>getLocalizedPattern</name><argument_list>(<argument><expr><literal type="string">"MMM d, yyyy hh:mm:ss a zzz"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>dateFormatPattern</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getRelativeDate</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>,
                                       <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><call><name>isToday</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DateUtils_today</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isYesterday</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DateUtils_yesterday</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <return>return <expr><call><name>getFormattedDateTime</name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="string">"EEE, MMM d, yyyy"</literal></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSameDay</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>DATE_FORMAT</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>DATE_FORMAT</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Date</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSameExtendedRelativeTimestamp</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>t2</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getExtendedRelativeTimeSpanString</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name>getExtendedRelativeTimeSpanString</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLocalizedPattern</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>template</name></decl></parameter>, <parameter><decl><type><name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR2</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>DateFormat</name><operator>.</operator><name>getBestDateTimePattern</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><name>template</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>new</operator> <call><name>SimpleDateFormat</name><argument_list>(<argument><expr><name>template</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toLocalizedPattern</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>
}</block></class>
</unit>
