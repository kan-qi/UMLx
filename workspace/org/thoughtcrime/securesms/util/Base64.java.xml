<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\Base64.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block" format="javadoc">/**
 * &lt;p&gt;Encodes and decodes to and from Base64 notation.&lt;/p&gt;
 * &lt;p&gt;Homepage: &lt;a href="http://iharder.net/base64"&gt;http://iharder.net/base64&lt;/a&gt;.&lt;/p&gt;
 * 
 * &lt;p&gt;Example:&lt;/p&gt;
 * 
 * &lt;code&gt;String encoded = Base64.encode( myByteArray );&lt;/code&gt;
 * &lt;br /&gt;
 * &lt;code&gt;byte[] myByteArray = Base64.decode( encoded );&lt;/code&gt;
 *
 * &lt;p&gt;The &lt;tt&gt;options&lt;/tt&gt; parameter, which appears in a few places, is used to pass 
 * several pieces of information to the encoder. In the "higher level" methods such as 
 * encodeBytes( bytes, options ) the options parameter can be used to indicate such 
 * things as first gzipping the bytes before encoding them, not inserting linefeeds,
 * and encoding using the URL-safe and Ordered dialects.&lt;/p&gt;
 *
 * &lt;p&gt;Note, according to &lt;a href="http://www.faqs.org/rfcs/rfc3548.html"&gt;RFC3548&lt;/a&gt;,
 * Section 2.1, implementations should not add line feeds unless explicitly told
 * to do so. I've got Base64 set to this behavior now, although earlier versions
 * broke lines by default.&lt;/p&gt;
 *
 * &lt;p&gt;The constants defined in Base64 can be OR-ed together to combine options, so you 
 * might make a call like this:&lt;/p&gt;
 *
 * &lt;code&gt;String encoded = Base64.encodeBytes( mybytes, Base64.GZIP | Base64.DO_BREAK_LINES );&lt;/code&gt;
 * &lt;p&gt;to compress the data before encoding it and then making the output have newline characters.&lt;/p&gt;
 * &lt;p&gt;Also...&lt;/p&gt;
 * &lt;code&gt;String encoded = Base64.encodeBytes( crazyString.getBytes() );&lt;/code&gt;
 *
 *
 *
 * &lt;p&gt;
 * Change Log:
 * &lt;/p&gt;
 * &lt;ul&gt;
 *  &lt;li&gt;v2.3.4 - Fixed bug when working with gzipped streams whereby flushing
 *   the Base64.OutputStream closed the Base64 encoding (by padding with equals
 *   signs) too soon. Also added an option to suppress the automatic decoding
 *   of gzipped streams. Also added experimental support for specifying a
 *   class loader when using the
 *   {@link #decodeToObject(java.lang.String, int, java.lang.ClassLoader)}
 *   method.&lt;/li&gt;
 *  &lt;li&gt;v2.3.3 - Changed default char encoding to US-ASCII which reduces the internal Java
 *   footprint with its CharEncoders and so forth. Fixed some javadocs that were
 *   inconsistent. Removed imports and specified things like java.io.IOException
 *   explicitly inline.&lt;/li&gt;
 *  &lt;li&gt;v2.3.2 - Reduced memory footprint! Finally refined the "guessing" of how big the
 *   final encoded data will be so that the code doesn't have to create two output
 *   arrays: an oversized initial one and then a final, exact-sized one. Big win
 *   when using the {@link #encodeBytesToBytes(byte[])} family of methods (and not
 *   using the gzip options which uses a different mechanism with streams and stuff).&lt;/li&gt;
 *  &lt;li&gt;v2.3.1 - Added {@link #encodeBytesToBytes(byte[], int, int, int)} and some
 *   similar helper methods to be more efficient with memory by not returning a
 *   String but just a byte array.&lt;/li&gt;
 *  &lt;li&gt;v2.3 - &lt;strong&gt;This is not a drop-in replacement!&lt;/strong&gt; This is two years of comments
 *   and bug fixes queued up and finally executed. Thanks to everyone who sent
 *   me stuff, and I'm sorry I wasn't able to distribute your fixes to everyone else.
 *   Much bad coding was cleaned up including throwing exceptions where necessary 
 *   instead of returning null values or something similar. Here are some changes
 *   that may affect you:
 *   &lt;ul&gt;
 *    &lt;li&gt;&lt;em&gt;Does not break lines, by default.&lt;/em&gt; This is to keep in compliance with
 *      &lt;a href="http://www.faqs.org/rfcs/rfc3548.html"&gt;RFC3548&lt;/a&gt;.&lt;/li&gt;
 *    &lt;li&gt;&lt;em&gt;Throws exceptions instead of returning null values.&lt;/em&gt; Because some operations
 *      (especially those that may permit the GZIP option) use IO streams, there
 *      is a possiblity of an java.io.IOException being thrown. After some discussion and
 *      thought, I've changed the behavior of the methods to throw java.io.IOExceptions
 *      rather than return null if ever there's an error. I think this is more
 *      appropriate, though it will require some changes to your code. Sorry,
 *      it should have been done this way to begin with.&lt;/li&gt;
 *    &lt;li&gt;&lt;em&gt;Removed all references to System.out, System.err, and the like.&lt;/em&gt;
 *      Shame on me. All I can say is sorry they were ever there.&lt;/li&gt;
 *    &lt;li&gt;&lt;em&gt;Throws NullPointerExceptions and IllegalArgumentExceptions&lt;/em&gt; as needed
 *      such as when passed arrays are null or offsets are invalid.&lt;/li&gt;
 *    &lt;li&gt;Cleaned up as much javadoc as I could to avoid any javadoc warnings.
 *      This was especially annoying before for people who were thorough in their
 *      own projects and then had gobs of javadoc warnings on this file.&lt;/li&gt;
 *   &lt;/ul&gt;
 *  &lt;li&gt;v2.2.1 - Fixed bug using URL_SAFE and ORDERED encodings. Fixed bug
 *   when using very small files (~&lt; 40 bytes).&lt;/li&gt;
 *  &lt;li&gt;v2.2 - Added some helper methods for encoding/decoding directly from
 *   one file to the next. Also added a main() method to support command line
 *   encoding/decoding from one file to the next. Also added these Base64 dialects:
 *   &lt;ol&gt;
 *   &lt;li&gt;The default is RFC3548 format.&lt;/li&gt;
 *   &lt;li&gt;Calling Base64.setFormat(Base64.BASE64_FORMAT.URLSAFE_FORMAT) generates
 *   URL and file name friendly format as described in Section 4 of RFC3548.
 *   http://www.faqs.org/rfcs/rfc3548.html&lt;/li&gt;
 *   &lt;li&gt;Calling Base64.setFormat(Base64.BASE64_FORMAT.ORDERED_FORMAT) generates
 *   URL and file name friendly format that preserves lexical ordering as described
 *   in http://www.faqs.org/qa/rfcc-1940.html&lt;/li&gt;
 *   &lt;/ol&gt;
 *   Special thanks to Jim Kellerman at &lt;a href="http://www.powerset.com/"&gt;http://www.powerset.com/&lt;/a&gt;
 *   for contributing the new Base64 dialects.
 *  &lt;/li&gt;
 * 
 *  &lt;li&gt;v2.1 - Cleaned up javadoc comments and unused variables and methods. Added
 *   some convenience methods for reading and writing to and from files.&lt;/li&gt;
 *  &lt;li&gt;v2.0.2 - Now specifies UTF-8 encoding in places where the code fails on systems
 *   with other encodings (like EBCDIC).&lt;/li&gt;
 *  &lt;li&gt;v2.0.1 - Fixed an error when decoding a single byte, that is, when the
 *   encoded data was a single byte.&lt;/li&gt;
 *  &lt;li&gt;v2.0 - I got rid of methods that used booleans to set options. 
 *   Now everything is more consolidated and cleaner. The code now detects
 *   when data that's being decoded is gzip-compressed and will decompress it
 *   automatically. Generally things are cleaner. You'll probably have to
 *   change some method calls that you were making to support the new
 *   options format (&lt;tt&gt;int&lt;/tt&gt;s that you "OR" together).&lt;/li&gt;
 *  &lt;li&gt;v1.5.1 - Fixed bug when decompressing and decoding to a             
 *   byte[] using &lt;tt&gt;decode( String s, boolean gzipCompressed )&lt;/tt&gt;.      
 *   Added the ability to "suspend" encoding in the Output Stream so        
 *   you can turn on and off the encoding if you need to embed base64       
 *   data in an otherwise "normal" stream (like an XML file).&lt;/li&gt;  
 *  &lt;li&gt;v1.5 - Output stream pases on flush() command but doesn't do anything itself.
 *      This helps when using GZIP streams.
 *      Added the ability to GZip-compress objects before encoding them.&lt;/li&gt;
 *  &lt;li&gt;v1.4 - Added helper methods to read/write files.&lt;/li&gt;
 *  &lt;li&gt;v1.3.6 - Fixed OutputStream.flush() so that 'position' is reset.&lt;/li&gt;
 *  &lt;li&gt;v1.3.5 - Added flag to turn on and off line breaks. Fixed bug in input stream
 *      where last buffer being read, if not completely full, was not returned.&lt;/li&gt;
 *  &lt;li&gt;v1.3.4 - Fixed when "improperly padded stream" error was thrown at the wrong time.&lt;/li&gt;
 *  &lt;li&gt;v1.3.3 - Fixed I/O streams which were totally messed up.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * &lt;p&gt;
 * I am placing this code in the Public Domain. Do with it as you will.
 * This software comes with no guarantees or warranties but with
 * plenty of well-wishing instead!
 * Please visit &lt;a href="http://iharder.net/base64"&gt;http://iharder.net/base64&lt;/a&gt;
 * periodically to check for updates or to contribute improvements.
 * &lt;/p&gt;
 *
 * @author Robert Harder
 * @author rob@iharder.net
 * @version 2.3.3
 */</comment>
<class><specifier>public</specifier> class <name>Base64</name>
<block>{
    
<comment type="block">/* ********  P U B L I C   F I E L D S  ******** */</comment>   
    
    
    <comment type="block" format="javadoc">/** No options specified. Value is zero. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>NO_OPTIONS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    
    <comment type="block" format="javadoc">/** Specify encoding in first bit. Value is one. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>ENCODE</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc">/** Specify decoding in first bit. Value is zero. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DECODE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    

    <comment type="block" format="javadoc">/** Specify that data should be gzip-compressed in second bit. Value is two. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>GZIP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <comment type="block" format="javadoc">/** Specify that gzipped data should &lt;em&gt;not&lt;/em&gt; be automatically gunzipped. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DONT_GUNZIP</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc">/** Do break lines when encoding. Value is 8. */</comment>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>DO_BREAK_LINES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
	
    <comment type="block" format="javadoc">/** 
     * Encode using Base64-like encoding that is URL- and Filename-safe as described
     * in Section 4 of RFC3548: 
     * &lt;a href="http://www.faqs.org/rfcs/rfc3548.html"&gt;http://www.faqs.org/rfcs/rfc3548.html&lt;/a&gt;.
     * It is important to note that data encoded this way is &lt;em&gt;not&lt;/em&gt; officially valid Base64, 
     * or at the very least should not be called Base64 without also specifying that is
     * was encoded using the URL- and Filename-safe dialect.
     */</comment>
     <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>URL_SAFE</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>


     <comment type="block" format="javadoc">/**
      * Encode using the special "ordered" dialect of Base64 described here:
      * &lt;a href="http://www.faqs.org/qa/rfcc-1940.html"&gt;http://www.faqs.org/qa/rfcc-1940.html&lt;/a&gt;.
      */</comment>
     <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>ORDERED</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
    
    
<comment type="block">/* ********  P R I V A T E   F I E L D S  ******** */</comment>  
    
    
    <comment type="block" format="javadoc">/** Maximum line length (76) of Base64 output. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>int</name></type> <name>MAX_LINE_LENGTH</name> <init>= <expr><literal type="number">76</literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc">/** The equals sign (=) as a byte. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>byte</name></type> <name>EQUALS_SIGN</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'='</literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc">/** The new line character (\n) as a byte. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>byte</name></type> <name>NEW_LINE</name> <init>= <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
    
    
    <comment type="block" format="javadoc">/** Preferred encoding. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>PREFERRED_ENCODING</name> <init>= <expr><literal type="string">"US-ASCII"</literal></expr></init></decl>;</decl_stmt>
    
	
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>byte</name></type> <name>WHITE_SPACE_ENC</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Indicates white space in encoding</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>byte</name></type> <name>EQUALS_SIGN_ENC</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// Indicates equals sign in encoding</comment>
	
	
<comment type="block">/* ********  S T A N D A R D   B A S E 6 4   A L P H A B E T  ******** */</comment>	
    
    <comment type="block" format="javadoc">/** The 64 valid Base64 values. */</comment>
    <comment type="block">/* Host platform me be something funny like EBCDIC, so we hardcode these values. */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>_STANDARD_ALPHABET</name> <init>= <expr><block>{
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'A'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'B'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'C'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'D'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'E'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'F'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'G'</literal></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'H'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'I'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'J'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'K'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'L'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'M'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'N'</literal></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'O'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'P'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Q'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'R'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'S'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'T'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'U'</literal></expr>, 
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'V'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'W'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'X'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Y'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Z'</literal></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'a'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'b'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'c'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'d'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'e'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'f'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'g'</literal></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'h'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'i'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'j'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'k'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'l'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'m'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'n'</literal></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'o'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'p'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'q'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'r'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'s'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'t'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'u'</literal></expr>, 
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'v'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'w'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'x'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'y'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'z'</literal></expr>,
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'0'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'1'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'2'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'3'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'4'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'5'</literal></expr>, 
        <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'6'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'7'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'8'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'9'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'+'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'/'</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
	
    
    <comment type="block" format="javadoc">/** 
     * Translates a Base64 value to either its 6-bit reconstruction value
     * or a negative number indicating some other meaning.
     **/</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>_STANDARD_DECODABET</name> <init>= <expr><block>{
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                 <comment type="line">// Decimal  0 -  8</comment>
        <expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,                                      <comment type="line">// Whitespace: Tab and Linefeed</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                      <comment type="line">// Decimal 11 - 12</comment>
        <expr><operator>-</operator><literal type="number">5</literal></expr>,                                         <comment type="line">// Whitespace: Carriage Return</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,     <comment type="line">// Decimal 14 - 26</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                             <comment type="line">// Decimal 27 - 31</comment>
        <expr><operator>-</operator><literal type="number">5</literal></expr>,                                         <comment type="line">// Whitespace: Space</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,              <comment type="line">// Decimal 33 - 42</comment>
        <expr><literal type="number">62</literal></expr>,                                         <comment type="line">// Plus sign at decimal 43</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                   <comment type="line">// Decimal 44 - 46</comment>
        <expr><literal type="number">63</literal></expr>,                                         <comment type="line">// Slash at decimal 47</comment>
        <expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,              <comment type="line">// Numbers zero through nine</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                   <comment type="line">// Decimal 58 - 60</comment>
        <expr><operator>-</operator><literal type="number">1</literal></expr>,                                         <comment type="line">// Equals sign at decimal 61</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                      <comment type="line">// Decimal 62 - 64</comment>
        <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,            <comment type="line">// Letters 'A' through 'N'</comment>
        <expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,        <comment type="line">// Letters 'O' through 'Z'</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                          <comment type="line">// Decimal 91 - 96</comment>
        <expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,     <comment type="line">// Letters 'a' through 'm'</comment>
        <expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,     <comment type="line">// Letters 'n' through 'z'</comment>
        <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>                                 <comment type="line">// Decimal 123 - 126</comment>
        <comment type="block">/*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */</comment>
    }</block></expr></init></decl>;</decl_stmt>
	
	
<comment type="block">/* ********  U R L   S A F E   B A S E 6 4   A L P H A B E T  ******** */</comment>
	
    <comment type="block" format="javadoc">/**
     * Used in the URL- and Filename-safe dialect described in Section 4 of RFC3548: 
     * &lt;a href="http://www.faqs.org/rfcs/rfc3548.html"&gt;http://www.faqs.org/rfcs/rfc3548.html&lt;/a&gt;.
     * Notice that the last two bytes become "hyphen" and "underscore" instead of "plus" and "slash."
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>_URL_SAFE_ALPHABET</name> <init>= <expr><block>{
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'A'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'B'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'C'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'D'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'E'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'F'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'G'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'H'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'I'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'J'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'K'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'L'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'M'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'N'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'O'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'P'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Q'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'R'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'S'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'T'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'U'</literal></expr>, 
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'V'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'W'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'X'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Y'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Z'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'a'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'b'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'c'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'d'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'e'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'f'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'g'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'h'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'i'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'j'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'k'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'l'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'m'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'n'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'o'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'p'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'q'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'r'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'s'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'t'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'u'</literal></expr>, 
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'v'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'w'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'x'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'y'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'z'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'0'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'1'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'2'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'3'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'4'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'5'</literal></expr>, 
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'6'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'7'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'8'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'9'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'-'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'_'</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
	
    <comment type="block" format="javadoc">/**
     * Used in decoding URL- and Filename-safe dialects of Base64.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>_URL_SAFE_DECODABET</name> <init>= <expr><block>{
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                 <comment type="line">// Decimal  0 -  8</comment>
      <expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,                                      <comment type="line">// Whitespace: Tab and Linefeed</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                      <comment type="line">// Decimal 11 - 12</comment>
      <expr><operator>-</operator><literal type="number">5</literal></expr>,                                         <comment type="line">// Whitespace: Carriage Return</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,     <comment type="line">// Decimal 14 - 26</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                             <comment type="line">// Decimal 27 - 31</comment>
      <expr><operator>-</operator><literal type="number">5</literal></expr>,                                         <comment type="line">// Whitespace: Space</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,              <comment type="line">// Decimal 33 - 42</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Plus sign at decimal 43</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Decimal 44</comment>
      <expr><literal type="number">62</literal></expr>,                                         <comment type="line">// Minus sign at decimal 45</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Decimal 46</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Slash at decimal 47</comment>
      <expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,              <comment type="line">// Numbers zero through nine</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                   <comment type="line">// Decimal 58 - 60</comment>
      <expr><operator>-</operator><literal type="number">1</literal></expr>,                                         <comment type="line">// Equals sign at decimal 61</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                   <comment type="line">// Decimal 62 - 64</comment>
      <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,            <comment type="line">// Letters 'A' through 'N'</comment>
      <expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,        <comment type="line">// Letters 'O' through 'Z'</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                <comment type="line">// Decimal 91 - 94</comment>
      <expr><literal type="number">63</literal></expr>,                                         <comment type="line">// Underscore at decimal 95</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Decimal 96</comment>
      <expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,<expr><literal type="number">37</literal></expr>,<expr><literal type="number">38</literal></expr>,     <comment type="line">// Letters 'a' through 'm'</comment>
      <expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,<expr><literal type="number">51</literal></expr>,     <comment type="line">// Letters 'n' through 'z'</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>                                 <comment type="line">// Decimal 123 - 126</comment>
      <comment type="block">/*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243
      -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */</comment>
    }</block></expr></init></decl>;</decl_stmt>



<comment type="block">/* ********  O R D E R E D   B A S E 6 4   A L P H A B E T  ******** */</comment>

    <comment type="block" format="javadoc">/**
     * I don't get the point of this technique, but someone requested it,
     * and it is described here:
     * &lt;a href="http://www.faqs.org/qa/rfcc-1940.html"&gt;http://www.faqs.org/qa/rfcc-1940.html&lt;/a&gt;.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>_ORDERED_ALPHABET</name> <init>= <expr><block>{
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'-'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'0'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'1'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'2'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'3'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'4'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'5'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'6'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'7'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'8'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'9'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'A'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'B'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'C'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'D'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'E'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'F'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'G'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'H'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'I'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'J'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'K'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'L'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'M'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'N'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'O'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'P'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Q'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'R'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'S'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'T'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'U'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'V'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'W'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'X'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Y'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'Z'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'_'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'a'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'b'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'c'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'d'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'e'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'f'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'g'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'h'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'i'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'j'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'k'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'l'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'m'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'n'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'o'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'p'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'q'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'r'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'s'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'t'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'u'</literal></expr>,
      <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'v'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'w'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'x'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'y'</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="char">'z'</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
	
    <comment type="block" format="javadoc">/**
     * Used in decoding the "ordered" dialect of Base64.
     */</comment>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name><name>byte</name><index>[]</index></name></type> <name>_ORDERED_DECODABET</name> <init>= <expr><block>{
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                 <comment type="line">// Decimal  0 -  8</comment>
      <expr><operator>-</operator><literal type="number">5</literal></expr>,<expr><operator>-</operator><literal type="number">5</literal></expr>,                                      <comment type="line">// Whitespace: Tab and Linefeed</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                      <comment type="line">// Decimal 11 - 12</comment>
      <expr><operator>-</operator><literal type="number">5</literal></expr>,                                         <comment type="line">// Whitespace: Carriage Return</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,     <comment type="line">// Decimal 14 - 26</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                             <comment type="line">// Decimal 27 - 31</comment>
      <expr><operator>-</operator><literal type="number">5</literal></expr>,                                         <comment type="line">// Whitespace: Space</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,              <comment type="line">// Decimal 33 - 42</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Plus sign at decimal 43</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Decimal 44</comment>
      <expr><literal type="number">0</literal></expr>,                                          <comment type="line">// Minus sign at decimal 45</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Decimal 46</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Slash at decimal 47</comment>
      <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">9</literal></expr>,<expr><literal type="number">10</literal></expr>,                       <comment type="line">// Numbers zero through nine</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                   <comment type="line">// Decimal 58 - 60</comment>
      <expr><operator>-</operator><literal type="number">1</literal></expr>,                                         <comment type="line">// Equals sign at decimal 61</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                   <comment type="line">// Decimal 62 - 64</comment>
      <expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,     <comment type="line">// Letters 'A' through 'M'</comment>
      <expr><literal type="number">24</literal></expr>,<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><literal type="number">36</literal></expr>,     <comment type="line">// Letters 'N' through 'Z'</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,                                <comment type="line">// Decimal 91 - 94</comment>
      <expr><literal type="number">37</literal></expr>,                                         <comment type="line">// Underscore at decimal 95</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,                                         <comment type="line">// Decimal 96</comment>
      <expr><literal type="number">38</literal></expr>,<expr><literal type="number">39</literal></expr>,<expr><literal type="number">40</literal></expr>,<expr><literal type="number">41</literal></expr>,<expr><literal type="number">42</literal></expr>,<expr><literal type="number">43</literal></expr>,<expr><literal type="number">44</literal></expr>,<expr><literal type="number">45</literal></expr>,<expr><literal type="number">46</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">48</literal></expr>,<expr><literal type="number">49</literal></expr>,<expr><literal type="number">50</literal></expr>,     <comment type="line">// Letters 'a' through 'm'</comment>
      <expr><literal type="number">51</literal></expr>,<expr><literal type="number">52</literal></expr>,<expr><literal type="number">53</literal></expr>,<expr><literal type="number">54</literal></expr>,<expr><literal type="number">55</literal></expr>,<expr><literal type="number">56</literal></expr>,<expr><literal type="number">57</literal></expr>,<expr><literal type="number">58</literal></expr>,<expr><literal type="number">59</literal></expr>,<expr><literal type="number">60</literal></expr>,<expr><literal type="number">61</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">63</literal></expr>,     <comment type="line">// Letters 'n' through 'z'</comment>
      <expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">9</literal></expr>                                 <comment type="line">// Decimal 123 - 126</comment>
      <comment type="block">/*,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 127 - 139
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 140 - 152
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 153 - 165
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 166 - 178
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 179 - 191
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 192 - 204
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 205 - 217
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 218 - 230
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,     // Decimal 231 - 243
        -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9         // Decimal 244 - 255 */</comment>
    }</block></expr></init></decl>;</decl_stmt>

	
<comment type="block">/* ********  D E T E R M I N E   W H I C H   A L H A B E T  ******** */</comment>


    <comment type="block" format="javadoc">/**
     * Returns one of the _SOMETHING_ALPHABET byte arrays depending on
     * the options specified.
     * It's possible, though silly, to specify ORDERED &lt;b&gt;and&lt;/b&gt; URLSAFE
     * in which case one of them will be picked, though there is
     * no guarantee as to which one will be picked.
     */</comment>
    <function><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getAlphabet</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>URL_SAFE</name><operator>)</operator> <operator>==</operator> <name>URL_SAFE</name></expr>)</condition><then> <block>{
            <return>return <expr><name>_URL_SAFE_ALPHABET</name></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>ORDERED</name><operator>)</operator> <operator>==</operator> <name>ORDERED</name></expr>)</condition><then> <block>{
            <return>return <expr><name>_ORDERED_ALPHABET</name></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><name>_STANDARD_ALPHABET</name></expr>;</return>
        }</block></else></if>
    }</block></function>	<comment type="line">// end getAlphabet</comment>


    <comment type="block" format="javadoc">/**
     * Returns one of the _SOMETHING_DECODABET byte arrays depending on
     * the options specified.
     * It's possible, though silly, to specify ORDERED and URL_SAFE
     * in which case one of them will be picked, though there is
     * no guarantee as to which one will be picked.
     */</comment>
    <function><specifier>private</specifier> <specifier>final</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getDecodabet</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
        <if>if<condition>( <expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>URL_SAFE</name><operator>)</operator> <operator>==</operator> <name>URL_SAFE</name></expr>)</condition><then> <block>{
            <return>return <expr><name>_URL_SAFE_DECODABET</name></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>ORDERED</name><operator>)</operator> <operator>==</operator> <name>ORDERED</name></expr>)</condition><then> <block>{
            <return>return <expr><name>_ORDERED_DECODABET</name></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><name>_STANDARD_DECODABET</name></expr>;</return>
        }</block></else></if>
    }</block></function>	<comment type="line">// end getAlphabet</comment>


    
    <comment type="block" format="javadoc">/** Defeats instantiation. */</comment>
    <constructor><specifier>private</specifier> <name>Base64</name><parameter_list>()</parameter_list><block>{}</block></constructor>
    

    
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getEncodedLengthWithoutPadding</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unencodedLength</name></decl></parameter>)</parameter_list> <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>remainderBytes</name> <init>= <expr><name>unencodedLength</name> <operator>%</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>paddingBytes</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	
    	<if>if <condition>(<expr><name>remainderBytes</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
    		<block type="pseudo"><expr_stmt><expr><name>paddingBytes</name> <operator>=</operator> <literal type="number">3</literal> <operator>-</operator> <name>remainderBytes</name></expr>;</expr_stmt></block></then></if>
    	
    	<return>return <expr><operator>(</operator><operator>(</operator><call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><name>unencodedLength</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>paddingBytes</name></expr>;</return>
    }</block></function>
    
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getEncodedBytesForTarget</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>targetSize</name></decl></parameter>)</parameter_list> <block>{
    	<return>return <expr><operator>(</operator><call>(<name>int</name>)<argument_list>(<argument><expr><name>targetSize</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</return>
    }</block></function>
    
    
<comment type="block">/* ********  E N C O D I N G   M E T H O D S  ******** */</comment>    
    
    
    <comment type="block" format="javadoc">/**
     * Encodes up to the first three bytes of array &lt;var&gt;threeBytes&lt;/var&gt;
     * and returns a four-byte array in Base64 notation.
     * The actual number of significant bytes in your array is
     * given by &lt;var&gt;numSigBytes&lt;/var&gt;.
     * The array &lt;var&gt;threeBytes&lt;/var&gt; needs only be as big as
     * &lt;var&gt;numSigBytes&lt;/var&gt;.
     * Code can reuse a byte array by passing a four-byte array as &lt;var&gt;b4&lt;/var&gt;.
     *
     * @param b4 A reusable byte array to reduce array instantiation
     * @param threeBytes the array to convert
     * @param numSigBytes the number of significant bytes in your array
     * @return four byte array in Base64 notation.
     * @since 1.5.1
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encode3to4</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b4</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>threeBytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numSigBytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
        <expr_stmt><expr><call><name>encode3to4</name><argument_list>( <argument><expr><name>threeBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numSigBytes</name></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>b4</name></expr>;</return>
    }</block></function>   <comment type="line">// end encode3to4</comment>

    
    <comment type="block" format="javadoc">/**
     * &lt;p&gt;Encodes up to three bytes of the array &lt;var&gt;source&lt;/var&gt;
     * and writes the resulting four Base64 bytes to &lt;var&gt;destination&lt;/var&gt;.
     * The source and destination arrays can be manipulated
     * anywhere along their length by specifying 
     * &lt;var&gt;srcOffset&lt;/var&gt; and &lt;var&gt;destOffset&lt;/var&gt;.
     * This method does not check to make sure your arrays
     * are large enough to accomodate &lt;var&gt;srcOffset&lt;/var&gt; + 3 for
     * the &lt;var&gt;source&lt;/var&gt; array or &lt;var&gt;destOffset&lt;/var&gt; + 4 for
     * the &lt;var&gt;destination&lt;/var&gt; array.
     * The actual number of significant bytes in your array is
     * given by &lt;var&gt;numSigBytes&lt;/var&gt;.&lt;/p&gt;
	 * &lt;p&gt;This is the lowest level of the encoding methods with
	 * all possible parameters.&lt;/p&gt;
     *
     * @param source the array to convert
     * @param srcOffset the index where conversion begins
     * @param numSigBytes the number of significant bytes in your array
     * @param destination the array to hold the conversion
     * @param destOffset the index where output will be put
     * @return the &lt;var&gt;destination&lt;/var&gt; array
     * @since 1.3
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encode3to4</name><parameter_list>( 
    <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numSigBytes</name></decl></parameter>,
    <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>destination</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>destOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
        
	<decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ALPHABET</name> <init>= <expr><call><name>getAlphabet</name><argument_list>( <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 
	
        <comment type="line">//           1         2         3  </comment>
        <comment type="line">// 01234567890123456789012345678901 Bit position</comment>
        <comment type="line">// --------000000001111111122222222 Array position from threeBytes</comment>
        <comment type="line">// --------|    ||    ||    ||    | Six bit groups to index ALPHABET</comment>
        <comment type="line">//          &gt;&gt;18  &gt;&gt;12  &gt;&gt; 6  &gt;&gt; 0  Right shift necessary</comment>
        <comment type="line">//                0x3f  0x3f  0x3f  Additional AND</comment>
        
        <comment type="line">// Create buffer with zero-padding if there are only one or two</comment>
        <comment type="line">// significant bytes passed in the array.</comment>
        <comment type="line">// We have to shift left 24 in order to flush out the 1's that appear</comment>
        <comment type="line">// when Java treats a value as negative that is cast from a byte to an int.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>inBuff</name> <init>=   <expr><operator>(</operator> <ternary><condition><expr><name>numSigBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[ <expr><name>srcOffset</name></expr>     ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator>
                     <operator>|</operator> <operator>(</operator> <ternary><condition><expr><name>numSigBytes</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator>
                     <operator>|</operator> <operator>(</operator> <ternary><condition><expr><name>numSigBytes</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&gt;&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></init></decl>;</decl_stmt>

        <switch>switch<condition>( <expr><name>numSigBytes</name></expr> )</condition>
        <block>{
            <case>case <expr><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name></expr>     ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>        ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr> ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator>  <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr> ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name>       <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr> ]</index></name></expr>;</expr_stmt>
                <return>return <expr><name>destination</name></expr>;</return>
                
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name></expr>     ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>        ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr> ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator>  <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr> ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>=</operator> <name>EQUALS_SIGN</name></expr>;</expr_stmt>
                <return>return <expr><name>destination</name></expr>;</return>
                
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name></expr>     ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">18</literal><operator>)</operator></expr>        ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <name><name>ALPHABET</name><index>[ <expr><operator>(</operator><name>inBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr> ]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <name>EQUALS_SIGN</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>=</operator> <name>EQUALS_SIGN</name></expr>;</expr_stmt>
                <return>return <expr><name>destination</name></expr>;</return>
                
            <default>default:</default>
                <return>return <expr><name>destination</name></expr>;</return>
        }</block></switch>   <comment type="line">// end switch</comment>
    }</block></function>   <comment type="line">// end encode3to4</comment>



    <comment type="block" format="javadoc">/**
     * Performs Base64 encoding on the &lt;code&gt;raw&lt;/code&gt; ByteBuffer,
     * writing it to the &lt;code&gt;encoded&lt;/code&gt; ByteBuffer.
     * This is an experimental feature. Currently it does not
     * pass along any options (such as {@link #DO_BREAK_LINES}
     * or {@link #GZIP}.
     *
     * @param raw input buffer
     * @param encoded output buffer
     * @since 2.3
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>encode</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name></type> <name>encoded</name></decl></parameter> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>raw3</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>enc4</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <while>while<condition>( <expr><call><name><name>raw</name><operator>.</operator><name>hasRemaining</name></name><argument_list>()</argument_list></call></expr> )</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><call><name><name>raw</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>raw</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>raw3</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Base64</name><operator>.</operator><name>encode3to4</name></name><argument_list>(<argument><expr><name>enc4</name></expr></argument>, <argument><expr><name>raw3</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_OPTIONS</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>encoded</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>enc4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>   <comment type="line">// end input remaining</comment>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Performs Base64 encoding on the &lt;code&gt;raw&lt;/code&gt; ByteBuffer,
     * writing it to the &lt;code&gt;encoded&lt;/code&gt; CharBuffer.
     * This is an experimental feature. Currently it does not
     * pass along any options (such as {@link #DO_BREAK_LINES}
     * or {@link #GZIP}.
     *
     * @param raw input buffer
     * @param encoded output buffer
     * @since 2.3
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>encode</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>ByteBuffer</name></name></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name><name>java</name><operator>.</operator><name>nio</name><operator>.</operator><name>CharBuffer</name></name></type> <name>encoded</name></decl></parameter> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>raw3</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>enc4</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <while>while<condition>( <expr><call><name><name>raw</name><operator>.</operator><name>hasRemaining</name></name><argument_list>()</argument_list></call></expr> )</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><call><name><name>raw</name><operator>.</operator><name>remaining</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>raw</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>raw3</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>rem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Base64</name><operator>.</operator><name>encode3to4</name></name><argument_list>(<argument><expr><name>enc4</name></expr></argument>, <argument><expr><name>raw3</name></expr></argument>, <argument><expr><name>rem</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_OPTIONS</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
                <expr_stmt><expr><call><name><name>encoded</name><operator>.</operator><name>put</name></name><argument_list>( <argument><expr><call>(<name>char</name>)<argument_list>(<argument><expr><name><name>enc4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></while>   <comment type="line">// end input remaining</comment>
    }</block></function>


    
    
    <comment type="block" format="javadoc">/**
     * Serializes an object and returns the Base64-encoded
     * version of that serialized object.  
     *  
     * &lt;p&gt;As of v 2.3, if the object
     * cannot be serialized or there is another error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned a null value, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     * The object is not GZip-compressed before being encoded.
     *
     * @param serializableObject The object to encode
     * @return The Base64-encoded object
     * @throws java.io.IOException if there is an error
     * @throws NullPointerException if serializedObject is null
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeObject</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></type> <name>serializableObject</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name>encodeObject</name><argument_list>( <argument><expr><name>serializableObject</name></expr></argument>, <argument><expr><name>NO_OPTIONS</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>   <comment type="line">// end encodeObject</comment>
    


    <comment type="block" format="javadoc">/**
     * Serializes an object and returns the Base64-encoded
     * version of that serialized object.
     *  
     * &lt;p&gt;As of v 2.3, if the object
     * cannot be serialized or there is another error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned a null value, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     * The object is not GZip-compressed before being encoded.
     * &lt;p&gt;
     * Example options:&lt;pre&gt;
     *   GZIP: gzip-compresses object before encoding it.
     *   DO_BREAK_LINES: break lines at 76 characters
     * &lt;/pre&gt;
     * &lt;p&gt;
     * Example: &lt;code&gt;encodeObject( myObj, Base64.GZIP )&lt;/code&gt; or
     * &lt;p&gt;
     * Example: &lt;code&gt;encodeObject( myObj, Base64.GZIP | Base64.DO_BREAK_LINES )&lt;/code&gt;
     *
     * @param serializableObject The object to encode
     * @param options Specified options
     * @return The Base64-encoded object
     * @see Base64#GZIP
     * @see Base64#DO_BREAK_LINES
     * @throws java.io.IOException if there is an error
     * @since 2.0
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeObject</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Serializable</name></name></type> <name>serializableObject</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{

        <if>if<condition>( <expr><name>serializableObject</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Cannot serialize a null object."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if: null</comment>
        
        <comment type="line">// Streams</comment>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name></type>  <name>baos</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt> 
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name></type>           <name>b64os</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name></type> <name>gzos</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name></type>     <name>oos</name>   <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        
        
        <try>try <block>{
            <comment type="line">// ObjectOutputStream -&gt; (GZIP) -&gt; Base64 -&gt; ByteArrayOutputStream</comment>
            <expr_stmt><expr><name>baos</name>  <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b64os</name> <operator>=</operator> <operator>new</operator> <call><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name><argument_list>( <argument><expr><name>baos</name></expr></argument>, <argument><expr><name>ENCODE</name> <operator>|</operator> <name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>GZIP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
                <comment type="line">// Gzip</comment>
                <expr_stmt><expr><name>gzos</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name><argument_list>(<argument><expr><name>b64os</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>oos</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name><argument_list>( <argument><expr><name>gzos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <comment type="line">// Not gzipped</comment>
                <expr_stmt><expr><name>oos</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectOutputStream</name></name><argument_list>( <argument><expr><name>b64os</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>oos</name><operator>.</operator><name>writeObject</name></name><argument_list>( <argument><expr><name>serializableObject</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <comment type="line">// Catch it and then throw it immediately so that</comment>
            <comment type="line">// the finally{} block is called for cleanup.</comment>
            <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch>   <comment type="line">// end catch</comment>
        <finally>finally <block>{
            <try>try<block>{ <expr_stmt><expr><call><name><name>oos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>   }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
            <try>try<block>{ <expr_stmt><expr><call><name><name>gzos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
            <try>try<block>{ <expr_stmt><expr><call><name><name>b64os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
            <try>try<block>{ <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally</comment>
        
        <comment type="line">// Return value according to relevant encoding.</comment>
        <try>try <block>{
            <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>PREFERRED_ENCODING</name></expr></argument> )</argument_list></call></expr>;</return>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name></type> <name>uue</name></decl></parameter>)</parameter_list><block>{
            <comment type="line">// Fall back to some Java default</comment>
            <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
        }</block></catch></try>   <comment type="line">// end catch</comment>
        
    }</block></function>   <comment type="line">// end encode</comment>
    
    

    <comment type="block" format="javadoc">/**
     * Encodes a byte array into Base64 notation.
     * Does not GZip-compress data.
     *  
     * @param source The data to convert
     * @return The data in Base64-encoded form
     * @throws NullPointerException if source array is null
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBytes</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter> )</parameter_list> <block>{
        <comment type="line">// Since we're not going to have the GZIP encoding turned on,</comment>
        <comment type="line">// we're not going to have an java.io.IOException thrown, so</comment>
        <comment type="line">// we should not force the user to have to catch it.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>encoded</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>encoded</name> <operator>=</operator> <call><name>encodeBytes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>NO_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
            <assert>assert <expr><literal type="boolean">false</literal> <operator>:</operator> <call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</assert>
        }</block></catch></try>   <comment type="line">// end catch</comment>
        <assert>assert <expr><name>encoded</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <return>return <expr><name>encoded</name></expr>;</return>
    }</block></function>   <comment type="line">// end encodeBytes</comment>
    
    
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBytesWithoutPadding</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{
    	<decl_stmt><decl><type><name>String</name></type> <name>encoded</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
 
    	<try>try <block>{
    		<expr_stmt><expr><name>encoded</name> <operator>=</operator> <call><name>encodeBytes</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>NO_OPTIONS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	}</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
    		<assert>assert <expr><literal type="boolean">false</literal> <operator>:</operator> <call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</assert>
    	}</block></catch></try>
    	
    	<assert>assert <expr><name>encoded</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
    	
    	<if>if      <condition>(<expr><call><name><name>encoded</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><call><name><name>encoded</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>encoded</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>encoded</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
    	<elseif>else <if>if <condition>(<expr><call><name><name>encoded</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><call><name><name>encoded</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>encoded</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>encoded</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    	<else>else                                                <block type="pseudo"><return>return <expr><name>encoded</name></expr>;</return></block></else></if>
    	
    }</block></function>
    
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBytesWithoutPadding</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>)</parameter_list> <block>{
    	<return>return <expr><call><name>encodeBytesWithoutPadding</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Encodes a byte array into Base64 notation.
     * &lt;p&gt;
     * Example options:&lt;pre&gt;
     *   GZIP: gzip-compresses object before encoding it.
     *   DO_BREAK_LINES: break lines at 76 characters
     *     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
     * &lt;/pre&gt;
     * &lt;p&gt;
     * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP )&lt;/code&gt; or
     * &lt;p&gt;
     * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )&lt;/code&gt;
     *
     *  
     * &lt;p&gt;As of v 2.3, if there is an error with the GZIP stream,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned a null value, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     *
     * @param source The data to convert
     * @param options Specified options
     * @return The Base64-encoded data as a String
     * @see Base64#GZIP
     * @see Base64#DO_BREAK_LINES
     * @throws java.io.IOException if there is an error
     * @throws NullPointerException if source array is null
     * @since 2.0
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBytes</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name>encodeBytes</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>   <comment type="line">// end encodeBytes</comment>
    
    
    <comment type="block" format="javadoc">/**
     * Encodes a byte array into Base64 notation.
     * Does not GZip-compress data.
     *  
     * &lt;p&gt;As of v 2.3, if there is an error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned a null value, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     *
     * @param source The data to convert
     * @param off Offset in array where conversion should begin
     * @param len Length of data to convert
     * @return The Base64-encoded data as a String
     * @throws NullPointerException if source array is null
     * @throws IllegalArgumentException if source array, offset, or length are invalid
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBytes</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> <block>{
        <comment type="line">// Since we're not going to have the GZIP encoding turned on,</comment>
        <comment type="line">// we're not going to have an java.io.IOException thrown, so</comment>
        <comment type="line">// we should not force the user to have to catch it.</comment>
        <decl_stmt><decl><type><name>String</name></type> <name>encoded</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>encoded</name> <operator>=</operator> <call><name>encodeBytes</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>NO_OPTIONS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>ex</name></decl></parameter>)</parameter_list> <block>{
            <assert>assert <expr><literal type="boolean">false</literal> <operator>:</operator> <call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</assert>
        }</block></catch></try>   <comment type="line">// end catch</comment>
        <assert>assert <expr><name>encoded</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
        <return>return <expr><name>encoded</name></expr>;</return>
    }</block></function>   <comment type="line">// end encodeBytes</comment>
    
    

    <comment type="block" format="javadoc">/**
     * Encodes a byte array into Base64 notation.
     * &lt;p&gt;
     * Example options:&lt;pre&gt;
     *   GZIP: gzip-compresses object before encoding it.
     *   DO_BREAK_LINES: break lines at 76 characters
     *     &lt;i&gt;Note: Technically, this makes your encoding non-compliant.&lt;/i&gt;
     * &lt;/pre&gt;
     * &lt;p&gt;
     * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP )&lt;/code&gt; or
     * &lt;p&gt;
     * Example: &lt;code&gt;encodeBytes( myData, Base64.GZIP | Base64.DO_BREAK_LINES )&lt;/code&gt;
     *
     *  
     * &lt;p&gt;As of v 2.3, if there is an error with the GZIP stream,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned a null value, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     *
     * @param source The data to convert
     * @param off Offset in array where conversion should begin
     * @param len Length of data to convert
     * @param options Specified options
     * @return The Base64-encoded data as a String
     * @see Base64#GZIP
     * @see Base64#DO_BREAK_LINES
     * @throws java.io.IOException if there is an error
     * @throws NullPointerException if source array is null
     * @throws IllegalArgumentException if source array, offset, or length are invalid
     * @since 2.0
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeBytes</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encoded</name> <init>= <expr><call><name>encodeBytesToBytes</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Return value according to relevant encoding.</comment>
        <try>try <block>{
            <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><name>encoded</name></expr></argument>, <argument><expr><name>PREFERRED_ENCODING</name></expr></argument> )</argument_list></call></expr>;</return>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name></type> <name>uue</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><name>encoded</name></expr></argument> )</argument_list></call></expr>;</return>
        }</block></catch></try>   <comment type="line">// end catch</comment>
        
    }</block></function>   <comment type="line">// end encodeBytes</comment>




    <comment type="block" format="javadoc">/**
     * Similar to {@link #encodeBytes(byte[])} but returns
     * a byte array instead of instantiating a String. This is more efficient
     * if you're working with I/O streams and have large data sets to encode.
     *
     *
     * @param source The data to convert
     * @return The Base64-encoded data as a byte[] (of ASCII characters)
     * @throws NullPointerException if source array is null
     * @since 2.3.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encodeBytesToBytes</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter> )</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>encoded</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>encoded</name> <operator>=</operator> <call><name>encodeBytesToBytes</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_OPTIONS</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>ex</name></decl></parameter> )</parameter_list> <block>{
            <assert>assert <expr><literal type="boolean">false</literal> <operator>:</operator> <literal type="string">"IOExceptions only come from GZipping, which is turned off: "</literal> <operator>+</operator> <call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</assert>
        }</block></catch></try>
        <return>return <expr><name>encoded</name></expr>;</return>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Similar to {@link #encodeBytes(byte[], int, int, int)} but returns
     * a byte array instead of instantiating a String. This is more efficient
     * if you're working with I/O streams and have large data sets to encode.
     *
     *
     * @param source The data to convert
     * @param off Offset in array where conversion should begin
     * @param len Length of data to convert
     * @param options Specified options
     * @return The Base64-encoded data as a String
     * @see Base64#GZIP
     * @see Base64#DO_BREAK_LINES
     * @throws java.io.IOException if there is an error
     * @throws NullPointerException if source array is null
     * @throws IllegalArgumentException if source array, offset, or length are invalid
     * @since 2.3.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>encodeBytesToBytes</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{

        <if>if<condition>( <expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Cannot serialize a null array."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if: null</comment>

        <if>if<condition>( <expr><name>off</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><literal type="string">"Cannot have negative offset: "</literal> <operator>+</operator> <name>off</name></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if: off &lt; 0</comment>

        <if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><literal type="string">"Cannot have length offset: "</literal> <operator>+</operator> <name>len</name></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if: len &lt; 0</comment>

        <if>if<condition>( <expr><name>off</name> <operator>+</operator> <name>len</name> <operator>&gt;</operator> <name><name>source</name><operator>.</operator><name>length</name></name></expr>  )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(
            <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>( <argument><expr><literal type="string">"Cannot have offset of %d and length of %d with array of length %d"</literal></expr></argument>, <argument><expr><name>off</name></expr></argument>,<argument><expr><name>len</name></expr></argument>,<argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if: off &lt; 0</comment>



        <comment type="line">// Compress?</comment>
        <if>if<condition>( <expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>GZIP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name></type>  <name>baos</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name></type> <name>gzos</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name></type>            <name>b64os</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

            <try>try <block>{
                <comment type="line">// GZip -&gt; Base64 -&gt; ByteArray</comment>
                <expr_stmt><expr><name>baos</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>b64os</name> <operator>=</operator> <operator>new</operator> <call><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name><argument_list>( <argument><expr><name>baos</name></expr></argument>, <argument><expr><name>ENCODE</name> <operator>|</operator> <name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>gzos</name>  <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPOutputStream</name></name><argument_list>( <argument><expr><name>b64os</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><call><name><name>gzos</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>gzos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block>   <comment type="line">// end try</comment>
            <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
                <comment type="line">// Catch it and then throw it immediately so that</comment>
                <comment type="line">// the finally{} block is called for cleanup.</comment>
                <throw>throw <expr><name>e</name></expr>;</throw>
            }</block></catch>   <comment type="line">// end catch</comment>
            <finally>finally <block>{
                <try>try<block>{ <expr_stmt><expr><call><name><name>gzos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
                <try>try<block>{ <expr_stmt><expr><call><name><name>b64os</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
                <try>try<block>{ <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
            }</block></finally></try>   <comment type="line">// end finally</comment>

            <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then>   <comment type="line">// end if: compress</comment>

        <comment type="line">// Else, don't compress. Better not to use streams at all then.</comment>
        <else>else <block>{
            <decl_stmt><decl><type><name>boolean</name></type> <name>breakLines</name> <init>= <expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DO_BREAK_LINES</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="line">//int    len43   = len * 4 / 3;</comment>
            <comment type="line">//byte[] outBuff = new byte[   ( len43 )                      // Main 4:3</comment>
            <comment type="line">//                           + ( (len % 3) &gt; 0 ? 4 : 0 )      // Account for padding</comment>
            <comment type="line">//                           + (breakLines ? ( len43 / MAX_LINE_LENGTH ) : 0) ]; // New lines</comment>
            <comment type="line">// Try to determine more precisely how big the array needs to be.</comment>
            <comment type="line">// If we get it right, we don't have to do an array copy, and</comment>
            <comment type="line">// we save a bunch of memory.</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>encLen</name> <init>= <expr><operator>(</operator> <name>len</name> <operator>/</operator> <literal type="number">3</literal> <operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator> <ternary><condition><expr><name>len</name> <operator>%</operator> <literal type="number">3</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></init></decl>;</decl_stmt> <comment type="line">// Bytes needed for actual encoding</comment>
            <if>if<condition>( <expr><name>breakLines</name></expr> )</condition><then><block>{
                <expr_stmt><expr><name>encLen</name> <operator>+=</operator> <name>encLen</name> <operator>/</operator> <name>MAX_LINE_LENGTH</name></expr>;</expr_stmt> <comment type="line">// Plus extra newline characters</comment>
            }</block></then></if>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outBuff</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>encLen</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>


            <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>lineLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>( <init>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><name>d</name><operator>+=</operator><literal type="number">3</literal></expr><operator>,</operator> <expr><name>e</name><operator>+=</operator><literal type="number">4</literal></expr></incr> )</control> <block>{
                <expr_stmt><expr><call><name>encode3to4</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>outBuff</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>lineLength</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                <if>if<condition>( <expr><name>breakLines</name> <operator>&amp;&amp;</operator> <name>lineLength</name> <operator>&gt;=</operator> <name>MAX_LINE_LENGTH</name></expr> )</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>outBuff</name><index>[<expr><name>e</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NEW_LINE</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>lineLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>   <comment type="line">// end if: end of line</comment>
            }</block></for>   <comment type="line">// en dfor: each piece of array</comment>

            <if>if<condition>( <expr><name>d</name> <operator>&lt;</operator> <name>len</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name>encode3to4</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><name>d</name><operator>+</operator><name>off</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>d</name></expr></argument>, <argument><expr><name>outBuff</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>e</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
            }</block></then></if>   <comment type="line">// end if: some padding needed</comment>


            <comment type="line">// Only resize array if we didn't guess it right.</comment>
            <if>if<condition>( <expr><name>e</name> <operator>&lt;</operator> <name><name>outBuff</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><then><block>{
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>finalOut</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>outBuff</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>finalOut</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//System.err.println("Having to resize array from " + outBuff.length + " to " + e );</comment>
                <return>return <expr><name>finalOut</name></expr>;</return>
            }</block></then> <else>else <block>{
                <comment type="line">//System.err.println("No need to resize array.");</comment>
                <return>return <expr><name>outBuff</name></expr>;</return>
            }</block></else></if>
        
        }</block></else></if>   <comment type="line">// end else: don't compress</comment>

    }</block></function>   <comment type="line">// end encodeBytesToBytes</comment>
    

    
    
    
<comment type="block">/* ********  D E C O D I N G   M E T H O D S  ******** */</comment>
    
    
    <comment type="block" format="javadoc">/**
     * Decodes four bytes from array &lt;var&gt;source&lt;/var&gt;
     * and writes the resulting bytes (up to three of them)
     * to &lt;var&gt;destination&lt;/var&gt;.
     * The source and destination arrays can be manipulated
     * anywhere along their length by specifying 
     * &lt;var&gt;srcOffset&lt;/var&gt; and &lt;var&gt;destOffset&lt;/var&gt;.
     * This method does not check to make sure your arrays
     * are large enough to accomodate &lt;var&gt;srcOffset&lt;/var&gt; + 4 for
     * the &lt;var&gt;source&lt;/var&gt; array or &lt;var&gt;destOffset&lt;/var&gt; + 3 for
     * the &lt;var&gt;destination&lt;/var&gt; array.
     * This method returns the actual number of bytes that 
     * were converted from the Base64 encoding.
	 * &lt;p&gt;This is the lowest level of the decoding methods with
	 * all possible parameters.&lt;/p&gt;
     * 
     *
     * @param source the array to convert
     * @param srcOffset the index where conversion begins
     * @param destination the array to hold the conversion
     * @param destOffset the index where output will be put
	 * @param options alphabet type is pulled from this (standard, url-safe, ordered)
     * @return the number of decoded bytes converted
     * @throws NullPointerException if source or destination arrays are null
     * @throws IllegalArgumentException if srcOffset or destOffset are invalid
     *         or there is not enough room in the array.
     * @since 1.3
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>decode4to3</name><parameter_list>( 
    <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>srcOffset</name></decl></parameter>, 
    <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>destination</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>destOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
        
        <comment type="line">// Lots of error checking and exception throwing</comment>
        <if>if<condition>( <expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Source array was null."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        <if>if<condition>( <expr><name>destination</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Destination array was null."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        <if>if<condition>( <expr><name>srcOffset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>srcOffset</name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>source</name><operator>.</operator><name>length</name></name></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
            <argument><expr><literal type="string">"Source array with length %d cannot have offset of %d and still process four bytes."</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>srcOffset</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        <if>if<condition>( <expr><name>destOffset</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>destOffset</name> <operator>+</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name><name>destination</name><operator>.</operator><name>length</name></name></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
            <argument><expr><literal type="string">"Destination array with length %d cannot have offset of %d and still store three bytes."</literal></expr></argument>, <argument><expr><name><name>destination</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>destOffset</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        
        
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>DECODABET</name> <init>= <expr><call><name>getDecodabet</name><argument_list>( <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 
	
        <comment type="line">// Example: Dk==</comment>
        <if>if<condition>( <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>EQUALS_SIGN</name></expr> )</condition><then> <block>{
            <comment type="line">// Two ways to do the same thing. Don't know which way I like best.</comment>
          <comment type="line">//int outBuff =   ( ( DECODABET[ source[ srcOffset    ] ] &lt;&lt; 24 ) &gt;&gt;&gt;  6 )</comment>
          <comment type="line">//              | ( ( DECODABET[ source[ srcOffset + 1] ] &lt;&lt; 24 ) &gt;&gt;&gt; 12 );</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>outBuff</name> <init>=   <expr><operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name></expr>    ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal> <operator>)</operator>
                          <operator>|</operator> <operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name></expr> ]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>( <argument><expr><name>outBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">1</literal></expr>;</return>
        }</block></then>
        
        <comment type="line">// Example: DkL=</comment>
        <elseif>else <if>if<condition>( <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>==</operator> <name>EQUALS_SIGN</name></expr> )</condition><then> <block>{
            <comment type="line">// Two ways to do the same thing. Don't know which way I like best.</comment>
          <comment type="line">//int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] &lt;&lt; 24 ) &gt;&gt;&gt;  6 )</comment>
          <comment type="line">//              | ( ( DECODABET[ source[ srcOffset + 1 ] ] &lt;&lt; 24 ) &gt;&gt;&gt; 12 )</comment>
          <comment type="line">//              | ( ( DECODABET[ source[ srcOffset + 2 ] ] &lt;&lt; 24 ) &gt;&gt;&gt; 18 );</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>outBuff</name> <init>=   <expr><operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name></expr>     ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal> <operator>)</operator>
                          <operator>|</operator> <operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>)</operator>
                          <operator>|</operator> <operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator>  <literal type="number">6</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
            
            <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name></expr>     ]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>( <argument><expr><name>outBuff</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>( <argument><expr><name>outBuff</name> <operator>&gt;&gt;&gt;</operator>  <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">2</literal></expr>;</return>
        }</block></then></if></elseif>
        
        <comment type="line">// Example: DkLE</comment>
        <else>else <block>{
            <comment type="line">// Two ways to do the same thing. Don't know which way I like best.</comment>
          <comment type="line">//int outBuff =   ( ( DECODABET[ source[ srcOffset     ] ] &lt;&lt; 24 ) &gt;&gt;&gt;  6 )</comment>
          <comment type="line">//              | ( ( DECODABET[ source[ srcOffset + 1 ] ] &lt;&lt; 24 ) &gt;&gt;&gt; 12 )</comment>
          <comment type="line">//              | ( ( DECODABET[ source[ srcOffset + 2 ] ] &lt;&lt; 24 ) &gt;&gt;&gt; 18 )</comment>
          <comment type="line">//              | ( ( DECODABET[ source[ srcOffset + 3 ] ] &lt;&lt; 24 ) &gt;&gt;&gt; 24 );</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>outBuff</name> <init>=   <expr><operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name></expr>     ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">18</literal> <operator>)</operator>
                          <operator>|</operator> <operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>)</operator>
                          <operator>|</operator> <operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator>  <literal type="number">6</literal><operator>)</operator>
                          <operator>|</operator> <operator>(</operator> <operator>(</operator> <name><name>DECODABET</name><index>[ <expr><name><name>source</name><index>[ <expr><name>srcOffset</name> <operator>+</operator> <literal type="number">3</literal></expr> ]</index></name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal> <operator>)</operator>      <operator>)</operator></expr></init></decl>;</decl_stmt>

            
            <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name></expr>     ]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>( <argument><expr><name>outBuff</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>( <argument><expr><name>outBuff</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>destination</name><index>[ <expr><name>destOffset</name> <operator>+</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>( <argument><expr><name>outBuff</name></expr></argument>       )</argument_list></call></expr>;</expr_stmt>

            <return>return <expr><literal type="number">3</literal></expr>;</return>
        }</block></else></if>
    }</block></function>   <comment type="line">// end decodeToBytes</comment>
    




    <comment type="block" format="javadoc">/**
     * Low-level access to decoding ASCII characters in
     * the form of a byte array. &lt;strong&gt;Ignores GUNZIP option, if
     * it's set.&lt;/strong&gt; This is not generally a recommended method,
     * although it is used internally as part of the decoding process.
     * Special case: if len = 0, an empty array is returned. Still,
     * if you need more speed and reduced memory footprint (and aren't
     * gzipping), consider this method.
     *
     * @param source The Base64 encoded data
     * @return decoded data
     * @since 2.3.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter> )</parameter_list><block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>decoded</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>decoded</name> <operator>=</operator> <call><name>decode</name><argument_list>( <argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>NO_OPTIONS</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>ex</name></decl></parameter> )</parameter_list> <block>{
            <assert>assert <expr><literal type="boolean">false</literal> <operator>:</operator> <literal type="string">"IOExceptions only come from GZipping, which is turned off: "</literal> <operator>+</operator> <call><name><name>ex</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</assert>
        }</block></catch></try>
        <return>return <expr><name>decoded</name></expr>;</return>
    }</block></function>
       
    
    <comment type="block" format="javadoc">/**
     * Low-level access to decoding ASCII characters in
     * the form of a byte array. &lt;strong&gt;Ignores GUNZIP option, if
     * it's set.&lt;/strong&gt; This is not generally a recommended method,
     * although it is used internally as part of the decoding process.
     * Special case: if len = 0, an empty array is returned. Still,
     * if you need more speed and reduced memory footprint (and aren't
     * gzipping), consider this method.
     *
     * @param source The Base64 encoded data
     * @param off    The offset of where to begin decoding
     * @param len    The length of characters to decode
     * @param options Can specify options such as alphabet type to use
     * @return decoded data
     * @throws java.io.IOException If bogus characters exist in source data
     * @since 1.3
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <comment type="line">// Lots of error checking and exception throwing</comment>
        <if>if<condition>( <expr><name>source</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Cannot decode null source array."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        <if>if<condition>( <expr><name><name>off</name> <argument_list type="generic">&lt; <argument><literal type="number">0</literal> <operator>||</operator> <name>off</name> <operator>+</operator> <name>len</name></argument> &gt;</argument_list></name> <name><name>source</name><operator>.</operator><name>length</name></name></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
            <argument><expr><literal type="string">"Source array with length %d cannot have offset of %d and process %d bytes."</literal></expr></argument>, <argument><expr><name><name>source</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        
        <if>if<condition>( <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
            <return>return <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
        }</block></then><elseif>else <if>if<condition>( <expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>( 
            <argument><expr><literal type="string">"Base64-encoded string must have at least four characters, but length specified was "</literal> <operator>+</operator> <name>len</name></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if></elseif></if>   <comment type="line">// end if</comment>
        
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>DECODABET</name> <init>= <expr><call><name>getDecodabet</name><argument_list>( <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	
        <decl_stmt><decl><type><name>int</name></type>    <name>len34</name>   <init>= <expr><name>len</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>       <comment type="line">// Estimate on array size</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>outBuff</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>len34</name></expr> ]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// Upper limit on size of output</comment>
        <decl_stmt><decl><type><name>int</name></type>    <name>outBuffPosn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>             <comment type="line">// Keep track of where we're writing</comment>
        
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b4</name>        <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>     <comment type="line">// Four byte buffer from source, eliminating white space</comment>
        <decl_stmt><decl><type><name>int</name></type>    <name>b4Posn</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="line">// Keep track of four byte input buffer</comment>
        <decl_stmt><decl><type><name>int</name></type>    <name>i</name>         <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="line">// Source array counter</comment>
        <decl_stmt><decl><type><name>byte</name></type>   <name>sbiCrop</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="line">// Low seven bits (ASCII) of input</comment>
        <decl_stmt><decl><type><name>byte</name></type>   <name>sbiDecode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>               <comment type="line">// Special value from DECODABET</comment>
        
        <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>off</name><operator>+</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{  <comment type="line">// Loop through source</comment>
            
            <expr_stmt><expr><name>sbiCrop</name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Only the low seven bits</comment>
            <expr_stmt><expr><name>sbiDecode</name> <operator>=</operator> <name><name>DECODABET</name><index>[ <expr><name>sbiCrop</name></expr> ]</index></name></expr>;</expr_stmt>   <comment type="line">// Special value</comment>
            
            <comment type="line">// White space, Equals sign, or legit Base64 character</comment>
            <comment type="line">// Note the values such as -5 and -9 in the</comment>
            <comment type="line">// DECODABETs at the top of the file.</comment>
            <if>if<condition>( <expr><name>sbiDecode</name> <operator>&gt;=</operator> <name>WHITE_SPACE_ENC</name></expr> )</condition><then>  <block>{
                <if>if<condition>( <expr><name>sbiDecode</name> <operator>&gt;=</operator> <name>EQUALS_SIGN_ENC</name></expr> )</condition><then> <block>{
                    <expr_stmt><expr><name><name>b4</name><index>[ <expr><name>b4Posn</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>sbiCrop</name></expr>;</expr_stmt>           <comment type="line">// Save non-whitespace</comment>
                    <if>if<condition>( <expr><name>b4Posn</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><then> <block>{                  <comment type="line">// Time to decode?</comment>
                        <expr_stmt><expr><name>outBuffPosn</name> <operator>+=</operator> <call><name>decode4to3</name><argument_list>( <argument><expr><name>b4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outBuff</name></expr></argument>, <argument><expr><name>outBuffPosn</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b4Posn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        
                        <comment type="line">// If that was the equals sign, break out of 'for' loop</comment>
                        <if>if<condition>( <expr><name>sbiCrop</name> <operator>==</operator> <name>EQUALS_SIGN</name></expr> )</condition><then> <block>{
                            <break>break;</break>
                        }</block></then></if>   <comment type="line">// end if: equals sign</comment>
                    }</block></then></if>   <comment type="line">// end if: quartet built</comment>
                }</block></then></if>   <comment type="line">// end if: equals sign or better</comment>
            }</block></then>   <comment type="line">// end if: white space, equals sign or better</comment>
            <else>else <block>{
                <comment type="line">// There's a bad input character in the Base64 stream.</comment>
                <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>( <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(
                <argument><expr><literal type="string">"Bad Base64 input character '%c' in array position %d"</literal></expr></argument>, <argument><expr><name><name>source</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</throw>
            }</block></else></if>   <comment type="line">// end else: </comment>
        }</block></for>   <comment type="line">// each input character</comment>
                                   
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>out</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><name>outBuffPosn</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>outBuff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>outBuffPosn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 
        <return>return <expr><name>out</name></expr>;</return>
    }</block></function>   <comment type="line">// end decode</comment>
    
    
	
	
    <comment type="block" format="javadoc">/**
     * Decodes data from Base64 notation, automatically
     * detecting gzip-compressed data and decompressing it.
     *
     * @param s the string to decode
     * @return the decoded data
     * @throws java.io.IOException If there is a problem
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name>decode</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NO_OPTIONS</name></expr></argument> )</argument_list></call></expr>;</return>
    }</block></function>

    
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decodeWithoutPadding</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>padding</name>    <init>= <expr><call><name><name>source</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
		
		<if>if      <condition>(<expr><name>padding</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>source</name> <operator>=</operator> <name>source</name> <operator>+</operator> <literal type="string">"="</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if <condition>(<expr><name>padding</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>source</name> <operator>=</operator> <name>source</name> <operator>+</operator> <literal type="string">"=="</literal></expr>;</expr_stmt></block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>padding</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>source</name> <operator>=</operator> <name>source</name> <operator>+</operator> <literal type="string">"="</literal></expr>;</expr_stmt></block></then></if></elseif></if>
		
		<return>return <expr><call><name>decode</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    
    
    <comment type="block" format="javadoc">/**
     * Decodes data from Base64 notation, automatically
     * detecting gzip-compressed data and decompressing it.
     *
     * @param s the string to decode
     * @param options encode options such as URL_SAFE
     * @return the decoded data
     * @throws java.io.IOException if there is an error
     * @throws NullPointerException if &lt;tt&gt;s&lt;/tt&gt; is null
     * @since 1.4
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decode</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <if>if<condition>( <expr><name>s</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Input string was null."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end if</comment>
        
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>getBytes</name></name><argument_list>( <argument><expr><name>PREFERRED_ENCODING</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name></type> <name>uee</name></decl></parameter> )</parameter_list> <block>{
            <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>getBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>   <comment type="line">// end catch</comment>
		<comment type="line">//&lt;/change&gt;</comment>
        
        <comment type="line">// Decode</comment>
        <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>decode</name><argument_list>( <argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        
        <comment type="line">// Check to see if it's gzip-compressed</comment>
        <comment type="line">// GZIP Magic Two-Byte Number: 0x8b1f (35615)</comment>
        <decl_stmt><decl><type><name>boolean</name></type> <name>dontGunzip</name> <init>= <expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DONT_GUNZIP</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><operator>(</operator><name>bytes</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>dontGunzip</name><operator>)</operator></expr> )</condition><then> <block>{
            
            <decl_stmt><decl><type><name>int</name></type> <name>head</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name><name>bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>( <expr><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPInputStream</name><operator>.</operator><name>GZIP_MAGIC</name></name> <operator>==</operator> <name>head</name></expr> )</condition><then>  <block>{
                <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name></type>  <name>bais</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPInputStream</name></name></type> <name>gzis</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name></type> <name>baos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type>    <name>length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

                <try>try <block>{
                    <expr_stmt><expr><name>baos</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>bais</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name><argument_list>( <argument><expr><name>bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>gzis</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>zip</name><operator>.</operator><name>GZIPInputStream</name></name><argument_list>( <argument><expr><name>bais</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <while>while<condition>( <expr><operator>(</operator> <name>length</name> <operator>=</operator> <call><name><name>gzis</name><operator>.</operator><name>read</name></name><argument_list>( <argument><expr><name>buffer</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{
                        <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></while>   <comment type="line">// end while: reading input</comment>

                    <comment type="line">// No error? Get new bytes.</comment>
                    <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                }</block>   <comment type="line">// end try</comment>
                <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <comment type="line">// Just return originally-decoded bytes</comment>
                }</block></catch>   <comment type="line">// end catch</comment>
                <finally>finally <block>{
                    <try>try<block>{ <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
                    <try>try<block>{ <expr_stmt><expr><call><name><name>gzis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
                    <try>try<block>{ <expr_stmt><expr><call><name><name>bais</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
                }</block></finally></try>   <comment type="line">// end finally</comment>

            }</block></then></if>   <comment type="line">// end if: gzipped</comment>
        }</block></then></if>   <comment type="line">// end if: bytes.length &gt;= 2</comment>
        
        <return>return <expr><name>bytes</name></expr>;</return>
    }</block></function>   <comment type="line">// end decode</comment>



    <comment type="block" format="javadoc">/**
     * Attempts to decode Base64 data and deserialize a Java
     * Object within. Returns &lt;tt&gt;null&lt;/tt&gt; if there was an error.
     *
     * @param encodedObject The Base64 data to decode
     * @return The decoded and deserialized object
     * @throws NullPointerException if encodedObject is null
     * @throws java.io.IOException if there is a general error
     * @throws ClassNotFoundException if the decoded object is of a
     *         class that cannot be found by the JVM
     * @since 1.5
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Object</name></type> <name>decodeToObject</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>encodedObject</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ClassNotFoundException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name>decodeToObject</name><argument_list>(<argument><expr><name>encodedObject</name></expr></argument>,<argument><expr><name>NO_OPTIONS</name></expr></argument>,<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    

    <comment type="block" format="javadoc">/**
     * Attempts to decode Base64 data and deserialize a Java
     * Object within. Returns &lt;tt&gt;null&lt;/tt&gt; if there was an error.
     * If &lt;tt&gt;loader&lt;/tt&gt; is not null, it will be the class loader
     * used when deserializing.
     *
     * @param encodedObject The Base64 data to decode
     * @param options Various parameters related to decoding
     * @param loader Optional class loader to use in deserializing classes.
     * @return The decoded and deserialized object
     * @throws NullPointerException if encodedObject is null
     * @throws java.io.IOException if there is a general error
     * @throws ClassNotFoundException if the decoded object is of a 
     *         class that cannot be found by the JVM
     * @since 2.3.4
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Object</name></type> <name>decodeToObject</name><parameter_list>( 
    <parameter><decl><type><name>String</name></type> <name>encodedObject</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>ClassLoader</name></type> <name>loader</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ClassNotFoundException</name></name></expr></argument></throws> <block>{
        
        <comment type="line">// Decode and gunzip if necessary</comment>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>objBytes</name> <init>= <expr><call><name>decode</name><argument_list>( <argument><expr><name>encodedObject</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name></type>  <name>bais</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></type>     <name>ois</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Object</name></type> <name>obj</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        
        <try>try <block>{
            <expr_stmt><expr><name>bais</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name><argument_list>( <argument><expr><name>objBytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If no custom class loader is provided, use Java's builtin OIS.</comment>
            <if>if<condition>( <expr><name>loader</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
                <expr_stmt><expr><name>ois</name>  <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name><argument_list>( <argument><expr><name>bais</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then>   <comment type="line">// end if: no loader provided</comment>

            <comment type="line">// Else make a customized object input stream that uses</comment>
            <comment type="line">// the provided class loader.</comment>
            <else>else <block>{
                <expr_stmt><expr><name>ois</name> <operator>=</operator> <operator>new</operator> <class><super><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectInputStream</name></name></super><argument_list>(<argument><expr><name>bais</name></expr></argument>)</argument_list><block>{
                    <function><annotation>@<name>Override</name></annotation>
                    <specifier>public</specifier> <type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>resolveClass</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamClass</name></name></type> <name>streamClass</name></decl></parameter>)</parameter_list>
                    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument>, <argument><expr><name>ClassNotFoundException</name></expr></argument></throws> <block>{
                        <decl_stmt><decl><type><name>Class</name></type> <name>c</name> <init>= <expr><call><name><name>Class</name><operator>.</operator><name>forName</name></name><argument_list>(<argument><expr><call><name><name>streamClass</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>loader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
                            <return>return <expr><call><name><name>super</name><operator>.</operator><name>resolveClass</name></name><argument_list>(<argument><expr><name>streamClass</name></expr></argument>)</argument_list></call></expr>;</return>
                        }</block></then> <else>else <block>{
                            <return>return <expr><name>c</name></expr>;</return>   <comment type="line">// Class loader knows of this class.</comment>
                        }</block></else></if>   <comment type="line">// end else: not null</comment>
                    }</block></function>   <comment type="line">// end resolveClass</comment>
                }</block></class></expr>;</expr_stmt>  <comment type="line">// end ois</comment>
            }</block></else></if>   <comment type="line">// end else: no custom class loader</comment>
        
            <expr_stmt><expr><name>obj</name> <operator>=</operator> <call><name><name>ois</name><operator>.</operator><name>readObject</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw>    <comment type="line">// Catch and throw in order to execute finally{}</comment>
        }</block></catch>   <comment type="line">// end catch</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ClassNotFoundException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw>    <comment type="line">// Catch and throw in order to execute finally{}</comment>
        }</block></catch>   <comment type="line">// end catch</comment>
        <finally>finally <block>{
            <try>try<block>{ <expr_stmt><expr><call><name><name>bais</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
            <try>try<block>{ <expr_stmt><expr><call><name><name>ois</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally</comment>
        
        <return>return <expr><name>obj</name></expr>;</return>
    }</block></function>   <comment type="line">// end decodeObject</comment>
    
    
    
    <comment type="block" format="javadoc">/**
     * Convenience method for encoding data to a file.
     *
     * &lt;p&gt;As of v 2.3, if there is a error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned false, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     * @param dataToEncode byte array of data to encode in base64 form
     * @param filename Filename for saving encoded data
     * @throws java.io.IOException if there is an error
     * @throws NullPointerException if dataToEncode is null
     * @since 2.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>encodeToFile</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>dataToEncode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <if>if<condition>( <expr><name>dataToEncode</name> <operator>==</operator> <literal type="null">null</literal></expr> )</condition><then><block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>( <argument><expr><literal type="string">"Data to encode was null."</literal></expr></argument> )</argument_list></call></expr>;</throw>
        }</block></then></if>   <comment type="line">// end iff</comment>
        
        <decl_stmt><decl><type><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name></type> <name>bos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
            <expr_stmt><expr><name>bos</name> <operator>=</operator> <operator>new</operator> <call><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name><argument_list>( 
                  <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name><argument_list>( <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>ENCODE</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>dataToEncode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw> <comment type="line">// Catch and throw to execute finally{} block</comment>
        }</block></catch>   <comment type="line">// end catch: java.io.IOException</comment>
        <finally>finally <block>{
            <try>try<block>{ <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally</comment>
        
    }</block></function>   <comment type="line">// end encodeToFile</comment>
    
    
    <comment type="block" format="javadoc">/**
     * Convenience method for decoding data to a file.
     *
     * &lt;p&gt;As of v 2.3, if there is a error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned false, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     * @param dataToDecode Base64-encoded data as a string
     * @param filename Filename for saving decoded data
     * @throws java.io.IOException if there is an error
     * @since 2.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>decodeToFile</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>dataToDecode</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name></type> <name>bos</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try<block>{
            <expr_stmt><expr><name>bos</name> <operator>=</operator> <operator>new</operator> <call><name><name>Base64</name><operator>.</operator><name>OutputStream</name></name><argument_list>( 
                      <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name><argument_list>( <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>DECODE</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><call><name><name>dataToDecode</name><operator>.</operator><name>getBytes</name></name><argument_list>( <argument><expr><name>PREFERRED_ENCODING</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw> <comment type="line">// Catch and throw to execute finally{} block</comment>
        }</block></catch>   <comment type="line">// end catch: java.io.IOException</comment>
        <finally>finally <block>{
                <try>try<block>{ <expr_stmt><expr><call><name><name>bos</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally</comment>
        
    }</block></function>   <comment type="line">// end decodeToFile</comment>
    
    
    
    
    <comment type="block" format="javadoc">/**
     * Convenience method for reading a base64-encoded
     * file and decoding it.
     *
     * &lt;p&gt;As of v 2.3, if there is a error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned false, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     * @param filename Filename for reading encoded data
     * @return decoded byte array
     * @throws java.io.IOException if there is an error
     * @since 2.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>decodeFromFile</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>decodedData</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Base64</name><operator>.</operator><name>InputStream</name></name></type> <name>bis</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <comment type="line">// Set up some useful variables</comment>
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name><argument_list>( <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            
            <comment type="line">// Check for size of file</comment>
            <if>if<condition>( <expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr> )</condition><then>
            <block>{
                <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>( <argument><expr><literal type="string">"File is too big for this convenience method ("</literal> <operator>+</operator> <call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" bytes)."</literal></expr></argument> )</argument_list></call></expr>;</throw>
            }</block></then></if>   <comment type="line">// end if: file too big for int index</comment>
            <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[ <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> ]</index></name></expr>;</expr_stmt>
            
            <comment type="line">// Open a stream</comment>
            <expr_stmt><expr><name>bis</name> <operator>=</operator> <operator>new</operator> <call><name><name>Base64</name><operator>.</operator><name>InputStream</name></name><argument_list>( 
                      <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name><argument_list>( 
                      <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>DECODE</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line">// Read until done</comment>
            <while>while<condition>( <expr><operator>(</operator> <name>numBytes</name> <operator>=</operator> <call><name><name>bis</name><operator>.</operator><name>read</name></name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{
                <expr_stmt><expr><name>length</name> <operator>+=</operator> <name>numBytes</name></expr>;</expr_stmt>
            }</block></while>   <comment type="line">// end while</comment>
            
            <comment type="line">// Save in a variable to return</comment>
            <expr_stmt><expr><name>decodedData</name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[ <expr><name>length</name></expr> ]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>decodedData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw> <comment type="line">// Catch and release to execute finally{}</comment>
        }</block></catch>   <comment type="line">// end catch: java.io.IOException</comment>
        <finally>finally <block>{
            <try>try<block>{ <expr_stmt><expr><call><name><name>bis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally</comment>
        
        <return>return <expr><name>decodedData</name></expr>;</return>
    }</block></function>   <comment type="line">// end decodeFromFile</comment>
    
    
    
    <comment type="block" format="javadoc">/**
     * Convenience method for reading a binary file
     * and base64-encoding it.
     *
     * &lt;p&gt;As of v 2.3, if there is a error,
     * the method will throw an java.io.IOException. &lt;b&gt;This is new to v2.3!&lt;/b&gt;
     * In earlier versions, it just returned false, but
     * in retrospect that's a pretty poor way to handle it.&lt;/p&gt;
     * 
     * @param filename Filename for reading binary data
     * @return base64-encoded string
     * @throws java.io.IOException if there is an error
     * @since 2.1
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>encodeFromFile</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>filename</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name>String</name></type> <name>encodedData</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Base64</name><operator>.</operator><name>InputStream</name></name></type> <name>bis</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try
        <block>{
            <comment type="line">// Set up some useful variables</comment>
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name></type> <name>file</name> <init>= <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name><argument_list>( <argument><expr><name>filename</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[ <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>file</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1.4</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr> ]</index></name></expr></init></decl>;</decl_stmt> <comment type="line">// Need max() for math on small files (v2.2.1)</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>length</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>numBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            
            <comment type="line">// Open a stream</comment>
            <expr_stmt><expr><name>bis</name> <operator>=</operator> <operator>new</operator> <call><name><name>Base64</name><operator>.</operator><name>InputStream</name></name><argument_list>( 
                      <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name><argument_list>( 
                      <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name><argument_list>( <argument><expr><name>file</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>ENCODE</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            
            <comment type="line">// Read until done</comment>
            <while>while<condition>( <expr><operator>(</operator> <name>numBytes</name> <operator>=</operator> <call><name><name>bis</name><operator>.</operator><name>read</name></name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{
                <expr_stmt><expr><name>length</name> <operator>+=</operator> <name>numBytes</name></expr>;</expr_stmt>
            }</block></while>   <comment type="line">// end while</comment>
            
            <comment type="line">// Save in a variable to return</comment>
            <expr_stmt><expr><name>encodedData</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>Base64</name><operator>.</operator><name>PREFERRED_ENCODING</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw> <comment type="line">// Catch and release to execute finally{}</comment>
        }</block></catch>   <comment type="line">// end catch: java.io.IOException</comment>
        <finally>finally <block>{
            <try>try<block>{ <expr_stmt><expr><call><name><name>bis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block> <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally</comment>
        
        <return>return <expr><name>encodedData</name></expr>;</return>
        }</block></function>   <comment type="line">// end encodeFromFile</comment>
    
    <comment type="block" format="javadoc">/**
     * Reads &lt;tt&gt;infile&lt;/tt&gt; and encodes it to &lt;tt&gt;outfile&lt;/tt&gt;.
     *
     * @param infile Input file
     * @param outfile Output file
     * @throws java.io.IOException if there is an error
     * @since 2.2
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>encodeFileToFile</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>infile</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>outfile</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name>String</name></type> <name>encoded</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>encodeFromFile</name></name><argument_list>( <argument><expr><name>infile</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name></type> <name>out</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try<block>{
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedOutputStream</name></name><argument_list>(
                  <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name><argument_list>( <argument><expr><name>outfile</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><call><name><name>encoded</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><literal type="string">"US-ASCII"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> <comment type="line">// Strict, 7-bit output.</comment>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw> <comment type="line">// Catch and release to execute finally{}</comment>
        }</block></catch>   <comment type="line">// end catch</comment>
        <finally>finally <block>{
            <try>try <block>{ <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block>
            <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally    </comment>
    }</block></function>   <comment type="line">// end encodeFileToFile</comment>


    <comment type="block" format="javadoc">/**
     * Reads &lt;tt&gt;infile&lt;/tt&gt; and decodes it to &lt;tt&gt;outfile&lt;/tt&gt;.
     *
     * @param infile Input file
     * @param outfile Output file
     * @throws java.io.IOException if there is an error
     * @since 2.2
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>decodeFileToFile</name><parameter_list>( <parameter><decl><type><name>String</name></type> <name>infile</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>outfile</name></decl></parameter> )</parameter_list>
    <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>decoded</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decodeFromFile</name></name><argument_list>( <argument><expr><name>infile</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name></type> <name>out</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try<block>{
            <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedOutputStream</name></name><argument_list>(
                  <argument><expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name><argument_list>( <argument><expr><name>outfile</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>decoded</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block>   <comment type="line">// end try</comment>
        <catch>catch<parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter> )</parameter_list> <block>{
            <throw>throw <expr><name>e</name></expr>;</throw> <comment type="line">// Catch and release to execute finally{}</comment>
        }</block></catch>   <comment type="line">// end catch</comment>
        <finally>finally <block>{
            <try>try <block>{ <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block>
            <catch>catch<parameter_list>( <parameter><decl><type><name>Exception</name></type> <name>ex</name></decl></parameter> )</parameter_list><block>{}</block></catch></try>
        }</block></finally></try>   <comment type="line">// end finally    </comment>
    }</block></function>   <comment type="line">// end decodeFileToFile</comment>
    
    
    <comment type="block">/* ********  I N N E R   C L A S S   I N P U T S T R E A M  ******** */</comment>
    
    
    
    <comment type="block" format="javadoc">/**
     * A {@link Base64.InputStream} will read data from another
     * &lt;tt&gt;java.io.InputStream&lt;/tt&gt;, given in the constructor,
     * and encode/decode to/from Base64 notation on the fly.
     *
     * @see Base64
     * @since 1.3
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>InputStream</name> <super><extends>extends <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilterInputStream</name></name></extends></super> <block>{
        
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>encode</name></decl>;</decl_stmt>         <comment type="line">// Encoding or decoding</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>position</name></decl>;</decl_stmt>       <comment type="line">// Current position in the buffer</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type>  <name>buffer</name></decl>;</decl_stmt>         <comment type="line">// Small buffer holding converted data</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>bufferLength</name></decl>;</decl_stmt>   <comment type="line">// Length of buffer (3 or 4)</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>numSigBytes</name></decl>;</decl_stmt>    <comment type="line">// Number of meaningful bytes in the buffer</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>lineLength</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>breakLines</name></decl>;</decl_stmt>     <comment type="line">// Break lines at less than 80 characters</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>options</name></decl>;</decl_stmt>        <comment type="line">// Record options used to create the stream.</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type>  <name>decodabet</name></decl>;</decl_stmt>      <comment type="line">// Local copies to avoid extra method calls</comment>
        
        
        <comment type="block" format="javadoc">/**
         * Constructs a {@link Base64.InputStream} in DECODE mode.
         *
         * @param in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.
         * @since 1.3
         */</comment>
        <constructor><specifier>public</specifier> <name>InputStream</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>in</name></decl></parameter> )</parameter_list> <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>( <argument><expr><name>in</name></expr></argument>, <argument><expr><name>DECODE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>   <comment type="line">// end constructor</comment>
        
        
        <comment type="block" format="javadoc">/**
         * Constructs a {@link Base64.InputStream} in
         * either ENCODE or DECODE mode.
         * &lt;p&gt;
         * Valid options:&lt;pre&gt;
         *   ENCODE or DECODE: Encode or Decode as data is read.
         *   DO_BREAK_LINES: break lines at 76 characters
         *     (only meaningful when encoding)&lt;/i&gt;
         * &lt;/pre&gt;
         * &lt;p&gt;
         * Example: &lt;code&gt;new Base64.InputStream( in, Base64.DECODE )&lt;/code&gt;
         *
         *
         * @param in the &lt;tt&gt;java.io.InputStream&lt;/tt&gt; from which to read data.
         * @param options Specified options
         * @see Base64#ENCODE
         * @see Base64#DECODE
         * @see Base64#DO_BREAK_LINES
         * @since 2.0
         */</comment>
        <constructor><specifier>public</specifier> <name>InputStream</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
            
            <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name>      <operator>=</operator> <name>options</name></expr>;</expr_stmt> <comment type="line">// Record for later</comment>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>breakLines</name></name>   <operator>=</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DO_BREAK_LINES</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encode</name></name>       <operator>=</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>ENCODE</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferLength</name></name> <operator>=</operator> <ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buffer</name></name>       <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[ <expr><name>bufferLength</name></expr> ]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name>     <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lineLength</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>decodabet</name></name>    <operator>=</operator> <call><name>getDecodabet</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>   <comment type="line">// end constructor</comment>
        
        <comment type="block" format="javadoc">/**
         * Reads enough of the input stream to convert
         * to/from Base64 and returns the next byte.
         *
         * @return next byte
         * @since 1.3
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws>  <block>{
            
            <comment type="line">// Do we need to get data?</comment>
            <if>if<condition>( <expr><name>position</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                <if>if<condition>( <expr><name>encode</name></expr> )</condition><then> <block>{
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b3</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>numBinaryBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                        <comment type="line">// If end of stream, b is -1.</comment>
                        <if>if<condition>( <expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                            <expr_stmt><expr><name><name>b3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
                            <expr_stmt><expr><name>numBinaryBytes</name><operator>++</operator></expr>;</expr_stmt>
                        }</block></then> <else>else <block>{
                            <break>break;</break> <comment type="line">// out of for loop</comment>
                        }</block></else></if>   <comment type="line">// end else: end of stream</comment>
                            
                    }</block></for>   <comment type="line">// end for: each needed input byte</comment>
                    
                    <if>if<condition>( <expr><name>numBinaryBytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                        <expr_stmt><expr><call><name>encode3to4</name><argument_list>( <argument><expr><name>b3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>numBinaryBytes</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>numSigBytes</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                    }</block></then>   <comment type="line">// end if: got data</comment>
                    <else>else <block>{
                        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>  <comment type="line">// Must be end of stream</comment>
                    }</block></else></if>   <comment type="line">// end else</comment>
                }</block></then>   <comment type="line">// end if: encoding</comment>
                
                <comment type="line">// Else decoding</comment>
                <else>else <block>{
                    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b4</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                    <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
                        <comment type="line">// Read four "meaningful" bytes:</comment>
                        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                        <do>do<block>{ <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block>
                        while<condition>( <expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>decodabet</name><index>[ <expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr> ]</index></name> <operator>&lt;=</operator> <name>WHITE_SPACE_ENC</name></expr> )</condition>;</do>
                        
                        <if>if<condition>( <expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                            <break>break;</break> <comment type="line">// Reads a -1 if end of stream</comment>
                        }</block></then></if>   <comment type="line">// end if: end of stream</comment>
                        
                        <expr_stmt><expr><name><name>b4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>b</name></expr>;</expr_stmt>
                    }</block></for>   <comment type="line">// end for: each needed input byte</comment>
                    
                    <if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition><then> <block>{
                        <expr_stmt><expr><name>numSigBytes</name> <operator>=</operator> <call><name>decode4to3</name><argument_list>( <argument><expr><name>b4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    }</block></then>   <comment type="line">// end if: got four characters</comment>
                    <elseif>else <if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then><block>{
                        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                    }</block></then></if></elseif>   <comment type="line">// end else if: also padded correctly</comment>
                    <else>else <block>{
                        <comment type="line">// Must have broken out from above.</comment>
                        <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>( <argument><expr><literal type="string">"Improperly padded Base64 input."</literal></expr></argument> )</argument_list></call></expr>;</throw>
                    }</block></else></if>   <comment type="line">// end </comment>
                    
                }</block></else></if>   <comment type="line">// end else: decode</comment>
            }</block></then></if>   <comment type="line">// end else: get data</comment>
            
            <comment type="line">// Got data?</comment>
            <if>if<condition>( <expr><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                <comment type="line">// End of relevant data?</comment>
                <if>if<condition>( <comment type="block">/*!encode &amp;&amp;*/</comment> <expr><name>position</name> <operator>&gt;=</operator> <name>numSigBytes</name></expr> )</condition><then><block>{
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                }</block></then></if>   <comment type="line">// end if: got data</comment>
                
                <if>if<condition>( <expr><name>encode</name> <operator>&amp;&amp;</operator> <name>breakLines</name> <operator>&amp;&amp;</operator> <name>lineLength</name> <operator>&gt;=</operator> <name>MAX_LINE_LENGTH</name></expr> )</condition><then> <block>{
                    <expr_stmt><expr><name>lineLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <return>return <expr><literal type="char">'\n'</literal></expr>;</return>
                }</block></then>   <comment type="line">// end if</comment>
                <else>else <block>{
                    <expr_stmt><expr><name>lineLength</name><operator>++</operator></expr>;</expr_stmt>   <comment type="line">// This isn't important when decoding</comment>
                                    <comment type="line">// but throwing an extra "if" seems</comment>
                                    <comment type="line">// just as wasteful.</comment>
                    
                    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>buffer</name><index>[ <expr><name>position</name><operator>++</operator></expr> ]</index></name></expr></init></decl>;</decl_stmt>

                    <if>if<condition>( <expr><name>position</name> <operator>&gt;=</operator> <name>bufferLength</name></expr> )</condition><then> <block>{
                        <expr_stmt><expr><name>position</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></then></if>   <comment type="line">// end if: end</comment>

                    <return>return <expr><name>b</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</return> <comment type="line">// This is how you "cast" a byte that's</comment>
                                     <comment type="line">// intended to be unsigned.</comment>
                }</block></else></if>   <comment type="line">// end else</comment>
            }</block></then>   <comment type="line">// end if: position &gt;= 0</comment>
            
            <comment type="line">// Else error</comment>
            <else>else <block>{
                <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>( <argument><expr><literal type="string">"Error in Base64 code reading stream."</literal></expr></argument> )</argument_list></call></expr>;</throw>
            }</block></else></if>   <comment type="line">// end else</comment>
        }</block></function>   <comment type="line">// end read</comment>
        
        
        <comment type="block" format="javadoc">/**
         * Calls {@link #read()} repeatedly until the end of stream
         * is reached or &lt;var&gt;len&lt;/var&gt; bytes are read.
         * Returns number of bytes read into array or -1 if
         * end of stream is encountered.
         *
         * @param dest array to hold values
         * @param off offset for array
         * @param len max number of bytes to read into array
         * @return bytes read into array or -1 if end of stream is encountered.
         * @since 1.3
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>int</name></type> <name>read</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> 
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>
            <for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
                <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                
                <if>if<condition>( <expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                    <expr_stmt><expr><name><name>dest</name><index>[<expr><name>off</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator> <name>b</name></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
                }</block></then></if></elseif>
                <else>else <block>{
                    <break>break;</break> <comment type="line">// Out of 'for' loop</comment>
                }</block></else></if> <comment type="line">// Out of 'for' loop</comment>
            }</block></for>   <comment type="line">// end for: each byte read</comment>
            <return>return <expr><name>i</name></expr>;</return>
        }</block></function>   <comment type="line">// end read</comment>
        
    }</block></class>   <comment type="line">// end inner class InputStream</comment>
    
    
    
    
    
    
    <comment type="block">/* ********  I N N E R   C L A S S   O U T P U T S T R E A M  ******** */</comment>
    
    
    
    <comment type="block" format="javadoc">/**
     * A {@link Base64.OutputStream} will write data to another
     * &lt;tt&gt;java.io.OutputStream&lt;/tt&gt;, given in the constructor,
     * and encode/decode to/from Base64 notation on the fly.
     *
     * @see Base64
     * @since 1.3
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>OutputStream</name> <super><extends>extends <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilterOutputStream</name></name></extends></super> <block>{
        
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>encode</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>position</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type>  <name>buffer</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>bufferLength</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>lineLength</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>breakLines</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type>  <name>b4</name></decl>;</decl_stmt>         <comment type="line">// Scratch used in a few places</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>suspendEncoding</name></decl>;</decl_stmt>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>options</name></decl>;</decl_stmt>    <comment type="line">// Record for later</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type>  <name>decodabet</name></decl>;</decl_stmt>  <comment type="line">// Local copies to avoid extra method calls</comment>
        
        <comment type="block" format="javadoc">/**
         * Constructs a {@link Base64.OutputStream} in ENCODE mode.
         *
         * @param out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.
         * @since 1.3
         */</comment>
        <constructor><specifier>public</specifier> <name>OutputStream</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name></type> <name>out</name></decl></parameter> )</parameter_list> <block>{
            <expr_stmt><expr><call><name>this</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ENCODE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>   <comment type="line">// end constructor</comment>
        
        
        <comment type="block" format="javadoc">/**
         * Constructs a {@link Base64.OutputStream} in
         * either ENCODE or DECODE mode.
         * &lt;p&gt;
         * Valid options:&lt;pre&gt;
         *   ENCODE or DECODE: Encode or Decode as data is read.
         *   DO_BREAK_LINES: don't break lines at 76 characters
         *     (only meaningful when encoding)&lt;/i&gt;
         * &lt;/pre&gt;
         * &lt;p&gt;
         * Example: &lt;code&gt;new Base64.OutputStream( out, Base64.ENCODE )&lt;/code&gt;
         *
         * @param out the &lt;tt&gt;java.io.OutputStream&lt;/tt&gt; to which data will be written.
         * @param options Specified options.
         * @see Base64#ENCODE
         * @see Base64#DECODE
         * @see Base64#DO_BREAK_LINES
         * @since 1.3
         */</comment>
        <constructor><specifier>public</specifier> <name>OutputStream</name><parameter_list>( <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter> )</parameter_list> <block>{
            <expr_stmt><expr><call><name>super</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>breakLines</name></name>   <operator>=</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>DO_BREAK_LINES</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>encode</name></name>       <operator>=</operator> <operator>(</operator><name>options</name> <operator>&amp;</operator> <name>ENCODE</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bufferLength</name></name> <operator>=</operator> <ternary><condition><expr><name>encode</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buffer</name></name>       <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[ <expr><name>bufferLength</name></expr> ]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name>     <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lineLength</name></name>   <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>suspendEncoding</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>b4</name></name>           <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>options</name></name>      <operator>=</operator> <name>options</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>decodabet</name></name>    <operator>=</operator> <call><name>getDecodabet</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>   <comment type="line">// end constructor</comment>
        
        
        <comment type="block" format="javadoc">/**
         * Writes the byte to the output stream after
         * converting to/from Base64 notation.
         * When encoding, bytes are buffered three
         * at a time before the output stream actually
         * gets a write() call.
         * When decoding, bytes are buffered four
         * at a time.
         *
         * @param theByte the byte to write
         * @since 1.3
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>theByte</name></decl></parameter>)</parameter_list> 
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
            <comment type="line">// Encoding suspended?</comment>
            <if>if<condition>( <expr><name>suspendEncoding</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>theByte</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>   <comment type="line">// end if: supsended</comment>
            
            <comment type="line">// Encode?</comment>
            <if>if<condition>( <expr><name>encode</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><name><name>buffer</name><index>[ <expr><name>position</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>theByte</name></expr>;</expr_stmt>
                <if>if<condition>( <expr><name>position</name> <operator>&gt;=</operator> <name>bufferLength</name></expr> )</condition><then> <block>{ <comment type="line">// Enough to encode.</comment>
                
                    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><call><name>encode3to4</name><argument_list>( <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufferLength</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name>lineLength</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
                    <if>if<condition>( <expr><name>breakLines</name> <operator>&amp;&amp;</operator> <name>lineLength</name> <operator>&gt;=</operator> <name>MAX_LINE_LENGTH</name></expr> )</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>NEW_LINE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>lineLength</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    }</block></then></if>   <comment type="line">// end if: end of line</comment>

                    <expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>   <comment type="line">// end if: enough to output</comment>
            }</block></then>   <comment type="line">// end if: encoding</comment>

            <comment type="line">// Else, Decoding</comment>
            <else>else <block>{
                <comment type="line">// Meaningful Base64 character?</comment>
                <if>if<condition>( <expr><name><name>decodabet</name><index>[ <expr><name>theByte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr> ]</index></name> <operator>&gt;</operator> <name>WHITE_SPACE_ENC</name></expr> )</condition><then> <block>{
                    <expr_stmt><expr><name><name>buffer</name><index>[ <expr><name>position</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>theByte</name></expr>;</expr_stmt>
                    <if>if<condition>( <expr><name>position</name> <operator>&gt;=</operator> <name>bufferLength</name></expr> )</condition><then> <block>{ <comment type="line">// Enough to output.</comment>
                    
                        <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>decode4to3</name></name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>b4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    }</block></then></if>   <comment type="line">// end if: enough to output</comment>
                }</block></then>   <comment type="line">// end if: meaningful base64 character</comment>
                <elseif>else <if>if<condition>( <expr><name><name>decodabet</name><index>[ <expr><name>theByte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr> ]</index></name> <operator>!=</operator> <name>WHITE_SPACE_ENC</name></expr> )</condition><then> <block>{
                    <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>( <argument><expr><literal type="string">"Invalid character in Base64 data."</literal></expr></argument> )</argument_list></call></expr>;</throw>
                }</block></then></if></elseif></if>   <comment type="line">// end else: not white space either</comment>
            }</block></else></if>   <comment type="line">// end else: decoding</comment>
        }</block></function>   <comment type="line">// end write</comment>
        
        
        
        <comment type="block" format="javadoc">/**
         * Calls {@link #write(int)} repeatedly until &lt;var&gt;len&lt;/var&gt; 
         * bytes are written.
         *
         * @param theBytes array from which to read bytes
         * @param off offset for array
         * @param len max number of bytes to read into array
         * @since 1.3
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>write</name><parameter_list>( <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>theBytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter> )</parameter_list> 
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
            <comment type="line">// Encoding suspended?</comment>
            <if>if<condition>( <expr><name>suspendEncoding</name></expr> )</condition><then> <block>{
                <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><name>theBytes</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <return>return;</return>
            }</block></then></if>   <comment type="line">// end if: supsended</comment>
            
            <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
                <expr_stmt><expr><call><name>write</name><argument_list>( <argument><expr><name><name>theBytes</name><index>[ <expr><name>off</name> <operator>+</operator> <name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></for>   <comment type="line">// end for: each byte written</comment>
            
        }</block></function>   <comment type="line">// end write</comment>
        
        
        
        <comment type="block" format="javadoc">/**
         * Method added by PHIL. [Thanks, PHIL. -Rob]
         * This pads the buffer without closing the stream.
         * @throws java.io.IOException  if there's an error.
         */</comment>
        <function><specifier>public</specifier> <type><name>void</name></type> <name>flushBase64</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws>  <block>{
            <if>if<condition>( <expr><name>position</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
                <if>if<condition>( <expr><name>encode</name></expr> )</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>( <argument><expr><call><name>encode3to4</name><argument_list>( <argument><expr><name>b4</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>position</name></expr></argument>, <argument><expr><name>options</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then>   <comment type="line">// end if: encoding</comment>
                <else>else <block>{
                    <throw>throw <expr><operator>new</operator> <call><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name><argument_list>( <argument><expr><literal type="string">"Base64 input not properly padded."</literal></expr></argument> )</argument_list></call></expr>;</throw>
                }</block></else></if>   <comment type="line">// end else: decoding</comment>
            }</block></then></if>   <comment type="line">// end if: buffer partially full</comment>

        }</block></function>   <comment type="line">// end flush</comment>

        
        <comment type="block" format="javadoc">/** 
         * Flushes and closes (I think, in the superclass) the stream. 
         *
         * @since 1.3
         */</comment>
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
            <comment type="line">// 1. Ensure that pending characters are written</comment>
            <expr_stmt><expr><call><name>flushBase64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 2. Actually close the stream</comment>
            <comment type="line">// Base class both flushes and closes.</comment>
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>buffer</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>out</name>    <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>   <comment type="line">// end close</comment>
        
        
        
        <comment type="block" format="javadoc">/**
         * Suspends encoding of the stream.
         * May be helpful if you need to embed a piece of
         * base64-encoded data in a stream.
         *
         * @throws java.io.IOException  if there's an error flushing
         * @since 1.5.1
         */</comment>
        <function><specifier>public</specifier> <type><name>void</name></type> <name>suspendEncoding</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws>  <block>{
            <expr_stmt><expr><call><name>flushBase64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>suspendEncoding</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></function>   <comment type="line">// end suspendEncoding</comment>
        
        
        <comment type="block" format="javadoc">/**
         * Resumes encoding of the stream.
         * May be helpful if you need to embed a piece of
         * base64-encoded data in a stream.
         *
         * @since 1.5.1
         */</comment>
        <function><specifier>public</specifier> <type><name>void</name></type> <name>resumeEncoding</name><parameter_list>()</parameter_list> <block>{
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>suspendEncoding</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></function>   <comment type="line">// end resumeEncoding</comment>
        
        
        
    }</block></class>   <comment type="line">// end inner class OutputStream</comment>
    
    
}</block></class>   <comment type="line">// end class Base64</comment>
</unit>
