<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\MathUtils.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PointF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<class><specifier>public</specifier> class <name>MathUtils</name> <block>{

    <comment type="block" format="javadoc">/**
     * For more info:
     * &lt;a href="http://math.stackexchange.com/questions/190111/how-to-check-if-a-point-is-inside-a-rectangle"&gt;StackOverflow: How to check point is in rectangle&lt;/a&gt;
     *
     * @param pt point to check
     * @param v1 vertex 1 of the triangle
     * @param v2 vertex 2 of the triangle
     * @param v3 vertex 3 of the triangle
     * @return true if point (x, y) is inside the triangle
     */</comment>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>pointInTriangle</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>v1</name></decl></parameter>,
                                          <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>v2</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>v3</name></decl></parameter>)</parameter_list> <block>{

        <decl_stmt><decl><type><name>boolean</name></type> <name>b1</name> <init>= <expr><call><name>crossProduct</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b2</name> <init>= <expr><call><name>crossProduct</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>b3</name> <init>= <expr><call><name>crossProduct</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>v3</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

        <return>return <expr><operator>(</operator><name>b1</name> <operator>==</operator> <name>b2</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>b2</name> <operator>==</operator> <name>b3</name><operator>)</operator></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * calculates cross product of vectors AB and AC
     *
     * @param a beginning of 2 vectors
     * @param b end of vector 1
     * @param c enf of vector 2
     * @return cross product AB * AC
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>crossProduct</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PointF</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>crossProduct</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * calculates cross product of vectors AB and AC
     *
     * @param ax X coordinate of point A
     * @param ay Y coordinate of point A
     * @param bx X coordinate of point B
     * @param by Y coordinate of point B
     * @param cx X coordinate of point C
     * @param cy Y coordinate of point C
     * @return cross product AB * AC
     */</comment>
    <function><specifier>private</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>crossProduct</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>ax</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>ay</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>bx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>by</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>cy</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><operator>(</operator><name>ax</name> <operator>-</operator> <name>cx</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>by</name> <operator>-</operator> <name>cy</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>bx</name> <operator>-</operator> <name>cx</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>ay</name> <operator>-</operator> <name>cy</name><operator>)</operator></expr>;</return>
    }</block></function>
}</block></class></unit>
