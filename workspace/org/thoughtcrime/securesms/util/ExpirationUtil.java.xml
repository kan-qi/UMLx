<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\ExpirationUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>ExpirationUtil</name> <block>{

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getExpirationDisplayValue</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expirationTime</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>expiration_off</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>expiration_seconds</name></name></expr></argument>, <argument><expr><name>expirationTime</name></expr></argument>, <argument><expr><name>expirationTime</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>minutes</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>expiration_minutes</name></name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>hours</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>expiration_hours</name></name></expr></argument>, <argument><expr><name>hours</name></expr></argument>, <argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>expiration_days</name></name></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>weeks</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>expiration_weeks</name></name></expr></argument>, <argument><expr><name>weeks</name></expr></argument>, <argument><expr><name>weeks</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getExpirationAbbreviatedDisplayValue</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expirationTime</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>expiration_seconds_abbreviated</name></name></expr></argument>, <argument><expr><name>expirationTime</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>minutes</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>MINUTES</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>expiration_minutes_abbreviated</name></name></expr></argument>, <argument><expr><name>minutes</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>hours</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>expiration_hours_abbreviated</name></name></expr></argument>, <argument><expr><name>hours</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>expirationTime</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>days</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>expiration_days_abbreviated</name></name></expr></argument>, <argument><expr><name>days</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>weeks</name> <init>= <expr><name>expirationTime</name> <operator>/</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>expiration_weeks_abbreviated</name></name></expr></argument>, <argument><expr><name>weeks</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>


}</block></class>
</unit>
