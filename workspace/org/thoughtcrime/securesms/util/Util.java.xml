<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\Util.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>pm</name><operator>.</operator><name>PackageManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION_CODES</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Looper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Telephony</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RequiresPermission</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>TelephonyManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>CharacterSets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>EncodedStringValue</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>NumberParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>PhoneNumberUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>Phonenumber</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>BuildConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ComposeText</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingLegacyMmsConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>EOFException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>text</name><operator>.</operator><name>DecimalFormat</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collection</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CountDownLatch</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ThreadPoolExecutor</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>Util</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>volatile</specifier> <name>Handler</name></type> <name>handler</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>asList</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>...</modifier></type> <name>elements</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>join</name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name><name>Collection</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>item</name> <range>: <expr><name>list</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <return>return <expr><call><name><name>result</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name><name>long</name><index>[]</index></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>delimeter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>StringBuilder</name></type> <name>sb</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>list</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name>j</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>delimeter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name><name>sb</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name><name>list</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><call><name><name>sb</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ExecutorService</name></type> <name>newSingleThreadedLifoExecutor</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ThreadPoolExecutor</name></type> <name>executor</name> <init>= <expr><operator>new</operator> <call><name>ThreadPoolExecutor</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>, <argument><expr><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedBlockingLifoQueue</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>executor</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
<comment type="line">//        Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</comment>
      <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>currentThread</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setPriority</name><argument_list>(<argument><expr><name><name>Thread</name><operator>.</operator><name>MIN_PRIORITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>executor</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEmpty</name><parameter_list>(<parameter><decl><type><name><name>EncodedStringValue</name><index>[]</index></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>value</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>value</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEmpty</name><parameter_list>(<parameter><decl><type><name>ComposeText</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>value</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>value</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>value</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEmpty</name><parameter_list>(<parameter><decl><type><name>Collection</name></type> <name>collection</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>collection</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>collection</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>K</name></parameter>, <parameter><name>V</name></parameter>&gt;</parameter_list> <type><name>V</name></type> <name>getOrDefault</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>K</name></argument>, <argument><name>V</name></argument>&gt;</argument_list></name></type> <name>map</name></decl></parameter>, <parameter><decl><type><name>K</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>V</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name><name>map</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>map</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>defaultValue</name></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFirstNonEmpty</name><parameter_list>(<parameter><decl><type><name>String</name><modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>String</name></type> <name>value</name> <range>: <expr><name>values</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>value</name></expr>;</return>
      }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="string">""</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>chunk</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chunkSize</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>chunks</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>chunkSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>chunkSize</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>chunk</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>chunkSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>chunks</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>chunks</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CharSequence</name></type> <name>getBoldedString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SpannableString</name></type> <name>spanned</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>spanned</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>BOLD</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                    <argument><expr><call><name><name>spanned</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>spanned</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>toIsoString</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name><name>CharacterSets</name><operator>.</operator><name>MIMENAME_ISO_8859_1</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"ISO_8859_1 must be supported!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>toIsoBytes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>isoString</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>isoString</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>CharacterSets</name><operator>.</operator><name>MIMENAME_ISO_8859_1</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"ISO_8859_1 must be supported!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>toUtf8Bytes</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>utf8String</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>utf8String</name><operator>.</operator><name>getBytes</name></name><argument_list>(<argument><expr><name><name>CharacterSets</name><operator>.</operator><name>MIMENAME_UTF_8</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"UTF_8 must be supported!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>wait</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>lock</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name><name>lock</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>close</name><parameter_list>(<parameter><decl><type><name>Closeable</name></type> <name>closeable</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name><name>closeable</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getStreamLength</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name>    <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>totalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
      <expr_stmt><expr><name>totalSize</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>totalSize</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isOwnNumber</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>isEmail</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <return>return <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name>readFully</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>EOFException</name><argument_list>(<argument><expr><literal type="string">"Stream ended early"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

      <if>if <condition>(<expr><name>read</name> <operator>+</operator> <name>offset</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt></block></then>
      <else>else                		 <block type="pseudo"><return>return;</return></block></else></if>
    }</block></for>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>readFully</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>bout</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name>              <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
      <expr_stmt><expr><call><name><name>bout</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>bout</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>readFullyAsString</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <return>return <expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name>readFully</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>copy</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
      <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>total</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>RequiresPermission</name><argument_list>(<argument><expr><name>anyOf</name> <operator>=</operator> <block>{
      <expr><name><name>android</name><operator>.</operator><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_PHONE_STATE</name></name></expr>,
      <argument><expr><name><name>android</name><operator>.</operator><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_SMS</name></name></expr></argument>,
      <argument><expr><name><name>android</name><operator>.</operator><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_PHONE_NUMBERS</name></name></expr></argument>
  }</block></expr></argument>)</argument_list></annotation>
  <annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"MissingPermission"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></argument>&gt;</argument_list></name></type> <name>getDeviceNumber</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type>           <name>localNumber</name> <init>= <expr><operator>(</operator><operator>(</operator><name>TelephonyManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>TELEPHONY_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getLine1Number</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>countryIso</name>  <init>= <expr><call><name>getSimCountryIso</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>countryIso</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then>        <block type="pseudo"><return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>PhoneNumberUtil</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>parse</name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>, <argument><expr><call><name><name>countryIso</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getSimCountryIso</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>simCountryIso</name> <init>= <expr><operator>(</operator><operator>(</operator><name>TelephonyManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>TELEPHONY_SERVICE</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>.</operator><call><name>getSimCountryIso</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>simCountryIso</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>simCountryIso</name><operator>.</operator><name>toUpperCase</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>partition</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>partitionSize</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>List</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>index</name><operator>&lt;</operator><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>index</name><operator>+=</operator><name>partitionSize</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>subListSize</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>partitionSize</name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>list</name><operator>.</operator><name>subList</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>index</name> <operator>+</operator> <name>subListSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>split</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>results</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>elements</name> <init>= <expr><call><name><name>source</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>elements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>split</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>firstLength</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>secondLength</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>parts</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>firstLength</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>firstLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>new</operator> <name><name>byte</name><index>[<expr><name>secondLength</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>firstLength</name></expr></argument>, <argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>secondLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>parts</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>combine</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name><modifier>...</modifier></type> <name>elements</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name><name>byte</name><index>[]</index></name></type> <name>element</name> <range>: <expr><name>elements</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>baos</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>trim</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"NewApi"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDefaultSmsProvider</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name><operator>)</operator> <operator>||</operator>
      <operator>(</operator><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>Telephony</name><operator>.</operator><name>Sms</name><operator>.</operator><name>getDefaultSmsPackage</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getCurrentApkReleaseVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPackageInfo</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getPackageName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><name>versionCode</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>PackageManager</name><operator>.</operator><name>NameNotFoundException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getSecret</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secret</name> <init>= <expr><call><name>getSecretBytes</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getSecretBytes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>secret</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>size</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>getSecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBytes</name><argument_list>(<argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>secret</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SecureRandom</name></type> <name>getSecureRandom</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getDaysTillBuildExpiry</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>age</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toDays</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name><name>BuildConfig</name><operator>.</operator><name>BUILD_TIMESTAMP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><literal type="number">90</literal> <operator>-</operator> <name>age</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMmsCapable</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name><operator>)</operator> <operator>||</operator> <call><name><name>OutgoingLegacyMmsConnection</name><operator>.</operator><name>isConnectionPossible</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMainThread</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Looper</name><operator>.</operator><name>myLooper</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>Looper</name><operator>.</operator><name>getMainLooper</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>assertMainThread</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Main-thread assertion failed."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>postToMain</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>getHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>runOnMain</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                <block type="pseudo"><expr_stmt><expr><call><name>getHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>runOnMainDelayed</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Runnable</name></type> <name>runnable</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>delayMillis</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>getHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>postDelayed</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>, <argument><expr><name>delayMillis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>cancelRunnableOnMain</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>getHandler</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeCallbacks</name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>runOnMainSync</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Runnable</name></type> <name>runnable</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isMainThread</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>CountDownLatch</name></type> <name>sync</name> <init>= <expr><operator>new</operator> <call><name>CountDownLatch</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>runOnMain</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
        <try>try <block>{
          <expr_stmt><expr><call><name><name>runnable</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <finally>finally <block>{
          <expr_stmt><expr><call><name><name>sync</name><operator>.</operator><name>countDown</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{
        <expr_stmt><expr><call><name><name>sync</name><operator>.</operator><name>await</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>ie</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>ie</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>getRandomElement</name><parameter_list>(<parameter><decl><type><name><name>T</name><index>[]</index></name></type> <name>elements</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><name><name>elements</name><index>[<expr><call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><name><name>elements</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Object</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>a</name> <operator>==</operator> <name>b</name> <operator>||</operator> <operator>(</operator><name>a</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Object</name><modifier>...</modifier></type> <name>objects</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Arrays</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>uri</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then>
    <else>else             <block type="pseudo"><return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLowMemory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ActivityManager</name></type> <name>activityManager</name> <init>= <expr><operator>(</operator><name>ActivityManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>ACTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>(</operator><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name> <operator>&amp;&amp;</operator> <call><name><name>activityManager</name><operator>.</operator><name>isLowRamDevice</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
           <call><name><name>activityManager</name><operator>.</operator><name>getLargeMemoryClass</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">64</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>clamp</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>min</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>readTextFromClipboard</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <block>{
      <decl_stmt><decl><type><name>ClipboardManager</name></type> <name>clipboardManager</name> <init>= <expr><operator>(</operator><name>ClipboardManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>clipboardManager</name><operator>.</operator><name>hasPrimaryClip</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>clipboardManager</name><operator>.</operator><name>getPrimaryClip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>clipboardManager</name><operator>.</operator><name>getPrimaryClip</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemAt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></else></if>
    }</block>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>writeTextToClipboard</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
    <block>{
      <decl_stmt><decl><type><name>ClipboardManager</name></type> <name>clipboardManager</name> <init>= <expr><operator>(</operator><name>ClipboardManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>clipboardManager</name><operator>.</operator><name>setPrimaryClip</name></name><argument_list>(<argument><expr><call><name><name>ClipData</name><operator>.</operator><name>newPlainText</name></name><argument_list>(<argument><expr><literal type="string">"Safety numbers"</literal></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>toIntExact</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name>value</name> <operator>!=</operator> <name>value</name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>ArithmeticException</name><argument_list>(<argument><expr><literal type="string">"integer overflow"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>value</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isStringEquals</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>first</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>second</name> <operator>==</operator> <literal type="null">null</literal></expr>;</return></block></then></if>
    <return>return <expr><call><name><name>first</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEquals</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Long</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>second</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>first</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>first</name> <operator>==</operator> <name>second</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getPrettyFileSize</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>sizeBytes</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>sizeBytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"0"</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>units</name>       <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><literal type="string">"B"</literal></expr>, <expr><literal type="string">"kB"</literal></expr>, <expr><literal type="string">"MB"</literal></expr>, <expr><literal type="string">"GB"</literal></expr>, <expr><literal type="string">"TB"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name>digitGroups</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>log10</name></name><argument_list>(<argument><expr><name>sizeBytes</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name><name>Math</name><operator>.</operator><name>log10</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name>DecimalFormat</name><argument_list>(<argument><expr><literal type="string">"#,##0.#"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>sizeBytes</name><operator>/</operator><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>digitGroups</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name><name>units</name><index>[<expr><name>digitGroups</name></expr>]</index></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Handler</name></type> <name>getHandler</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <synchronized>synchronized <init>(<expr><name><name>Util</name><operator>.</operator><name>class</name></name></expr>)</init> <block>{
        <if>if <condition>(<expr><name>handler</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>handler</name> <operator>=</operator> <operator>new</operator> <call><name>Handler</name><argument_list>(<argument><expr><call><name><name>Looper</name><operator>.</operator><name>getMainLooper</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></synchronized>
    }</block></then></if>
    <return>return <expr><name>handler</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
