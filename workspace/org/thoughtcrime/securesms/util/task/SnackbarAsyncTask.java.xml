<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\task\SnackbarAsyncTask.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>task</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>ProgressDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>design</name><operator>.</operator><name>widget</name><operator>.</operator><name>Snackbar</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>SnackbarAsyncTask</name><parameter_list>&lt;<parameter><name>Params</name></parameter>&gt;</parameter_list></name>
    <super><extends>extends <name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Params</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></extends>
    <implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type>    <name>view</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>  <name>snackbarText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>  <name>snackbarActionText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>     <name>snackbarActionColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>     <name>snackbarDuration</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>showProgress</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Params</name></type>         <name>reversibleParameter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>ProgressDialog</name></type> <name>progressDialog</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SnackbarAsyncTask</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>,
                           <parameter><decl><type><name>String</name></type> <name>snackbarText</name></decl></parameter>,
                           <parameter><decl><type><name>String</name></type> <name>snackbarActionText</name></decl></parameter>,
                           <parameter><decl><type><name>int</name></type> <name>snackbarActionColor</name></decl></parameter>,
                           <parameter><decl><type><name>int</name></type> <name>snackbarDuration</name></decl></parameter>,
                           <parameter><decl><type><name>boolean</name></type> <name>showProgress</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name>                <operator>=</operator> <name>view</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snackbarText</name></name>        <operator>=</operator> <name>snackbarText</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snackbarActionText</name></name>  <operator>=</operator> <name>snackbarActionText</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snackbarActionColor</name></name> <operator>=</operator> <name>snackbarActionColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snackbarDuration</name></name>    <operator>=</operator> <name>snackbarDuration</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>showProgress</name></name>        <operator>=</operator> <name>showProgress</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>showProgress</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressDialog</name></name> <operator>=</operator> <call><name><name>ProgressDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                   <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressDialog</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></else></if>
  }</block></function>

  <function><annotation>@<name>SafeVarargs</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <specifier>final</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Params</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>reversibleParameter</name></name> <operator>=</operator> <ternary><condition><expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>params</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeAction</name><argument_list>(<argument><expr><name>reversibleParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>showProgress</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>progressDialog</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressDialog</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>Snackbar</name><operator>.</operator><name>make</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>snackbarText</name></expr></argument>, <argument><expr><name>snackbarDuration</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>setAction</name><argument_list>(<argument><expr><name>snackbarActionText</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>setActionTextColor</name><argument_list>(<argument><expr><name>snackbarActionColor</name></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>showProgress</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <call><name><name>ProgressDialog</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else              <block type="pseudo"><expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt></block></else></if>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>reverseAction</name><argument_list>(<argument><expr><name>reversibleParameter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>showProgress</name> <operator>&amp;&amp;</operator> <name>progressDialog</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>progressDialog</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>progressDialog</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
    }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>executeAction</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Params</name></type> <name>parameter</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>reverseAction</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Params</name></type> <name>parameter</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></class>
</unit>
