<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\TextSecurePreferences.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>CameraInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>ArrayRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>NotificationCompat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>requirements</name><operator>.</operator><name>SqlCipherMigrationRequirementProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>lock</name><operator>.</operator><name>RegistrationLockReminders</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>preferences</name><operator>.</operator><name>widgets</name><operator>.</operator><name>NotificationPrivacyPreference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>Medium</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>TextSecurePreferences</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IDENTITY_PREF</name>                    <init>= <expr><literal type="string">"pref_choose_identity"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CHANGE_PASSPHRASE_PREF</name>           <init>= <expr><literal type="string">"pref_change_passphrase"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DISABLE_PASSPHRASE_PREF</name>          <init>= <expr><literal type="string">"pref_disable_passphrase"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THEME_PREF</name>                       <init>= <expr><literal type="string">"pref_theme"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LANGUAGE_PREF</name>                    <init>= <expr><literal type="string">"pref_language"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_CUSTOM_HOST_PREF</name>            <init>= <expr><literal type="string">"pref_apn_mmsc_custom_host"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_HOST_PREF</name>                   <init>= <expr><literal type="string">"pref_apn_mmsc_host"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_CUSTOM_PROXY_PREF</name>           <init>= <expr><literal type="string">"pref_apn_mms_custom_proxy"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_PROXY_HOST_PREF</name>             <init>= <expr><literal type="string">"pref_apn_mms_proxy"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_CUSTOM_PROXY_PORT_PREF</name>      <init>= <expr><literal type="string">"pref_apn_mms_custom_proxy_port"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_PROXY_PORT_PREF</name>             <init>= <expr><literal type="string">"pref_apn_mms_proxy_port"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_CUSTOM_USERNAME_PREF</name>        <init>= <expr><literal type="string">"pref_apn_mmsc_custom_username"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_USERNAME_PREF</name>               <init>= <expr><literal type="string">"pref_apn_mmsc_username"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_CUSTOM_PASSWORD_PREF</name>        <init>= <expr><literal type="string">"pref_apn_mmsc_custom_password"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_PASSWORD_PREF</name>               <init>= <expr><literal type="string">"pref_apn_mmsc_password"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THREAD_TRIM_LENGTH</name>               <init>= <expr><literal type="string">"pref_trim_length"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THREAD_TRIM_NOW</name>                  <init>= <expr><literal type="string">"pref_trim_now"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ENABLE_MANUAL_MMS_PREF</name>           <init>= <expr><literal type="string">"pref_enable_manual_mms"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LAST_VERSION_CODE_PREF</name>           <init>= <expr><literal type="string">"last_version_code"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LAST_EXPERIENCE_VERSION_PREF</name>     <init>= <expr><literal type="string">"last_experience_version_code"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXPERIENCE_DISMISSED_PREF</name>        <init>= <expr><literal type="string">"experience_dismissed"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RINGTONE_PREF</name>                    <init>= <expr><literal type="string">"pref_key_ringtone"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIBRATE_PREF</name>                     <init>= <expr><literal type="string">"pref_key_vibrate"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_PREF</name>                <init>= <expr><literal type="string">"pref_key_enable_notifications"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LED_COLOR_PREF</name>                   <init>= <expr><literal type="string">"pref_led_color"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LED_BLINK_PREF</name>                   <init>= <expr><literal type="string">"pref_led_blink"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LED_BLINK_PREF_CUSTOM</name>            <init>= <expr><literal type="string">"pref_led_blink_custom"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ALL_MMS_PREF</name>                     <init>= <expr><literal type="string">"pref_all_mms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ALL_SMS_PREF</name>                     <init>= <expr><literal type="string">"pref_all_sms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PASSPHRASE_TIMEOUT_INTERVAL_PREF</name> <init>= <expr><literal type="string">"pref_timeout_interval"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PASSPHRASE_TIMEOUT_PREF</name>          <init>= <expr><literal type="string">"pref_timeout_passphrase"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SCREEN_SECURITY_PREF</name>             <init>= <expr><literal type="string">"pref_screen_security"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ENTER_SENDS_PREF</name>                 <init>= <expr><literal type="string">"pref_enter_sends"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ENTER_PRESENT_PREF</name>               <init>= <expr><literal type="string">"pref_enter_key"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SMS_DELIVERY_REPORT_PREF</name>         <init>= <expr><literal type="string">"pref_delivery_report_sms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMS_USER_AGENT</name>                   <init>= <expr><literal type="string">"pref_mms_user_agent"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMS_CUSTOM_USER_AGENT</name>            <init>= <expr><literal type="string">"pref_custom_mms_user_agent"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THREAD_TRIM_ENABLED</name>              <init>= <expr><literal type="string">"pref_trim_threads"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOCAL_NUMBER_PREF</name>                <init>= <expr><literal type="string">"pref_local_number"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VERIFYING_STATE_PREF</name>             <init>= <expr><literal type="string">"pref_verifying"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REGISTERED_GCM_PREF</name>              <init>= <expr><literal type="string">"pref_gcm_registered"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GCM_PASSWORD_PREF</name>                <init>= <expr><literal type="string">"pref_gcm_password"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SEEN_WELCOME_SCREEN_PREF</name>         <init>= <expr><literal type="string">"pref_seen_welcome_screen"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROMPTED_PUSH_REGISTRATION_PREF</name>  <init>= <expr><literal type="string">"pref_prompted_push_registration"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROMPTED_DEFAULT_SMS_PREF</name>        <init>= <expr><literal type="string">"pref_prompted_default_sms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROMPTED_OPTIMIZE_DOZE_PREF</name>      <init>= <expr><literal type="string">"pref_prompted_optimize_doze"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROMPTED_SHARE_PREF</name>              <init>= <expr><literal type="string">"pref_prompted_share"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNALING_KEY_PREF</name>               <init>= <expr><literal type="string">"pref_signaling_key"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DIRECTORY_FRESH_TIME_PREF</name>        <init>= <expr><literal type="string">"pref_directory_refresh_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UPDATE_APK_REFRESH_TIME_PREF</name>     <init>= <expr><literal type="string">"pref_update_apk_refresh_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UPDATE_APK_DOWNLOAD_ID</name>           <init>= <expr><literal type="string">"pref_update_apk_download_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UPDATE_APK_DIGEST</name>                <init>= <expr><literal type="string">"pref_update_apk_digest"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNED_PREKEY_ROTATION_TIME_PREF</name> <init>= <expr><literal type="string">"pref_signed_pre_key_rotation_time"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IN_THREAD_NOTIFICATION_PREF</name>      <init>= <expr><literal type="string">"pref_key_inthread_notifications"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SHOW_INVITE_REMINDER_PREF</name>        <init>= <expr><literal type="string">"pref_show_invite_reminder"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MESSAGE_BODY_TEXT_SIZE_PREF</name>      <init>= <expr><literal type="string">"pref_message_body_text_size"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOCAL_REGISTRATION_ID_PREF</name>       <init>= <expr><literal type="string">"pref_local_registration_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNED_PREKEY_REGISTERED_PREF</name>    <init>= <expr><literal type="string">"pref_signed_prekey_registered"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WIFI_SMS_PREF</name>                    <init>= <expr><literal type="string">"pref_wifi_sms"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GCM_DISABLED_PREF</name>                <init>= <expr><literal type="string">"pref_gcm_disabled"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GCM_REGISTRATION_ID_PREF</name>         <init>= <expr><literal type="string">"pref_gcm_registration_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GCM_REGISTRATION_ID_VERSION_PREF</name> <init>= <expr><literal type="string">"pref_gcm_registration_id_version"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>GCM_REGISTRATION_ID_TIME_PREF</name>    <init>= <expr><literal type="string">"pref_gcm_registration_id_last_set_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WEBSOCKET_REGISTERED_PREF</name>        <init>= <expr><literal type="string">"pref_websocket_registered"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RATING_LATER_PREF</name>                <init>= <expr><literal type="string">"pref_rating_later"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RATING_ENABLED_PREF</name>              <init>= <expr><literal type="string">"pref_rating_enabled"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNED_PREKEY_FAILURE_COUNT_PREF</name> <init>= <expr><literal type="string">"pref_signed_prekey_failure_count"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPEAT_ALERTS_PREF</name>               <init>= <expr><literal type="string">"pref_repeat_alerts"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_PRIVACY_PREF</name>        <init>= <expr><literal type="string">"pref_notification_privacy"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_PRIORITY_PREF</name>       <init>= <expr><literal type="string">"pref_notification_priority"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEW_CONTACTS_NOTIFICATIONS</name>       <init>= <expr><literal type="string">"pref_enable_new_contacts_notifications"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>WEBRTC_CALLING_PREF</name>              <init>= <expr><literal type="string">"pref_webrtc_calling"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MEDIA_DOWNLOAD_MOBILE_PREF</name>       <init>= <expr><literal type="string">"pref_media_download_mobile"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MEDIA_DOWNLOAD_WIFI_PREF</name>         <init>= <expr><literal type="string">"pref_media_download_wifi"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MEDIA_DOWNLOAD_ROAMING_PREF</name>      <init>= <expr><literal type="string">"pref_media_download_roaming"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SYSTEM_EMOJI_PREF</name>                <init>= <expr><literal type="string">"pref_system_emoji"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MULTI_DEVICE_PROVISIONED_PREF</name>    <init>= <expr><literal type="string">"pref_multi_device"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DIRECT_CAPTURE_CAMERA_ID</name>         <init>= <expr><literal type="string">"pref_direct_capture_camera_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ALWAYS_RELAY_CALLS_PREF</name>          <init>= <expr><literal type="string">"pref_turn_only"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROFILE_KEY_PREF</name>                 <init>= <expr><literal type="string">"pref_profile_key"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROFILE_NAME_PREF</name>                <init>= <expr><literal type="string">"pref_profile_name"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROFILE_AVATAR_ID_PREF</name>           <init>= <expr><literal type="string">"pref_profile_avatar_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>READ_RECEIPTS_PREF</name>               <init>= <expr><literal type="string">"pref_read_receipts"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INCOGNITO_KEYBORAD_PREF</name>          <init>= <expr><literal type="string">"pref_incognito_keyboard"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UNAUTHORIZED_RECEIVED</name>            <init>= <expr><literal type="string">"pref_unauthorized_received"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SUCCESSFUL_DIRECTORY_PREF</name>        <init>= <expr><literal type="string">"pref_successful_directory"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATABASE_ENCRYPTED_SECRET</name>     <init>= <expr><literal type="string">"pref_database_encrypted_secret"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATABASE_UNENCRYPTED_SECRET</name>   <init>= <expr><literal type="string">"pref_database_unencrypted_secret"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTACHMENT_ENCRYPTED_SECRET</name>   <init>= <expr><literal type="string">"pref_attachment_encrypted_secret"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ATTACHMENT_UNENCRYPTED_SECRET</name> <init>= <expr><literal type="string">"pref_attachment_unencrypted_secret"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEEDS_SQLCIPHER_MIGRATION</name>     <init>= <expr><literal type="string">"pref_needs_sql_cipher_migration"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CALL_NOTIFICATIONS_PREF</name> <init>= <expr><literal type="string">"pref_call_notifications"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CALL_RINGTONE_PREF</name>      <init>= <expr><literal type="string">"pref_call_ringtone"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CALL_VIBRATE_PREF</name>       <init>= <expr><literal type="string">"pref_call_vibrate"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEXT_PRE_KEY_ID</name>          <init>= <expr><literal type="string">"pref_next_pre_key_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ACTIVE_SIGNED_PRE_KEY_ID</name> <init>= <expr><literal type="string">"pref_active_signed_pre_key_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEXT_SIGNED_PRE_KEY_ID</name>   <init>= <expr><literal type="string">"pref_next_signed_pre_key_id"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BACKUP_ENABLED</name>              <init>= <expr><literal type="string">"pref_backup_enabled"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BACKUP_PASSPHRASE</name>           <init>= <expr><literal type="string">"pref_backup_passphrase"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ENCRYPTED_BACKUP_PASSPHRASE</name> <init>= <expr><literal type="string">"pref_encrypted_backup_passphrase"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BACKUP_TIME</name>                 <init>= <expr><literal type="string">"pref_backup_next_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BACKUP_NOW</name>                  <init>= <expr><literal type="string">"pref_backup_create"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SCREEN_LOCK</name>         <init>= <expr><literal type="string">"pref_android_screen_lock"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SCREEN_LOCK_TIMEOUT</name> <init>= <expr><literal type="string">"pref_android_screen_lock_timeout"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier>  <name>String</name></type> <name>REGISTRATION_LOCK_PREF</name>                   <init>= <expr><literal type="string">"pref_registration_lock"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REGISTRATION_LOCK_PIN_PREF</name>               <init>= <expr><literal type="string">"pref_registration_lock_pin"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REGISTRATION_LOCK_LAST_REMINDER_TIME</name>     <init>= <expr><literal type="string">"pref_registration_lock_last_reminder_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REGISTRATION_LOCK_NEXT_REMINDER_INTERVAL</name> <init>= <expr><literal type="string">"pref_registration_lock_next_reminder_interval"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SERVICE_OUTAGE</name>         <init>= <expr><literal type="string">"pref_service_outage"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LAST_OUTAGE_CHECK_TIME</name> <init>= <expr><literal type="string">"pref_last_outage_check_time"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LAST_FULL_CONTACT_SYNC_TIME</name> <init>= <expr><literal type="string">"pref_last_full_contact_sync_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEEDS_FULL_CONTACT_SYNC</name>     <init>= <expr><literal type="string">"pref_needs_full_contact_sync"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_ENCRYPTED_SECRET</name>   <init>= <expr><literal type="string">"pref_log_encrypted_secret"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOG_UNENCRYPTED_SECRET</name> <init>= <expr><literal type="string">"pref_log_unencrypted_secret"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_CHANNEL_VERSION</name>          <init>= <expr><literal type="string">"pref_notification_channel_version"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NOTIFICATION_MESSAGES_CHANNEL_VERSION</name> <init>= <expr><literal type="string">"pref_notification_messages_channel_version"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NEEDS_MESSAGE_PULL</name> <init>= <expr><literal type="string">"pref_needs_message_pull"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UNIDENTIFIED_ACCESS_CERTIFICATE_ROTATION_TIME_PREF</name> <init>= <expr><literal type="string">"pref_unidentified_access_certificate_rotation_time"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UNIDENTIFIED_ACCESS_CERTIFICATE</name>                    <init>= <expr><literal type="string">"pref_unidentified_access_certificate"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UNIVERSAL_UNIDENTIFIED_ACCESS</name>                      <init>= <expr><literal type="string">"pref_universal_unidentified_access"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SHOW_UNIDENTIFIED_DELIVERY_INDICATORS</name>              <init>= <expr><literal type="string">"pref_show_unidentifed_delivery_indicators"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>UNIDENTIFIED_DELIVERY_ENABLED</name>                      <init>= <expr><literal type="string">"pref_unidentified_delivery_enabled"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TYPING_INDICATORS</name> <init>= <expr><literal type="string">"pref_typing_indicators"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LINK_PREVIEWS</name> <init>= <expr><literal type="string">"pref_link_previews"</literal></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isScreenLockEnabled</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SCREEN_LOCK</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setScreenLockEnabled</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SCREEN_LOCK</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getScreenLockTimeout</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SCREEN_LOCK_TIMEOUT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setScreenLockTimeout</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SCREEN_LOCK_TIMEOUT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isRegistrationtLockEnabled</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRegistrationtLockEnabled</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getRegistrationLockPin</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_PIN_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRegistrationLockPin</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pin</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_PIN_PREF</name></expr></argument>, <argument><expr><name>pin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getRegistrationLockLastReminderTime</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_LAST_REMINDER_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRegistrationLockLastReminderTime</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_LAST_REMINDER_TIME</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getRegistrationLockNextReminderInterval</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_NEXT_REMINDER_INTERVAL</name></expr></argument>, <argument><expr><name><name>RegistrationLockReminders</name><operator>.</operator><name>INITIAL_INTERVAL</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRegistrationLockNextReminderInterval</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTRATION_LOCK_NEXT_REMINDER_INTERVAL</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setBackupPassphrase</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BACKUP_PASSPHRASE</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getBackupPassphrase</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BACKUP_PASSPHRASE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setEncryptedBackupPassphrase</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>encryptedPassphrase</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ENCRYPTED_BACKUP_PASSPHRASE</name></expr></argument>, <argument><expr><name>encryptedPassphrase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getEncryptedBackupPassphrase</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ENCRYPTED_BACKUP_PASSPHRASE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setBackupEnabled</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BACKUP_ENABLED</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isBackupEnabled</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BACKUP_ENABLED</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNextBackupTime</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>time</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BACKUP_TIME</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getNextBackupTime</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>BACKUP_TIME</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNextPreKeyId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEXT_PRE_KEY_ID</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><name><name>Medium</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNextPreKeyId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEXT_PRE_KEY_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNextSignedPreKeyId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEXT_SIGNED_PRE_KEY_ID</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextInt</name><argument_list>(<argument><expr><name><name>Medium</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNextSignedPreKeyId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEXT_SIGNED_PRE_KEY_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getActiveSignedPreKeyId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ACTIVE_SIGNED_PRE_KEY_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setActiveSignedPreKeyId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ACTIVE_SIGNED_PRE_KEY_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNeedsSqlCipherMigration</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEEDS_SQLCIPHER_MIGRATION</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>SqlCipherMigrationRequirementProvider</name><operator>.</operator><name>SqlCipherNeedsMigrationEvent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getNeedsSqlCipherMigration</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEEDS_SQLCIPHER_MIGRATION</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setAttachmentEncryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ATTACHMENT_ENCRYPTED_SECRET</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setAttachmentUnencryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ATTACHMENT_UNENCRYPTED_SECRET</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getAttachmentEncryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ATTACHMENT_ENCRYPTED_SECRET</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getAttachmentUnencryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ATTACHMENT_UNENCRYPTED_SECRET</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setDatabaseEncryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DATABASE_ENCRYPTED_SECRET</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setDatabaseUnencryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DATABASE_UNENCRYPTED_SECRET</name></expr></argument>, <argument><expr><name>secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getDatabaseUnencryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DATABASE_UNENCRYPTED_SECRET</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getDatabaseEncryptedSecret</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DATABASE_ENCRYPTED_SECRET</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setHasSuccessfullyRetrievedDirectory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SUCCESSFUL_DIRECTORY_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasSuccessfullyRetrievedDirectory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SUCCESSFUL_DIRECTORY_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUnauthorizedReceived</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNAUTHORIZED_RECEIVED</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUnauthorizedRecieved</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNAUTHORIZED_RECEIVED</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isIncognitoKeyboardEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>INCOGNITO_KEYBORAD_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isReadReceiptsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>READ_RECEIPTS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setReadReceiptsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>READ_RECEIPTS_PREF</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isTypingIndicatorsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>TYPING_INDICATORS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setTypingIndicatorsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>TYPING_INDICATORS</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLinkPreviewsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LINK_PREVIEWS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getProfileKey</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROFILE_KEY_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setProfileKey</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROFILE_KEY_PREF</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setProfileName</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROFILE_NAME_PREF</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getProfileName</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROFILE_NAME_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setProfileAvatarId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROFILE_AVATAR_ID_PREF</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getProfileAvatarId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROFILE_AVATAR_ID_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNotificationPriority</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_PRIORITY_PREF</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>NotificationCompat</name><operator>.</operator><name>PRIORITY_HIGH</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getMessageBodyTextSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MESSAGE_BODY_TEXT_SIZE_PREF</name></expr></argument>, <argument><expr><literal type="string">"16"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isTurnOnly</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ALWAYS_RELAY_CALLS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFcmDisabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_DISABLED_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setFcmDisabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_DISABLED_PREF</name></expr></argument>, <argument><expr><name>disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWebrtcCallingEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>WEBRTC_CALLING_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setWebrtcCallingEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>WEBRTC_CALLING_PREF</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setDirectCaptureCameraId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DIRECT_CAPTURE_CAMERA_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getDirectCaptureCameraId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DIRECT_CAPTURE_CAMERA_ID</name></expr></argument>, <argument><expr><name><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setMultiDevice</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MULTI_DEVICE_PROVISIONED_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMultiDevice</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MULTI_DEVICE_PROVISIONED_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setSignedPreKeyFailureCount</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_FAILURE_COUNT_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getSignedPreKeyFailureCount</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_FAILURE_COUNT_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>NotificationPrivacyPreference</name></type> <name>getNotificationPrivacy</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>NotificationPrivacyPreference</name><argument_list>(<argument><expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_PRIVACY_PREF</name></expr></argument>, <argument><expr><literal type="string">"all"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNewContactsNotificationEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEW_CONTACTS_NOTIFICATIONS</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getRatingLaterTimestamp</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RATING_LATER_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRatingLaterTimestamp</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RATING_LATER_PREF</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isRatingEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RATING_ENABLED_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRatingEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RATING_ENABLED_PREF</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWebsocketRegistered</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>WEBSOCKET_REGISTERED_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setWebsocketRegistered</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>registered</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>WEBSOCKET_REGISTERED_PREF</name></expr></argument>, <argument><expr><name>registered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isWifiSmsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>WIFI_SMS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getRepeatAlertsCount</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REPEAT_ALERTS_PREF</name></expr></argument>, <argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setRepeatAlertsCount</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REPEAT_ALERTS_PREF</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSignedPreKeyRegistered</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_REGISTERED_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setSignedPreKeyRegistered</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_REGISTERED_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setFcmToken</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>registrationId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_REGISTRATION_ID_PREF</name></expr></argument>, <argument><expr><name>registrationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_REGISTRATION_ID_VERSION_PREF</name></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>getCurrentApkReleaseVersion</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getFcmToken</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>storedRegistrationIdVersion</name> <init>= <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_REGISTRATION_ID_VERSION_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>storedRegistrationIdVersion</name> <operator>!=</operator> <call><name><name>Util</name><operator>.</operator><name>getCurrentApkReleaseVersion</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_REGISTRATION_ID_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getFcmTokenLastSetTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_REGISTRATION_ID_TIME_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setFcmTokenLastSetTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_REGISTRATION_ID_TIME_PREF</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSmsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Util</name><operator>.</operator><name>isDefaultSmsProvider</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name>isInterceptAllSmsEnabled</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getLocalRegistrationId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOCAL_REGISTRATION_ID_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLocalRegistrationId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>registrationId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOCAL_REGISTRATION_ID_PREF</name></expr></argument>, <argument><expr><name>registrationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isInThreadNotifications</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IN_THREAD_NOTIFICATION_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getUnidentifiedAccessCertificateRotationTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIDENTIFIED_ACCESS_CERTIFICATE_ROTATION_TIME_PREF</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUnidentifiedAccessCertificateRotationTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIDENTIFIED_ACCESS_CERTIFICATE_ROTATION_TIME_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUnidentifiedAccessCertificate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIDENTIFIED_ACCESS_CERTIFICATE</name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getUnidentifiedAccessCertificate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIDENTIFIED_ACCESS_CERTIFICATE</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUniversalUnidentifiedAccess</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIVERSAL_UNIDENTIFIED_ACCESS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isShowUnidentifiedDeliveryIndicatorsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SHOW_UNIDENTIFIED_DELIVERY_INDICATORS</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setIsUnidentifiedDeliveryEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIDENTIFIED_DELIVERY_ENABLED</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isUnidentifiedDeliveryEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UNIDENTIFIED_DELIVERY_ENABLED</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getSignedPreKeyRotationTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_ROTATION_TIME_PREF</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setSignedPreKeyRotationTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_ROTATION_TIME_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getDirectoryRefreshTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DIRECTORY_FRESH_TIME_PREF</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setDirectoryRefreshTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DIRECTORY_FRESH_TIME_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getUpdateApkRefreshTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UPDATE_APK_REFRESH_TIME_PREF</name></expr></argument>, <argument><expr><literal type="number">0L</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUpdateApkRefreshTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UPDATE_APK_REFRESH_TIME_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUpdateApkDownloadId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UPDATE_APK_DOWNLOAD_ID</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getUpdateApkDownloadId</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UPDATE_APK_DOWNLOAD_ID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUpdateApkDigest</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UPDATE_APK_DIGEST</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getUpdateApkDigest</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>UPDATE_APK_DIGEST</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLocalNumber</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOCAL_NUMBER_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLocalNumber</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localNumber</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOCAL_NUMBER_PREF</name></expr></argument>, <argument><expr><name>localNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getPushServerPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_PASSWORD_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPushServerPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>GCM_PASSWORD_PREF</name></expr></argument>, <argument><expr><name>password</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getSignalingKey</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNALING_KEY_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEnterImeKeyEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ENTER_PRESENT_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEnterSendsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ENTER_SENDS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPasswordDisabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DISABLE_PASSPHRASE_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPasswordDisabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>disabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DISABLE_PASSPHRASE_PREF</name></expr></argument>, <argument><expr><name>disabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getUseCustomMmsc</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>legacy</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isLegacyUseLocalApnsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_HOST_PREF</name></expr></argument>, <argument><expr><name>legacy</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUseCustomMmsc</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_HOST_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMmscUrl</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_HOST_PREF</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setMmscUrl</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>mmsc</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_HOST_PREF</name></expr></argument>, <argument><expr><name>mmsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getUseCustomMmscProxy</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>legacy</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isLegacyUseLocalApnsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_PROXY_PREF</name></expr></argument>, <argument><expr><name>legacy</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUseCustomMmscProxy</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_PROXY_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMmscProxy</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_PROXY_HOST_PREF</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setMmscProxy</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_PROXY_HOST_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getUseCustomMmscProxyPort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>legacy</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isLegacyUseLocalApnsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_PROXY_PORT_PREF</name></expr></argument>, <argument><expr><name>legacy</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUseCustomMmscProxyPort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_PROXY_PORT_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMmscProxyPort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_PROXY_PORT_PREF</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setMmscProxyPort</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_PROXY_PORT_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getUseCustomMmscUsername</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>legacy</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isLegacyUseLocalApnsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_USERNAME_PREF</name></expr></argument>, <argument><expr><name>legacy</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUseCustomMmscUsername</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_USERNAME_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMmscUsername</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_USERNAME_PREF</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setMmscUsername</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_USERNAME_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getUseCustomMmscPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>legacy</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isLegacyUseLocalApnsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_PASSWORD_PREF</name></expr></argument>, <argument><expr><name>legacy</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setUseCustomMmscPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_CUSTOM_PASSWORD_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMmscPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_PASSWORD_PREF</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setMmscPassword</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMSC_PASSWORD_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMmsUserAgent</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultUserAgent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>useCustom</name> <init>= <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMS_CUSTOM_USER_AGENT</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>useCustom</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MMS_USER_AGENT</name></expr></argument>, <argument><expr><name>defaultUserAgent</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <else>else           <block type="pseudo"><return>return <expr><name>defaultUserAgent</name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getIdentityContactUri</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PREF</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setIdentityContactUri</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>identityUri</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>IDENTITY_PREF</name></expr></argument>, <argument><expr><name>identityUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setScreenSecurityEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SCREEN_SECURITY_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isScreenSecurityEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SCREEN_SECURITY_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLegacyUseLocalApnsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ENABLE_MANUAL_MMS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getLastVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_VERSION_CODE_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLastVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>versionCode</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>setIntegerPrefrenceBlocking</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_VERSION_CODE_PREF</name></expr></argument>, <argument><expr><name>versionCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"couldn't write version code to sharedpreferences"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getLastExperienceVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_EXPERIENCE_VERSION_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLastExperienceVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>versionCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_EXPERIENCE_VERSION_PREF</name></expr></argument>, <argument><expr><name>versionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getExperienceDismissedVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>EXPERIENCE_DISMISSED_PREF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setExperienceDismissedVersionCode</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>versionCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>EXPERIENCE_DISMISSED_PREF</name></expr></argument>, <argument><expr><name>versionCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getTheme</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>THEME_PREF</name></expr></argument>, <argument><expr><literal type="string">"light"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isVerifying</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>VERIFYING_STATE_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setVerifying</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verifying</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>VERIFYING_STATE_PREF</name></expr></argument>, <argument><expr><name>verifying</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPushRegistered</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTERED_GCM_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPushRegistered</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>registered</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Setting push registered: "</literal> <operator>+</operator> <name>registered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>REGISTERED_GCM_PREF</name></expr></argument>, <argument><expr><name>registered</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isShowInviteReminders</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SHOW_INVITE_REMINDER_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isPassphraseTimeoutEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PASSPHRASE_TIMEOUT_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getPassphraseTimeoutInterval</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PASSPHRASE_TIMEOUT_INTERVAL_PREF</name></expr></argument>, <argument><expr><literal type="number">5</literal> <operator>*</operator> <literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPassphraseTimeoutInterval</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>interval</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PASSPHRASE_TIMEOUT_INTERVAL_PREF</name></expr></argument>, <argument><expr><name>interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLanguage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LANGUAGE_PREF</name></expr></argument>, <argument><expr><literal type="string">"zz"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLanguage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>language</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LANGUAGE_PREF</name></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSmsDeliveryReportsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SMS_DELIVERY_REPORT_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasSeenWelcomeScreen</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SEEN_WELCOME_SCREEN_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setHasSeenWelcomeScreen</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SEEN_WELCOME_SCREEN_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasPromptedPushRegistration</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_PUSH_REGISTRATION_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPromptedPushRegistration</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_PUSH_REGISTRATION_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasPromptedDefaultSmsProvider</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_DEFAULT_SMS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPromptedDefaultSmsProvider</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_DEFAULT_SMS_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPromptedOptimizeDoze</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_OPTIMIZE_DOZE_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasPromptedOptimizeDoze</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_OPTIMIZE_DOZE_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasPromptedShare</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_SHARE_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setPromptedShare</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PROMPTED_SHARE_PREF</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isInterceptAllMmsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ALL_MMS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isInterceptAllSmsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>ALL_SMS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNotificationsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isCallNotificationsEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>CALL_NOTIFICATIONS_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Uri</name></type> <name>getNotificationRingtone</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RINGTONE_PREF</name></expr></argument>, <argument><expr><call><name><name>Settings</name><operator>.</operator><name>System</name><operator>.</operator><name>DEFAULT_NOTIFICATION_URI</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"file:"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>Settings</name><operator>.</operator><name>System</name><operator>.</operator><name>DEFAULT_NOTIFICATION_URI</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Uri</name></type> <name>getCallNotificationRingtone</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>CALL_RINGTONE_PREF</name></expr></argument>, <argument><expr><call><name><name>Settings</name><operator>.</operator><name>System</name><operator>.</operator><name>DEFAULT_RINGTONE_URI</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>result</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>result</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"file:"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>Settings</name><operator>.</operator><name>System</name><operator>.</operator><name>DEFAULT_RINGTONE_URI</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removeNotificationRingtone</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>removePreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RINGTONE_PREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removeCallNotificationRingtone</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>removePreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>CALL_RINGTONE_PREF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNotificationRingtone</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ringtone</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>RINGTONE_PREF</name></expr></argument>, <argument><expr><name>ringtone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setCallNotificationRingtone</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>ringtone</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>CALL_RINGTONE_PREF</name></expr></argument>, <argument><expr><name>ringtone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNotificationVibrateEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>VIBRATE_PREF</name></expr></argument>, <argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isNotificationVibrateEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>VIBRATE_PREF</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isCallNotificationVibrateEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>defaultValue</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>M</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>defaultValue</name> <operator>=</operator> <operator>(</operator><call><name><name>Settings</name><operator>.</operator><name>System</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Settings</name><operator>.</operator><name>System</name><operator>.</operator><name>VIBRATE_WHEN_RINGING</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>CALL_VIBRATE_PREF</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNotificationLedColor</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LED_COLOR_PREF</name></expr></argument>, <argument><expr><literal type="string">"blue"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNotificationLedPattern</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LED_BLINK_PREF</name></expr></argument>, <argument><expr><literal type="string">"500,2000"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getNotificationLedPatternCustom</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LED_BLINK_PREF_CUSTOM</name></expr></argument>, <argument><expr><literal type="string">"500,2000"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNotificationLedPatternCustom</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LED_BLINK_PREF_CUSTOM</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isThreadLengthTrimmingEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>THREAD_TRIM_ENABLED</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getThreadTrimLength</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>THREAD_TRIM_LENGTH</name></expr></argument>, <argument><expr><literal type="string">"500"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isSystemEmojiPreferred</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SYSTEM_EMOJI_PREF</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMobileMediaDownloadAllowed</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getMediaDownloadAllowed</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MEDIA_DOWNLOAD_MOBILE_PREF</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>pref_media_download_mobile_data_default</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getWifiMediaDownloadAllowed</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getMediaDownloadAllowed</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MEDIA_DOWNLOAD_WIFI_PREF</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>pref_media_download_wifi_default</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getRoamingMediaDownloadAllowed</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getMediaDownloadAllowed</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>MEDIA_DOWNLOAD_ROAMING_PREF</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>pref_media_download_roaming_default</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getMediaDownloadAllowed</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><annotation>@<name>ArrayRes</name></annotation> <name>int</name></type> <name>defaultValuesRes</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringSetPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                                  <argument><expr><name>key</name></expr></argument>,
                                  <argument><expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Arrays</name><operator>.</operator><name>asList</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringArray</name><argument_list>(<argument><expr><name>defaultValuesRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLastOutageCheckTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_OUTAGE_CHECK_TIME</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getLastOutageCheckTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_OUTAGE_CHECK_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setServiceOutage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isOutage</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SERVICE_OUTAGE</name></expr></argument>, <argument><expr><name>isOutage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getServiceOutage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SERVICE_OUTAGE</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getLastFullContactSyncTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_FULL_CONTACT_SYNC_TIME</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLastFullContactSyncTime</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setLongPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LAST_FULL_CONTACT_SYNC_TIME</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>needsFullContactSync</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEEDS_FULL_CONTACT_SYNC</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNeedsFullContactSync</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>needsSync</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEEDS_FULL_CONTACT_SYNC</name></expr></argument>, <argument><expr><name>needsSync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLogEncryptedSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>base64Secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOG_ENCRYPTED_SECRET</name></expr></argument>, <argument><expr><name>base64Secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLogEncryptedSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOG_ENCRYPTED_SECRET</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLogUnencryptedSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>base64Secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOG_UNENCRYPTED_SECRET</name></expr></argument>, <argument><expr><name>base64Secret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getLogUnencryptedSecret</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getStringPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>LOG_UNENCRYPTED_SECRET</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNotificationChannelVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_CHANNEL_VERSION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNotificationChannelVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_CHANNEL_VERSION</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getNotificationMessagesChannelVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getIntegerPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_MESSAGES_CHANNEL_VERSION</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNotificationMessagesChannelVersion</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setIntegerPrefrence</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NOTIFICATION_MESSAGES_CHANNEL_VERSION</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getNeedsMessagePull</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEEDS_MESSAGE_PULL</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setNeedsMessagePull</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>needsMessagePull</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setBooleanPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NEEDS_MESSAGE_PULL</name></expr></argument>, <argument><expr><name>needsMessagePull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setBooleanPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putBoolean</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>getBooleanPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setStringPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getStringPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getIntegerPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setIntegerPrefrence</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>setIntegerPrefrenceBlocking</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putInt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getLongPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLong</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>setLongPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>putLong</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>removePreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>edit</name><argument_list>()</argument_list></call><operator>.</operator><call><name>remove</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getStringSetPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>defaultValues</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>SharedPreferences</name></type> <name>prefs</name> <init>= <expr><call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>prefs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>prefs</name><operator>.</operator><name>getStringSet</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>Collections</name><operator>.</operator></name>&lt;<name>String</name><operator>&gt;</operator><call><name>emptySet</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><name>defaultValues</name></expr>;</return>
    }</block></else></if>
  }</block></function>
}</block></class>
</unit>
