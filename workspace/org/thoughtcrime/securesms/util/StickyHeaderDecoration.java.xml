<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\StickyHeaderDecoration.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A sticky header decoration for android's RecyclerView.
 * Currently only supports LinearLayoutManager in VERTICAL orientation.
 */</comment>
<class><specifier>public</specifier> class <name>StickyHeaderDecoration</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>StickyHeaderDecoration</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>NO_HEADER_ID</name> <init>= <expr><operator>-</operator><literal type="number">1L</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>ViewHolder</name></argument>&gt;</argument_list></name></type> <name>headerCache</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>StickyHeaderAdapter</name></type>   <name>adapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>               <name>renderInline</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>       <type><name>boolean</name></type>               <name>sticky</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * @param adapter the sticky header adapter to use
   */</comment>
  <constructor><specifier>public</specifier> <name>StickyHeaderDecoration</name><parameter_list>(<parameter><decl><type><name>StickyHeaderAdapter</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>renderInline</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>sticky</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>adapter</name></name>      <operator>=</operator> <name>adapter</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>headerCache</name></name>  <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>renderInline</name></name> <operator>=</operator> <name>renderInline</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sticky</name></name>       <operator>=</operator> <name>sticky</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>getItemOffsets</name><parameter_list>(<parameter><decl><type><name>Rect</name></type> <name>outRect</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>,
                             <parameter><decl><type><name><name>RecyclerView</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>position</name>     <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>headerHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>position</name> <operator>!=</operator> <name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name> <operator>&amp;&amp;</operator> <call><name>hasHeader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>View</name></type> <name>header</name> <init>= <expr><call><name>getHeader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call><operator>.</operator><name>itemView</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>headerHeight</name> <operator>=</operator> <call><name>getHeaderHeightForLayout</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>outRect</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>headerHeight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>hasHeader</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>StickyHeaderAdapter</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapterPos</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>isReverse</name> <init>= <expr><call><name>isReverseLayout</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>     <name>itemCount</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>RecyclerView</name><operator>.</operator><name>Adapter</name></name><operator>)</operator><name>adapter</name><operator>)</operator><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>(</operator><name>isReverse</name> <operator>&amp;&amp;</operator> <name>adapterPos</name> <operator>==</operator> <name>itemCount</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>adapter</name><operator>.</operator><name>getHeaderId</name></name><argument_list>(<argument><expr><name>adapterPos</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator>
        <operator>(</operator><operator>!</operator><name>isReverse</name> <operator>&amp;&amp;</operator> <name>adapterPos</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
    <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type>  <name>previous</name>         <init>= <expr><name>adapterPos</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>isReverse</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>headerId</name>         <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderId</name></name><argument_list>(<argument><expr><name>adapterPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>previousHeaderId</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderId</name></name><argument_list>(<argument><expr><name>previous</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>headerId</name> <operator>!=</operator> <name>NO_HEADER_ID</name> <operator>&amp;&amp;</operator> <name>previousHeaderId</name> <operator>!=</operator> <name>NO_HEADER_ID</name> <operator>&amp;&amp;</operator> <name>headerId</name> <operator>!=</operator> <name>previousHeaderId</name></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>ViewHolder</name></type> <name>getHeader</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>StickyHeaderAdapter</name></type> <name>adapter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>key</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderId</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ViewHolder</name></type> <name>headerHolder</name> <init>= <expr><call><name><name>headerCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>headerHolder</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>headerHolder</name> <operator>=</operator> <call><name><name>adapter</name><operator>.</operator><name>onCreateHeaderViewHolder</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">//noinspection unchecked</comment>
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>onBindHeaderViewHolder</name></name><argument_list>(<argument><expr><name>headerHolder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>headerCache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>headerHolder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>header</name> <init>= <expr><name><name>headerHolder</name><operator>.</operator><name>itemView</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>widthSpec</name>   <init>= <expr><call><name><name>View</name><operator>.</operator><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>heightSpec</name>  <init>= <expr><call><name><name>View</name><operator>.</operator><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>MeasureSpec</name><operator>.</operator><name>UNSPECIFIED</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>childWidth</name>  <init>= <expr><call><name><name>ViewGroup</name><operator>.</operator><name>getChildMeasureSpec</name></name><argument_list>(<argument><expr><name>widthSpec</name></expr></argument>,
                                                    <argument><expr><call><name><name>parent</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>parent</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>childHeight</name> <init>= <expr><call><name><name>ViewGroup</name><operator>.</operator><name>getChildMeasureSpec</name></name><argument_list>(<argument><expr><name>heightSpec</name></expr></argument>,
                                                    <argument><expr><call><name><name>parent</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>parent</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><name>childWidth</name></expr></argument>, <argument><expr><name>childHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>layout</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>getMeasuredWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>header</name><operator>.</operator><name>getMeasuredHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>headerHolder</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * {@inheritDoc}
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDrawOver</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name><name>RecyclerView</name><operator>.</operator><name>State</name></name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>layoutPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>layoutPos</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>layoutPos</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><call><name>translatedChildPosition</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>layoutPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>adapterPos</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>adapterPos</name> <operator>!=</operator> <name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>layoutPos</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>sticky</name><operator>)</operator> <operator>||</operator> <call><name>hasHeader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>adapterPos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>View</name></type> <name>header</name> <init>= <expr><call><name>getHeader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>adapterPos</name></expr></argument>)</argument_list></call><operator>.</operator><name>itemView</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>left</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getLeft</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>top</name> <init>= <expr><call><name>getHeaderTop</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>adapterPos</name></expr></argument>, <argument><expr><name>layoutPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>header</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>restore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>int</name></type> <name>getHeaderTop</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>child</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>adapterPos</name></decl></parameter>,
                           <parameter><decl><type><name>int</name></type> <name>layoutPos</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>headerHeight</name> <init>= <expr><call><name>getHeaderHeightForLayout</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><call><name>getChildY</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>headerHeight</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>sticky</name> <operator>&amp;&amp;</operator> <name>layoutPos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>count</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>currentId</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderId</name></name><argument_list>(<argument><expr><name>adapterPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <comment type="line">// find next view with header and compute the offscreen push if needed</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>adapterPosHere</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAdapterPosition</name></name><argument_list>(<argument><expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><call><name>translatedChildPosition</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>adapterPosHere</name> <operator>!=</operator> <name><name>RecyclerView</name><operator>.</operator><name>NO_POSITION</name></name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>long</name></type> <name>nextId</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderId</name></name><argument_list>(<argument><expr><name>adapterPosHere</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>nextId</name> <operator>!=</operator> <name>currentId</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>next</name> <init>= <expr><call><name><name>parent</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><call><name>translatedChildPosition</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>offset</name> <init>= <expr><call><name>getChildY</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>next</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>headerHeight</name> <operator>+</operator> <call><name>getHeader</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>adapter</name></expr></argument>, <argument><expr><name>adapterPosHere</name></expr></argument>)</argument_list></call><operator>.</operator><call><name><name>itemView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
              <return>return <expr><name>offset</name></expr>;</return>
            }</block></then> <else>else <block>{
              <break>break;</break>
            }</block></else></if>
          }</block></then></if>
        }</block></then></if>
      }</block></for>

      <if>if <condition>(<expr><name>sticky</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>top</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <return>return <expr><name>top</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>translatedChildPosition</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name>isReverseLayout</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>parent</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>position</name></expr> </then><else>: <expr><name>position</name></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getChildY</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>child</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Rect</name></type> <name>rect</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>getChildVisibleRect</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>rect</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>rect</name><operator>.</operator><name>top</name></name></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>ViewCompat</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>int</name></type> <name>getHeaderHeightForLayout</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>header</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>renderInline</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>header</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isReverseLayout</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><call><name><name>parent</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>LinearLayoutManager</name><operator>)</operator> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>(</operator><name>LinearLayoutManager</name><operator>)</operator><call><name><name>parent</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getReverseLayout</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * The adapter to assist the {@link StickyHeaderDecoration} in creating and binding the header views.
   *
   * @param &lt;T&gt; the header view holder
   */</comment>
  <interface><specifier>public</specifier> interface <name><name>StickyHeaderAdapter</name><parameter_list>&lt;<parameter><name>T</name> <extends>extends <name>ViewHolder</name></extends></parameter>&gt;</parameter_list></name> <block>{

    <comment type="block" format="javadoc">/**
     * Returns the header id for the item at the given position.
     *
     * @param position the item position
     * @return the header id
     */</comment>
    <function_decl><type><name>long</name></type> <name>getHeaderId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Creates a new header ViewHolder.
     *
     * @param parent the header's view parent
     * @return a view holder for the created view
     */</comment>
    <function_decl><type><name>T</name></type> <name>onCreateHeaderViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Updates the header view to reflect the header data for the given position
     * @param viewHolder the header view holder
     * @param position the header's item position
     */</comment>
    <function_decl><type><name>void</name></type> <name>onBindHeaderViewHolder</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class></unit>
