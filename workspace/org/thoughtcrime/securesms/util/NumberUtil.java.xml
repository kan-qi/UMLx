<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\NumberUtil.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2012 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>PhoneNumberUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<class><specifier>public</specifier> class <name>NumberUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>emailPattern</name> <init>= <expr><name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Patterns</name><operator>.</operator><name>EMAIL_ADDRESS</name></name></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isValidEmail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name> <init>= <expr><call><name><name>emailPattern</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isValidSmsOrEmail</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>PhoneNumberUtils</name><operator>.</operator><name>isWellFormedSmsAddress</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isValidEmail</name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

<comment type="line">//  public static boolean isValidSmsOrEmailOrGroup(String number) {</comment>
<comment type="line">//    return PhoneNumberUtils.isWellFormedSmsAddress(number) ||</comment>
<comment type="line">//        isValidEmail(number) ||</comment>
<comment type="line">//        GroupUtil.isEncodedGroup(number);</comment>
<comment type="line">//  }</comment>
<comment type="line">//</comment>
<comment type="line">//  public static String filterNumber(String number) {</comment>
<comment type="line">//    if (number == null) return null;</comment>
<comment type="line">//</comment>
<comment type="line">//    int length            = number.length();</comment>
<comment type="line">//    StringBuilder builder = new StringBuilder(length);</comment>
<comment type="line">//</comment>
<comment type="line">//    for (int i = 0; i &lt; length; i++) {</comment>
<comment type="line">//      char character = number.charAt(i);</comment>
<comment type="line">//</comment>
<comment type="line">//      if (Character.isDigit(character) || character == '+')</comment>
<comment type="line">//        builder.append(character);</comment>
<comment type="line">//    }</comment>
<comment type="line">//</comment>
<comment type="line">//    return builder.toString();</comment>
<comment type="line">//  }</comment>
}</block></class>
</unit>
