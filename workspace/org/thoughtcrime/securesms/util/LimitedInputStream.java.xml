<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\LimitedInputStream.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>


<comment type="block">/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FilterInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>


<comment type="block" format="javadoc">/**
 * An input stream, which limits its data size. This stream is
 * used, if the content length is unknown.
 */</comment>
<class><specifier>public</specifier> class <name>LimitedInputStream</name> <super><extends>extends <name>FilterInputStream</name></extends></super> <block>{

  <comment type="block" format="javadoc">/**
   * The maximum size of an item, in bytes.
   */</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>sizeMax</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * The current number of bytes.
   */</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>count</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Whether this stream is already closed.
   */</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>closed</name></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Creates a new instance.
   * @param pIn The input stream, which shall be limited.
   * @param pSizeMax The limit; no more than this number of bytes
   *   shall be returned by the source stream.
   */</comment>
  <constructor><specifier>public</specifier> <name>LimitedInputStream</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>pIn</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>pSizeMax</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sizeMax</name> <operator>=</operator> <name>pSizeMax</name></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Reads the next byte of data from this input stream. The value
   * byte is returned as an &lt;code&gt;int&lt;/code&gt; in the range
   * &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. If no byte is available
   * because the end of the stream has been reached, the value
   * &lt;code&gt;-1&lt;/code&gt; is returned. This method blocks until input data
   * is available, the end of the stream is detected, or an exception
   * is thrown.
   *
   * This method
   * simply performs &lt;code&gt;in.read()&lt;/code&gt; and returns the result.
   *
   * @return     the next byte of data, or &lt;code&gt;-1&lt;/code&gt; if the end of the
   *             stream is reached.
   * @exception  IOException  if an I/O error occurs.
   * @see        java.io.FilterInputStream#in
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>sizeMax</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>read</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>res</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Reads up to &lt;code&gt;len&lt;/code&gt; bytes of data from this input stream
   * into an array of bytes. If &lt;code&gt;len&lt;/code&gt; is not zero, the method
   * blocks until some input is available; otherwise, no
   * bytes are read and &lt;code&gt;0&lt;/code&gt; is returned.
   *
   * This method simply performs &lt;code&gt;in.read(b, off, len)&lt;/code&gt;
   * and returns the result.
   *
   * @param      b     the buffer into which the data is read.
   * @param      off   The start offset in the destination array
   *                   &lt;code&gt;b&lt;/code&gt;.
   * @param      len   the maximum number of bytes read.
   * @return     the total number of bytes read into the buffer, or
   *             &lt;code&gt;-1&lt;/code&gt; if there is no more data because the end of
   *             the stream has been reached.
   * @exception  NullPointerException If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
   * @exception  IndexOutOfBoundsException If &lt;code&gt;off&lt;/code&gt; is negative,
   * &lt;code&gt;len&lt;/code&gt; is negative, or &lt;code&gt;len&lt;/code&gt; is greater than
   * &lt;code&gt;b.length - off&lt;/code&gt;
   * @exception  IOException  if an I/O error occurs.
   * @see        java.io.FilterInputStream#in
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>off</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <name>sizeMax</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>long</name></type> <name>correctLength</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>sizeMax</name> <operator>-</operator> <name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><name>correctLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>res</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>count</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function>

}</block></class></unit>
