<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\BackupUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>NoExternalStorageException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Calendar</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<class><specifier>public</specifier> class <name>BackupUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>BackupUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getLastBackupTime</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>BackupInfo</name></type> <name>backup</name> <init>= <expr><call><name>getLatestBackup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>backup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>BackupUtil_never</name></name></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else                <block type="pseudo"><return>return <expr><call><name><name>DateUtils</name><operator>.</operator><name>getExtendedRelativeTimeSpanString</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><call><name><name>backup</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoExternalStorageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>BackupUtil_unknown</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>BackupInfo</name></type> <name>getLatestBackup</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>NoExternalStorageException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>File</name></type>       <name>backupDirectory</name> <init>= <expr><call><name><name>StorageUtil</name><operator>.</operator><name>getBackupDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type>     <name>backups</name>         <init>= <expr><call><name><name>backupDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>BackupInfo</name></type> <name>latestBackup</name>    <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>File</name></type> <name>backup</name> <range>: <expr><name>backups</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>backupTimestamp</name> <init>= <expr><call><name>getBackupTimestamp</name><argument_list>(<argument><expr><name>backup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>latestBackup</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>(</operator><name>backupTimestamp</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>backupTimestamp</name> <operator>&gt;</operator> <call><name><name>latestBackup</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>latestBackup</name> <operator>=</operator> <operator>new</operator> <call><name>BackupInfo</name><argument_list>(<argument><expr><name>backupTimestamp</name></expr></argument>, <argument><expr><call><name><name>backup</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>backup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>latestBackup</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ResultOfMethodCallIgnored"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>deleteAllBackups</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>File</name></type>   <name>backupDirectory</name> <init>= <expr><call><name><name>StorageUtil</name><operator>.</operator><name>getBackupDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>backups</name>         <init>= <expr><call><name><name>backupDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>File</name></type> <name>backup</name> <range>: <expr><name>backups</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>backup</name><operator>.</operator><name>isFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>backup</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></for>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoExternalStorageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>deleteOldBackups</name><parameter_list>()</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>File</name></type>   <name>backupDirectory</name> <init>= <expr><call><name><name>StorageUtil</name><operator>.</operator><name>getBackupDirectory</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>backups</name>         <init>= <expr><call><name><name>backupDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>backups</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>backups</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>backups</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>left</name></decl></parameter>, <parameter><decl><name>right</name></decl></parameter>)</parameter_list> -&gt; <block>{
          <decl_stmt><decl><type><name>long</name></type> <name>leftTimestamp</name>  <init>= <expr><call><name>getBackupTimestamp</name><argument_list>(<argument><expr><name>left</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>rightTimestamp</name> <init>= <expr><call><name>getBackupTimestamp</name><argument_list>(<argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if      <condition>(<expr><name>leftTimestamp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>rightTimestamp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
          <elseif>else <if>if <condition>(<expr><name>leftTimestamp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>                         <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if></elseif>
          <elseif>else <if>if <condition>(<expr><name>rightTimestamp</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>                        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></elseif></if>

          <return>return <expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>rightTimestamp</name> <operator>-</operator> <name>leftTimestamp</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>backups</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Deleting: "</literal> <operator>+</operator> <name><name>backups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><operator>!</operator><name><name>backups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>delete</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Delete failed: "</literal> <operator>+</operator> <name><name>backups</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>getAbsolutePath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoExternalStorageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>String</name><index>[]</index></name></type> <name>generateBackupPassphrase</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>result</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>   <name>random</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBytes</name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition><incr><expr><name>i</name><operator>+=</operator><literal type="number">5</literal></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"%05d"</literal></expr></argument>, <argument><expr><call><name><name>ByteUtil</name><operator>.</operator><name>byteArray5ToLong</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getBackupTimestamp</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>backup</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>   <name>name</name>  <init>= <expr><call><name><name>backup</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>prefixSuffix</name> <init>= <expr><call><name><name>name</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"[.]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>prefixSuffix</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>parts</name> <init>= <expr><name><name>prefixSuffix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"\\-"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>parts</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><then> <block>{
        <try>try <block>{
          <decl_stmt><decl><type><name>Calendar</name></type> <name>calendar</name> <init>= <expr><call><name><name>Calendar</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>YEAR</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MONTH</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>DAY_OF_MONTH</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>HOUR_OF_DAY</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MINUTE</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>SECOND</name></name></expr></argument>, <argument><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>parts</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>calendar</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>Calendar</name><operator>.</operator><name>MILLISECOND</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><call><name><name>calendar</name><operator>.</operator><name>getTimeInMillis</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></then></if>
    }</block></then></if>

    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>BackupInfo</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>File</name></type> <name>file</name></decl>;</decl_stmt>

    <constructor><name>BackupInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name>      <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>file</name></name>      <operator>=</operator> <name>file</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>timestamp</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>File</name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>file</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
