<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\Conversions.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<class><specifier>public</specifier> class <name>Conversions</name> <block>{

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>byte</name></type> <name>intsToByteHighAndLow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>highValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lowValue</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call>(<name>byte</name>)<argument_list>(<argument><expr><operator>(</operator><name>highValue</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name>lowValue</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>highBitsToInt</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>lowBitsToInt</name><parameter_list>(<parameter><decl><type><name>byte</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>highBitsToMedium</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>lowBitsToMedium</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>value</name> <operator>&amp;</operator> <literal type="number">0xFFF</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>shortToByteArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>shortToByteArray</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>shortToByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>   <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>shortToLittleEndianByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>   <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>mediumToByteArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>mediumToByteArray</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>mediumToByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">3</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>intToByteArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>intToByteArray</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>intToByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>intToLittleEndianByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>   <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>longToByteArray</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>longToByteArray</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>longToByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">8</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>longTo4ByteArray</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name><operator>)</operator><name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><name>value</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">4</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>byteArrayToShort</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>byteArrayToShort</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>byteArrayToShort</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{
    <return>return
      <expr><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <comment type="line">// The SSL patented 3-byte Value.</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>byteArrayToMedium</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{
    <return>return
      <expr><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>byteArrayToInt</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>byteArrayToInt</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>byteArrayToInt</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>  <block>{
    <return>return
      <expr><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>byteArrayToIntLittleEndian</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{
    <return>return
      <expr><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal>  <operator>|</operator>
      <operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>&amp;</operator> <literal type="number">0xff</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>byteArrayToLong</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>byteArrayToLong</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>byteArray4ToLong</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{
    <return>return
        <expr><operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
        <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>  <operator>|</operator>
        <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>byteArrayToLong</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list> <block>{
    <return>return
      <expr><operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name></expr>]</index></name>     <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">48</literal><operator>)</operator> <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>  <operator>|</operator>
      <operator>(</operator><operator>(</operator><name><name>bytes</name><index>[<expr><name>offset</name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xffL</literal><operator>)</operator><operator>)</operator></expr>;</return>
  }</block></function>
}</block></class>
</unit>
