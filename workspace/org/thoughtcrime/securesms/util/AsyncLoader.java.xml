<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\AsyncLoader.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<comment type="block">/*
 * Copyright (C) 2011 Alexander Blom
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>AsyncTaskLoader</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Loader which extends AsyncTaskLoaders and handles caveats
 * as pointed out in http://code.google.com/p/android/issues/detail?id=14944.
 *
 * Based on CursorLoader.java in the Fragment compatibility package
 *
 * @author Alexander Blom (me@alexanderblom.se)
 *
 * @param &lt;D&gt; data type
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>AsyncLoader</name><parameter_list>&lt;<parameter><name>D</name></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>AsyncTaskLoader</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><name>D</name></type> <name>data</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AsyncLoader</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>deliverResult</name><parameter_list>(<parameter><decl><type><name>D</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isReset</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <comment type="line">// An async query came in while the loader is stopped</comment>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>deliverResult</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>


  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onStartLoading</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>deliverResult</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>takeContentChanged</name><argument_list>()</argument_list></call> <operator>||</operator> <name>data</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>forceLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onStopLoading</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// Attempt to cancel the current load task if possible.</comment>
    <expr_stmt><expr><call><name>cancelLoad</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onReset</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onReset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Ensure the loader is stopped</comment>
    <expr_stmt><expr><call><name>onStopLoading</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>data</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>


}</block></class>
</unit>
