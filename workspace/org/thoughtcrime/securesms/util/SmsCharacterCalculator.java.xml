<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\SmsCharacterCalculator.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>SmsMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<class><specifier>public</specifier> class <name>SmsCharacterCalculator</name> <super><extends>extends <name>CharacterCalculator</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SmsCharacterCalculator</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>CharacterState</name></type> <name>calculateCharacters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>messageBody</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>messagesSpent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>charactersSpent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>   <name>charactersRemaining</name></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>length</name>              <operator>=</operator> <call><name><name>SmsMessage</name><operator>.</operator><name>calculateLength</name></name><argument_list>(<argument><expr><name>messageBody</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>messagesSpent</name>       <operator>=</operator> <name><name>length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>charactersSpent</name>     <operator>=</operator> <name><name>length</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>charactersRemaining</name> <operator>=</operator> <name><name>length</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>messagesSpent</name>       <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>charactersSpent</name>     <operator>=</operator> <call><name><name>messageBody</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>charactersRemaining</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    }</block></catch></try>

    <decl_stmt><decl><type><name>int</name></type> <name>maxMessageSize</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>messagesSpent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>maxMessageSize</name> <operator>=</operator> <operator>(</operator><name>charactersSpent</name> <operator>+</operator> <name>charactersRemaining</name><operator>)</operator> <operator>/</operator> <name>messagesSpent</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>maxMessageSize</name> <operator>=</operator> <operator>(</operator><name>charactersSpent</name> <operator>+</operator> <name>charactersRemaining</name><operator>)</operator></expr>;</expr_stmt>
    }</block></else></if>
    
    <return>return <expr><operator>new</operator> <call><name>CharacterState</name><argument_list>(<argument><expr><name>messagesSpent</name></expr></argument>, <argument><expr><name>charactersRemaining</name></expr></argument>, <argument><expr><name>maxMessageSize</name></expr></argument>, <argument><expr><name>maxMessageSize</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>

</unit>
