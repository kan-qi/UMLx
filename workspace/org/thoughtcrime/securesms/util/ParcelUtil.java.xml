<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\ParcelUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>

<class><specifier>public</specifier> class <name>ParcelUtil</name> <block>{

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>serialize</name><parameter_list>(<parameter><decl><type><name>Parcelable</name></type> <name>parceable</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name><name>Parcel</name><operator>.</operator><name>obtain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parceable</name><operator>.</operator><name>writeToParcel</name></name><argument_list>(<argument><expr><name>parcel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>parcel</name><operator>.</operator><name>marshall</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Parcel</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name><name>Parcel</name><operator>.</operator><name>obtain</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>unmarshall</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>parcel</name><operator>.</operator><name>setDataPosition</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>parcel</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>deserialize</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>, <parameter><decl><type><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></name></type> <name>creator</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Parcel</name></type> <name>parcel</name> <init>= <expr><call><name>deserialize</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>creator</name><operator>.</operator><name>createFromParcel</name></name><argument_list>(<argument><expr><name>parcel</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

}</block></class>
</unit>
