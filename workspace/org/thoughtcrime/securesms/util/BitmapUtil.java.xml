<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\BitmapUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name><operator>.</operator><name>CompressFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>ImageFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>YuvImage</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>BitmapDrawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>media</name><operator>.</operator><name>ExifInterface</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>DiskCacheStrategy</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>DownsampleStrategy</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MediaConstraints</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicBoolean</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>microedition</name><operator>.</operator><name>khronos</name><operator>.</operator><name>egl</name><operator>.</operator><name>EGL10</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>microedition</name><operator>.</operator><name>khronos</name><operator>.</operator><name>egl</name><operator>.</operator><name>EGLConfig</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>microedition</name><operator>.</operator><name>khronos</name><operator>.</operator><name>egl</name><operator>.</operator><name>EGLContext</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>microedition</name><operator>.</operator><name>khronos</name><operator>.</operator><name>egl</name><operator>.</operator><name>EGLDisplay</name></name>;</import>

<class><specifier>public</specifier> class <name>BitmapUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>BitmapUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_COMPRESSION_QUALITY</name>          <init>= <expr><literal type="number">90</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIN_COMPRESSION_QUALITY</name>          <init>= <expr><literal type="number">45</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_COMPRESSION_ATTEMPTS</name>         <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIN_COMPRESSION_QUALITY_DECREASE</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>ScaleResult</name></type> <name>createScaledBytes</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>MediaConstraints</name></type> <name>constraints</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>BitmapDecodingException</name></expr></argument></throws>
  <block>{
    <return>return <expr><call><name>createScaledBytes</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>model</name></expr></argument>,
                             <argument><expr><call><name><name>constraints</name><operator>.</operator><name>getImageMaxWidth</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>constraints</name><operator>.</operator><name>getImageMaxHeight</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>constraints</name><operator>.</operator><name>getImageMaxSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>ScaleResult</name></type> <name>createScaledBytes</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxImageWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxImageHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxImageSize</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>BitmapDecodingException</name></expr></argument></throws>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>int</name></type>    <name>quality</name>  <init>= <expr><name>MAX_COMPRESSION_QUALITY</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>    <name>attempts</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Bitmap</name></type> <name>scaledBitmap</name> <init>= <expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>asBitmap</name><argument_list>()</argument_list></call>
                                    <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>skipMemoryCache</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>downsample</name><argument_list>(<argument><expr><name><name>DownsampleStrategy</name><operator>.</operator><name>AT_MOST</name></name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>submit</name><argument_list>(<argument><expr><name>maxImageWidth</name></expr></argument>, <argument><expr><name>maxImageHeight</name></expr></argument>)</argument_list></call>
                                    <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>scaledBitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>BitmapDecodingException</name><argument_list>(<argument><expr><literal type="string">"Unable to decode image"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Initial scaled bitmap has size of "</literal> <operator>+</operator> <call><name><name>scaledBitmap</name><operator>.</operator><name>getByteCount</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" bytes."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <try>try <block>{
        <do>do <block>{
          <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>scaledBitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>CompressFormat</name><operator>.</operator><name>JPEG</name></name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"iteration with quality "</literal> <operator>+</operator> <name>quality</name> <operator>+</operator> <literal type="string">" size "</literal> <operator>+</operator> <operator>(</operator><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>/</operator> <literal type="number">1024</literal><operator>)</operator> <operator>+</operator> <literal type="string">"kb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>quality</name> <operator>==</operator> <name>MIN_COMPRESSION_QUALITY</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

          <decl_stmt><decl><type><name>int</name></type> <name>nextQuality</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>Math</name><operator>.</operator><name>floor</name></name><argument_list>(<argument><expr><name>quality</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>maxImageSize</name> <operator>/</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>quality</name> <operator>-</operator> <name>nextQuality</name> <operator>&lt;</operator> <name>MIN_COMPRESSION_QUALITY_DECREASE</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>nextQuality</name> <operator>=</operator> <name>quality</name> <operator>-</operator> <name>MIN_COMPRESSION_QUALITY_DECREASE</name></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name>quality</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>nextQuality</name></expr></argument>, <argument><expr><name>MIN_COMPRESSION_QUALITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        while <condition>(<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>maxImageSize</name> <operator>&amp;&amp;</operator> <name>attempts</name><operator>++</operator> <operator>&lt;</operator> <name>MAX_COMPRESSION_ATTEMPTS</name></expr>)</condition>;</do>

        <if>if <condition>(<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <name>maxImageSize</name></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>BitmapDecodingException</name><argument_list>(<argument><expr><literal type="string">"Unable to scale image below: "</literal> <operator>+</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>BitmapDecodingException</name><argument_list>(<argument><expr><literal type="string">"Decoding failed. Bitmap has a length of "</literal> <operator>+</operator> <name><name>bytes</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="string">" bytes."</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"createScaledBytes("</literal> <operator>+</operator> <call><name><name>model</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">") -&gt; quality "</literal> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>quality</name></expr></argument>, <argument><expr><name>MAX_COMPRESSION_QUALITY</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>attempts</name> <operator>+</operator> <literal type="string">" attempt(s)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><operator>new</operator> <call><name>ScaleResult</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><call><name><name>scaledBitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaledBitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <finally>finally <block>{
        <if>if <condition>(<expr><name>scaledBitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>scaledBitmap</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></finally></try>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>BitmapDecodingException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>Bitmap</name></type> <name>createScaledBitmap</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxHeight</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>BitmapDecodingException</name></expr></argument></throws>
  <block>{
    <try>try <block>{
      <return>return <expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>asBitmap</name><argument_list>()</argument_list></call>
                     <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><name>model</name></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>downsample</name><argument_list>(<argument><expr><name><name>DownsampleStrategy</name><operator>.</operator><name>AT_MOST</name></name></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>submit</name><argument_list>(<argument><expr><name>maxWidth</name></expr></argument>, <argument><expr><name>maxHeight</name></expr></argument>)</argument_list></call>
                     <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> | <type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>BitmapDecodingException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name>Bitmap</name></type> <name>createScaledBitmap</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxHeight</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>maxWidth</name> <operator>&amp;&amp;</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>maxHeight</name></expr>)</condition><then> <block>{
      <return>return <expr><name>bitmap</name></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>maxWidth</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>maxHeight</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><name>bitmap</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>newWidth</name>  <init>= <expr><name>maxWidth</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newHeight</name> <init>= <expr><name>maxHeight</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>widthRatio</name>  <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call>  <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>maxWidth</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>heightRatio</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>maxHeight</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>widthRatio</name> <operator>&gt;</operator> <name>heightRatio</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>newHeight</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>widthRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>newWidth</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>heightRatio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><call><name><name>Bitmap</name><operator>.</operator><name>createScaledBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>newWidth</name></expr></argument>, <argument><expr><name>newHeight</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name></type> <name>getImageDimensions</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inputStream</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>BitmapDecodingException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>inJustDecodeBounds</name></name>    <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>BufferedInputStream</name></type> <name>fis</name>       <init>= <expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeStream</name></name><argument_list>(<argument><expr><name>fis</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><call><name><name>fis</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"failed to close the InputStream after reading image dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <if>if <condition>(<expr><name><name>options</name><operator>.</operator><name>outWidth</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>options</name><operator>.</operator><name>outHeight</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>BitmapDecodingException</name><argument_list>(<argument><expr><literal type="string">"Failed to decode image dimensions: "</literal> <operator>+</operator> <name><name>options</name><operator>.</operator><name>outWidth</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name><name>options</name><operator>.</operator><name>outHeight</name></name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <return>return <expr><name>options</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getExifDimensions</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>ExifInterface</name></type> <name>exif</name>   <init>= <expr><operator>new</operator> <call><name>ExifInterface</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>           <name>width</name>  <init>= <expr><call><name><name>exif</name><operator>.</operator><name>getAttributeInt</name></name><argument_list>(<argument><expr><name><name>ExifInterface</name><operator>.</operator><name>TAG_IMAGE_WIDTH</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>           <name>height</name> <init>= <expr><call><name><name>exif</name><operator>.</operator><name>getAttributeInt</name></name><argument_list>(<argument><expr><name><name>ExifInterface</name><operator>.</operator><name>TAG_IMAGE_LENGTH</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>orientation</name> <init>= <expr><call><name><name>exif</name><operator>.</operator><name>getAttributeInt</name></name><argument_list>(<argument><expr><name><name>ExifInterface</name><operator>.</operator><name>TAG_ORIENTATION</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>orientation</name> <operator>==</operator> <name><name>ExifInterface</name><operator>.</operator><name>ORIENTATION_ROTATE_90</name></name>  <operator>||</operator>
        <name>orientation</name> <operator>==</operator> <name><name>ExifInterface</name><operator>.</operator><name>ORIENTATION_ROTATE_270</name></name> <operator>||</operator>
        <name>orientation</name> <operator>==</operator> <name><name>ExifInterface</name><operator>.</operator><name>ORIENTATION_TRANSVERSE</name></name> <operator>||</operator>
        <name>orientation</name> <operator>==</operator> <name><name>ExifInterface</name><operator>.</operator><name>ORIENTATION_TRANSPOSE</name></name></expr>)</condition><then>
    <block>{
      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getDimensions</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>inputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>BitmapDecodingException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name></type> <name>options</name> <init>= <expr><call><name>getImageDimensions</name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>options</name><operator>.</operator><name>outWidth</name></name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>outHeight</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>InputStream</name></type> <name>toCompressedJpeg</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>thumbnailBytes</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>CompressFormat</name><operator>.</operator><name>JPEG</name></name></expr></argument>, <argument><expr><literal type="number">85</literal></expr></argument>, <argument><expr><name>thumbnailBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>thumbnailBytes</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name><name>byte</name><index>[]</index></name></type> <name>toByteArray</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>stream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>stream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Bitmap</name></type> <name>fromByteArray</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>bytes</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>bytes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
    <return>return <expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeByteArray</name></name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>bytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>createFromNV21</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
                                      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>,
                                      <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl></parameter>,
                                      <parameter><decl><type><name>int</name></type> <name>rotation</name></decl></parameter>,
                                      <parameter><decl><type><specifier>final</specifier> <name>Rect</name></type> <name>croppingRect</name></decl></parameter>,
                                      <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>flipHorizontal</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>rotated</name> <init>= <expr><call><name>rotateNV21</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>rotation</name></expr></argument>, <argument><expr><name>flipHorizontal</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>rotatedWidth</name>  <init>= <expr><ternary><condition><expr><name>rotation</name> <operator>%</operator> <literal type="number">180</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>height</name></expr> </then><else>: <expr><name>width</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>rotatedHeight</name> <init>= <expr><ternary><condition><expr><name>rotation</name> <operator>%</operator> <literal type="number">180</literal> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>width</name></expr>  </then><else>: <expr><name>height</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>YuvImage</name></type> <name>previewImage</name> <init>= <expr><operator>new</operator> <call><name>YuvImage</name><argument_list>(<argument><expr><name>rotated</name></expr></argument>, <argument><expr><name><name>ImageFormat</name><operator>.</operator><name>NV21</name></name></expr></argument>,
                                         <argument><expr><name>rotatedWidth</name></expr></argument>, <argument><expr><name>rotatedHeight</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>outputStream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>previewImage</name><operator>.</operator><name>compressToJpeg</name></name><argument_list>(<argument><expr><name>croppingRect</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bytes</name> <init>= <expr><call><name><name>outputStream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>bytes</name></expr>;</return>
  }</block></function>

  <comment type="block">/*
   * NV21 a.k.a. YUV420sp
   * YUV 4:2:0 planar image, with 8 bit Y samples, followed by interleaved V/U plane with 8bit 2x2
   * subsampled chroma samples.
   *
   * http://www.fourcc.org/yuv.php#NV21
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>rotateNV21</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>yuv</name></decl></parameter>,
                                  <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>,
                                  <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl></parameter>,
                                  <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>rotation</name></decl></parameter>,
                                  <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>flipHorizontal</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <if>if <condition>(<expr><name>rotation</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>yuv</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>rotation</name> <operator>%</operator> <literal type="number">90</literal> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rotation</name> <argument_list type="generic">&lt; <argument><literal type="number">0</literal> <operator>||</operator> <name>rotation</name></argument> &gt;</argument_list></name> <literal type="number">270</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"0 &lt;= rotation &lt; 360, rotation % 90 == 0"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>!=</operator> <name><name>yuv</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"provided width and height don't jive with the data length ("</literal> <operator>+</operator>
                            <name><name>yuv</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="string">"). Width: "</literal> <operator>+</operator> <name>width</name> <operator>+</operator> <literal type="string">" height: "</literal> <operator>+</operator> <name>height</name> <operator>+</operator>
                            <literal type="string">" = data length: "</literal> <operator>+</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>height</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if></elseif></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>  <name>output</name>    <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>yuv</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>     <name>frameSize</name> <init>= <expr><name>width</name> <operator>*</operator> <name>height</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>swap</name>      <init>= <expr><name>rotation</name> <operator>%</operator> <literal type="number">180</literal> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>xflip</name>     <init>= <expr><ternary><condition><expr><name>flipHorizontal</name></expr> ?</condition><then> <expr><name>rotation</name> <operator>%</operator> <literal type="number">270</literal> <operator>==</operator> <literal type="number">0</literal></expr> </then><else>: <expr><name>rotation</name> <operator>%</operator> <literal type="number">270</literal> <operator>!=</operator> <literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>yflip</name>     <init>= <expr><name>rotation</name> <operator>&gt;=</operator> <literal type="number">180</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>yIn</name> <init>= <expr><name>j</name> <operator>*</operator> <name>width</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>uIn</name> <init>= <expr><name>frameSize</name> <operator>+</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>width</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>vIn</name> <init>= <expr><name>uIn</name>       <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>wOut</name>     <init>= <expr><ternary><condition><expr><name>swap</name></expr> ?</condition><then> <expr><name>height</name></expr>              </then><else>: <expr><name>width</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>hOut</name>     <init>= <expr><ternary><condition><expr><name>swap</name></expr> ?</condition><then> <expr><name>width</name></expr>               </then><else>: <expr><name>height</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iSwapped</name> <init>= <expr><ternary><condition><expr><name>swap</name></expr> ?</condition><then> <expr><name>j</name></expr>                   </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>jSwapped</name> <init>= <expr><ternary><condition><expr><name>swap</name></expr> ?</condition><then> <expr><name>i</name></expr>                   </then><else>: <expr><name>j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>iOut</name>     <init>= <expr><ternary><condition><expr><name>xflip</name></expr> ?</condition><then> <expr><name>wOut</name> <operator>-</operator> <name>iSwapped</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>iSwapped</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>jOut</name>     <init>= <expr><ternary><condition><expr><name>yflip</name></expr> ?</condition><then> <expr><name>hOut</name> <operator>-</operator> <name>jSwapped</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>jSwapped</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>yOut</name> <init>= <expr><name>jOut</name> <operator>*</operator> <name>wOut</name> <operator>+</operator> <name>iOut</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>uOut</name> <init>= <expr><name>frameSize</name> <operator>+</operator> <operator>(</operator><name>jOut</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>wOut</name> <operator>+</operator> <operator>(</operator><name>iOut</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>vOut</name> <init>= <expr><name>uOut</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>output</name><index>[<expr><name>yOut</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><literal type="number">0xff</literal> <operator>&amp;</operator> <name><name>yuv</name><index>[<expr><name>yIn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>uOut</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><literal type="number">0xff</literal> <operator>&amp;</operator> <name><name>yuv</name><index>[<expr><name>uIn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>output</name><index>[<expr><name>vOut</name></expr>]</index></name> <operator>=</operator> <call>(<name>byte</name>)<argument_list>(<argument><expr><literal type="number">0xff</literal> <operator>&amp;</operator> <name><name>yuv</name><index>[<expr><name>vIn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></for>
    <return>return <expr><name>output</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Bitmap</name></type> <name>createFromDrawable</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Drawable</name></type> <name>drawable</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>AtomicBoolean</name></type> <name>created</name> <init>= <expr><operator>new</operator> <call><name>AtomicBoolean</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>Bitmap</name><index>[]</index></name></type>      <name>result</name>  <init>= <expr><operator>new</operator> <name><name>Bitmap</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Runnable</name></type> <name>runnable</name> <init>= <expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>drawable</name> <operator>instanceof</operator> <name>BitmapDrawable</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>BitmapDrawable</name><operator>)</operator> <name>drawable</name><operator>)</operator><operator>.</operator><call><name>getBitmap</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>canvasWidth</name> <init>= <expr><call><name><name>drawable</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>canvasWidth</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>canvasWidth</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt></block></then></if>

          <decl_stmt><decl><type><name>int</name></type> <name>canvasHeight</name> <init>= <expr><call><name><name>drawable</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>canvasHeight</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>canvasHeight</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt></block></then></if>

          <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>

          <try>try <block>{
            <expr_stmt><expr><name>bitmap</name> <operator>=</operator> <call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><name>canvasWidth</name></expr></argument>, <argument><expr><name>canvasHeight</name></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Canvas</name></type> <name>canvas</name> <init>= <expr><operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>drawable</name><operator>.</operator><name>setBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>canvas</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>canvas</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>drawable</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitmap</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
          }</block></catch></try>

          <expr_stmt><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
        }</block></else></if>

        <synchronized>synchronized <init>(<expr><name>result</name></expr>)</init> <block>{
          <expr_stmt><expr><call><name><name>created</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>notifyAll</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></synchronized>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><name>runnable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <synchronized>synchronized <init>(<expr><name>result</name></expr>)</init> <block>{
      <while>while <condition>(<expr><operator>!</operator><call><name><name>created</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
      <return>return <expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
    }</block></synchronized>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getMaxTextureSize</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>MAX_ALLOWED_TEXTURE_SIZE</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>EGL10</name></type> <name>egl</name> <init>= <expr><operator>(</operator><name>EGL10</name><operator>)</operator> <call><name><name>EGLContext</name><operator>.</operator><name>getEGL</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>EGLDisplay</name></type> <name>display</name> <init>= <expr><call><name><name>egl</name><operator>.</operator><name>eglGetDisplay</name></name><argument_list>(<argument><expr><name><name>EGL10</name><operator>.</operator><name>EGL_DEFAULT_DISPLAY</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>version</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>egl</name><operator>.</operator><name>eglInitialize</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>totalConfigurations</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>egl</name><operator>.</operator><name>eglGetConfigs</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalConfigurations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>EGLConfig</name><index>[]</index></name></type> <name>configurationsList</name> <init>= <expr><operator>new</operator> <name><name>EGLConfig</name><index>[<expr><name><name>totalConfigurations</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>egl</name><operator>.</operator><name>eglGetConfigs</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name>configurationsList</name></expr></argument>, <argument><expr><name><name>totalConfigurations</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>totalConfigurations</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>textureSize</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maximumTextureSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>totalConfigurations</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>egl</name><operator>.</operator><name>eglGetConfigAttrib</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>, <argument><expr><name><name>configurationsList</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>EGL10</name><operator>.</operator><name>EGL_MAX_PBUFFER_WIDTH</name></name></expr></argument>, <argument><expr><name>textureSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>maximumTextureSize</name> <operator>&lt;</operator> <name><name>textureSize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>maximumTextureSize</name> <operator>=</operator> <name><name>textureSize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name><name>egl</name><operator>.</operator><name>eglTerminate</name></name><argument_list>(<argument><expr><name>display</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>maximumTextureSize</name></expr></argument>, <argument><expr><name>MAX_ALLOWED_TEXTURE_SIZE</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ScaleResult</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>bitmap</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>width</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>height</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ScaleResult</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>bitmap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>width</name></name>  <operator>=</operator> <name>width</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    }</block></constructor>


    <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getBitmap</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>bitmap</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>width</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>height</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
