<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\GroupUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingGroupMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientModifiedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>MessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>internal</name><operator>.</operator><name>push</name><operator>.</operator><name>SignalServiceProtos</name><operator>.</operator><name>GroupContext</name></name>;</import>

<class><specifier>public</specifier> class <name>GroupUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ENCODED_SIGNAL_GROUP_PREFIX</name> <init>= <expr><literal type="string">"__textsecure_group__!"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ENCODED_MMS_GROUP_PREFIX</name>    <init>= <expr><literal type="string">"__signal_mms_group__!"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>                         <init>= <expr><call><name><name>GroupUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getEncodedId</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>mms</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>mms</name></expr> ?</condition><then> <expr><name>ENCODED_MMS_GROUP_PREFIX</name></expr>  </then><else>: <expr><name>ENCODED_SIGNAL_GROUP_PREFIX</name></expr></else></ternary><operator>)</operator> <operator>+</operator> <call><name><name>Hex</name><operator>.</operator><name>toStringCondensed</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getDecodedId</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isEncodedGroup</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid encoding"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <return>return <expr><call><name><name>Hex</name><operator>.</operator><name>fromStringCondensed</name></name><argument_list>(<argument><expr><call><name><name>groupId</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"!"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isEncodedGroup</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>groupId</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>ENCODED_SIGNAL_GROUP_PREFIX</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>groupId</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>ENCODED_MMS_GROUP_PREFIX</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMmsGroup</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>groupId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>groupId</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>ENCODED_MMS_GROUP_PREFIX</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>OutgoingGroupMediaMessage</name></argument>&gt;</argument_list></name></type> <name>createGroupLeaveMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>groupRecipient</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>        <name>encodedGroupId</name> <init>= <expr><call><name><name>groupRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toGroupString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GroupDatabase</name></type> <name>groupDatabase</name>  <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>groupDatabase</name><operator>.</operator><name>isActive</name></name><argument_list>(<argument><expr><name>encodedGroupId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Group has already been left."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>ByteString</name></type> <name>decodedGroupId</name></decl>;</decl_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>decodedGroupId</name> <operator>=</operator> <call><name><name>ByteString</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><call><name>getDecodedId</name><argument_list>(<argument><expr><name>encodedGroupId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to decode group ID."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></catch></try>

    <decl_stmt><decl><type><name>GroupContext</name></type> <name>groupContext</name> <init>= <expr><call><name><name>GroupContext</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                            <operator>.</operator><call><name>setId</name><argument_list>(<argument><expr><name>decodedGroupId</name></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>setType</name><argument_list>(<argument><expr><name><name>GroupContext</name><operator>.</operator><name>Type</name><operator>.</operator><name>QUIT</name></name></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OutgoingGroupMediaMessage</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>, <argument><expr><name>groupContext</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>


  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>GroupDescription</name></type> <name>getDescription</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>encodedGroup</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>encodedGroup</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>GroupDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <try>try <block>{
      <decl_stmt><decl><type><name>GroupContext</name></type>  <name>groupContext</name> <init>= <expr><call><name><name>GroupContext</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>encodedGroup</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>GroupDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>groupContext</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name>GroupDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>GroupDescription</name> <block>{

    <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>         <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name>GroupContext</name></type>    <name>groupContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>members</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>GroupDescription</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>GroupContext</name></type> <name>groupContext</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>      <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupContext</name></name> <operator>=</operator> <name>groupContext</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>groupContext</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>groupContext</name><operator>.</operator><name>getMembersList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>members</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>members</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>String</name></type> <name>member</name> <range>: <expr><call><name><name>groupContext</name><operator>.</operator><name>getMembersList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>members</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>member</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></else></if>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>Recipient</name></type> <name>sender</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>StringBuilder</name></type> <name>description</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_s_updated_group</name></name></expr></argument>, <argument><expr><call><name><name>sender</name><operator>.</operator><name>toShortString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>groupContext</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>description</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>= <expr><call><name><name>groupContext</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>members</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>GroupUtil_joined_the_group</name></name></expr></argument>,
                                                                    <argument><expr><call><name><name>members</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>toString</name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>title</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>title</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>members</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else                 <block type="pseudo"><expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><call><name><name>description</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>GroupUtil_group_name_is_now</name></name></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <return>return <expr><call><name><name>description</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>addListener</name><parameter_list>(<parameter><decl><type><name>RecipientModifiedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>members</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>Recipient</name></type> <name>member</name> <range>: <expr><name><name>this</name><operator>.</operator><name>members</name></name></expr></range></decl></init>)</control> <block>{
          <expr_stmt><expr><call><name><name>member</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></then></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name><name>recipients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>+=</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
