<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\IdentityUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>StringRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>UiThread</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>storage</name><operator>.</operator><name>TextSecureIdentityKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>storage</name><operator>.</operator><name>TextSecureSessionStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name><operator>.</operator><name>IdentityRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MessagingDatabase</name><operator>.</operator><name>InsertResult</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>MessageNotifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>IncomingIdentityDefaultMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>IncomingIdentityUpdateMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>IncomingIdentityVerifiedMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>IncomingTextMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>OutgoingIdentityDefaultMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>OutgoingIdentityVerifiedMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>OutgoingTextMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>SignalProtocolAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>IdentityKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SessionRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SessionStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceGroup</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>multidevice</name><operator>.</operator><name>VerifiedMessage</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>SessionCipher</name><operator>.</operator><name>SESSION_LOCK</name></name>;</import>

<class><specifier>public</specifier> class <name>IdentityUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>IdentityUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>UiThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getRemoteIdentityKey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>, <argument><name>Void</name></argument>, <argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Recipient</name><modifier>...</modifier></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getIdentityDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>getIdentity</name><argument_list>(<argument><expr><name><name>recipient</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>future</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>markIdentityVerified</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>verified</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>remote</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>long</name></type>                 <name>time</name>          <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SmsDatabase</name></type>          <name>smsDatabase</name>   <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GroupDatabase</name></type>        <name>groupDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>GroupDatabase</name><operator>.</operator><name>Reader</name></name></type> <name>reader</name>        <init>= <expr><call><name><name>groupDatabase</name><operator>.</operator><name>getGroups</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>GroupDatabase</name><operator>.</operator><name>GroupRecord</name></name></type> <name>groupRecord</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>groupRecord</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
      <if>if <condition>(<expr><call><name><name>groupRecord</name><operator>.</operator><name>getMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>groupRecord</name><operator>.</operator><name>isActive</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>groupRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>SignalServiceGroup</name></type> <name>group</name> <init>= <expr><operator>new</operator> <call><name>SignalServiceGroup</name><argument_list>(<argument><expr><call><name><name>groupRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>remote</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>IncomingTextMessage</name></type> <name>incoming</name> <init>= <expr><operator>new</operator> <call><name>IncomingTextMessage</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>verified</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>incoming</name> <operator>=</operator> <operator>new</operator> <call><name>IncomingIdentityVerifiedMessage</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
          <else>else          <block type="pseudo"><expr_stmt><expr><name>incoming</name> <operator>=</operator> <operator>new</operator> <call><name>IncomingIdentityDefaultMessage</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

          <expr_stmt><expr><call><name><name>smsDatabase</name><operator>.</operator><name>insertMessageInbox</name></name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><name>Recipient</name></type>           <name>groupRecipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>GroupUtil</name><operator>.</operator><name>getEncodedId</name></name><argument_list>(<argument><expr><call><name><name>group</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type>                <name>threadId</name>        <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>OutgoingTextMessage</name></type> <name>outgoing</name></decl> ;</decl_stmt>

          <if>if <condition>(<expr><name>verified</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>outgoing</name> <operator>=</operator> <operator>new</operator> <call><name>OutgoingIdentityVerifiedMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
          <else>else          <block type="pseudo"><expr_stmt><expr><name>outgoing</name> <operator>=</operator> <operator>new</operator> <call><name>OutgoingIdentityDefaultMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

          <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertMessageOutbox</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>outgoing</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>
    }</block></while>

    <if>if <condition>(<expr><name>remote</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>IncomingTextMessage</name></type> <name>incoming</name> <init>= <expr><operator>new</operator> <call><name>IncomingTextMessage</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>verified</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>incoming</name> <operator>=</operator> <operator>new</operator> <call><name>IncomingIdentityVerifiedMessage</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else          <block type="pseudo"><expr_stmt><expr><name>incoming</name> <operator>=</operator> <operator>new</operator> <call><name>IncomingIdentityDefaultMessage</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

      <expr_stmt><expr><call><name><name>smsDatabase</name><operator>.</operator><name>insertMessageInbox</name></name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>OutgoingTextMessage</name></type> <name>outgoing</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>verified</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>outgoing</name> <operator>=</operator> <operator>new</operator> <call><name>OutgoingIdentityVerifiedMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else          <block type="pseudo"><expr_stmt><expr><name>outgoing</name> <operator>=</operator> <operator>new</operator> <call><name>OutgoingIdentityDefaultMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

      <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Inserting verified outbox..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>insertMessageOutbox</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>outgoing</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>markIdentityUpdate</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type>                 <name>time</name>          <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SmsDatabase</name></type>          <name>smsDatabase</name>   <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>GroupDatabase</name></type>        <name>groupDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>GroupDatabase</name><operator>.</operator><name>Reader</name></name></type> <name>reader</name>        <init>= <expr><call><name><name>groupDatabase</name><operator>.</operator><name>getGroups</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>GroupDatabase</name><operator>.</operator><name>GroupRecord</name></name></type> <name>groupRecord</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>groupRecord</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
      <if>if <condition>(<expr><call><name><name>groupRecord</name><operator>.</operator><name>getMembers</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>groupRecord</name><operator>.</operator><name>isActive</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>SignalServiceGroup</name></type>            <name>group</name>       <init>= <expr><operator>new</operator> <call><name>SignalServiceGroup</name><argument_list>(<argument><expr><call><name><name>groupRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IncomingTextMessage</name></type>           <name>incoming</name>    <init>= <expr><operator>new</operator> <call><name>IncomingTextMessage</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>IncomingIdentityUpdateMessage</name></type> <name>groupUpdate</name> <init>= <expr><operator>new</operator> <call><name>IncomingIdentityUpdateMessage</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>smsDatabase</name><operator>.</operator><name>insertMessageInbox</name></name><argument_list>(<argument><expr><name>groupUpdate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></while>

    <decl_stmt><decl><type><name>IncomingTextMessage</name></type>           <name>incoming</name>         <init>= <expr><operator>new</operator> <call><name>IncomingTextMessage</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>time</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IncomingIdentityUpdateMessage</name></type> <name>individualUpdate</name> <init>= <expr><operator>new</operator> <call><name>IncomingIdentityUpdateMessage</name><argument_list>(<argument><expr><name>incoming</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InsertResult</name></argument>&gt;</argument_list></name></type>        <name>insertResult</name>     <init>= <expr><call><name><name>smsDatabase</name><operator>.</operator><name>insertMessageInbox</name></name><argument_list>(<argument><expr><name>individualUpdate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>insertResult</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>updateNotification</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>insertResult</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>saveIdentity</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>SESSION_LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>IdentityKeyStore</name></type>      <name>identityKeyStore</name> <init>= <expr><operator>new</operator> <call><name>TextSecureIdentityKeyStore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SessionStore</name></type>          <name>sessionStore</name>     <init>= <expr><operator>new</operator> <call><name>TextSecureSessionStore</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SignalProtocolAddress</name></type> <name>address</name>          <init>= <expr><operator>new</operator> <call><name>SignalProtocolAddress</name><argument_list>(<argument><expr><name>number</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>identityKeyStore</name><operator>.</operator><name>saveIdentity</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>sessionStore</name><operator>.</operator><name>containsSession</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>SessionRecord</name></type> <name>sessionRecord</name> <init>= <expr><call><name><name>sessionStore</name><operator>.</operator><name>loadSession</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>sessionRecord</name><operator>.</operator><name>archiveCurrentState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>sessionStore</name><operator>.</operator><name>storeSession</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>sessionRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></synchronized>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>processVerifiedMessage</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>VerifiedMessage</name></type> <name>verifiedMessage</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>SESSION_LOCK</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name>IdentityDatabase</name></type>         <name>identityDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getIdentityDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type>                <name>recipient</name>        <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getDestination</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>identityRecord</name>   <init>= <expr><call><name><name>identityDatabase</name><operator>.</operator><name>getIdentity</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>verifiedMessage</name><operator>.</operator><name>getVerified</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name><operator>.</operator><name>DEFAULT</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No existing record for default status"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getVerified</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name><operator>.</operator><name>DEFAULT</name></name>              <operator>&amp;&amp;</operator>
          <call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call>                                                          <operator>&amp;&amp;</operator>
          <call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>      <operator>&amp;&amp;</operator>
          <call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVerifiedStatus</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name><operator>.</operator><name>DEFAULT</name></name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name><name>identityDatabase</name><operator>.</operator><name>setVerified</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name><operator>.</operator><name>DEFAULT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>markIdentityVerified</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getVerified</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedMessage</name><operator>.</operator><name>VerifiedState</name><operator>.</operator><name>VERIFIED</name></name> <operator>&amp;&amp;</operator>
          <operator>(</operator><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator>
              <operator>(</operator><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIdentityKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
              <operator>(</operator><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVerifiedStatus</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name><operator>.</operator><name>VERIFIED</name></name><operator>)</operator><operator>)</operator></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name>saveIdentity</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getDestination</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>identityDatabase</name><operator>.</operator><name>setVerified</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>verifiedMessage</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name><operator>.</operator><name>VERIFIED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>markIdentityVerified</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></synchronized>
  }</block></function>


  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getUnverifiedBannerDescription</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>unverified</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>getPluralizedIdentityDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>unverified</name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_unverified_banner_one</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_unverified_banner_two</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_unverified_banner_many</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getUnverifiedSendDialogDescription</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                                    <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>unverified</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>getPluralizedIdentityDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>unverified</name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_unverified_dialog_one</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_unverified_dialog_two</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_unverified_dialog_many</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getUntrustedSendDialogDescription</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>untrusted</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>getPluralizedIdentityDescription</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>untrusted</name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_untrusted_dialog_one</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_untrusted_dialog_two</name></name></expr></argument>,
                                            <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>IdentityUtil_untrusted_dialog_many</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getPluralizedIdentityDescription</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name></decl></parameter>,
                                                                   <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>resourceOne</name></decl></parameter>,
                                                                   <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>resourceTwo</name></decl></parameter>,
                                                                   <parameter><decl><type><annotation>@<name>StringRes</name></annotation> <name>int</name></type> <name>resourceMany</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><call><name><name>recipients</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>recipients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>resourceOne</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>firstName</name>  <init>= <expr><call><name><name>recipients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>secondName</name> <init>= <expr><call><name><name>recipients</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>resourceTwo</name></expr></argument>, <argument><expr><name>firstName</name></expr></argument>, <argument><expr><name>secondName</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>nMore</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>nMore</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>identity_others</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>nMore</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>identity_others</name></name></expr></argument>, <argument><expr><call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>resourceMany</name></expr></argument>, <argument><expr><name>firstName</name></expr></argument>, <argument><expr><name>secondName</name></expr></argument>, <argument><expr><name>nMore</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></else></if>
    }</block></else></if>
  }</block></function>
}</block></class>
</unit>
