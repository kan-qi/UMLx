<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\JsonUtils.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>DeserializationFeature</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>ObjectMapper</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>SerializationFeature</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Reader</name></name>;</import>

<class><specifier>public</specifier> class <name>JsonUtils</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>ObjectMapper</name></type> <name>objectMapper</name> <init>= <expr><operator>new</operator> <call><name>ObjectMapper</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <static>static <block>{
    <expr_stmt><expr><call><name><name>objectMapper</name><operator>.</operator><name>configure</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>FAIL_ON_UNKNOWN_PROPERTIES</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>objectMapper</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name><name>SerializationFeature</name><operator>.</operator><name>WRITE_ENUMS_USING_TO_STRING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>objectMapper</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><name><name>DeserializationFeature</name><operator>.</operator><name>READ_ENUMS_USING_TO_STRING</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></static>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>fromJson</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name>fromJson</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>fromJson</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name><name>objectMapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>fromJson</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name><name>objectMapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name></parameter>&gt;</parameter_list> <type><name>T</name></type> <name>fromJson</name><parameter_list>(<parameter><decl><type><name>Reader</name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name><name>objectMapper</name><operator>.</operator><name>readValue</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>toJson</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <return>return <expr><call><name><name>objectMapper</name><operator>.</operator><name>writeValueAsString</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ObjectMapper</name></type> <name>getMapper</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>objectMapper</name></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>SaneJSONObject</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>JSONObject</name></type> <name>delegate</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SaneJSONObject</name><parameter_list>(<parameter><decl><type><name>JSONObject</name></type> <name>delegate</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>delegate</name></name> <operator>=</operator> <name>delegate</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getString</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{
      <if>if <condition>(<expr><call><name><name>delegate</name><operator>.</operator><name>isNull</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then>
      <else>else                       <block type="pseudo"><return>return <expr><call><name><name>delegate</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getLong</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isNull</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>isNull</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getInt</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>JSONException</name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>delegate</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
