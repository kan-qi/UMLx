<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\concurrent\SimpleTask.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>Lifecycle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>

<class><specifier>public</specifier> class <name>SimpleTask</name> <block>{

  <comment type="block" format="javadoc">/**
   * Runs a task in the background and passes the result of the computation to a task that is run
   * on the main thread. Will only invoke the {@code foregroundTask} if the provided {@link Lifecycle}
   * is in a valid (i.e. visible) state at that time. In this way, it is very similar to
   * {@link AsyncTask}, but is safe in that you can guarantee your task won't be called when your
   * view is in an invalid state.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Lifecycle</name></type> <name>lifecycle</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>BackgroundTask</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>backgroundTask</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>ForegroundTask</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>foregroundTask</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isValid</name><argument_list>(<argument><expr><name>lifecycle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>E</name></type> <name>result</name> <init>= <expr><call><name><name>backgroundTask</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name>isValid</name><argument_list>(<argument><expr><name>lifecycle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
          <if>if <condition>(<expr><call><name>isValid</name><argument_list>(<argument><expr><name>lifecycle</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>foregroundTask</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Runs a task in the background and passes the result of the computation to a task that is run on
   * the main thread. Essentially {@link AsyncTask}, but lambda-compatible.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <parameter_list type="generic">&lt;<parameter><name>E</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>BackgroundTask</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>backgroundTask</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>ForegroundTask</name><argument_list type="generic">&lt;<argument><name>E</name></argument>&gt;</argument_list></name></type> <name>foregroundTask</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>E</name></type> <name>result</name> <init>= <expr><call><name><name>backgroundTask</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>foregroundTask</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Lifecycle</name></type> <name>lifecycle</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>lifecycle</name><operator>.</operator><name>getCurrentState</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isAtLeast</name><argument_list>(<argument><expr><name><name>Lifecycle</name><operator>.</operator><name>State</name><operator>.</operator><name>CREATED</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <interface><specifier>public</specifier> interface <name><name>BackgroundTask</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>E</name></type> <name>run</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <interface><specifier>public</specifier> interface <name><name>ForegroundTask</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>E</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
