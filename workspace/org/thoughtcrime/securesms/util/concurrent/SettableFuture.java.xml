<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\concurrent\SettableFuture.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name></name>;</package>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Future</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>

<class><specifier>public</specifier> class <name><name>SettableFuture</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <super><implements>implements <name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>listeners</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier>          <type><name>boolean</name></type>   <name>completed</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>          <type><name>boolean</name></type>   <name>canceled</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <name>T</name></type>         <name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>volatile</specifier> <name>Throwable</name></type> <name>exception</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SettableFuture</name><parameter_list>()</parameter_list> <block>{ }</block></constructor>

  <constructor><specifier>public</specifier> <name>SettableFuture</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>result</name></name>    <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>boolean</name></type> <name>cancel</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>mayInterruptIfRunning</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><name>completed</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>canceled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>canceled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>boolean</name></type> <name>isCancelled</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>canceled</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>boolean</name></type> <name>isDone</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>completed</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <if>if <condition>(<expr><name>completed</name> <operator>||</operator> <name>canceled</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>result</name></name>    <operator>=</operator> <name>result</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>

    <expr_stmt><expr><call><name>notifyAllListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>setException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <if>if <condition>(<expr><name>completed</name> <operator>||</operator> <name>canceled</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>exception</name></name> <operator>=</operator> <name>throwable</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>

    <expr_stmt><expr><call><name>notifyAllListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>deferTo</name><parameter_list>(<parameter><decl><type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>other</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>SettableFuture</name><operator>.</operator><name>this</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>SettableFuture</name><operator>.</operator><name>this</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getCause</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>T</name></type> <name>get</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument></throws> <block>{
    <while>while <condition>(<expr><operator>!</operator><name>completed</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>wait</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>

    <if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>ExecutionException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr>;</throw></block></then>
    <else>else                   <block type="pseudo"><return>return <expr><name>result</name></expr>;</return></block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>T</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>TimeUnit</name></type> <name>unit</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>InterruptedException</name></expr></argument>, <argument><expr><name>ExecutionException</name></expr></argument>, <argument><expr><name>TimeoutException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>startTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>!</operator><name>completed</name> <operator>&amp;&amp;</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startTime</name> <operator>&gt;</operator> <call><name><name>unit</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
      <expr_stmt><expr><call><name>wait</name><argument_list>(<argument><expr><call><name><name>unit</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <if>if <condition>(<expr><operator>!</operator><name>completed</name></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>TimeoutException</name><argument_list>()</argument_list></call></expr>;</throw></block></then>
    <else>else            <block type="pseudo"><return>return <expr><call><name>get</name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>addListener</name><parameter_list>(<parameter><decl><type><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <expr_stmt><expr><call><name><name>listeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><name>completed</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    }</block></synchronized>

    <expr_stmt><expr><call><name>notifyListener</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyAllListeners</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>localListeners</name></decl>;</decl_stmt>

    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <expr_stmt><expr><name>localListeners</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>listeners</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>

    <for>for <control>(<init><decl><type><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>listener</name> <range>: <expr><name>localListeners</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name>notifyListener</name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyListener</name><parameter_list>(<parameter><decl><type><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>exception</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onFailure</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ExecutionException</name><argument_list>(<argument><expr><name>exception</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                   <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onSuccess</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  }</block></function>
}</block></class>
</unit>
