<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\StableIdGenerator.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>MainThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Useful for generate ID's to be used with
 * {@link android.support.v7.widget.RecyclerView.Adapter#getItemId(int)} when you otherwise don't
 * have a good way to generate an ID.
 */</comment>
<class><specifier>public</specifier> class <name><name>StableIdGenerator</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>keys</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>MainThread</name></annotation>
  <specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>keys</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>keys</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name></type> <name>key</name> <init>= <expr><name>index</name><operator>++</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>keys</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>key</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
