<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\util\MediaUtil.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentResolver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>webkit</name><operator>.</operator><name>MimeTypeMap</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>DiskCacheStrategy</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>gif</name><operator>.</operator><name>GifDrawable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>AudioSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>DecryptableStreamUriLoader</name><operator>.</operator><name>DecryptableUri</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>DocumentSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GifSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>ImageSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MmsSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>Slide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>TextSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>VideoSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileNotFoundException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<class><specifier>public</specifier> class <name>MediaUtil</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IMAGE_PNG</name>         <init>= <expr><literal type="string">"image/png"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IMAGE_JPEG</name>        <init>= <expr><literal type="string">"image/jpeg"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IMAGE_GIF</name>         <init>= <expr><literal type="string">"image/gif"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>AUDIO_AAC</name>         <init>= <expr><literal type="string">"audio/aac"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>AUDIO_UNSPECIFIED</name> <init>= <expr><literal type="string">"audio/*"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIDEO_UNSPECIFIED</name> <init>= <expr><literal type="string">"video/*"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VCARD</name>             <init>= <expr><literal type="string">"text/x-vcard"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LONG_TEXT</name>         <init>= <expr><literal type="string">"text/x-signal-plain"</literal></expr></init></decl>;</decl_stmt>


  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Slide</name></type> <name>getSlideForAttachment</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Slide</name></type> <name>slide</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>isGif</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>GifSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isImageType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>ImageSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isVideoType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>VideoSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isAudioType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>AudioSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isMms</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>MmsSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isLongTextType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>TextSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <operator>new</operator> <call><name>DocumentSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <return>return <expr><name>slide</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getMimeType</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>PartAuthority</name><operator>.</operator><name>isLocalUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentContentType</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>extension</name> <init>= <expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getFileExtensionFromUrl</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>MimeTypeMap</name><operator>.</operator><name>getSingleton</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMimeTypeFromExtension</name><argument_list>(<argument><expr><call><name><name>extension</name><operator>.</operator><name>toLowerCase</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>getCorrectedMimeType</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getCorrectedMimeType</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>mimeType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <switch>switch<condition>(<expr><name>mimeType</name></expr>)</condition> <block>{
    <case>case <expr><literal type="string">"image/jpg"</literal></expr>:</case>
      <return>return <expr><ternary><condition><expr><call><name><name>MimeTypeMap</name><operator>.</operator><name>getSingleton</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>hasMimeType</name><argument_list>(<argument><expr><name>IMAGE_JPEG</name></expr></argument>)</argument_list></call></expr>
             ?</condition><then> <expr><name>IMAGE_JPEG</name></expr>
             </then><else>: <expr><name>mimeType</name></expr></else></ternary></expr>;</return>
    <default>default:</default>
      <return>return <expr><name>mimeType</name></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>getMediaSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>InputStream</name></type> <name>in</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>in</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Couldn't obtain input stream."</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

    <decl_stmt><decl><type><name>long</name></type>   <name>size</name>   <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>    <name>read</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>size</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getDimensions</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>contentType</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isImageType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dimens</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isGif</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>GifDrawable</name></type> <name>drawable</name> <init>= <expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>asGif</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>skipMemoryCache</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecryptableUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                <operator>.</operator><call><name>submit</name><argument_list>()</argument_list></call>
                <operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dimens</name> <operator>=</operator> <operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>drawable</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>drawable</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Was unable to complete work for GIF dimensions."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Glide experienced an exception while trying to get GIF dimensions."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>InputStream</name></type> <name>attachmentStream</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isJpegType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachmentStream</name> <operator>=</operator> <call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>dimens</name> <operator>=</operator> <call><name><name>BitmapUtil</name><operator>.</operator><name>getExifDimensions</name></name><argument_list>(<argument><expr><name>attachmentStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>attachmentStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>attachmentStream</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>dimens</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachmentStream</name> <operator>=</operator> <call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>dimens</name> <operator>=</operator> <call><name><name>BitmapUtil</name><operator>.</operator><name>getDimensions</name></name><argument_list>(<argument><expr><name>attachmentStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>FileNotFoundException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to find file when retrieving media dimensions."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Experienced a read error when retrieving media dimensions."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>BitmapDecodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Bitmap decoding error when retrieving dimensions."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <finally>finally <block>{
        <if>if <condition>(<expr><name>attachmentStream</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <try>try <block>{
            <expr_stmt><expr><call><name><name>attachmentStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to close stream after retrieving dimensions."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>
      }</block></finally></try>
    }</block></else></if>
    <if>if <condition>(<expr><name>dimens</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>dimens</name> <operator>=</operator> <operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Dimensions for ["</literal> <operator>+</operator> <name>uri</name> <operator>+</operator> <literal type="string">"] are "</literal> <operator>+</operator> <name><name>dimens</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="string">" x "</literal> <operator>+</operator> <name><name>dimens</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dimens</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isMms</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"application/mms"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isGif</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isGif</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isJpeg</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isJpegType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isImage</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isImageType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAudio</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isAudioType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isVideo</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isVideoType</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isVideo</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><literal type="string">"video/"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isVcard</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>VCARD</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isGif</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"image/gif"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isJpegType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>IMAGE_JPEG</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isFile</name><parameter_list>(<parameter><decl><type><name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name>isGif</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isImage</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isAudio</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isVideo</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isTextType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>contentType</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"text/"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isImageType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>contentType</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"image/"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAudioType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>contentType</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"audio/"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isVideoType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>contentType</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"video/"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLongTextType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><literal type="null">null</literal> <operator>!=</operator> <name>contentType</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>contentType</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>LONG_TEXT</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>hasVideoThumbnail</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Checking: "</literal> <operator>+</operator> <name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>uri</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>ContentResolver</name><operator>.</operator><name>SCHEME_CONTENT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getScheme</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><literal type="string">"com.android.providers.media.documents"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>uri</name><operator>.</operator><name>getLastPathSegment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><literal type="string">"video"</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><call><name><name>MediaStore</name><operator>.</operator><name>Video</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if></elseif></if>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Bitmap</name></type> <name>getVideoThumbnail</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><literal type="string">"com.android.providers.media.documents"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getAuthority</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>videoId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getLastPathSegment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>MediaStore</name><operator>.</operator><name>Video</name><operator>.</operator><name>Thumbnails</name><operator>.</operator><name>getThumbnail</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                      <argument><expr><name>videoId</name></expr></argument>,
                                                      <argument><expr><name><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>Thumbnails</name><operator>.</operator><name>MINI_KIND</name></name></expr></argument>,
                                                      <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>uri</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>startsWith</name><argument_list>(<argument><expr><call><name><name>MediaStore</name><operator>.</operator><name>Video</name><operator>.</operator><name>Media</name><operator>.</operator><name>EXTERNAL_CONTENT_URI</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>videoId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><call><name><name>uri</name><operator>.</operator><name>getLastPathSegment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><call><name><name>MediaStore</name><operator>.</operator><name>Video</name><operator>.</operator><name>Thumbnails</name><operator>.</operator><name>getThumbnail</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                      <argument><expr><name>videoId</name></expr></argument>,
                                                      <argument><expr><name><name>MediaStore</name><operator>.</operator><name>Images</name><operator>.</operator><name>Thumbnails</name><operator>.</operator><name>MINI_KIND</name></name></expr></argument>,
                                                      <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif></if>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getDiscreteMimeType</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>sections</name> <init>= <expr><call><name><name>mimeType</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"/"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name><name>sections</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>sections</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ThumbnailData</name> <block>{
    <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>aspectRatio</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ThumbnailData</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmap</name></name>      <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>aspectRatio</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Bitmap</name></type> <name>getBitmap</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>bitmap</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>float</name></type> <name>getAspectRatio</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>aspectRatio</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>InputStream</name></type> <name>toDataStream</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>toCompressedJpeg</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
