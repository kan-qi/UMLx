<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\lock\RegistrationLockReminders.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>lock</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>NavigableSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>TreeSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>RegistrationLockReminders</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>NavigableSet</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>INTERVALS</name> <init>= <expr><operator>new</operator> <class><super><name><name>TreeSet</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>HOURS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>DAYS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>}</block></class></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>INITIAL_INTERVAL</name> <init>= <expr><call><name><name>INTERVALS</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>needsReminder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isRegistrationtLockEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>long</name></type> <name>lastReminderTime</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getRegistrationLockLastReminderTime</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>nextIntervalTime</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getRegistrationLockNextReminderInterval</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>lastReminderTime</name> <operator>+</operator> <name>nextIntervalTime</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>scheduleReminder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>success</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Long</name></type> <name>nextReminderInterval</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>success</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>timeSinceLastReminder</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>TextSecurePreferences</name><operator>.</operator><name>getRegistrationLockLastReminderTime</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>nextReminderInterval</name> <operator>=</operator> <call><name><name>INTERVALS</name><operator>.</operator><name>higher</name></name><argument_list>(<argument><expr><name>timeSinceLastReminder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>nextReminderInterval</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nextReminderInterval</name> <operator>=</operator> <call><name><name>INTERVALS</name><operator>.</operator><name>last</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>lastReminderInterval</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getRegistrationLockNextReminderInterval</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>nextReminderInterval</name> <operator>=</operator> <call><name><name>INTERVALS</name><operator>.</operator><name>lower</name></name><argument_list>(<argument><expr><name>lastReminderInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>nextReminderInterval</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nextReminderInterval</name> <operator>=</operator> <call><name><name>INTERVALS</name><operator>.</operator><name>first</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setRegistrationLockLastReminderTime</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setRegistrationLockNextReminderInterval</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>nextReminderInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

}</block></class>
</unit>
