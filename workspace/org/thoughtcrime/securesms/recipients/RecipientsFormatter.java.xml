<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\recipients\RecipientsFormatter.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>PhoneNumberUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<class><specifier>public</specifier> class <name>RecipientsFormatter</name> <block>{

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>parseBracketedNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RecipientFormattingException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>begin</name>    <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name>      <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>PhoneNumberUtils</name><operator>.</operator><name>isWellFormedSmsAddress</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><name>value</name></expr>;</return></block></then>
    <else>else
      <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>RecipientFormattingException</name><argument_list>(<argument><expr><literal type="string">"Bracketed value: "</literal> <operator>+</operator> <name>value</name> <operator>+</operator> <literal type="string">" is not valid."</literal></expr></argument>)</argument_list></call></expr>;</throw></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>parseRecipient</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RecipientFormattingException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><name>recipient</name> <operator>=</operator> <call><name><name>recipient</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>(</operator><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><call><name>parseBracketedNumber</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>PhoneNumberUtils</name><operator>.</operator><name>isWellFormedSmsAddress</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><name>recipient</name></expr>;</return></block></then></if>

    <throw>throw <expr><operator>new</operator> <call><name>RecipientFormattingException</name><argument_list>(<argument><expr><literal type="string">"Recipient: "</literal> <operator>+</operator> <name>recipient</name> <operator>+</operator> <literal type="string">" is badly formatted."</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getRecipients</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>rawText</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RecipientFormattingException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name> <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>rawText</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>tokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>parseRecipient</name><argument_list>(<argument><expr><call><name><name>tokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>formatNameAndNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// Format like this: Mike Cleron &lt;(650) 555-1234&gt;</comment>
    <comment type="line">//                   Erick Tseng &lt;(650) 555-1212&gt;</comment>
    <comment type="line">//                   Tutankhamun &lt;tutank1341@gmail.com&gt;</comment>
    <comment type="line">//                   (408) 555-1289</comment>
    <decl_stmt><decl><type><name>String</name></type> <name>formattedNumber</name> <init>= <expr><call><name><name>PhoneNumberUtils</name><operator>.</operator><name>formatNumber</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><name>name</name> <operator>+</operator> <literal type="string">" &lt;"</literal> <operator>+</operator> <name>formattedNumber</name> <operator>+</operator> <literal type="string">"&gt;"</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><name>formattedNumber</name></expr>;</return>
    }</block></else></if>
  }</block></function>


}</block></class>
</unit>
