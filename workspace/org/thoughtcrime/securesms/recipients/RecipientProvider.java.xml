<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\recipients\RecipientProvider.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>color</name><operator>.</operator><name>MaterialColor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name><operator>.</operator><name>GroupRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name><operator>.</operator><name>RecipientSettings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name><operator>.</operator><name>RegisteredState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name><operator>.</operator><name>UnidentifiedAccessMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name><operator>.</operator><name>VibrateState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ListenableFutureTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SoftHashMap</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutorService</name></name>;</import>

<class>class <name>RecipientProvider</name> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>RecipientProvider</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>RecipientCache</name></type>  <name>recipientCache</name>         <init>= <expr><operator>new</operator> <call><name>RecipientCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>ExecutorService</name></type> <name>asyncRecipientResolver</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>newSingleThreadedLifoExecutor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></type> <name>STATIC_DETAILS</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashMap</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
    <expr_stmt><expr><call><name>put</name><argument_list>(<argument><expr><literal type="string">"262966"</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>RecipientDetails</name><argument_list>(<argument><expr><literal type="string">"Amazon"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>}</block></class></expr></init></decl>;</decl_stmt>

  <function><annotation>@<name>NonNull</name></annotation> <type><name>Recipient</name></type> <name>getRecipient</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientSettings</name></argument>&gt;</argument_list></name></type> <name>settings</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>GroupRecord</name></argument>&gt;</argument_list></name></type> <name>groupRecord</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>asynchronous</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Recipient</name></type> <name>cachedRecipient</name> <init>= <expr><call><name><name>recipientCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>cachedRecipient</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>asynchronous</name> <operator>||</operator> <operator>!</operator><call><name><name>cachedRecipient</name><operator>.</operator><name>isResolving</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><operator>!</operator><call><name><name>groupRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name><name>cachedRecipient</name><operator>.</operator><name>isResolving</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>cachedRecipient</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block>{
      <return>return <expr><name>cachedRecipient</name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></type> <name>prefetchedRecipientDetails</name> <init>= <expr><call><name>createPrefetchedRecipientDetails</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>groupRecord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>asynchronous</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cachedRecipient</name> <operator>=</operator> <operator>new</operator> <call><name>Recipient</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>cachedRecipient</name></expr></argument>, <argument><expr><name>prefetchedRecipientDetails</name></expr></argument>, <argument><expr><call><name>getRecipientDetailsAsync</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>groupRecord</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>cachedRecipient</name> <operator>=</operator> <operator>new</operator> <call><name>Recipient</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><call><name>getRecipientDetailsSync</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>groupRecord</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>recipientCache</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>cachedRecipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cachedRecipient</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getCached</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>recipientCache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></type> <name>createPrefetchedRecipientDetails</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>,
                                                                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientSettings</name></argument>&gt;</argument_list></name></type> <name>settings</name></decl></parameter>,
                                                                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>GroupRecord</name></argument>&gt;</argument_list></name></type> <name>groupRecord</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>groupRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>getGroupRecipientDetails</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>groupRecord</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>address</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>boolean</name></type> <name>isLocalNumber</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RecipientDetails</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isLocalNumber</name></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif></if>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></type> <name>getRecipientDetailsAsync</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientSettings</name></argument>&gt;</argument_list></name></type> <name>settings</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>GroupRecord</name></argument>&gt;</argument_list></name></type> <name>groupRecord</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></type> <name>task</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>getRecipientDetailsSync</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>groupRecord</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>RecipientDetails</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>asyncRecipientResolver</name><operator>.</operator><name>submit</name></name><argument_list>(<argument><expr><name>future</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>future</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>RecipientDetails</name></type> <name>getRecipientDetailsSync</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientSettings</name></argument>&gt;</argument_list></name></type> <name>settings</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>GroupRecord</name></argument>&gt;</argument_list></name></type> <name>groupRecord</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>nestedAsynchronous</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getGroupRecipientDetails</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>groupRecord</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>, <argument><expr><name>nestedAsynchronous</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <else>else                   <block type="pseudo"><return>return <expr><call><name>getIndividualRecipientDetails</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><name>settings</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>RecipientDetails</name></type> <name>getIndividualRecipientDetails</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientSettings</name></argument>&gt;</argument_list></name></type> <name>settings</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getRecipientDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipientSettings</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>STATIC_DETAILS</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>STATIC_DETAILS</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>boolean</name></type> <name>systemContact</name> <init>= <expr><call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemDisplayName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>isLocalNumber</name> <init>= <expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>RecipientDetails</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>systemContact</name></expr></argument>, <argument><expr><name>isLocalNumber</name></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>RecipientDetails</name></type> <name>getGroupRecipientDetails</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>GroupRecord</name></argument>&gt;</argument_list></name></type> <name>groupRecord</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>RecipientSettings</name></argument>&gt;</argument_list></name></type> <name>settings</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>asynchronous</name></decl></parameter>)</parameter_list> <block>{

    <if>if <condition>(<expr><operator>!</operator><call><name><name>groupRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>groupRecord</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGroup</name><argument_list>(<argument><expr><call><name><name>groupId</name><operator>.</operator><name>toGroupString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>settings</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>settings</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getRecipientDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getRecipientSettings</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>groupRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>String</name></type>          <name>title</name>           <init>= <expr><call><name><name>groupRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTitle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type>   <name>memberAddresses</name> <init>= <expr><call><name><name>groupRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMembers</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>members</name>         <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Long</name></type>            <name>avatarId</name>        <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>Address</name></type> <name>memberAddress</name> <range>: <expr><name>memberAddresses</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>members</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name>getRecipient</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>memberAddress</name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>asynchronous</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>groupId</name><operator>.</operator><name>isMmsGroup</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>title</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>title</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>RecipientProvider_unnamed_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>groupRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatar</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>groupRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatar</name><argument_list>()</argument_list></call><operator>.</operator><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>avatarId</name> <operator>=</operator> <call><name><name>groupRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatarId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <return>return <expr><operator>new</operator> <call><name>RecipientDetails</name><argument_list>(<argument><expr><name>title</name></expr></argument>, <argument><expr><name>avatarId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name>RecipientDetails</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>RecipientProvider_unnamed_group</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>settings</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>static</specifier> class <name>RecipientDetails</name> <block>{
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>String</name></type>                 <name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>String</name></type>                 <name>customLabel</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>Uri</name></type>                    <name>systemContactPhoto</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>Uri</name></type>                    <name>contactUri</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>Long</name></type>                   <name>groupAvatarId</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>MaterialColor</name></type>          <name>color</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>Uri</name></type>                    <name>messageRingtone</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>Uri</name></type>                    <name>callRingtone</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type>                   <name>mutedUntil</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>VibrateState</name></type>           <name>messageVibrateState</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>VibrateState</name></type>           <name>callVibrateState</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type>                <name>blocked</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>                    <name>expireMessages</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type>        <name>participants</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>String</name></type>                 <name>profileName</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type>                <name>seenInviteReminder</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type>      <name>defaultSubscriptionId</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <type><specifier>final</specifier> <name>RegisteredState</name></type>        <name>registered</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>                 <name>profileKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>String</name></type>                 <name>profileAvatar</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type>                <name>profileSharing</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type>                <name>systemContact</name></decl>;</decl_stmt>
              <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type>                <name>isLocalNumber</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>String</name></type>                 <name>notificationChannel</name></decl>;</decl_stmt>
    <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <type><specifier>final</specifier> <name>UnidentifiedAccessMode</name></type> <name>unidentifiedAccessMode</name></decl>;</decl_stmt>

    <constructor><name>RecipientDetails</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>name</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Long</name></type> <name>groupAvatarId</name></decl></parameter>,
                     <parameter><decl><type><name>boolean</name></type> <name>systemContact</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isLocalNumber</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>RecipientSettings</name></type> <name>settings</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>participants</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupAvatarId</name></name>                   <operator>=</operator> <name>groupAvatarId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>systemContactPhoto</name></name>              <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Util</name><operator>.</operator><name>uri</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getSystemContactPhotoUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customLabel</name></name>                     <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getSystemPhoneLabel</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactUri</name></name>                      <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Util</name><operator>.</operator><name>uri</name></name><argument_list>(<argument><expr><call><name><name>settings</name><operator>.</operator><name>getSystemContactUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>color</name></name>                           <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageRingtone</name></name>                 <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getMessageRingtone</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callRingtone</name></name>                    <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getCallRingtone</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mutedUntil</name></name>                      <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getMuteUntil</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageVibrateState</name></name>             <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getMessageVibrateState</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callVibrateState</name></name>                <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getCallVibrateState</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blocked</name></name>                         <operator>=</operator> <name>settings</name>     <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>isBlocked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expireMessages</name></name>                  <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getExpireMessages</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>participants</name></name>                    <operator>=</operator> <ternary><condition><expr><name>participants</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name>participants</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>profileName</name></name>                     <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getProfileName</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>seenInviteReminder</name></name>              <operator>=</operator> <name>settings</name>     <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>hasSeenInviteReminder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultSubscriptionId</name></name>           <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getDefaultSubscriptionId</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>registered</name></name>                      <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getRegistered</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>RegisteredState</name><operator>.</operator><name>UNKNOWN</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>profileKey</name></name>                      <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getProfileKey</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>profileAvatar</name></name>                   <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getProfileAvatar</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>profileSharing</name></name>                  <operator>=</operator> <name>settings</name>     <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>settings</name><operator>.</operator><name>isProfileSharing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>systemContact</name></name>                   <operator>=</operator> <name>systemContact</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isLocalNumber</name></name>                   <operator>=</operator> <name>isLocalNumber</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notificationChannel</name></name>             <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getNotificationChannel</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unidentifiedAccessMode</name></name>          <operator>=</operator> <ternary><condition><expr><name>settings</name>     <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>settings</name><operator>.</operator><name>getUnidentifiedAccessMode</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><name><name>UnidentifiedAccessMode</name><operator>.</operator><name>DISABLED</name></name></expr></else></ternary></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>name</name> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>settings</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name><name>settings</name><operator>.</operator><name>getSystemDisplayName</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else                                  <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name>name</name></expr>;</expr_stmt></block></else></if>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>RecipientCache</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>,<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name><name>SoftHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>Recipient</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

  }</block></class>

}</block></class></unit>
