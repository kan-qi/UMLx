<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\MediaPreviewActivity.java"><comment type="block">/*
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProviders</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION_CODES</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>LoaderManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>Loader</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>PagerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewPager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>GestureDetector</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>DatabaseAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>MediaView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>viewpager</name><operator>.</operator><name>ExtendedOnPageChangedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MediaDatabase</name><operator>.</operator><name>MediaRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>loaders</name><operator>.</operator><name>PagingMediaLoader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediapreview</name><operator>.</operator><name>MediaRailAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediapreview</name><operator>.</operator><name>MediaPreviewViewModel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientModifiedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>AttachmentUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DynamicLanguage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SaveAttachmentTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SaveAttachmentTask</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>WeakHashMap</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Activity for displaying media attachments in-app
 */</comment>
<class><specifier>public</specifier> class <name>MediaPreviewActivity</name> <super><extends>extends <name>PassphraseRequiredActionBarActivity</name></extends> <implements>implements <name>RecipientModifiedListener</name>,
                                                                                         <name><name>LoaderManager</name><operator>.</operator><name><name>LoaderCallbacks</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></name>,
                                                                                         <name><name>MediaRailAdapter</name><operator>.</operator><name>RailItemListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MediaPreviewActivity</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ADDRESS_EXTRA</name>        <init>= <expr><literal type="string">"address"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATE_EXTRA</name>           <init>= <expr><literal type="string">"date"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIZE_EXTRA</name>           <init>= <expr><literal type="string">"size"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CAPTION_EXTRA</name>        <init>= <expr><literal type="string">"caption"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>OUTGOING_EXTRA</name>       <init>= <expr><literal type="string">"outgoing"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LEFT_IS_RECENT_EXTRA</name> <init>= <expr><literal type="string">"left_is_recent"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>DynamicLanguage</name></type> <name>dynamicLanguage</name> <init>= <expr><operator>new</operator> <call><name>DynamicLanguage</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewPager</name></type>             <name>mediaPager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                  <name>detailsContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>              <name>caption</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                  <name>captionContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type>          <name>albumRail</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>MediaRailAdapter</name></type>      <name>albumRailAdapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>             <name>playbackControlsContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Uri</name></type>                   <name>initialMediaUri</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>                <name>initialMediaType</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>                  <name>initialMediaSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>                <name>initialCaption</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Recipient</name></type>             <name>conversationRecipient</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>               <name>leftIsRecent</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>GestureDetector</name></type>       <name>clickDetector</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>MediaPreviewViewModel</name></type> <name>viewModel</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>restartItem</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>


  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ConstantConditions"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>ready</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setTheme</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>style</name><operator>.</operator><name>TextSecure_DarkTheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>viewModel</name> <operator>=</operator> <call><name><name>ViewModelProviders</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><name><name>MediaPreviewViewModel</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setFullscreenIfPossible</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFlags</name><argument_list>(<argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_FULLSCREEN</name></name></expr></argument>,
                         <argument><expr><name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_FULLSCREEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDisplayHomeAsUpEnabled</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setContentView</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>media_preview_activity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initializeViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeObservers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>dispatchTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>ev</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>clickDetector</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>dispatchTouchEvent</name></name><argument_list>(<argument><expr><name>ev</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRequestPermissionsResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>permissions</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>int</name><index>[]</index></name></type> <name>grantResults</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>onRequestPermissionsResult</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>permissions</name></expr></argument>, <argument><expr><name>grantResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>setFullscreenIfPossible</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDecorView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSystemUiVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>SYSTEM_UI_FLAG_FULLSCREEN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onModified</name><parameter_list>(<parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>initializeActionBar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRailItemClicked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>distanceFromActive</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><call><name><name>mediaPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>distanceFromActive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRailItemDeleteClicked</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>distanceFromActive</name></decl></parameter>)</parameter_list> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Callback unsupported."</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ConstantConditions"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>initializeActionBar</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>MediaItem</name></type> <name>mediaItem</name> <init>= <expr><call><name>getCurrentMediaItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>mediaItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>CharSequence</name></type> <name>relativeTimeSpan</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name><name>mediaItem</name><operator>.</operator><name>date</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>relativeTimeSpan</name> <operator>=</operator> <call><name><name>DateUtils</name><operator>.</operator><name>getExtendedRelativeTimeSpanString</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>,<argument><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>getCurrentLocale</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>mediaItem</name><operator>.</operator><name>date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>relativeTimeSpan</name> <operator>=</operator> <call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_draft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <if>if      <condition>(<expr><name><name>mediaItem</name><operator>.</operator><name>outgoing</name></name></expr>)</condition><then>          <block type="pseudo"><expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_you</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><name><name>mediaItem</name><operator>.</operator><name>recipient</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><call><name><name>mediaItem</name><operator>.</operator><name>recipient</name><operator>.</operator><name>toShortString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <else>else                                  <block type="pseudo"><expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTitle</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

      <expr_stmt><expr><call><name>getSupportActionBar</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSubtitle</name><argument_list>(<argument><expr><name>relativeTimeSpan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>dynamicLanguage</name><operator>.</operator><name>onResume</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>restartItem</name> <operator>=</operator> <call><name>cleanupMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onNewIntent</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onNewIntent</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setIntent</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeViews</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>mediaPager</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setOffscreenPageLimit</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>addOnPageChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ViewPagerListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>albumRail</name>        <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview_album_rail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>albumRailAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>MediaRailAdapter</name><argument_list>(<argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>albumRail</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>LinearLayoutManager</name><operator>.</operator><name>HORIZONTAL</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>albumRail</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>albumRailAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>detailsContainer</name>          <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview_details_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>caption</name>                   <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview_caption</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>captionContainer</name>          <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview_caption_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>playbackControlsContainer</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview_playback_controls_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeResources</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Address</name></type> <name>address</name> <init>= <expr><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><name>ADDRESS_EXTRA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>initialMediaUri</name>  <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>initialMediaType</name> <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>initialMediaSize</name> <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLongExtra</name><argument_list>(<argument><expr><name>SIZE_EXTRA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>initialCaption</name>   <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringExtra</name><argument_list>(<argument><expr><name>CAPTION_EXTRA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>leftIsRecent</name>     <operator>=</operator> <call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBooleanExtra</name><argument_list>(<argument><expr><name>LEFT_IS_RECENT_EXTRA</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>restartItem</name>      <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>conversationRecipient</name> <operator>=</operator> <call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>conversationRecipient</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeObservers</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>getPreviewData</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>previewData</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>previewData</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>mediaPager</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>mediaPager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>View</name></type> <name>playbackControls</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MediaItemAdapter</name><operator>)</operator> <call><name><name>mediaPager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getPlaybackControls</name><argument_list>(<argument><expr><call><name><name>mediaPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>previewData</name><operator>.</operator><name>getAlbumThumbnails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>previewData</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>playbackControls</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>detailsContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>detailsContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name><name>albumRail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>previewData</name><operator>.</operator><name>getAlbumThumbnails</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>albumRailAdapter</name><operator>.</operator><name>setMedia</name></name><argument_list>(<argument><expr><call><name><name>previewData</name><operator>.</operator><name>getAlbumThumbnails</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>previewData</name><operator>.</operator><name>getActivePosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>albumRail</name><operator>.</operator><name>smoothScrollToPosition</name></name><argument_list>(<argument><expr><call><name><name>previewData</name><operator>.</operator><name>getActivePosition</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>captionContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>previewData</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>caption</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>previewData</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>playbackControls</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name><argument_list>(<argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>playbackControls</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>playbackControlsContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>playbackControlsContainer</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>playbackControls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>playbackControlsContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>clickDetector</name> <operator>=</operator> <operator>new</operator> <call><name>GestureDetector</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>GestureDetector</name><operator>.</operator><name>SimpleOnGestureListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>onSingleTapUp</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>detailsContainer</name><operator>.</operator><name>getTop</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>detailsContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>detailsContainer</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>onSingleTapUp</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeMedia</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isContentTypeSupported</name><argument_list>(<argument><expr><name>initialMediaType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Unsupported media type sent to MediaPreviewActivity, finishing."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_unssuported_media_type</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Loading Part URI: "</literal> <operator>+</operator> <name>initialMediaUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>conversationRecipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getSupportLoaderManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>restartLoader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SingleItemPagerAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>initialMediaUri</name></expr></argument>, <argument><expr><name>initialMediaType</name></expr></argument>, <argument><expr><name>initialMediaSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>initialCaption</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>detailsContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>captionContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>caption</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>initialCaption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>cleanupMedia</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>restartItem</name> <init>= <expr><call><name><name>mediaPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>restartItem</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>showOverview</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>MediaOverviewActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaOverviewActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>conversationRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>forward</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>MediaItem</name></type> <name>mediaItem</name> <init>= <expr><call><name>getCurrentMediaItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>mediaItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>composeIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>ShareActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>, <argument><expr><name><name>mediaItem</name><operator>.</operator><name>uri</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>mediaItem</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>composeIntent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"CodeBlock2Expr"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"InlinedApi"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>saveToDisk</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>MediaItem</name></type> <name>mediaItem</name> <init>= <expr><call><name>getCurrentMediaItem</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>mediaItem</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>SaveAttachmentTask</name><operator>.</operator><name>showWarningDialog</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
                   <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_signal_needs_the_storage_permission_in_order_to_write_to_external_storage_but_it_has_been_permanently_denied</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>onAnyDenied</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_unable_to_write_to_external_storage_without_permission</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                     <expr><name>SaveAttachmentTask</name> <name>saveTask</name> <operator>=</operator> <operator>new</operator> <call><name>SaveAttachmentTask</name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
                     <decl_stmt><decl><type><name>long</name></type> <name>saveDate</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>mediaItem</name><operator>.</operator><name>date</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>mediaItem</name><operator>.</operator><name>date</name></name></expr> </then><else>: <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
                     <expr_stmt><expr><call><name><name>saveTask</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name><name>mediaItem</name><operator>.</operator><name>uri</name></name></expr></argument>, <argument><expr><name><name>mediaItem</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>saveDate</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   }</block></lambda></expr></argument>)</argument_list></call>
                   <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>)</block>;</function>
    }</block></class>
  }

  @<expr_stmt><expr><call><name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></call>
  <specifier>private</specifier> <name>void</name> <call><name>deleteMedia</name><argument_list>()</argument_list></call> <block>{
    <expr><name>MediaItem</name> <name>mediaItem</name> <operator>=</operator> <call><name>getCurrentMediaItem</name><argument_list>()</argument_list></call></expr>;
    <if>if <condition>(<expr><name>mediaItem</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name><name>mediaItem</name><operator>.</operator><name>attachment</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    <expr_stmt/></block></then></if>}</block>

    <name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name> <name>builder</name> <operator>=</operator> <operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setIconAttribute</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>dialog_alert_icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_media_delete_confirmation_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MediaPreviewActivity_media_delete_confirmation_message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>which</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>voids</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name><name>mediaItem</name><operator>.</operator><name>attachment</name></name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <return>return <expr><literal type="null">null</literal></expr>;</return>
          }</block></then></if>
          <expr_stmt><expr><call><name><name>AttachmentUtil</name><operator>.</operator><name>deleteAttachment</name></name><argument_list>(<argument><expr><call><name><name>MediaPreviewActivity</name><operator>.</operator><name>this</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>,
                                          <argument><expr><name><name>mediaItem</name><operator>.</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>
      }</block></class><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }

  @<function><type><name>Override</name>
  <specifier>public</specifier> <name>boolean</name></type> <name>onPrepareOptionsMenu</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPrepareOptionsMenu</name></name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getMenuInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>media_preview</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name>isMediaInDb</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview__overview</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>delete</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onOptionsItemSelected</name><parameter_list>(<parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onOptionsItemSelected</name></name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview__overview</name></name></expr>:</case> <expr_stmt><expr><call><name>showOverview</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_preview__forward</name></name></expr>:</case>  <expr_stmt><expr><call><name>forward</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>save</name></name></expr>:</case>                    <expr_stmt><expr><call><name>saveToDisk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>   <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>delete</name></name></expr>:</case>                  <expr_stmt><expr><call><name>deleteMedia</name><argument_list>()</argument_list></call></expr>;</expr_stmt>  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      <case>case <expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>home</name></name></expr>:</case>            <expr_stmt><expr><call><name>finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>       <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></switch>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isMediaInDb</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>conversationRecipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>MediaItem</name></type> <name>getCurrentMediaItem</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>MediaItemAdapter</name></type> <name>adapter</name> <init>= <expr><operator>(</operator><name>MediaItemAdapter</name><operator>)</operator><call><name><name>mediaPager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>adapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>adapter</name><operator>.</operator><name>getMediaItemFor</name></name><argument_list>(<argument><expr><call><name><name>mediaPager</name><operator>.</operator><name>getCurrentItem</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isContentTypeSupported</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>contentType</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>contentType</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"image/"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>contentType</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"video/"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>onCreateLoader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>PagingMediaLoader</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>conversationRecipient</name></expr></argument>, <argument><expr><name>initialMediaUri</name></expr></argument>, <argument><expr><name>leftIsRecent</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onLoadFinished</name><parameter_list>(<parameter><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loader</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ConstantConditions"</literal></expr></argument>)</argument_list></annotation>
      <type><name>CursorPagerAdapter</name></type> <name>adapter</name> <init>= <expr><operator>new</operator> <call><name>CursorPagerAdapter</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>getWindow</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name>leftIsRecent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setActive</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>setCursor</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name>leftIsRecent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>restartItem</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else                 <block type="pseudo"><expr_stmt><expr><call><name><name>mediaPager</name><operator>.</operator><name>setCurrentItem</name></name><argument_list>(<argument><expr><name>restartItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onLoaderReset</name><parameter_list>(<parameter><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>loader</name></decl></parameter>)</parameter_list> <block>{

  }</block></function>

  <class><specifier>private</specifier> class <name>ViewPagerListener</name> <super><extends>extends <name>ExtendedOnPageChangedListener</name></extends></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageSelected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPageSelected</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MediaItemAdapter</name></type> <name>adapter</name> <init>= <expr><operator>(</operator><name>MediaItemAdapter</name><operator>)</operator><call><name><name>mediaPager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>adapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MediaItem</name></type> <name>item</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getMediaItemFor</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>recipient</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>recipient</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>viewModel</name><operator>.</operator><name>setActiveAlbumRailItem</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>initializeActionBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onPageUnselected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>MediaItemAdapter</name></type> <name>adapter</name> <init>= <expr><operator>(</operator><name>MediaItemAdapter</name><operator>)</operator><call><name><name>mediaPager</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>adapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MediaItem</name></type> <name>item</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>getMediaItemFor</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>item</name><operator>.</operator><name>recipient</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>item</name><operator>.</operator><name>recipient</name><operator>.</operator><name>removeListener</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>pause</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SingleItemPagerAdapter</name> <super><extends>extends <name>PagerAdapter</name></extends> <implements>implements <name>MediaItemAdapter</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>GlideRequests</name></type> <name>glideRequests</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Window</name></type>        <name>window</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Uri</name></type>           <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>        <name>mediaType</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>          <name>size</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LayoutInflater</name></type> <name>inflater</name></decl>;</decl_stmt>

    <constructor><name>SingleItemPagerAdapter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>,
                           <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>mediaType</name></decl></parameter>,
                           <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>glideRequests</name></name> <operator>=</operator> <name>glideRequests</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>window</name></name>        <operator>=</operator> <name>window</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name>           <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaType</name></name>     <operator>=</operator> <name>mediaType</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name>          <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inflater</name></name>      <operator>=</operator> <call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>isViewFromObject</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name>view</name> <operator>==</operator> <name>object</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Object</name></type> <name>instantiateItem</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>View</name></type>      <name>itemView</name>  <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>media_view_page</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MediaView</name></type> <name>mediaView</name> <init>= <expr><call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{
        <expr_stmt><expr><call><name><name>mediaView</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>itemView</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>destroyItem</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>MediaView</name></type> <name>mediaView</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FrameLayout</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mediaView</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>removeView</name></name><argument_list>(<argument><expr><operator>(</operator><name>FrameLayout</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>MediaItem</name></type> <name>getMediaItemFor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>MediaItem</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mediaType</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>pause</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{

    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>View</name></type> <name>getPlaybackControls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>CursorPagerAdapter</name> <super><extends>extends <name>PagerAdapter</name></extends> <implements>implements <name>MediaItemAdapter</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakHashMap</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>MediaView</name></argument>&gt;</argument_list></name></type> <name>mediaViews</name> <init>= <expr><operator>new</operator> <call><name><name>WeakHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>       <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>GlideRequests</name></type> <name>glideRequests</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Window</name></type>        <name>window</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Cursor</name></type>        <name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>       <name>leftIsRecent</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>active</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>autoPlayPosition</name></decl>;</decl_stmt>

    <constructor><name>CursorPagerAdapter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>,
                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Window</name></type> <name>window</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>autoPlayPosition</name></decl></parameter>,
                       <parameter><decl><type><name>boolean</name></type> <name>leftIsRecent</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>          <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>glideRequests</name></name>    <operator>=</operator> <name>glideRequests</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>window</name></name>           <operator>=</operator> <name>window</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cursor</name></name>           <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>autoPlayPosition</name></name> <operator>=</operator> <name>autoPlayPosition</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>leftIsRecent</name></name>     <operator>=</operator> <name>leftIsRecent</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>setActive</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>active</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
      <else>else         <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>isViewFromObject</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name>view</name> <operator>==</operator> <name>object</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Object</name></type> <name>instantiateItem</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>View</name></type>      <name>itemView</name>       <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>media_view_page</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>MediaView</name></type> <name>mediaView</name>      <init>= <expr><call><name><name>itemView</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>   <name>autoplay</name>       <init>= <expr><name>position</name> <operator>==</operator> <name>autoPlayPosition</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>       <name>cursorPosition</name> <init>= <expr><call><name>getCursorPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>autoPlayPosition</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToPosition</name></name><argument_list>(<argument><expr><name>cursorPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>MediaRecord</name></type> <name>mediaRecord</name> <init>= <expr><call><name><name>MediaRecord</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{
        <comment type="line">//noinspection ConstantConditions</comment>
        <expr_stmt><expr><call><name><name>mediaView</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>window</name></expr></argument>, <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call></expr></argument>,
                      <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContentType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>autoplay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <expr_stmt><expr><call><name><name>mediaViews</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>, <argument><expr><name>mediaView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>itemView</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>destroyItem</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>object</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>MediaView</name></type> <name>mediaView</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FrameLayout</name><operator>)</operator><name>object</name><operator>)</operator><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>media_view</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mediaView</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>mediaViews</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>removeView</name></name><argument_list>(<argument><expr><operator>(</operator><name>FrameLayout</name><operator>)</operator><name>object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>MediaItem</name></type> <name>getMediaItemFor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>moveToPosition</name></name><argument_list>(<argument><expr><call><name>getCursorPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>MediaRecord</name></type> <name>mediaRecord</name> <init>= <expr><call><name><name>MediaRecord</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Address</name></type>     <name>address</name>     <init>= <expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw></block></then></if>

      <return>return <expr><operator>new</operator> <call><name>MediaItem</name><argument_list>(<argument><expr><ternary><condition><expr><name>address</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                           <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>getDate</name></name><argument_list>()</argument_list></call></expr></argument>,
                           <argument><expr><call><name><name>mediaRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>pause</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>MediaView</name></type> <name>mediaView</name> <init>= <expr><call><name><name>mediaViews</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>mediaView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaView</name><operator>.</operator><name>pause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>View</name></type> <name>getPlaybackControls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>MediaView</name></type> <name>mediaView</name> <init>= <expr><call><name><name>mediaViews</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>mediaView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>mediaView</name><operator>.</operator><name>getPlaybackControls</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>getCursorPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>leftIsRecent</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>position</name></expr>;</return></block></then>
      <else>else              <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>position</name></expr>;</return></block></else></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>MediaItem</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Recipient</name></type>          <name>recipient</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>DatabaseAttachment</name></type> <name>attachment</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>Uri</name></type>                <name>uri</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>String</name></type>             <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier>           <name>long</name></type>               <name>date</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier>           <name>boolean</name></type>            <name>outgoing</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>MediaItem</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>DatabaseAttachment</name></type> <name>attachment</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>type</name></decl></parameter>,
                      <parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>,
                      <parameter><decl><type><name>boolean</name></type> <name>outgoing</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name>  <operator>=</operator> <name>recipient</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachment</name></name> <operator>=</operator> <name>attachment</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>uri</name></name>        <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name>       <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>date</name></name>       <operator>=</operator> <name>date</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outgoing</name></name>   <operator>=</operator> <name>outgoing</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <interface>interface <name>MediaItemAdapter</name> <block>{
    <function_decl><type><name>MediaItem</name></type> <name>getMediaItemFor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>pause</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><annotation>@<name>Nullable</name></annotation> <type><name>View</name></type> <name>getPlaybackControls</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}
</unit>
