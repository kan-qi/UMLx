<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\ConfirmIdentityDialog.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>method</name><operator>.</operator><name>LinkMovementMethod</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>storage</name><operator>.</operator><name>TextSecureIdentityKeyStore</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>PushDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>PushDecryptJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>MessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>VerifySpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>SignalProtocolAddress</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>api</name><operator>.</operator><name>messages</name><operator>.</operator><name>SignalServiceEnvelope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>signalservice</name><operator>.</operator><name>internal</name><operator>.</operator><name>push</name><operator>.</operator><name>SignalServiceProtos</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>SessionCipher</name><operator>.</operator><name>SESSION_LOCK</name></name>;</import>

<class><specifier>public</specifier> class <name>ConfirmIdentityDialog</name> <super><extends>extends <name>AlertDialog</name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ConfirmIdentityDialog</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>OnClickListener</name></type> <name>callback</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ConfirmIdentityDialog</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>,
                               <parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>,
                               <parameter><decl><type><name>IdentityKeyMismatch</name></type> <name>mismatch</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Recipient</name></type>       <name>recipient</name>       <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>          <name>name</name>            <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>toShortString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>          <name>introduction</name>    <init>= <expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConfirmIdentityDialog_your_safety_number_with_s_has_changed</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SpannableString</name></type> <name>spannableString</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>introduction</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator>
                                                            <call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConfirmIdentityDialog_you_may_wish_to_verify_your_safety_number_with_this_contact</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>spannableString</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>VerifySpan</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mismatch</name></expr></argument>)</argument_list></call></expr></argument>,
                              <argument><expr><call><name><name>introduction</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>spannableString</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>,
                              <argument><expr><name><name>Spanned</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setTitle</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setMessage</name><argument_list>(<argument><expr><name>spannableString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setButton</name><argument_list>(<argument><expr><name><name>AlertDialog</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConfirmIdentityDialog_accept</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>AcceptListener</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>mismatch</name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setButton</name><argument_list>(<argument><expr><name><name>AlertDialog</name><operator>.</operator><name>BUTTON_NEGATIVE</name></name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>)</argument_list></call></expr></argument>,               <argument><expr><operator>new</operator> <call><name>CancelListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>show</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>TextView</name><operator>)</operator><call><name><name>this</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>message</name></name></expr></argument>)</argument_list></call><operator>)</operator>
                   <operator>.</operator><call><name>setMovementMethod</name><argument_list>(<argument><expr><call><name><name>LinkMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setCallback</name><parameter_list>(<parameter><decl><type><name>OnClickListener</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>callback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>AcceptListener</name> <super><implements>implements <name>OnClickListener</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MessageRecord</name></type>       <name>messageRecord</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>IdentityKeyMismatch</name></type> <name>mismatch</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Address</name></type>             <name>address</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AcceptListener</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>, <parameter><decl><type><name>IdentityKeyMismatch</name></type> <name>mismatch</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageRecord</name></name> <operator>=</operator> <name>messageRecord</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mismatch</name></name>      <operator>=</operator> <name>mismatch</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name>       <operator>=</operator> <name>address</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
    <annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list>
      <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
          <synchronized>synchronized <init>(<expr><name>SESSION_LOCK</name></expr>)</init> <block>{
            <decl_stmt><decl><type><name>SignalProtocolAddress</name></type>      <name>mismatchAddress</name>  <init>= <expr><operator>new</operator> <call><name>SignalProtocolAddress</name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>TextSecureIdentityKeyStore</name></type> <name>identityKeyStore</name> <init>= <expr><operator>new</operator> <call><name>TextSecureIdentityKeyStore</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>identityKeyStore</name><operator>.</operator><name>saveIdentity</name></name><argument_list>(<argument><expr><name>mismatchAddress</name></expr></argument>, <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></synchronized>

          <expr_stmt><expr><call><name>processMessageRecord</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>processPendingMessageRecords</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mismatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>processMessageRecord</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>processOutgoingMessageRecord</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
          <else>else                            <block type="pseudo"><expr_stmt><expr><call><name>processIncomingMessageRecord</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>processPendingMessageRecords</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>IdentityKeyMismatch</name></type> <name>mismatch</name></decl></parameter>)</parameter_list> <block>{
          <decl_stmt><decl><type><name>MmsSmsDatabase</name></type>        <name>mmsSmsDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Cursor</name></type>                <name>cursor</name>         <init>= <expr><call><name><name>mmsSmsDatabase</name><operator>.</operator><name>getIdentityConflictMessagesForThread</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>MmsSmsDatabase</name><operator>.</operator><name>Reader</name></name></type> <name>reader</name>         <init>= <expr><call><name><name>mmsSmsDatabase</name><operator>.</operator><name>readerFor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>MessageRecord</name></type>         <name>record</name></decl>;</decl_stmt>

          <try>try <block>{
            <while>while <condition>(<expr><operator>(</operator><name>record</name> <operator>=</operator> <call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition> <block>{
              <for>for <control>(<init><decl><type><name>IdentityKeyMismatch</name></type> <name>recordMismatch</name> <range>: <expr><call><name><name>record</name><operator>.</operator><name>getIdentityKeyMismatches</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><call><name><name>mismatch</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>recordMismatch</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                  <expr_stmt><expr><call><name>processMessageRecord</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
              }</block></for>
            }</block></while>
          }</block> <finally>finally <block>{
            <if>if <condition>(<expr><name>reader</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
              <block type="pseudo"><expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
          }</block></finally></try>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>processOutgoingMessageRecord</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
          <decl_stmt><decl><type><name>SmsDatabase</name></type>        <name>smsDatabase</name>        <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>MmsDatabase</name></type>        <name>mmsDatabase</name>        <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mmsDatabase</name><operator>.</operator><name>removeMismatchedIdentity</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPushGroupRecipient</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>MessageSender</name><operator>.</operator><name>resendGroupMessage</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
              <expr_stmt><expr><call><name><name>MessageSender</name><operator>.</operator><name>resend</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>smsDatabase</name><operator>.</operator><name>removeMismatchedIdentity</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>MessageSender</name><operator>.</operator><name>resend</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></function>

        <function><specifier>private</specifier> <type><name>void</name></type> <name>processIncomingMessageRecord</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>PushDatabase</name></type> <name>pushDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getPushDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SmsDatabase</name></type>  <name>smsDatabase</name>  <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>smsDatabase</name><operator>.</operator><name>removeMismatchedIdentity</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                 <argument><expr><call><name><name>mismatch</name><operator>.</operator><name>getIdentityKey</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>boolean</name></type> <name>legacy</name> <init>= <expr><operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isContentBundleKeyExchange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>SignalServiceEnvelope</name></type> <name>envelope</name> <init>= <expr><operator>new</operator> <call><name>SignalServiceEnvelope</name><argument_list>(<argument><expr><name><name>SignalServiceProtos</name><operator>.</operator><name>Envelope</name><operator>.</operator><name>Type</name><operator>.</operator><name>PREKEY_BUNDLE_VALUE</name></name></expr></argument>,
                                                                       <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPhoneString</name><argument_list>()</argument_list></call></expr></argument>,
                                                                       <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getRecipientDeviceId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                       <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getDateSent</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                                       <argument><expr><ternary><condition><expr><name>legacy</name></expr> ?</condition><then> <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                                                       <argument><expr><ternary><condition><expr><operator>!</operator><name>legacy</name></expr> ?</condition><then> <expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                                                       <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>long</name></type> <name>pushId</name> <init>= <expr><call><name><name>pushDatabase</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>envelope</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                              <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PushDecryptJob</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pushId</name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
          }</block></catch></try>
        }</block></function>

      }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>CancelListener</name> <super><implements>implements <name>OnClickListener</name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>callback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
  }</block></class>

}</block></class>
</unit>
