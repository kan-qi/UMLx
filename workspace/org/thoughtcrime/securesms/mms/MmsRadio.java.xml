<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\MmsRadio.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>NetworkInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>

<class><specifier>public</specifier> class <name>MmsRadio</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MmsRadio</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>MmsRadio</name></type> <name>instance</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <specifier>synchronized</specifier> <type><name>MmsRadio</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>MmsRadio</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>instance</name></expr>;</return>
  }</block></function>

  <comment type="line">///</comment>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FEATURE_ENABLE_MMS</name> <init>= <expr><literal type="string">"enableMMS"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>APN_ALREADY_ACTIVE</name>    <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_MOBILE_MMS</name>       <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ConnectivityManager</name></type>   <name>connectivityManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ConnectivityListener</name></type>  <name>connectivityListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name></type> <name>wakeLock</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>connectedCounter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>MmsRadio</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>PowerManager</name></type> <name>powerManager</name> <init>= <expr><operator>(</operator><name>PowerManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>POWER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>             <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>connectivityManager</name></name> <operator>=</operator> <operator>(</operator><name>ConnectivityManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CONNECTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>wakeLock</name></name>            <operator>=</operator> <call><name><name>powerManager</name><operator>.</operator><name>newWakeLock</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>PARTIAL_WAKE_LOCK</name></name></expr></argument>, <argument><expr><literal type="string">"MMS Connection"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>wakeLock</name><operator>.</operator><name>setReferenceCounted</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>disconnect</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"MMS Radio Disconnect Called..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>connectedCounter</name><operator>--</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Reference count: "</literal> <operator>+</operator> <name>connectedCounter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>connectedCounter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Turning off MMS radio..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type> <name>stopUsingNetworkFeatureMethod</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"stopUsingNetworkFeature"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>stopUsingNetworkFeatureMethod</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>connectivityManager</name></expr></argument>, <argument><expr><name><name>ConnectivityManager</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr></argument>, <argument><expr><name>FEATURE_ENABLE_MMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>nsme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>iae</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>iae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>ite</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
      
      <if>if <condition>(<expr><name>connectivityListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Unregistering receiver..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>unregisterReceiver</name></name><argument_list>(<argument><expr><name>connectivityListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>connectivityListener</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>connect</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>MmsRadioException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>status</name></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type> <name>startUsingNetworkFeatureMethod</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"startUsingNetworkFeature"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>status</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>startUsingNetworkFeatureMethod</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>connectivityManager</name></expr></argument>, <argument><expr><name><name>ConnectivityManager</name><operator>.</operator><name>TYPE_MOBILE</name></name></expr></argument>, <argument><expr><name>FEATURE_ENABLE_MMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>MmsRadioException</name><argument_list>(<argument><expr><name>nsme</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>iae</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>MmsRadioException</name><argument_list>(<argument><expr><name>iae</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>ite</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>MmsRadioException</name><argument_list>(<argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"startUsingNetworkFeature status: "</literal> <operator>+</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>APN_ALREADY_ACTIVE</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>connectedCounter</name><operator>++</operator></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>wakeLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>connectedCounter</name><operator>++</operator></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>connectivityListener</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>IntentFilter</name></type> <name>filter</name>  <init>= <expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name><name>ConnectivityManager</name><operator>.</operator><name>CONNECTIVITY_ACTION</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>connectivityListener</name> <operator>=</operator> <operator>new</operator> <call><name>ConnectivityListener</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>registerReceiver</name></name><argument_list>(<argument><expr><name>connectivityListener</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="number">30000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name>isConnected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got back from connectivity wait, and not connected..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>disconnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <throw>throw <expr><operator>new</operator> <call><name>MmsRadioException</name><argument_list>(<argument><expr><literal type="string">"Unable to successfully enable MMS radio."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isConnected</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>NetworkInfo</name></type> <name>info</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getNetworkInfo</name></name><argument_list>(<argument><expr><name>TYPE_MOBILE_MMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Connected: "</literal> <operator>+</operator> <name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>(</operator><name>info</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><call><name><name>info</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>TYPE_MOBILE_MMS</name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name><name>info</name><operator>.</operator><name>isConnected</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isConnectivityPossible</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>NetworkInfo</name></type> <name>networkInfo</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getNetworkInfo</name></name><argument_list>(<argument><expr><name>TYPE_MOBILE_MMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>networkInfo</name> <operator>!=</operator> <literal type="null">null</literal>  <operator>&amp;&amp;</operator> <call><name><name>networkInfo</name><operator>.</operator><name>isAvailable</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isConnectivityFailure</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>NetworkInfo</name></type> <name>networkInfo</name> <init>= <expr><call><name><name>connectivityManager</name><operator>.</operator><name>getNetworkInfo</name></name><argument_list>(<argument><expr><name>TYPE_MOBILE_MMS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>networkInfo</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>networkInfo</name><operator>.</operator><name>getDetailedState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>NetworkInfo</name><operator>.</operator><name>DetailedState</name><operator>.</operator><name>FAILED</name></name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>issueConnectivityChange</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isConnected</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Notifying connected..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name>isConnected</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>isConnectivityFailure</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>isConnectivityPossible</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Notifying not connected..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
  }</block></function>

  <class><specifier>private</specifier> class <name>ConnectivityListener</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got connectivity change..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>issueConnectivityChange</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>


}</block></class>
</unit>
