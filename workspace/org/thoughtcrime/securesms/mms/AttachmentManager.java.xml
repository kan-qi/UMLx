<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\AttachmentManager.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>MediaStore</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>OpenableColumns</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>TransportOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name><operator>.</operator><name>MediaSendActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>GooglePlayServicesNotAvailableException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>common</name><operator>.</operator><name>GooglePlayServicesRepairableException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>gms</name><operator>.</operator><name>location</name><operator>.</operator><name>places</name><operator>.</operator><name>ui</name><operator>.</operator><name>PlacePicker</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>MediaPreviewActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>AudioView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>DocumentView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>RemovableEditableMediaView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ThumbnailView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>location</name><operator>.</operator><name>SignalMapView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>location</name><operator>.</operator><name>SignalPlace</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>giph</name><operator>.</operator><name>ui</name><operator>.</operator><name>GiphyActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>ScribbleActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ThemeUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>AssertedSuccessListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name><operator>.</operator><name>Listener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>views</name><operator>.</operator><name>Stub</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>


<class><specifier>public</specifier> class <name>AttachmentManager</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>AttachmentManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Context</name></type>                    <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>Stub</name><argument_list type="generic">&lt;<argument><name>View</name></argument>&gt;</argument_list></name></type>                 <name>attachmentViewStub</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>AttachmentListener</name></type>         <name>attachmentListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>RemovableEditableMediaView</name></type> <name>removableMediaView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ThumbnailView</name></type>              <name>thumbnail</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>AudioView</name></type>                  <name>audioView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>DocumentView</name></type>               <name>documentView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SignalMapView</name></type>              <name>mapView</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type>       <name>garbage</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slide</name>   <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type>             <name>captureUri</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AttachmentManager</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>            <operator>=</operator> <name>activity</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachmentListener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachmentViewStub</name></name> <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findStubById</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachment_editor_stub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>inflateStub</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>attachmentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>View</name></type> <name>root</name> <init>= <expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>thumbnail</name></name>          <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachment_thumbnail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioView</name></name>          <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachment_audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>documentView</name></name>       <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachment_document</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mapView</name></name>            <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>attachment_location</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>removableMediaView</name></name> <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>removable_media_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>removableMediaView</name><operator>.</operator><name>setRemoveClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RemoveButtonListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>removableMediaView</name><operator>.</operator><name>setEditClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>EditButtonListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThumbnailClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>documentView</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><call><name><name>ThemeUtil</name><operator>.</operator><name>getThemedColor</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>conversation_item_bubble_background</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>animate</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{

      <if>if <condition>(<expr><name>animate</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
          <function><annotation>@<name>Override</name></annotation>
          <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>Boolean</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>attachmentListener</name><operator>.</operator><name>onAttachmentChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></function>

          <function><annotation>@<name>Override</name></annotation>
          <specifier>public</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          }</block></function>
        }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attachmentListener</name><operator>.</operator><name>onAttachmentChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name>markGarbage</name><argument_list>(<argument><expr><call><name>getSlideUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>slide</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>audioView</name><operator>.</operator><name>cleanup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>cleanup</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>captureUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><call><name>getSlideUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>captureUri</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>slide</name>      <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Uri</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>garbage</name><operator>.</operator><name>listIterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>cleanup</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>PersistentBlobProvider</name><operator>.</operator><name>isAuthority</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"cleaning up "</literal> <operator>+</operator> <name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>markGarbage</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>PersistentBlobProvider</name><operator>.</operator><name>isAuthority</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Marking garbage that needs cleaning: "</literal> <operator>+</operator> <name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>garbage</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setSlide</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>getSlideUri</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><call><name>getSlideUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>captureUri</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>captureUri</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>cleanup</name><argument_list>(<argument><expr><name>captureUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>captureUri</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slide</name></name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setLocation</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>SignalPlace</name></type> <name>place</name></decl></parameter>,
                                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>MediaConstraints</name></type> <name>constraints</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>inflateStub</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type>  <name>returnResult</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>future</name>       <init>= <expr><call><name><name>mapView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>place</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>removableMediaView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>mapView</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AssertedSuccessListener</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Bitmap</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>        <name>blob</name>          <init>= <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>toByteArray</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Uri</name></type>           <name>uri</name>           <init>= <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                                                            <operator>.</operator><call><name>create</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>blob</name></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_PNG</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LocationSlide</name></type> <name>locationSlide</name> <init>= <expr><operator>new</operator> <call><name>LocationSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name><name>blob</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>place</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>setSlide</name><argument_list>(<argument><expr><name>locationSlide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attachmentListener</name><operator>.</operator><name>onAttachmentChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>returnResult</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>returnResult</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>,
                                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>Uri</name></type> <name>uri</name></decl></parameter>,
                                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>MediaType</name></type> <name>mediaType</name></decl></parameter>,
                                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>MediaConstraints</name></type> <name>constraints</name></decl></parameter>,
                                                     <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name></decl></parameter>,
                                                     <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>inflateStub</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Slide</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPreExecute</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>showProgressSpinner</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Slide</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
          <if>if <condition>(<expr><call><name><name>PartAuthority</name><operator>.</operator><name>isLocalUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name>getManuallyCalculatedSlideInfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>Slide</name></type> <name>result</name> <init>= <expr><call><name>getContentResolverSlideInfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>result</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getManuallyCalculatedSlideInfo</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
            <else>else                <block type="pseudo"><return>return <expr><name>result</name></expr>;</return></block></else></if>
          }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>slide</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                         <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationActivity_sorry_there_was_an_error_setting_your_attachment</name></name></expr></argument>,
                         <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name>areConstraintsSatisfied</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>, <argument><expr><name>constraints</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>,
                         <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationActivity_attachment_exceeds_size_limits</name></name></expr></argument>,
                         <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
          <expr_stmt><expr><call><name>setSlide</name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasAudio</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>audioView</name><operator>.</operator><name>setAudio</name></name><argument_list>(<argument><expr><operator>(</operator><name>AudioSlide</name><operator>)</operator> <name>slide</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>removableMediaView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>audioView</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasDocument</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>documentView</name><operator>.</operator><name>setDocument</name></name><argument_list>(<argument><expr><operator>(</operator><name>DocumentSlide</name><operator>)</operator> <name>slide</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>removableMediaView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>documentView</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if></elseif> <else>else <block>{
            <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>deferTo</name></name><argument_list>(<argument><expr><call><name><name>thumbnail</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>removableMediaView</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>thumbnail</name></expr></argument>, <argument><expr><name>mediaType</name> <operator>==</operator> <name><name>MediaType</name><operator>.</operator><name>IMAGE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>

          <expr_stmt><expr><call><name><name>attachmentListener</name><operator>.</operator><name>onAttachmentChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></function>

      <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Slide</name></type> <name>getContentResolverSlideInfo</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>   <name>start</name>  <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>OpenableColumns</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type>   <name>fileSize</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>OpenableColumns</name><operator>.</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dimens</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getDimensions</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name>width</name>  <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"remote slide with size "</literal> <operator>+</operator> <name>fileSize</name> <operator>+</operator> <literal type="string">" took "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator> <operator>+</operator> <literal type="string">"ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><call><name><name>mediaType</name><operator>.</operator><name>createSlide</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>fileSize</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>
        }</block> <finally>finally <block>{
          <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></function>

      <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Slide</name></type> <name>getManuallyCalculatedSlideInfo</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>start</name>      <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Long</name></type> <name>mediaSize</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mimeType</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>PartAuthority</name><operator>.</operator><name>isLocalUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>mediaSize</name> <operator>=</operator> <call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>fileName</name>  <operator>=</operator> <call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentFileName</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>mimeType</name>  <operator>=</operator> <call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentContentType</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>mediaSize</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>mediaSize</name> <operator>=</operator> <call><name><name>MediaUtil</name><operator>.</operator><name>getMediaSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>mimeType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <call><name><name>MediaUtil</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><name>width</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dimens</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getDimensions</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>width</name>  <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>dimens</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"local slide with size "</literal> <operator>+</operator> <name>mediaSize</name> <operator>+</operator> <literal type="string">" took "</literal> <operator>+</operator> <operator>(</operator><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>start</name><operator>)</operator> <operator>+</operator> <literal type="string">"ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name><name>mediaType</name><operator>.</operator><name>createSlide</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>mediaSize</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isAttachmentPresent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachmentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>attachmentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getVisibility</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>SlideDeck</name></type> <name>buildSlideDeck</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>SlideDeck</name></type> <name>deck</name> <init>= <expr><operator>new</operator> <call><name>SlideDeck</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>deck</name><operator>.</operator><name>addSlide</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>deck</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectDocument</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_signal_requires_the_external_storage_permission_in_order_to_attach_photos_videos_or_audio</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>selectMediaType</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="string">"*/*"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectGallery</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TransportOption</name></type> <name>transport</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_signal_requires_the_external_storage_permission_in_order_to_attach_photos_videos_or_audio</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>selectMediaType</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="string">"image/*"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"image/*"</literal></expr>, <expr><literal type="string">"video/*"</literal></expr>}</block></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><call><name><name>MediaSendActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectAudio</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_EXTERNAL_STORAGE</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_signal_requires_the_external_storage_permission_in_order_to_attach_photos_videos_or_audio</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>selectMediaType</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><literal type="string">"audio/*"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectContactInfo</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_CONTACTS</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_signal_requires_contacts_permission_in_order_to_attach_contact_information</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                 <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_PICK</name></name></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                 <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
               }</block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectLocation</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>ACCESS_FINE_LOCATION</name></name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>ACCESS_COARSE_LOCATION</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_signal_requires_location_information_in_order_to_attach_a_location</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                 <try>try <block>{
                   <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>PlacePicker</name><operator>.</operator><name>IntentBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>build</name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>GooglePlayServicesRepairableException</name></type> | <type><name>GooglePlayServicesNotAvailableException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
                   <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 }</block></catch></try>
               }</block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectGif</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isForMms</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>GiphyActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>GiphyActivity</name><operator>.</operator><name>EXTRA_IS_MMS</name></name></expr></argument>, <argument><expr><name>isForMms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getSlideUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name><name>slide</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>slide</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUri</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getCaptureUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>captureUri</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>capturePhoto</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Permissions</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>request</name><argument_list>(<argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>CAMERA</name></name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>ifNecessary</name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>withPermanentDenialDialog</name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_signal_requires_the_camera_permission_in_order_to_take_photos_but_it_has_been_permanently_denied</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>onAllGranted</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
                 <try>try <block>{
                   <decl_stmt><decl><type><name>Intent</name></type> <name>captureIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>ACTION_IMAGE_CAPTURE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                   <if>if <condition>(<expr><call><name><name>captureIntent</name><operator>.</operator><name>resolveActivity</name></name><argument_list>(<argument><expr><call><name><name>activity</name><operator>.</operator><name>getPackageManager</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                     <if>if <condition>(<expr><name>captureUri</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                       <expr_stmt><expr><name>captureUri</name> <operator>=</operator> <call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>createForExternal</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_JPEG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     }</block></then></if>
                     <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"captureUri path is "</literal> <operator>+</operator> <call><name><name>captureUri</name><operator>.</operator><name>getPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name><name>captureIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaStore</name><operator>.</operator><name>EXTRA_OUTPUT</name></name></expr></argument>, <argument><expr><name>captureUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                     <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>captureIntent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                   }</block></then></if>
                 }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
                   <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                 }</block></catch></try>
               }</block></lambda></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>selectMediaType</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>extraMimeType</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>extraMimeType</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">19</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_MIME_TYPES</name></name></expr></argument>, <argument><expr><name>extraMimeType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_OPEN_DOCUMENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <try>try <block>{
        <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>anfe</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"couldn't complete ACTION_OPEN_DOCUMENT, no activity found. falling back."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setAction</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_GET_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>startActivityForResult</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>requestCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>anfe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"couldn't complete ACTION_GET_CONTENT intent, no activity found. falling back."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>AttachmentManager_cant_open_media_selection</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>areConstraintsSatisfied</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                          <parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>,
                                          <parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation>  <name>MediaConstraints</name></type> <name>constraints</name></decl></parameter>)</parameter_list>
  <block>{
   <return>return <expr><name>slide</name> <operator>==</operator> <literal type="null">null</literal>                                          <operator>||</operator>
          <call><name><name>constraints</name><operator>.</operator><name>isSatisfied</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
          <call><name><name>constraints</name><operator>.</operator><name>canResize</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>previewImageDraft</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>MediaPreviewActivity</name><operator>.</operator><name>isContentTypeSupported</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>SIZE_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>CAPTION_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>OUTGOING_EXTRA</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setDataAndType</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <class><specifier>private</specifier> class <name>ThumbnailClickListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>previewImageDraft</name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>RemoveButtonListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>clear</name><argument_list>(<argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>EditButtonListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>ScribbleActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setData</name></name><argument_list>(<argument><expr><call><name>getSlideUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>Activity</name><operator>)</operator><name>context</name><operator>)</operator><operator>.</operator><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name><name>ScribbleActivity</name><operator>.</operator><name>SCRIBBLE_REQUEST_CODE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>AttachmentListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onAttachmentChanged</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <enum><specifier>public</specifier> enum <name>MediaType</name> <block>{
    <decl><name>IMAGE</name></decl>, <decl><name>GIF</name></decl>, <decl><name>AUDIO</name></decl>, <decl><name>VIDEO</name></decl>, <decl><name>DOCUMENT</name></decl>, <decl><name>VCARD</name></decl>;

    <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Slide</name></type> <name>createSlide</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Uri</name></type>     <name>uri</name></decl></parameter>,
                                      <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>fileName</name></decl></parameter>,
                                      <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>mimeType</name></decl></parameter>,
                                                <parameter><decl><type><name>long</name></type>    <name>dataSize</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type>     <name>width</name></decl></parameter>,
                                                <parameter><decl><type><name>int</name></type>     <name>height</name></decl></parameter>)</parameter_list>
    <block>{
      <if>if <condition>(<expr><name>mimeType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>mimeType</name> <operator>=</operator> <literal type="string">"application/octet-stream"</literal></expr>;</expr_stmt>
      }</block></then></if>

      <switch>switch <condition>(<expr><name>this</name></expr>)</condition> <block>{
      <case>case <expr><name>IMAGE</name></expr>:</case>    <return>return <expr><operator>new</operator> <call><name>ImageSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>GIF</name></expr>:</case>      <return>return <expr><operator>new</operator> <call><name>GifSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>AUDIO</name></expr>:</case>    <return>return <expr><operator>new</operator> <call><name>AudioSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>VIDEO</name></expr>:</case>    <return>return <expr><operator>new</operator> <call><name>VideoSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>VCARD</name></expr>:</case>
      <case>case <expr><name>DOCUMENT</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>DocumentSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>, <argument><expr><name>mimeType</name></expr></argument>, <argument><expr><name>dataSize</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>       <throw>throw  <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"unrecognized enum"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></switch>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>MediaType</name></type> <name>from</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>mimeType</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isGif</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then>       <block type="pseudo"><return>return <expr><name>GIF</name></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isImageType</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>IMAGE</name></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isAudioType</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>AUDIO</name></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isVideoType</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>VIDEO</name></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isVcard</name></name><argument_list>(<argument><expr><name>mimeType</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><name>VCARD</name></expr>;</return></block></then></if>

      <return>return <expr><name>DOCUMENT</name></expr>;</return>
    }</block></function>

  }</block></enum>
}</block></class>
</unit>
