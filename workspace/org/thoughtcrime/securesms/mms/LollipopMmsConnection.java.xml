<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\LollipopMmsConnection.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2015 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>PendingIntent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>BroadcastReceiver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>IntentFilter</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeoutException</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>LollipopMmsConnection</name> <super><extends>extends <name>BroadcastReceiver</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>LollipopMmsConnection</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>action</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>resultAvailable</name></decl>;</decl_stmt>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onResult</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list>;</function_decl>

  <constructor><specifier>protected</specifier> <name>LollipopMmsConnection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>action</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>action</name></name>  <operator>=</operator> <name>action</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>onReceive</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onReceive()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>action</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"received broadcast with unexpected action "</literal> <operator>+</operator> <call><name><name>intent</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name>onResult</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>resultAvailable</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyAll</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>beginTransaction</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerReceiver</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>IntentFilter</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>endTransaction</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregisterReceiver</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>resultAvailable</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>waitForResult</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>TimeoutException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>timeoutExpiration</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">60000</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><name>resultAvailable</name></expr>)</condition> <block>{
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>wait</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>timeoutExpiration</name> <operator>-</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>timeoutExpiration</name></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>TimeoutException</name><argument_list>(<argument><expr><literal type="string">"timeout when waiting for MMS"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
    }</block></while>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>PendingIntent</name></type> <name>getPendingIntent</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>PendingIntent</name><operator>.</operator><name>getBroadcast</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>action</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>PendingIntent</name><operator>.</operator><name>FLAG_ONE_SHOT</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>context</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
