<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\LegacyMmsConnection.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>ConnectivityManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>telephony</name><operator>.</operator><name>TelephonyManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>Header</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>auth</name><operator>.</operator><name>AuthScope</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>auth</name><operator>.</operator><name>UsernamePasswordCredentials</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>client</name><operator>.</operator><name>CredentialsProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>client</name><operator>.</operator><name>config</name><operator>.</operator><name>RequestConfig</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>client</name><operator>.</operator><name>methods</name><operator>.</operator><name>CloseableHttpResponse</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>client</name><operator>.</operator><name>methods</name><operator>.</operator><name>HttpUriRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>impl</name><operator>.</operator><name>NoConnectionReuseStrategyHC4</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>impl</name><operator>.</operator><name>client</name><operator>.</operator><name>BasicCredentialsProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>impl</name><operator>.</operator><name>client</name><operator>.</operator><name>CloseableHttpClient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>impl</name><operator>.</operator><name>client</name><operator>.</operator><name>HttpClients</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>impl</name><operator>.</operator><name>client</name><operator>.</operator><name>LaxRedirectStrategy</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>impl</name><operator>.</operator><name>conn</name><operator>.</operator><name>BasicHttpClientConnectionManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>apache</name><operator>.</operator><name>http</name><operator>.</operator><name>message</name><operator>.</operator><name>BasicHeader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ApnDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TelephonyUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>BufferedInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>InvocationTargetException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>reflect</name><operator>.</operator><name>Method</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>InetAddress</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URL</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> <specifier>abstract</specifier> class <name>LegacyMmsConnection</name> <block>{

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>USER_AGENT</name> <init>= <expr><literal type="string">"Android-Mms/2.0"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>LegacyMmsConnection</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Apn</name></type>     <name>apn</name></decl>;</decl_stmt>

  <constructor><specifier>protected</specifier> <name>LegacyMmsConnection</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ApnUnavailableException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>apn</name></name>     <operator>=</operator> <call><name>getApn</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Apn</name></type> <name>getApn</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>ApnUnavailableException</name></expr></argument></throws> <block>{

    <try>try <block>{
      <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Apn</name></argument>&gt;</argument_list></name></type> <name>params</name> <init>= <expr><call><name><name>ApnDatabase</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>getMmsConnectionParameters</name><argument_list>(<argument><expr><call><name><name>TelephonyUtil</name><operator>.</operator><name>getMccMnc</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                                                                    <argument><expr><call><name><name>TelephonyUtil</name><operator>.</operator><name>getApn</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>params</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>ApnUnavailableException</name><argument_list>(<argument><expr><literal type="string">"No parameters available from ApnDefaults."</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <return>return <expr><call><name><name>params</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>ApnUnavailableException</name><argument_list>(<argument><expr><literal type="string">"ApnDatabase threw an IOException"</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isDirectConnect</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// We think Sprint supports direct connection over wifi/data, but not Verizon</comment>
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>sprintMccMncs</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"312530"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"311880"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"311870"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"311490"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"310120"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"316010"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"312190"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getTelephonyManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPhoneType</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TelephonyManager</name><operator>.</operator><name>PHONE_TYPE_CDMA</name></name> <operator>&amp;&amp;</operator>
           <call><name><name>sprintMccMncs</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><call><name><name>TelephonyUtil</name><operator>.</operator><name>getMccMnc</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"TryWithIdenticalCatches"</literal></expr></argument>)</argument_list></annotation>
  <specifier>protected</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>checkRouteToHost</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>host</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>usingMmsRadio</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>InetAddress</name></type> <name>inetAddress</name> <init>= <expr><call><name><name>InetAddress</name><operator>.</operator><name>getByName</name></name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><name>usingMmsRadio</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>inetAddress</name><operator>.</operator><name>isSiteLocalAddress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"RFC1918 address in non-MMS radio situation!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"returning vacuous success since MMS radio is not in use"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>inetAddress</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Unable to lookup host: InetAddress.getByName() returned null."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ipAddressBytes</name> <init>= <expr><call><name><name>inetAddress</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ipAddressBytes</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"resolved IP address bytes are null, returning true to attempt a connection anyway."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Checking route to address: "</literal> <operator>+</operator> <name>host</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name><name>inetAddress</name><operator>.</operator><name>getHostAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ConnectivityManager</name></type> <name>manager</name> <init>= <expr><operator>(</operator><name>ConnectivityManager</name><operator>)</operator><call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CONNECTIVITY_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>Method</name></type>  <name>requestRouteMethod</name>  <init>= <expr><call><name><name>manager</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMethod</name><argument_list>(<argument><expr><literal type="string">"requestRouteToHostAddress"</literal></expr></argument>, <argument><expr><name><name>Integer</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name><name>InetAddress</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>routeToHostObtained</name> <init>= <expr><operator>(</operator><name>Boolean</name><operator>)</operator> <call><name><name>requestRouteMethod</name><operator>.</operator><name>invoke</name></name><argument_list>(<argument><expr><name>manager</name></expr></argument>, <argument><expr><name><name>MmsRadio</name><operator>.</operator><name>TYPE_MOBILE_MMS</name></name></expr></argument>, <argument><expr><name>inetAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"requestRouteToHostAddress("</literal> <operator>+</operator> <name>inetAddress</name> <operator>+</operator> <literal type="string">") -&gt; "</literal> <operator>+</operator> <name>routeToHostObtained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>routeToHostObtained</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMethodException</name></type> <name>nsme</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>nsme</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>iae</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>iae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>InvocationTargetException</name></type> <name>ite</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>parseResponse</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>is</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>InputStream</name></type>           <name>in</name>   <init>= <expr><operator>new</operator> <call><name>BufferedInputStream</name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>baos</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Received full server response, "</literal> <operator>+</operator> <call><name><name>baos</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>CloseableHttpClient</name></type> <name>constructHttpClient</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>RequestConfig</name></type> <name>config</name> <init>= <expr><call><name><name>RequestConfig</name><operator>.</operator><name>custom</name></name><argument_list>()</argument_list></call>
                                        <operator>.</operator><call><name>setConnectTimeout</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setConnectionRequestTimeout</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setSocketTimeout</name><argument_list>(<argument><expr><literal type="number">20</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>setMaxRedirects</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>URL</name></type>                 <name>mmsc</name>          <init>= <expr><operator>new</operator> <call><name>URL</name><argument_list>(<argument><expr><call><name><name>apn</name><operator>.</operator><name>getMmsc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CredentialsProvider</name></type> <name>credsProvider</name> <init>= <expr><operator>new</operator> <call><name>BasicCredentialsProvider</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>apn</name><operator>.</operator><name>hasAuthentication</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>credsProvider</name><operator>.</operator><name>setCredentials</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AuthScope</name><argument_list>(<argument><expr><call><name><name>mmsc</name><operator>.</operator><name>getHost</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>mmsc</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><call><name><name>mmsc</name><operator>.</operator><name>getPort</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>mmsc</name><operator>.</operator><name>getDefaultPort</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                                   <argument><expr><operator>new</operator> <call><name>UsernamePasswordCredentials</name><argument_list>(<argument><expr><call><name><name>apn</name><operator>.</operator><name>getUsername</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>apn</name><operator>.</operator><name>getPassword</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>HttpClients</name><operator>.</operator><name>custom</name></name><argument_list>()</argument_list></call>
                      <operator>.</operator><call><name>setConnectionReuseStrategy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>NoConnectionReuseStrategyHC4</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>setRedirectStrategy</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LaxRedirectStrategy</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>setUserAgent</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMmsUserAgent</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>USER_AGENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>setConnectionManager</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHttpClientConnectionManager</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>setDefaultRequestConfig</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>setDefaultCredentialsProvider</name><argument_list>(<argument><expr><name>credsProvider</name></expr></argument>)</argument_list></call>
                      <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>execute</name><parameter_list>(<parameter><decl><type><name>HttpUriRequest</name></type> <name>request</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"connecting to "</literal> <operator>+</operator> <call><name><name>apn</name><operator>.</operator><name>getMmsc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>CloseableHttpClient</name></type>   <name>client</name>   <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CloseableHttpResponse</name></type> <name>response</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>client</name>   <operator>=</operator> <call><name>constructHttpClient</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name><name>client</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"* response code: "</literal> <operator>+</operator> <call><name><name>response</name><operator>.</operator><name>getStatusLine</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>response</name><operator>.</operator><name>getStatusLine</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStatusCode</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">200</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name>parseResponse</name><argument_list>(<argument><expr><call><name><name>response</name><operator>.</operator><name>getEntity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getContent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// TODO determine root cause</comment>
      <comment type="line">// see: https://github.com/signalapp/Signal-Android/issues/4379</comment>
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>npe</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <finally>finally <block>{
      <if>if <condition>(<expr><name>response</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>response</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>client</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>client</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"unhandled response code"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <function><specifier>protected</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></type> <name>getBaseHeaders</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type>                <name>number</name>    <init>= <expr><call><name><name>TelephonyUtil</name><operator>.</operator><name>getManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getLine1Number</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <empty_stmt>;</empty_stmt>

    <return>return <expr><operator>new</operator> <class><super><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHeader</name><argument_list>(<argument><expr><literal type="string">"Accept"</literal></expr></argument>, <argument><expr><literal type="string">"*/*, application/vnd.wap.mms-message, application/vnd.wap.sic"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHeader</name><argument_list>(<argument><expr><literal type="string">"x-wap-profile"</literal></expr></argument>, <argument><expr><literal type="string">"http://www.google.com/oha/rdf/ua-profile-kila.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHeader</name><argument_list>(<argument><expr><literal type="string">"Content-Type"</literal></expr></argument>, <argument><expr><literal type="string">"application/vnd.wap.mms-message"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHeader</name><argument_list>(<argument><expr><literal type="string">"x-carrier-magic"</literal></expr></argument>, <argument><expr><literal type="string">"http://magic.google.com"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHeader</name><argument_list>(<argument><expr><literal type="string">"x-up-calling-line-id"</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BasicHeader</name><argument_list>(<argument><expr><literal type="string">"X-MDN"</literal></expr></argument>, <argument><expr><name>number</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block>}</block></class></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Apn</name> <block>{

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name>Apn</name></type> <name>EMPTY</name> <init>= <expr><operator>new</operator> <call><name>Apn</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>mmsc</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>proxy</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>port</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>username</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>password</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Apn</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mmsc</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>proxy</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>username</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>password</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mmsc</name></name>     <operator>=</operator> <name>mmsc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>proxy</name></name>    <operator>=</operator> <name>proxy</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>port</name></name>     <operator>=</operator> <name>port</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>username</name></name> <operator>=</operator> <name>username</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <name>password</name></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>Apn</name><parameter_list>(<parameter><decl><type><name>Apn</name></type> <name>customApn</name></decl></parameter>, <parameter><decl><type><name>Apn</name></type> <name>defaultApn</name></decl></parameter>,
               <parameter><decl><type><name>boolean</name></type> <name>useCustomMmsc</name></decl></parameter>,
               <parameter><decl><type><name>boolean</name></type> <name>useCustomProxy</name></decl></parameter>,
               <parameter><decl><type><name>boolean</name></type> <name>useCustomProxyPort</name></decl></parameter>,
               <parameter><decl><type><name>boolean</name></type> <name>useCustomUsername</name></decl></parameter>,
               <parameter><decl><type><name>boolean</name></type> <name>useCustomPassword</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mmsc</name></name>     <operator>=</operator> <ternary><condition><expr><name>useCustomMmsc</name></expr> ?</condition><then> <expr><name><name>customApn</name><operator>.</operator><name>mmsc</name></name></expr> </then><else>: <expr><name><name>defaultApn</name><operator>.</operator><name>mmsc</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>proxy</name></name>    <operator>=</operator> <ternary><condition><expr><name>useCustomProxy</name></expr> ?</condition><then> <expr><name><name>customApn</name><operator>.</operator><name>proxy</name></name></expr> </then><else>: <expr><name><name>defaultApn</name><operator>.</operator><name>proxy</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>port</name></name>     <operator>=</operator> <ternary><condition><expr><name>useCustomProxyPort</name></expr> ?</condition><then> <expr><name><name>customApn</name><operator>.</operator><name>port</name></name></expr> </then><else>: <expr><name><name>defaultApn</name><operator>.</operator><name>port</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>username</name></name> <operator>=</operator> <ternary><condition><expr><name>useCustomUsername</name></expr> ?</condition><then> <expr><name><name>customApn</name><operator>.</operator><name>username</name></name></expr> </then><else>: <expr><name><name>defaultApn</name><operator>.</operator><name>username</name></name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>password</name></name> <operator>=</operator> <ternary><condition><expr><name>useCustomPassword</name></expr> ?</condition><then> <expr><name><name>customApn</name><operator>.</operator><name>password</name></name></expr> </then><else>: <expr><name><name>defaultApn</name><operator>.</operator><name>password</name></name></expr></else></ternary></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasProxy</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>proxy</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getMmsc</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>mmsc</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getProxy</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><call><name>hasProxy</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>proxy</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getPort</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">80</literal></expr> </then><else>: <expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAuthentication</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getUsername</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>username</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getPassword</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>password</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>Apn</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call> <operator>+</operator>
          <literal type="string">"{ mmsc: \""</literal> <operator>+</operator> <name>mmsc</name> <operator>+</operator> <literal type="string">"\""</literal> <operator>+</operator>
          <literal type="string">", proxy: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>proxy</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"none"</literal></expr> </then><else>: <expr><literal type="char">'"'</literal> <operator>+</operator> <name>proxy</name> <operator>+</operator> <literal type="char">'"'</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
          <literal type="string">", port: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>port</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"(none)"</literal></expr> </then><else>: <expr><name>port</name></expr></else></ternary><operator>)</operator> <operator>+</operator>
          <literal type="string">", user: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>username</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"none"</literal></expr> </then><else>: <expr><literal type="char">'"'</literal> <operator>+</operator> <name>username</name> <operator>+</operator> <literal type="char">'"'</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>
          <literal type="string">", pass: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>password</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"none"</literal></expr> </then><else>: <expr><literal type="char">'"'</literal> <operator>+</operator> <name>password</name> <operator>+</operator> <literal type="char">'"'</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="string">" }"</literal></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
