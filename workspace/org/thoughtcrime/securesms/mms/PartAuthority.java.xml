<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\PartAuthority.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentUris</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>UriMatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PartProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>MemoryBlobProvider</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>PartAuthority</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PART_URI_STRING</name>   <init>= <expr><literal type="string">"content://org.thoughtcrime.securesms/part"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THUMB_URI_STRING</name>  <init>= <expr><literal type="string">"content://org.thoughtcrime.securesms/thumb"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Uri</name></type>    <name>PART_CONTENT_URI</name>  <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>PART_URI_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Uri</name></type>    <name>THUMB_CONTENT_URI</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>THUMB_URI_STRING</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PART_ROW</name>       <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>THUMB_ROW</name>      <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PERSISTENT_ROW</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SINGLE_USE_ROW</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>UriMatcher</name></type> <name>uriMatcher</name></decl>;</decl_stmt>

  <static>static <block>{
    <expr_stmt><expr><name>uriMatcher</name> <operator>=</operator> <operator>new</operator> <call><name>UriMatcher</name><argument_list>(<argument><expr><name><name>UriMatcher</name><operator>.</operator><name>NO_MATCH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uriMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><literal type="string">"org.thoughtcrime.securesms"</literal></expr></argument>, <argument><expr><literal type="string">"part/*/#"</literal></expr></argument>, <argument><expr><name>PART_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uriMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><literal type="string">"org.thoughtcrime.securesms"</literal></expr></argument>, <argument><expr><literal type="string">"thumb/*/#"</literal></expr></argument>, <argument><expr><name>THUMB_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uriMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name><name>PersistentBlobProvider</name><operator>.</operator><name>AUTHORITY</name></name></expr></argument>, <argument><expr><name><name>PersistentBlobProvider</name><operator>.</operator><name>EXPECTED_PATH_OLD</name></name></expr></argument>, <argument><expr><name>PERSISTENT_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uriMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name><name>PersistentBlobProvider</name><operator>.</operator><name>AUTHORITY</name></name></expr></argument>, <argument><expr><name><name>PersistentBlobProvider</name><operator>.</operator><name>EXPECTED_PATH_NEW</name></name></expr></argument>, <argument><expr><name>PERSISTENT_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>uriMatcher</name><operator>.</operator><name>addURI</name></name><argument_list>(<argument><expr><name><name>MemoryBlobProvider</name><operator>.</operator><name>AUTHORITY</name></name></expr></argument>, <argument><expr><name><name>MemoryBlobProvider</name><operator>.</operator><name>PATH</name></name></expr></argument>, <argument><expr><name>SINGLE_USE_ROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></static>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>InputStream</name></type> <name>getAttachmentStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{
      <switch>switch <condition>(<expr><name>match</name></expr>)</condition> <block>{
      <case>case <expr><name>PART_ROW</name></expr>:</case>       <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttachmentStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartUriParser</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPartId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>THUMB_ROW</name></expr>:</case>      <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThumbnailStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartUriParser</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPartId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>PERSISTENT_ROW</name></expr>:</case> <return>return <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getStream</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>SINGLE_USE_ROW</name></expr>:</case> <return>return <expr><call><name><name>MemoryBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStream</name><argument_list>(<argument><expr><call><name><name>ContentUris</name><operator>.</operator><name>parseId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>             <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>openInputStream</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></switch>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SecurityException</name></type> <name>se</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getAttachmentFileName</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>match</name></expr>)</condition> <block>{
    <case>case <expr><name>THUMB_ROW</name></expr>:</case>
    <case>case <expr><name>PART_ROW</name></expr>:</case>
      <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttachment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartUriParser</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPartId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>attachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
      <else>else                    <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
    <case>case <expr><name>PERSISTENT_ROW</name></expr>:</case>
      <return>return <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getFileName</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>SINGLE_USE_ROW</name></expr>:</case>
    <default>default:</default>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Long</name></type> <name>getAttachmentSize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>match</name></expr>)</condition> <block>{
      <case>case <expr><name>THUMB_ROW</name></expr>:</case>
      <case>case <expr><name>PART_ROW</name></expr>:</case>
        <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttachment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartUriParser</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPartId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>attachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
        <else>else                    <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
      <case>case <expr><name>PERSISTENT_ROW</name></expr>:</case>
        <return>return <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getFileSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>SINGLE_USE_ROW</name></expr>:</case>
      <default>default:</default>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getAttachmentContentType</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>match</name></expr>)</condition> <block>{
      <case>case <expr><name>THUMB_ROW</name></expr>:</case>
      <case>case <expr><name>PART_ROW</name></expr>:</case>
        <decl_stmt><decl><type><name>Attachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttachment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>PartUriParser</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPartId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>attachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
        <else>else                    <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></else></if>
      <case>case <expr><name>PERSISTENT_ROW</name></expr>:</case>
        <return>return <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>SINGLE_USE_ROW</name></expr>:</case>
      <default>default:</default>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></switch>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Uri</name></type> <name>getAttachmentPublicUri</name><parameter_list>(<parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>PartUriParser</name></type> <name>partUri</name> <init>= <expr><operator>new</operator> <call><name>PartUriParser</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>PartProvider</name><operator>.</operator><name>getContentUri</name></name><argument_list>(<argument><expr><call><name><name>partUri</name><operator>.</operator><name>getPartId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Uri</name></type> <name>getAttachmentDataUri</name><parameter_list>(<parameter><decl><type><name>AttachmentId</name></type> <name>attachmentId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>PART_CONTENT_URI</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getUniqueId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>ContentUris</name><operator>.</operator><name>withAppendedId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getRowId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Uri</name></type> <name>getAttachmentThumbnailUri</name><parameter_list>(<parameter><decl><type><name>AttachmentId</name></type> <name>attachmentId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name>THUMB_CONTENT_URI</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getUniqueId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>ContentUris</name><operator>.</operator><name>withAppendedId</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getRowId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isLocalUri</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><call><name><name>uriMatcher</name><operator>.</operator><name>match</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>match</name></expr>)</condition> <block>{
    <case>case <expr><name>PART_ROW</name></expr>:</case>
    <case>case <expr><name>THUMB_ROW</name></expr>:</case>
    <case>case <expr><name>PERSISTENT_ROW</name></expr>:</case>
    <case>case <expr><name>SINGLE_USE_ROW</name></expr>:</case>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></switch>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>
}</block></class>
</unit>
