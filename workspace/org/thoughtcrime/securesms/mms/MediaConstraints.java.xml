<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\MediaConstraints.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>DecryptableStreamUriLoader</name><operator>.</operator><name>DecryptableUri</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapDecodingException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>BitmapUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MediaConstraints</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MediaConstraints</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MediaConstraints</name></type> <name>getPushMediaConstraints</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>PushMediaConstraints</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>MediaConstraints</name></type> <name>getMmsMediaConstraints</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>subscriptionId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>MmsMediaConstraints</name><argument_list>(<argument><expr><name>subscriptionId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getImageMaxWidth</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getImageMaxHeight</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getImageMaxSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getGifMaxSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getVideoMaxSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getAudioMaxSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getDocumentMaxSize</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSatisfied</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <return>return <expr><operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isGif</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call>    <operator>&amp;&amp;</operator> <call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name>getGifMaxSize</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>   <operator>&amp;&amp;</operator> <call><name>isWithinBounds</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
             <operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isImage</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> <call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name>getImageMaxSize</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isWithinBounds</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
             <operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isAudio</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> <call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name>getAudioMaxSize</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
             <operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isVideo</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call>  <operator>&amp;&amp;</operator> <call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name>getVideoMaxSize</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
             <operator>(</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isFile</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name>getDocumentMaxSize</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to determine if media's constraints are satisfied."</literal></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isWithinBounds</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>dimensions</name> <init>= <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>getDimensions</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name><name>dimensions</name><operator>.</operator><name>first</name></name>  <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dimensions</name><operator>.</operator><name>first</name></name>  <operator>&lt;=</operator> <call><name>getImageMaxWidth</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
             <name><name>dimensions</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dimensions</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <call><name>getImageMaxHeight</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BitmapDecodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>canResize</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>attachment</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>MediaUtil</name><operator>.</operator><name>isImage</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>MediaUtil</name><operator>.</operator><name>isGif</name></name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>MediaStream</name></type> <name>getResizedMedia</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>canResize</name><argument_list>(<argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>UnsupportedOperationException</name><argument_list>(<argument><expr><literal type="string">"Cannot resize this content type"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <try>try <block>{
      <comment type="line">// XXX - This is loading everything into memory! We want the send path to be stream-like.</comment>
      <decl_stmt><decl><type><name><name>BitmapUtil</name><operator>.</operator><name>ScaleResult</name></name></type> <name>scaleResult</name> <init>= <expr><call><name><name>BitmapUtil</name><operator>.</operator><name>createScaledBytes</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>DecryptableUri</name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>MediaStream</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ByteArrayInputStream</name><argument_list>(<argument><expr><call><name><name>scaleResult</name><operator>.</operator><name>getBitmap</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_JPEG</name></name></expr></argument>, <argument><expr><call><name><name>scaleResult</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scaleResult</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>BitmapDecodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>
}</block></class>
</unit>
