<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\Slide.java"><comment type="block" format="javadoc">/** 
 * Copyright (C) 2011 Whisper Systems
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Resources</name><operator>.</operator><name>Theme</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DrawableRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>UriAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Slide</name> <block>{

  <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Attachment</name></type> <name>attachment</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Context</name></type>    <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Slide</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>    <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>attachment</name></name> <operator>=</operator> <name>attachment</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>getContentType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <specifier>public</specifier> <type><name>Uri</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <specifier>public</specifier> <type><name>Uri</name></type> <name>getThumbnailUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getBody</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getCaption</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getFileName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>getFastPreflightId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getFastPreflightId</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getFileSize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasImage</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVideo</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAudio</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasDocument</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLocation</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>getContentDescription</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><literal type="string">""</literal></expr>;</return> }</block></function>

  <function><specifier>public</specifier> <type><name>Attachment</name></type> <name>asAttachment</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>attachment</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isInProgress</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>isInProgress</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPendingDownload</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getTransferState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_FAILED</name></name> <operator>||</operator>
           <call><name>getTransferState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_PENDING</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getTransferState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>DrawableRes</name></annotation> <type><name>int</name></type> <name>getPlaceholderRes</name><parameter_list>(<parameter><decl><type><name>Theme</name></type> <name>theme</name></decl></parameter>)</parameter_list> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"getPlaceholderRes() called for non-drawable slide"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPlaceholder</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPlayOverlay</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <specifier>static</specifier> <type><name>Attachment</name></type> <name>constructAttachmentFromUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Context</name></type> <name>context</name></decl></parameter>,
                                                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>Uri</name></type>     <name>uri</name></decl></parameter>,
                                                         <parameter><decl><type><annotation>@<name>NonNull</name></annotation>  <name>String</name></type>  <name>defaultMime</name></decl></parameter>,
                                                                   <parameter><decl><type><name>long</name></type>    <name>size</name></decl></parameter>,
                                                                   <parameter><decl><type><name>int</name></type>     <name>width</name></decl></parameter>,
                                                                   <parameter><decl><type><name>int</name></type>     <name>height</name></decl></parameter>,
                                                                   <parameter><decl><type><name>boolean</name></type> <name>hasThumbnail</name></decl></parameter>,
                                                         <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type>  <name>fileName</name></decl></parameter>,
                                                         <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type>  <name>caption</name></decl></parameter>,
                                                                   <parameter><decl><type><name>boolean</name></type> <name>voiceNote</name></decl></parameter>,
                                                                   <parameter><decl><type><name>boolean</name></type> <name>quote</name></decl></parameter>)</parameter_list>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>String</name></type>                 <name>resolvedType</name>    <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>MediaUtil</name><operator>.</operator><name>getMimeType</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><name>defaultMime</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                 <name>fastPreflightId</name> <init>= <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>UriAttachment</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name>hasThumbnail</name></expr> ?</condition><then> <expr><name>uri</name></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                               <argument><expr><name>resolvedType</name></expr></argument>,
                               <argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_STARTED</name></name></expr></argument>,
                               <argument><expr><name>size</name></expr></argument>,
                               <argument><expr><name>width</name></expr></argument>,
                               <argument><expr><name>height</name></expr></argument>,
                               <argument><expr><name>fileName</name></expr></argument>,
                               <argument><expr><name>fastPreflightId</name></expr></argument>,
                               <argument><expr><name>voiceNote</name></expr></argument>,
                               <argument><expr><name>quote</name></expr></argument>,
                               <argument><expr><name>caption</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>other</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>             <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>Slide</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>Slide</name></type> <name>that</name> <init>= <expr><operator>(</operator><name>Slide</name><operator>)</operator><name>other</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>that</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <call><name><name>this</name><operator>.</operator><name>hasAudio</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>hasAudio</name></name><argument_list>()</argument_list></call>                        <operator>&amp;&amp;</operator>
           <call><name><name>this</name><operator>.</operator><name>hasImage</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>hasImage</name></name><argument_list>()</argument_list></call>                        <operator>&amp;&amp;</operator>
           <call><name><name>this</name><operator>.</operator><name>hasVideo</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>hasVideo</name></name><argument_list>()</argument_list></call>                        <operator>&amp;&amp;</operator>
           <call><name><name>this</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>that</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call>        <operator>&amp;&amp;</operator>
           <call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>that</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>                 <operator>&amp;&amp;</operator>
           <call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>that</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Util</name><operator>.</operator><name>hashCode</name></name><argument_list>(<argument><expr><call><name>getContentType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>hasAudio</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>hasImage</name><argument_list>()</argument_list></call></expr></argument>,
                         <argument><expr><call><name>hasVideo</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getThumbnailUri</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getTransferState</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
