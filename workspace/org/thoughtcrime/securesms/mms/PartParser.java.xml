<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\PartParser.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>ContentType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>CharacterSets</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>PduBody</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>PduPart</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>UnsupportedEncodingException</name></name>;</import>


<class><specifier>public</specifier> class <name>PartParser</name> <block>{
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>String</name></type> <name>getMessageText</name><parameter_list>(<parameter><decl><type><name>PduBody</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>bodyText</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>body</name><operator>.</operator><name>getPartsNum</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>ContentType</name><operator>.</operator><name>isTextType</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getContentType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>partText</name></decl>;</decl_stmt>

        <try>try <block>{
          <decl_stmt><decl><type><name>String</name></type> <name>characterSet</name> <init>= <expr><call><name><name>CharacterSets</name><operator>.</operator><name>getMimeName</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCharset</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>characterSet</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>CharacterSets</name><operator>.</operator><name>MIMENAME_ANY_CHARSET</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>characterSet</name> <operator>=</operator> <name><name>CharacterSets</name><operator>.</operator><name>MIMENAME_UTF_8</name></name></expr>;</expr_stmt></block></then></if>

          <if>if <condition>(<expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>partText</name> <operator>=</operator> <operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getData</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>characterSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>partText</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
          }</block></else></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>UnsupportedEncodingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"PartParser"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>partText</name> <operator>=</operator> <literal type="string">"Unsupported Encoding!"</literal></expr>;</expr_stmt>
        }</block></catch></try>

        <expr_stmt><expr><name>bodyText</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>bodyText</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><name>partText</name></expr> </then><else>: <expr><name>bodyText</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <name>partText</name></expr></else></ternary></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>bodyText</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>PduBody</name></type> <name>getSupportedMediaParts</name><parameter_list>(<parameter><decl><type><name>PduBody</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>PduBody</name></type> <name>stripped</name> <init>= <expr><operator>new</operator> <call><name>PduBody</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>body</name><operator>.</operator><name>getPartsNum</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name>isDisplayableMedia</name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>stripped</name><operator>.</operator><name>addPart</name></name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>stripped</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getSupportedMediaPartCount</name><parameter_list>(<parameter><decl><type><name>PduBody</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>partCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>body</name><operator>.</operator><name>getPartsNum</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name>isDisplayableMedia</name><argument_list>(<argument><expr><call><name><name>body</name><operator>.</operator><name>getPart</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>partCount</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>partCount</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isImage</name><parameter_list>(<parameter><decl><type><name>PduPart</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ContentType</name><operator>.</operator><name>isImageType</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>part</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isAudio</name><parameter_list>(<parameter><decl><type><name>PduPart</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ContentType</name><operator>.</operator><name>isAudioType</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>part</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isVideo</name><parameter_list>(<parameter><decl><type><name>PduPart</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ContentType</name><operator>.</operator><name>isVideoType</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>part</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isText</name><parameter_list>(<parameter><decl><type><name>PduPart</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>ContentType</name><operator>.</operator><name>isTextType</name></name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>part</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isDisplayableMedia</name><parameter_list>(<parameter><decl><type><name>PduPart</name></type> <name>part</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isImage</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isAudio</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isVideo</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
