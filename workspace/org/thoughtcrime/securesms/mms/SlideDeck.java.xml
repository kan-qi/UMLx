<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\mms\SlideDeck.java"><comment type="block" format="javadoc">/** 
 * Copyright (C) 2011 Whisper Systems
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>SlideDeck</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SlideDeck</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Attachment</name></extends></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><name>attachments</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>Slide</name></type> <name>slide</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getSlideForAttachment</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>slide</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>slides</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>SlideDeck</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Slide</name></type> <name>slide</name> <init>= <expr><call><name><name>MediaUtil</name><operator>.</operator><name>getSlideForAttachment</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>slide</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>slides</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>SlideDeck</name><parameter_list>()</parameter_list> <block>{
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>slides</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>getBody</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>slideBody</name> <init>= <expr><call><name><name>slide</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>slideBody</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>slideBody</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>body</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>asAttachments</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>attachments</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addSlide</name><parameter_list>(<parameter><decl><type><name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>slides</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>getSlides</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>slides</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>containsMediaSlide</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasImage</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>slide</name><operator>.</operator><name>hasVideo</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>slide</name><operator>.</operator><name>hasAudio</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>slide</name><operator>.</operator><name>hasDocument</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Slide</name></type> <name>getThumbnailSlide</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasImage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>slide</name></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>getThumbnailSlides</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>slides</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Slide</name><operator>::</operator><name>hasImage</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>AudioSlide</name></type> <name>getAudioSlide</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasAudio</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name>AudioSlide</name><operator>)</operator><name>slide</name></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>DocumentSlide</name></type> <name>getDocumentSlide</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name><range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasDocument</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name>DocumentSlide</name><operator>)</operator><name>slide</name></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>TextSlide</name></type> <name>getTextSlide</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name><range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isLongTextType</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name>TextSlide</name><operator>)</operator><name>slide</name></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>
}</block></class>
</unit>
