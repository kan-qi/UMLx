<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\Database.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>ContentObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name><operator>.</operator><name>SQLCipherOpenHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>Database</name> <block>{

  <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ID_WHERE</name> <init>= <expr><literal type="string">"_id = ?"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>protected</specifier>       <type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Context</name></type>             <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Database</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>        <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseHelper</name></name> <operator>=</operator> <name>databaseHelper</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>notifyConversationListeners</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>threadIds</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>long</name></type> <name>threadId</name> <range>: <expr><name>threadIds</name></expr></range></decl></init>)</control>
      <block type="pseudo"><expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>notifyConversationListeners</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyChange</name><argument_list>(<argument><expr><call><name><name>DatabaseContentProviders</name><operator>.</operator><name>Conversation</name><operator>.</operator><name>getUriForThread</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>notifyConversationListListeners</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyChange</name><argument_list>(<argument><expr><name><name>DatabaseContentProviders</name><operator>.</operator><name>ConversationList</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>setNotifyConverationListeners</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>setNotificationUri</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>DatabaseContentProviders</name><operator>.</operator><name>Conversation</name><operator>.</operator><name>getUriForThread</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>setNotifyConverationListListeners</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>setNotificationUri</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>DatabaseContentProviders</name><operator>.</operator><name>ConversationList</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>registerAttachmentListeners</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ContentObserver</name></type> <name>observer</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerContentObserver</name><argument_list>(<argument><expr><name><name>DatabaseContentProviders</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>,
                                                         <argument><expr><literal type="boolean">true</literal></expr></argument>,
                                                         <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>notifyAttachmentListeners</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyChange</name><argument_list>(<argument><expr><name><name>DatabaseContentProviders</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>CONTENT_URI</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>databaseHelper</name></name> <operator>=</operator> <name>databaseHelper</name></expr>;</expr_stmt>
  }</block></function>

}</block></class>
</unit>
