<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\model\SmsMessageRecord.java"><comment type="block">/*
 * Copyright (C) 2012 Moxie Marlinspike
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsColumns</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The message record model which represents standard SMS messages.
 *
 * @author Moxie Marlinspike
 *
 */</comment>

<class><specifier>public</specifier> class <name>SmsMessageRecord</name> <super><extends>extends <name>MessageRecord</name></extends></super> <block>{

  <constructor><specifier>public</specifier> <name>SmsMessageRecord</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>,
                          <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>,
                          <parameter><decl><type><name>Recipient</name></type> <name>individualRecipient</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>recipientDeviceId</name></decl></parameter>,
                          <parameter><decl><type><name>long</name></type> <name>dateSent</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dateReceived</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>deliveryReceiptCount</name></decl></parameter>,
                          <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>subscriptionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expireStarted</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>readReceiptCount</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unidentified</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>individualRecipient</name></expr></argument>, <argument><expr><name>recipientDeviceId</name></expr></argument>,
          <argument><expr><name>dateSent</name></expr></argument>, <argument><expr><name>dateReceived</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>deliveryReceiptCount</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
          <argument><expr><name>mismatches</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>subscriptionId</name></expr></argument>,
          <argument><expr><name>expiresIn</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>, <argument><expr><name>readReceiptCount</name></expr></argument>, <argument><expr><name>unidentified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>type</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>SpannableString</name></type> <name>getDisplayBody</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isFailedDecryptType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageDisplayHelper_bad_encrypted_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isCorruptedKeyExchange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SmsMessageRecord_received_corrupted_key_exchange_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isInvalidVersionKeyExchange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SmsMessageRecord_received_key_exchange_message_for_invalid_protocol_version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>isLegacyType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_message_encrypted_with_a_legacy_protocol_version_that_is_no_longer_supported</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isBundleKeyExchange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SmsMessageRecord_received_message_with_new_safety_number_tap_to_process</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isKeyExchange</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isKeyExchange</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_received_key_exchange_message_tap_to_process</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isDuplicateMessageType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SmsMessageRecord_duplicate_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isNoRemoteSessionType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageDisplayHelper_message_encrypted_for_non_existing_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEndSession</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SmsMessageRecord_secure_session_reset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEndSession</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SmsMessageRecord_secure_session_reset_s</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>isMms</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>isMmsNotification</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>
}</block></class>
</unit>
