<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\model\ThreadRecord.java"><comment type="block">/*
 * Copyright (C) 2012 Moxie Marlinspike
 * Copyright (C) 2013-2017 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsColumns</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ExpirationUtil</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The message record model which represents thread heading messages.
 *
 * @author Moxie Marlinspike
 *
 */</comment>
<class><specifier>public</specifier> class <name>ThreadRecord</name> <super><extends>extends <name>DisplayRecord</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><specifier>final</specifier> <name>Uri</name></type>     <name>snippetUri</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><specifier>final</specifier> <name>long</name></type>    <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><specifier>final</specifier> <name>int</name></type>     <name>unreadCount</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><specifier>final</specifier> <name>int</name></type>     <name>distributionType</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><specifier>final</specifier> <name>boolean</name></type> <name>archived</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><specifier>final</specifier> <name>long</name></type>    <name>expiresIn</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><specifier>final</specifier> <name>long</name></type>    <name>lastSeen</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ThreadRecord</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>snippetUri</name></decl></parameter>,
                      <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>unreadCount</name></decl></parameter>,
                      <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deliveryReceiptCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>snippetType</name></decl></parameter>,
                      <parameter><decl><type><name>int</name></type> <name>distributionType</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>archived</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>lastSeen</name></decl></parameter>,
                      <parameter><decl><type><name>int</name></type> <name>readReceiptCount</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>date</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>deliveryReceiptCount</name></expr></argument>, <argument><expr><name>snippetType</name></expr></argument>, <argument><expr><name>readReceiptCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>          <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>snippetUri</name></name>       <operator>=</operator> <name>snippetUri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>count</name></name>            <operator>=</operator> <name>count</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unreadCount</name></name>      <operator>=</operator> <name>unreadCount</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>distributionType</name></name> <operator>=</operator> <name>distributionType</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>archived</name></name>         <operator>=</operator> <name>archived</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiresIn</name></name>        <operator>=</operator> <name>expiresIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastSeen</name></name>         <operator>=</operator> <name>lastSeen</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getSnippetUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>snippetUri</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>SpannableString</name></type> <name>getDisplayBody</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isGroupUpdate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_group_updated</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isGroupQuit</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_left_the_group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isKeyExchange</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationListItem_key_exchange_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isFailedDecryptType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageDisplayHelper_bad_encrypted_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isNoRemoteSessionType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageDisplayHelper_message_encrypted_for_non_existing_session</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isEndSessionType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_secure_session_reset</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>isLegacyType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_message_encrypted_with_a_legacy_protocol_version_that_is_no_longer_supported</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>isDraftMessageType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>draftText</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_draft</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><name>draftText</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name>getBody</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>draftText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isOutgoingCall</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_called</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIncomingCall</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_called_you</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isMissedCall</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_missed_call</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isJoinedType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_s_is_on_signal</name></name></expr></argument>, <argument><expr><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isExpirationTimerUpdate</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name>getExpiresIn</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_disappearing_messages_disabled</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
      <decl_stmt><decl><type><name>String</name></type> <name>time</name> <init>= <expr><call><name><name>ExpirationUtil</name><operator>.</operator><name>getExpirationDisplayValue</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_disappearing_message_time_updated_to_s</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isGroupRecipient</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_safety_number_changed</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else                                   <block type="pseudo"><return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_your_safety_number_with_s_has_changed</name></name></expr></argument>, <argument><expr><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_you_marked_verified</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_you_marked_unverified</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name>getBody</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ThreadRecord_media_message</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name>getBody</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></else></if>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SpannableString</name></type> <name>emphasisAdded</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sequence</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>emphasisAdded</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>sequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SpannableString</name></type> <name>emphasisAdded</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sequence</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SpannableString</name></type> <name>spannable</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name><operator>.</operator><name>ITALIC</name></name></expr></argument>)</argument_list></call></expr></argument>,
                      <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>spannable</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>count</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getUnreadCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>unreadCount</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getDate</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getDateReceived</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isArchived</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>archived</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getDistributionType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>distributionType</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getExpiresIn</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>expiresIn</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getLastSeen</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>lastSeen</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
