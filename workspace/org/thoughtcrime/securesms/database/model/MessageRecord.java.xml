<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\model\MessageRecord.java"><comment type="block">/*
 * Copyright (C) 2012 Moxie Marlinpsike
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>RelativeSizeSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>StyleSpan</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsColumns</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>NetworkFailure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ExpirationUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>GroupUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The base class for message record models that are displayed in
 * conversations, as opposed to models that are displayed in a thread list.
 * Encapsulates the shared data between both SMS and MMS messages.
 *
 * @author Moxie Marlinspike
 *
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MessageRecord</name> <super><extends>extends <name>DisplayRecord</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Recipient</name></type>                 <name>individualRecipient</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>                       <name>recipientDeviceId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                      <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type>      <name>networkFailures</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>                       <name>subscriptionId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                      <name>expiresIn</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                      <name>expireStarted</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>                   <name>unidentified</name></decl>;</decl_stmt>

  <constructor><name>MessageRecord</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>conversationRecipient</name></decl></parameter>,
                <parameter><decl><type><name>Recipient</name></type> <name>individualRecipient</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recipientDeviceId</name></decl></parameter>,
                <parameter><decl><type><name>long</name></type> <name>dateSent</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>dateReceived</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>deliveryStatus</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>deliveryReceiptCount</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>,
                <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name></decl></parameter>,
                <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type> <name>networkFailures</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>subscriptionId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expireStarted</name></decl></parameter>,
                <parameter><decl><type><name>int</name></type> <name>readReceiptCount</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unidentified</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>conversationRecipient</name></expr></argument>, <argument><expr><name>dateSent</name></expr></argument>, <argument><expr><name>dateReceived</name></expr></argument>,
          <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>deliveryStatus</name></expr></argument>, <argument><expr><name>deliveryReceiptCount</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>readReceiptCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>                  <operator>=</operator> <name>id</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>individualRecipient</name></name> <operator>=</operator> <name>individualRecipient</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipientDeviceId</name></name>   <operator>=</operator> <name>recipientDeviceId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mismatches</name></name>          <operator>=</operator> <name>mismatches</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>networkFailures</name></name>     <operator>=</operator> <name>networkFailures</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subscriptionId</name></name>      <operator>=</operator> <name>subscriptionId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiresIn</name></name>           <operator>=</operator> <name>expiresIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expireStarted</name></name>       <operator>=</operator> <name>expireStarted</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unidentified</name></name>        <operator>=</operator> <name>unidentified</name></expr>;</expr_stmt>
  }</block></constructor>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isMms</name><parameter_list>()</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isMmsNotification</name><parameter_list>()</parameter_list>;</function_decl>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSecure</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>isSecureType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isLegacyMessage</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>isLegacyType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>SpannableString</name></type> <name>getDisplayBody</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isGroupUpdate</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_updated_group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isGroupUpdate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>GroupUtil</name><operator>.</operator><name>getDescription</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>getBody</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>(<argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isGroupQuit</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_left_group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isGroupQuit</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_group_action_left</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isIncomingCall</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_s_called_you</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isOutgoingCall</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_called</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isMissedCall</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_missed_call</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isJoined</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_s_joined_signal</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isExpirationTimerUpdate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>seconds</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name>getExpiresIn</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>seconds</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><ternary><condition><expr><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_disabled_disappearing_messages</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                            </then><else>: <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_s_disabled_disappearing_messages</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
      }</block></then></if>
      <decl_stmt><decl><type><name>String</name></type> <name>time</name> <init>= <expr><call><name><name>ExpirationUtil</name><operator>.</operator><name>getExpirationDisplayValue</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_set_disappearing_message_time_to_s</name></name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                          </then><else>: <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_s_set_disappearing_message_time_to_s</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isIdentityUpdate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_your_safety_number_with_s_has_changed</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isIdentityVerified</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_marked_your_safety_number_with_s_verified</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else              <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_marked_your_safety_number_with_s_verified_from_another_device</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isIdentityDefault</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_marked_your_safety_number_with_s_unverified</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else              <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageRecord_you_marked_your_safety_number_with_s_unverified_from_another_device</name></name></expr></argument>, <argument><expr><call><name>getIndividualRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toShortString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></then></if></elseif></if>

    <return>return <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><call><name>getBody</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>id</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPush</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isPushType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isForcedSms</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getTimestamp</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isPush</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>getDateSent</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>getDateReceived</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>getDateSent</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><call><name>getDateReceived</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isForcedSms</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isForcedSms</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isIdentityVerified</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isIdentityDefault</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isIdentityMismatchFailure</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>mismatches</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mismatches</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isBundleKeyExchange</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isBundleKeyExchange</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isContentBundleKeyExchange</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isContentBundleKeyExchange</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isIdentityUpdate</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isCorruptedKeyExchange</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isCorruptedKeyExchange</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isInvalidVersionKeyExchange</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>isInvalidVersionKeyExchange</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isUpdate</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>isGroupAction</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isJoined</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isExpirationTimerUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isCallLog</name><argument_list>()</argument_list></call> <operator>||</operator>
           <call><name>isEndSession</name><argument_list>()</argument_list></call>  <operator>||</operator> <call><name>isIdentityUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isIdentityVerified</name><argument_list>()</argument_list></call> <operator>||</operator> <call><name>isIdentityDefault</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMediaPending</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Recipient</name></type> <name>getIndividualRecipient</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>individualRecipient</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getRecipientDeviceId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>recipientDeviceId</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>type</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>getIdentityKeyMismatches</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>mismatches</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type> <name>getNetworkFailures</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>networkFailures</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasNetworkFailures</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>networkFailures</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>networkFailures</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>SpannableString</name></type> <name>emphasisAdded</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>sequence</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SpannableString</name></type> <name>spannable</name> <init>= <expr><operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>sequence</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RelativeSizeSpan</name><argument_list>(<argument><expr><literal type="number">0.9f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>sequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spannable</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StyleSpan</name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name><operator>.</operator><name>ITALIC</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>sequence</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>spannable</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>other</name> <operator>!=</operator> <literal type="null">null</literal>                              <operator>&amp;&amp;</operator>
           <name>other</name> <operator>instanceof</operator> <name>MessageRecord</name>             <operator>&amp;&amp;</operator>
           <operator>(</operator><operator>(</operator><name>MessageRecord</name><operator>)</operator> <name>other</name><operator>)</operator><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>getId</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
           <operator>(</operator><operator>(</operator><name>MessageRecord</name><operator>)</operator> <name>other</name><operator>)</operator><operator>.</operator><call><name>isMms</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>isMms</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>getId</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getSubscriptionId</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>subscriptionId</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getExpiresIn</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>expiresIn</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getExpireStarted</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>expireStarted</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isUnidentified</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>unidentified</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
