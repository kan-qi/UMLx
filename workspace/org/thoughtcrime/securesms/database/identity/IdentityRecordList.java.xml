<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\identity\IdentityRecordList.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>identity</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name><operator>.</operator><name>IdentityRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name><operator>.</operator><name>VerifiedStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>IdentityRecordList</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>IdentityRecordList</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>identityRecords</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>identityRecord</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>identityRecords</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>replaceWith</name><parameter_list>(<parameter><decl><type><name>IdentityRecordList</name></type> <name>identityRecordList</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>identityRecords</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>identityRecords</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>identityRecordList</name><operator>.</operator><name>identityRecords</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isVerified</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>getVerifiedStatus</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>VERIFIED</name></name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><call><name><name>identityRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isUnverified</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>getVerifiedStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>UNVERIFIED</name></name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isUntrusted</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name>isUntrusted</name><argument_list>(<argument><expr><name>identityRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>getUntrustedRecords</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name>isUntrusted</name><argument_list>(<argument><expr><name>identityRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>identityRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getUntrustedRecipients</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>untrusted</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name>isUntrusted</name><argument_list>(<argument><expr><name>identityRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>untrusted</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>untrusted</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>getUnverifiedRecords</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityRecord</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>getVerifiedStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>UNVERIFIED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>identityRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getUnverifiedRecipients</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>unverified</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name> <range>: <expr><name>identityRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>identityRecord</name><operator>.</operator><name>getVerifiedStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>VerifiedStatus</name><operator>.</operator><name>UNVERIFIED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>unverified</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>identityRecord</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>unverified</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isUntrusted</name><parameter_list>(<parameter><decl><type><name>IdentityRecord</name></type> <name>identityRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name><name>identityRecord</name><operator>.</operator><name>isApprovedNonBlocking</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
           <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>identityRecord</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

}</block></class>
</unit>
