<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\Address.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Parcelable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>NumberParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>PhoneNumberUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>Phonenumber</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>ShortNumberInfo</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DelimiterUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>GroupUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>NumberUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Matcher</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<class><specifier>public</specifier> class <name>Address</name> <super><implements>implements <name>Parcelable</name>, <name><name>Comparable</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></implements></super> <block>{

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></name></type> <name>CREATOR</name> <init>= <expr><operator>new</operator> <class><super><name><name>Parcelable</name><operator>.</operator><name><name>Creator</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
    <function><specifier>public</specifier> <type><name>Address</name></type> <name>createFromParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>Address</name><index>[]</index></name></type> <name>newArray</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <name><name>Address</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</return>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Address</name></type> <name>UNKNOWN</name> <init>= <expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><literal type="string">"Unknown"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>AtomicReference</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExternalAddressFormatter</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cachedFormatter</name> <init>= <expr><operator>new</operator> <call><name><name>AtomicReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>address</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>Address</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>address</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>Address</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>in</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><call><name><name>in</name><operator>.</operator><name>readString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Address</name></type> <name>fromSerialized</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>serialized</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Address</name></type> <name>fromExternal</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>external</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Address</name><argument_list>(<argument><expr><call><name>getExternalAddressFormatter</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>format</name><argument_list>(<argument><expr><name>external</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>fromSerializedList</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>serialized</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type>      <name>escapedAddresses</name> <init>= <expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>addresses</name>        <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>escapedAddress</name> <range>: <expr><name>escapedAddresses</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>addresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>unescape</name></name><argument_list>(<argument><expr><name>escapedAddress</name></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>addresses</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>toSerializedList</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>&gt;</argument_list></name></type> <name>addresses</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>delimiter</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>escapedAddresses</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Address</name></type> <name>address</name> <range>: <expr><name>addresses</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>escapedAddresses</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>escape</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>delimiter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><call><name><name>Util</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>escapedAddresses</name></expr></argument>, <argument><expr><name>delimiter</name> <operator>+</operator> <literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>ExternalAddressFormatter</name></type> <name>getExternalAddressFormatter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>localNumber</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>String</name></argument>, <argument><name>ExternalAddressFormatter</name></argument>&gt;</argument_list></name></type> <name>cached</name> <init>= <expr><call><name><name>cachedFormatter</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>cached</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cached</name><operator>.</operator><name>first</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>cached</name><operator>.</operator><name>second</name></name></expr>;</return></block></then></if>

      <decl_stmt><decl><type><name>ExternalAddressFormatter</name></type> <name>formatter</name> <init>= <expr><operator>new</operator> <call><name>ExternalAddressFormatter</name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cachedFormatter</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>, <argument><expr><name>formatter</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>formatter</name></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>new</operator> <call><name>ExternalAddressFormatter</name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>getSimCountryIso</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">"US"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isGroup</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>GroupUtil</name><operator>.</operator><name>isEncodedGroup</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMmsGroup</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>GroupUtil</name><operator>.</operator><name>isMmsGroup</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isEmail</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>NumberUtil</name><operator>.</operator><name>isValidEmail</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isPhone</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>!</operator><call><name>isGroup</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isEmail</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>toGroupString</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isGroup</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Not group: "</literal> <operator>+</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
    <return>return <expr><name>address</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>toPhoneString</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isPhone</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Not e164: "</literal> <operator>+</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
    <return>return <expr><name>address</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>toEmailString</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isEmail</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Not email: "</literal> <operator>+</operator> <name>address</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
    <return>return <expr><name>address</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>address</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>serialize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>address</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>other</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>other</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>other</name> <operator>instanceof</operator> <name>Address</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <return>return <expr><call><name><name>address</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Address</name><operator>)</operator> <name>other</name><operator>)</operator><operator>.</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>address</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>describeContents</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>writeToParcel</name><parameter_list>(<parameter><decl><type><name>Parcel</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>dest</name><operator>.</operator><name>writeString</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>compareTo</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>address</name><operator>.</operator><name>compareTo</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><annotation>@<name>VisibleForTesting</name></annotation>
  <specifier>public</specifier> <specifier>static</specifier> class <name>ExternalAddressFormatter</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ExternalAddressFormatter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>SHORT_COUNTRIES</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"NU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"TK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"NC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"AC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>US_NO_AREACODE</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^(\\d{7})$"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Pattern</name></type> <name>BR_NO_AREACODE</name> <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"^(9?\\d{8})$"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>PhoneNumber</name></argument>&gt;</argument_list></name></type> <name>localNumber</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>                <name>localCountryCode</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PhoneNumberUtil</name></type> <name>phoneNumberUtil</name> <init>= <expr><call><name><name>PhoneNumberUtil</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Pattern</name></type>         <name>ALPHA_PATTERN</name>   <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"[a-zA-Z]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><name>ExternalAddressFormatter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>localNumberString</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>libNumber</name>   <init>= <expr><call><name><name>phoneNumberUtil</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>localNumberString</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>                     <name>countryCode</name> <init>= <expr><call><name><name>libNumber</name><operator>.</operator><name>getCountryCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localNumber</name></name>       <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PhoneNumber</name><argument_list>(<argument><expr><name>localNumberString</name></expr></argument>, <argument><expr><name>countryCode</name></expr></argument>, <argument><expr><call><name>parseAreaCode</name><argument_list>(<argument><expr><name>localNumberString</name></expr></argument>, <argument><expr><name>countryCode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localCountryCode</name></name>  <operator>=</operator> <call><name><name>phoneNumberUtil</name><operator>.</operator><name>getRegionCodeForNumber</name></name><argument_list>(<argument><expr><name>libNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></constructor>

    <constructor><name>ExternalAddressFormatter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>localCountryCode</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>countryCode</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localNumber</name></name>      <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localCountryCode</name></name> <operator>=</operator> <name>localCountryCode</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>format</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>number</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>                       <block type="pseudo"><return>return <expr><literal type="string">"Unknown"</literal></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>GroupUtil</name><operator>.</operator><name>isEncodedGroup</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><name>number</name></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>ALPHA_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>number</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

      <decl_stmt><decl><type><name>String</name></type> <name>bareNumber</name> <init>= <expr><call><name><name>number</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^0-9+]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>number</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"Unknown"</literal></expr>;</return></block></then>
        <else>else                             <block type="pseudo"><return>return <expr><call><name><name>number</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
      }</block></then></if>

      <comment type="line">// libphonenumber doesn't seem to be correct for Germany and Finland</comment>
      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="string">"DE"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"FI"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"SK"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
        <return>return <expr><name>bareNumber</name></expr>;</return>
      }</block></then></if>

      <comment type="line">// libphonenumber seems incorrect for Russia and a few other countries with 4 digit short codes.</comment>
      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SHORT_COUNTRIES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>bareNumber</name></expr>;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name>isShortCode</name><argument_list>(<argument><expr><name>bareNumber</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>bareNumber</name></expr>;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>String</name></type> <name>processedNumber</name> <init>= <expr><call><name>applyAreaCodeRules</name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>, <argument><expr><name>bareNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <try>try <block>{
        <decl_stmt><decl><type><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>parsedNumber</name> <init>= <expr><call><name><name>phoneNumberUtil</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>processedNumber</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>phoneNumberUtil</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>parsedNumber</name></expr></argument>, <argument><expr><name><name>PhoneNumberUtil</name><operator>.</operator><name>PhoneNumberFormat</name><operator>.</operator><name>E164</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then>
          <block type="pseudo"><return>return <expr><name>bareNumber</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>localNumberImprecise</name> <init>= <expr><ternary><condition><expr><call><name><name>localNumber</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>localNumber</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getE164Number</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>localNumberImprecise</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>localNumberImprecise</name> <operator>=</operator> <call><name><name>localNumberImprecise</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if <condition>(<expr><call><name><name>localNumberImprecise</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>localNumberImprecise</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
          <block type="pseudo"><return>return <expr><literal type="string">"+"</literal> <operator>+</operator> <name>number</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>difference</name> <init>= <expr><call><name><name>localNumberImprecise</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><literal type="string">"+"</literal> <operator>+</operator> <call><name><name>localNumberImprecise</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>difference</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>bareNumber</name></expr>;</return>
      }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isShortCode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>bareNumber</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>localCountryCode</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>parsedNumber</name> <init>= <expr><call><name><name>phoneNumberUtil</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>bareNumber</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>ShortNumberInfo</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPossibleShortNumberForRegion</name><argument_list>(<argument><expr><name>parsedNumber</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>parseAreaCode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>e164Number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>countryCode</name></decl></parameter>)</parameter_list> <block>{
      <switch>switch <condition>(<expr><name>countryCode</name></expr>)</condition> <block>{
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <return>return <expr><call><name><name>e164Number</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><literal type="number">55</literal></expr>:</case>
          <return>return <expr><call><name><name>e164Number</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</return>
      }</block></switch>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>


    <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>String</name></type> <name>applyAreaCodeRules</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>PhoneNumber</name></argument>&gt;</argument_list></name></type> <name>localNumber</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>testNumber</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>localNumber</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>localNumber</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAreaCode</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>testNumber</name></expr>;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>Matcher</name></type> <name>matcher</name></decl>;</decl_stmt>
      <switch>switch <condition>(<expr><call><name><name>localNumber</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCountryCode</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><literal type="number">1</literal></expr>:</case>
          <expr_stmt><expr><name>matcher</name> <operator>=</operator> <call><name><name>US_NO_AREACODE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>testNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>localNumber</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAreaCode</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>()</argument_list></call></expr>;</return>
          }</block></then></if>
          <break>break;</break>

        <case>case <expr><literal type="number">55</literal></expr>:</case>
          <expr_stmt><expr><name>matcher</name> <operator>=</operator> <call><name><name>BR_NO_AREACODE</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>testNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><call><name><name>matcher</name><operator>.</operator><name>matches</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>localNumber</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAreaCode</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>matcher</name><operator>.</operator><name>group</name></name><argument_list>()</argument_list></call></expr>;</return>
          }</block></then></if>
      }</block></switch>
      <return>return <expr><name>testNumber</name></expr>;</return>
    }</block></function>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>PhoneNumber</name> <block>{
      <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>           <name>e164Number</name></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>              <name>countryCode</name></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>areaCode</name></decl>;</decl_stmt>

      <constructor><name>PhoneNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>e164Number</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>countryCode</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>areaCode</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>e164Number</name></name>  <operator>=</operator> <name>e164Number</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>countryCode</name></name> <operator>=</operator> <name>countryCode</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>areaCode</name></name>    <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>areaCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <function><type><name>String</name></type> <name>getE164Number</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>e164Number</name></expr>;</return>
      }</block></function>

      <function><type><name>int</name></type> <name>getCountryCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>countryCode</name></expr>;</return>
      }</block></function>

      <function><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getAreaCode</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>areaCode</name></expr>;</return>
      }</block></function>
    }</block></class>
  }</block></class>
}</block></class>
</unit>
