<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\FastCursorRecyclerViewAdapter.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>FastCursorRecyclerViewAdapter</name><parameter_list>&lt;<parameter><name>VH</name> <extends>extends <name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></extends></parameter>, <parameter><name>T</name></parameter>&gt;</parameter_list></name>
    <super><extends>extends <name><name>CursorRecyclerViewAdapter</name><argument_list type="generic">&lt;<argument><name>VH</name></argument>&gt;</argument_list></name></extends></super>
<block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>FastCursorRecyclerViewAdapter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>fastRecords</name>       <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type>    <name>releasedRecordIds</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>protected</specifier> <name>FastCursorRecyclerViewAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addFastRecord</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>fastRecords</name><operator>.</operator><name>addFirst</name></name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>releaseFastRecord</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>releasedRecordIds</name></expr>)</init> <block>{
      <expr_stmt><expr><call><name><name>releasedRecordIds</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></synchronized>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>cleanFastRecords</name><parameter_list>()</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>releasedRecordIds</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>releaseIdIterator</name> <init>= <expr><call><name><name>releasedRecordIds</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><call><name><name>releaseIdIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>        <name>releasedId</name>         <init>= <expr><call><name><name>releaseIdIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>fastRecordIterator</name> <init>= <expr><call><name><name>fastRecords</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><call><name><name>fastRecordIterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <if>if <condition>(<expr><call><name>isRecordForId</name><argument_list>(<argument><expr><call><name><name>fastRecordIterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>releasedId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>fastRecordIterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>releaseIdIterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></while>
      }</block></while>
    }</block></synchronized>
  }</block></function>

  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>T</name></type> <name>getRecordFromCursor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onBindItemViewHolder</name><parameter_list>(<parameter><decl><type><name>VH</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>record</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>record</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>int</name></type> <name>getItemViewType</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>record</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>boolean</name></type> <name>isRecordForId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>T</name></type> <name>record</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getItemViewType</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>record</name> <init>= <expr><call><name>getRecordFromCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getItemViewType</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBindItemViewHolder</name><parameter_list>(<parameter><decl><type><name>VH</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>record</name> <init>= <expr><call><name>getRecordFromCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>onBindItemViewHolder</name><argument_list>(<argument><expr><name>viewHolder</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBindFastAccessItemViewHolder</name><parameter_list>(<parameter><decl><type><name>VH</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>calculatedPosition</name> <init>= <expr><call><name>getCalculatedPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>onBindItemViewHolder</name><argument_list>(<argument><expr><name>viewHolder</name></expr></argument>, <argument><expr><call><name><name>fastRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>calculatedPosition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>int</name></type> <name>getFastAccessSize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>fastRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>T</name></type> <name>getRecordForPositionOrThrow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isFastAccessPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>fastRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getCalculatedPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name>getCursorAtPositionOrThrow</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>getRecordFromCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>int</name></type> <name>getFastAccessItemViewType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getItemViewType</name><argument_list>(<argument><expr><call><name><name>fastRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getCalculatedPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isFastAccessPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>position</name> <operator>=</operator> <call><name>getCalculatedPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;</operator> <call><name><name>fastRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>long</name></type> <name>getFastAccessItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getItemId</name><argument_list>(<argument><expr><call><name><name>fastRecords</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name>getCalculatedPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getCalculatedPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><call><name>hasHeaderView</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>position</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>position</name></expr></else></ternary></expr>;</return>
  }</block></function>

}</block></class>
</unit>
