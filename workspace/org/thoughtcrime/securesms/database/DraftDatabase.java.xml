<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\DraftDatabase.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name><operator>.</operator><name>SQLCipherOpenHelper</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>DraftDatabase</name> <super><extends>extends <name>Database</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name>  <init>= <expr><literal type="string">"drafts"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ID</name>          <init>= <expr><literal type="string">"_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>THREAD_ID</name>   <init>= <expr><literal type="string">"thread_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DRAFT_TYPE</name>  <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DRAFT_VALUE</name> <init>= <expr><literal type="string">"value"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CREATE_TABLE</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" INTEGER PRIMARY KEY, "</literal> <operator>+</operator>
                                            <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>DRAFT_TYPE</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>DRAFT_VALUE</name> <operator>+</operator> <literal type="string">" TEXT);"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>CREATE_INDEXS</name> <init>= <expr><block>{
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS draft_thread_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>DraftDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>databaseHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>insertDrafts</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Draft</name></argument>&gt;</argument_list></name></type> <name>drafts</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>    <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Draft</name></type> <name>draft</name> <range>: <expr><name>drafts</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DRAFT_TYPE</name></expr></argument>, <argument><expr><call><name><name>draft</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DRAFT_VALUE</name></expr></argument>, <argument><expr><call><name><name>draft</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clearDrafts</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>clearDrafts</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>threadIds</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>        <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringBuilder</name></type>  <name>where</name>     <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type>   <name>arguments</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>long</name></type> <name>threadId</name> <range>: <expr><name>threadIds</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>where</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="string">" OR "</literal></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call>
           <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">" = ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>arguments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><call><name><name>where</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>substring</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>arguments</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>String</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>void</name></type> <name>clearAllDrafts</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Draft</name></argument>&gt;</argument_list></name></type> <name>getDrafts</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>   <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Draft</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name>       <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>type</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>DRAFT_TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>DRAFT_VALUE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Draft</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

      <return>return <expr><name>results</name></expr>;</return>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Draft</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TEXT</name>     <init>= <expr><literal type="string">"text"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>IMAGE</name>    <init>= <expr><literal type="string">"image"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIDEO</name>    <init>= <expr><literal type="string">"video"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>AUDIO</name>    <init>= <expr><literal type="string">"audio"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LOCATION</name> <init>= <expr><literal type="string">"location"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUOTE</name>    <init>= <expr><literal type="string">"quote"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>value</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Draft</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>type</name></name>  <operator>=</operator> <name>type</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>value</name></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>type</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>value</name></expr>;</return>
    }</block></function>

    <function><type><name>String</name></type> <name>getSnippet</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{
      <case>case <expr><name>TEXT</name></expr>:</case>     <return>return <expr><name>value</name></expr>;</return>
      <case>case <expr><name>IMAGE</name></expr>:</case>    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DraftDatabase_Draft_image_snippet</name></name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>VIDEO</name></expr>:</case>    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DraftDatabase_Draft_video_snippet</name></name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>AUDIO</name></expr>:</case>    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DraftDatabase_Draft_audio_snippet</name></name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>LOCATION</name></expr>:</case> <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DraftDatabase_Draft_location_snippet</name></name></expr></argument>)</argument_list></call></expr>;</return>
      <case>case <expr><name>QUOTE</name></expr>:</case>    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>DraftDatabase_Draft_quote_snippet</name></name></expr></argument>)</argument_list></call></expr>;</return>
      <default>default:</default>       <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></switch>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Drafts</name> <super><extends>extends <name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>Draft</name></argument>&gt;</argument_list></name></extends></super> <block>{
    <function><specifier>private</specifier> <type><name>Draft</name></type> <name>getDraftOfType</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
      <for>for <control>(<init><decl><type><name>Draft</name></type> <name>draft</name> <range>: <expr><name>this</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>type</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>draft</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><name>draft</name></expr>;</return>
        }</block></then></if>
      }</block></for>
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getSnippet</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Draft</name></type> <name>textDraft</name> <init>= <expr><call><name>getDraftOfType</name><argument_list>(<argument><expr><name><name>Draft</name><operator>.</operator><name>TEXT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>textDraft</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>textDraft</name><operator>.</operator><name>getSnippet</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getSnippet</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if></elseif> <else>else <block>{
        <return>return <expr><literal type="string">""</literal></expr>;</return>
      }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Uri</name></type> <name>getUriSnippet</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>Draft</name></type> <name>imageDraft</name> <init>= <expr><call><name>getDraftOfType</name><argument_list>(<argument><expr><name><name>Draft</name><operator>.</operator><name>IMAGE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>imageDraft</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>imageDraft</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>imageDraft</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>

      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
