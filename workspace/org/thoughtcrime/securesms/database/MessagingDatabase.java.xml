<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\MessagingDatabase.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>Document</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatchList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name><operator>.</operator><name>SQLCipherOpenHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>MessagingDatabase</name> <super><extends>extends <name>Database</name></extends> <implements>implements <name>MmsSmsColumns</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MessagingDatabase</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>MessagingDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>databaseHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>String</name></type> <name>getTableName</name><parameter_list>()</parameter_list>;</function_decl>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>markExpireStarted</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>markExpireStarted</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>startTime</name></decl></parameter>)</parameter_list>;</function_decl>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>markAsSent</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>secure</name></decl></parameter>)</parameter_list>;</function_decl>
  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>markUnidentified</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unidentified</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setMismatchedIdentity</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>items</name> <init>= <expr><operator>new</operator> <class><super><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>IdentityKeyMismatch</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>IdentityKeyMismatchList</name></type> <name>document</name> <init>= <expr><operator>new</operator> <call><name>IdentityKeyMismatchList</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name>setDocument</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>MISMATCHED_IDENTITIES</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addMismatchedIdentity</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name>addToDocument</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>MISMATCHED_IDENTITIES</name></expr></argument>,
                    <argument><expr><operator>new</operator> <call><name>IdentityKeyMismatch</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name><name>IdentityKeyMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>removeMismatchedIdentity</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>IdentityKey</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name>removeFromDocument</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>MISMATCHED_IDENTITIES</name></expr></argument>,
                         <argument><expr><operator>new</operator> <call><name>IdentityKeyMismatch</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>identityKey</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name><name>IdentityKeyMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>D</name> <extends>extends <name><name>Document</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></extends></parameter>, <parameter><name>I</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>removeFromDocument</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>I</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name>D</name></type>           <name>document</name> <init>= <expr><call><name>getDocument</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>document</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>iterator</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><call><name><name>iterator</name><operator>.</operator><name>hasNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>I</name></type> <name>item</name> <init>= <expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>item</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></while>

      <expr_stmt><expr><call><name>setDocument</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>
  }</block></function>

  <function><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>Document</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></extends></parameter>, <parameter><name>I</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>addToDocument</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>I</name></type> <name>object</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>list</name> <init>= <expr><operator>new</operator> <class><super><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <constructor_decl><name>add</name><parameter_list>(<parameter><decl><type><name>object</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>addToDocument</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>list</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <parameter_list type="generic">&lt;<parameter><name>T</name> <extends>extends <name><name>Document</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></extends></parameter>, <parameter><name>I</name></parameter>&gt;</parameter_list> <type><name>void</name></type> <name>addToDocument</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>I</name></argument>&gt;</argument_list></name></type> <name>objects</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name>T</name></type> <name>document</name> <init>= <expr><call><name>getDocument</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>document</name><operator>.</operator><name>getList</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addAll</name><argument_list>(<argument><expr><name>objects</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setDocument</name><argument_list>(<argument><expr><name>database</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>column</name></expr></argument>, <argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setDocument</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name>Document</name></type> <name>document</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>document</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>document</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <parameter_list type="generic">&lt;<parameter><name>D</name> <extends>extends <name>Document</name></extends></parameter>&gt;</parameter_list> <type><name>D</name></type> <name>getDocument</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>database</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>,
                                             <parameter><decl><type><name>String</name></type> <name>column</name></decl></parameter>, <parameter><decl><type><name><name>Class</name><argument_list type="generic">&lt;<argument><name>D</name></argument>&gt;</argument_list></name></type> <name>clazz</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><call><name>getTableName</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>column</name></expr>}</block></expr></argument>,
                              <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                              <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>document</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name>clazz</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></then></if>

      <try>try <block>{
        <return>return <expr><call><name><name>clazz</name><operator>.</operator><name>newInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InstantiationException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>IllegalAccessException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>

    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>SyncMessageId</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Address</name></type> <name>address</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>   <name>timetamp</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SyncMessageId</name><parameter_list>(<parameter><decl><type><name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timetamp</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name>  <operator>=</operator> <name>address</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timetamp</name></name> <operator>=</operator> <name>timetamp</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Address</name></type> <name>getAddress</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>address</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getTimetamp</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>timetamp</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>ExpirationInfo</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>    <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>    <name>expiresIn</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>    <name>expireStarted</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>mms</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ExpirationInfo</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expireStarted</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>mms</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>            <operator>=</operator> <name>id</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiresIn</name></name>     <operator>=</operator> <name>expiresIn</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expireStarted</name></name> <operator>=</operator> <name>expireStarted</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mms</name></name>           <operator>=</operator> <name>mms</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>id</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getExpiresIn</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>expiresIn</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getExpireStarted</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>expireStarted</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isMms</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>mms</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>MarkedMessageInfo</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SyncMessageId</name></type>  <name>syncMessageId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ExpirationInfo</name></type> <name>expirationInfo</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>MarkedMessageInfo</name><parameter_list>(<parameter><decl><type><name>SyncMessageId</name></type> <name>syncMessageId</name></decl></parameter>, <parameter><decl><type><name>ExpirationInfo</name></type> <name>expirationInfo</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>syncMessageId</name></name>  <operator>=</operator> <name>syncMessageId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationInfo</name></name> <operator>=</operator> <name>expirationInfo</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>SyncMessageId</name></type> <name>getSyncMessageId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>syncMessageId</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>ExpirationInfo</name></type> <name>getExpirationInfo</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>expirationInfo</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>InsertResult</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>messageId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>threadId</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>InsertResult</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageId</name></name> <operator>=</operator> <name>messageId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getMessageId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>messageId</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getThreadId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>threadId</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
