<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\MmsDatabase.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>NotificationInd</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>android</name><operator>.</operator><name>mms</name><operator>.</operator><name>pdu_alt</name><operator>.</operator><name>PduHeaders</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONArray</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>json</name><operator>.</operator><name>JSONObject</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>DatabaseAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>MmsNotificationAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatchList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>NetworkFailure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>NetworkFailureList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name><operator>.</operator><name>SQLCipherOpenHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MediaMmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>NotificationMmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>Quote</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>JobManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>TrimThreadJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name><operator>.</operator><name>LinkPreview</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>IncomingMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>MmsException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingExpirationUpdateMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingGroupMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingSecureMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>QuoteModel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlideDeck</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientFormattingException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>Closeable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name><operator>.</operator><name>Avatar</name></name>;</import>

<class><specifier>public</specifier> class <name>MmsDatabase</name> <super><extends>extends <name>MessagingDatabase</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MmsDatabase</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name>         <init>= <expr><literal type="string">"mms"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATE_SENT</name>          <init>= <expr><literal type="string">"date"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATE_RECEIVED</name>      <init>= <expr><literal type="string">"date_received"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MESSAGE_BOX</name>        <init>= <expr><literal type="string">"msg_box"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CONTENT_LOCATION</name>   <init>= <expr><literal type="string">"ct_l"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EXPIRY</name>             <init>= <expr><literal type="string">"exp"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MESSAGE_TYPE</name>       <init>= <expr><literal type="string">"m_type"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MESSAGE_SIZE</name>       <init>= <expr><literal type="string">"m_size"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATUS</name>             <init>= <expr><literal type="string">"st"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TRANSACTION_ID</name>     <init>= <expr><literal type="string">"tr_id"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PART_COUNT</name>         <init>= <expr><literal type="string">"part_count"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NETWORK_FAILURE</name>    <init>= <expr><literal type="string">"network_failures"</literal></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUOTE_ID</name>         <init>= <expr><literal type="string">"quote_id"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUOTE_AUTHOR</name>     <init>= <expr><literal type="string">"quote_author"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUOTE_BODY</name>       <init>= <expr><literal type="string">"quote_body"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUOTE_ATTACHMENT</name> <init>= <expr><literal type="string">"quote_attachment"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>QUOTE_MISSING</name>    <init>= <expr><literal type="string">"quote_missing"</literal></expr></init></decl>;</decl_stmt>

          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SHARED_CONTACTS</name> <init>= <expr><literal type="string">"shared_contacts"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>LINK_PREVIEWS</name>   <init>= <expr><literal type="string">"previews"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CREATE_TABLE</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" INTEGER PRIMARY KEY, "</literal>                          <operator>+</operator>
    <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>DATE_SENT</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
    <name>READ</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <literal type="string">"m_id"</literal> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <literal type="string">"sub"</literal> <operator>+</operator> <literal type="string">" TEXT, "</literal>                <operator>+</operator>
    <literal type="string">"sub_cs"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>BODY</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>PART_COUNT</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal>               <operator>+</operator>
    <literal type="string">"ct_t"</literal> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>CONTENT_LOCATION</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>ADDRESS</name> <operator>+</operator> <literal type="string">" TEXT, "</literal>               <operator>+</operator>
    <name>ADDRESS_DEVICE_ID</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal>                                                            <operator>+</operator>
    <name>EXPIRY</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <literal type="string">"m_cls"</literal> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>MESSAGE_TYPE</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal>             <operator>+</operator>
    <literal type="string">"v"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>MESSAGE_SIZE</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <literal type="string">"pri"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal>          <operator>+</operator>
    <literal type="string">"rr"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <literal type="string">"rpt_a"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <literal type="string">"resp_st"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
    <name>STATUS</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>TRANSACTION_ID</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <literal type="string">"retr_st"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal>         <operator>+</operator>
    <literal type="string">"retr_txt"</literal> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <literal type="string">"retr_txt_cs"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <literal type="string">"read_status"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal>    <operator>+</operator>
    <literal type="string">"ct_cls"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <literal type="string">"resp_txt"</literal> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <literal type="string">"d_tm"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal>     <operator>+</operator>
    <name>DELIVERY_RECEIPT_COUNT</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>MISMATCHED_IDENTITIES</name> <operator>+</operator> <literal type="string">" TEXT DEFAULT NULL, "</literal>     <operator>+</operator>
    <name>NETWORK_FAILURE</name> <operator>+</operator> <literal type="string">" TEXT DEFAULT NULL,"</literal> <operator>+</operator> <literal type="string">"d_rpt"</literal> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
    <name>SUBSCRIPTION_ID</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT -1, "</literal> <operator>+</operator> <name>EXPIRES_IN</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator>
    <name>EXPIRE_STARTED</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>NOTIFIED</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator>
    <name>READ_RECEIPT_COUNT</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>QUOTE_ID</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator>
    <name>QUOTE_AUTHOR</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>QUOTE_BODY</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>QUOTE_ATTACHMENT</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT -1, "</literal> <operator>+</operator>
    <name>QUOTE_MISSING</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>SHARED_CONTACTS</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>UNIDENTIFIED</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator>
    <name>LINK_PREVIEWS</name> <operator>+</operator> <literal type="string">" TEXT);"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>CREATE_INDEXS</name> <init>= <expr><block>{
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_thread_id_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_read_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_read_and_notified_and_thread_id_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>NOTIFIED</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_message_box_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_date_sent_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>DATE_SENT</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_thread_date_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">");"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>MMS_PROJECTION</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
      <expr><name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" AS "</literal> <operator>+</operator> <name>ID</name></expr>,
      <expr><name>THREAD_ID</name></expr>, <expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" AS "</literal> <operator>+</operator> <name>NORMALIZED_DATE_SENT</name></expr>,
      <expr><name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">" AS "</literal> <operator>+</operator> <name>NORMALIZED_DATE_RECEIVED</name></expr>,
      <expr><name>MESSAGE_BOX</name></expr>, <expr><name>READ</name></expr>,
      <expr><name>CONTENT_LOCATION</name></expr>, <expr><name>EXPIRY</name></expr>, <expr><name>MESSAGE_TYPE</name></expr>,
      <expr><name>MESSAGE_SIZE</name></expr>, <expr><name>STATUS</name></expr>, <expr><name>TRANSACTION_ID</name></expr>,
      <expr><name>BODY</name></expr>, <expr><name>PART_COUNT</name></expr>, <expr><name>ADDRESS</name></expr>, <expr><name>ADDRESS_DEVICE_ID</name></expr>,
      <expr><name>DELIVERY_RECEIPT_COUNT</name></expr>, <expr><name>READ_RECEIPT_COUNT</name></expr>, <expr><name>MISMATCHED_IDENTITIES</name></expr>, <expr><name>NETWORK_FAILURE</name></expr>, <expr><name>SUBSCRIPTION_ID</name></expr>,
      <expr><name>EXPIRES_IN</name></expr>, <expr><name>EXPIRE_STARTED</name></expr>, <expr><name>NOTIFIED</name></expr>, <expr><name>QUOTE_ID</name></expr>, <expr><name>QUOTE_AUTHOR</name></expr>, <expr><name>QUOTE_BODY</name></expr>, <expr><name>QUOTE_ATTACHMENT</name></expr>, <expr><name>QUOTE_MISSING</name></expr>,
      <expr><name>SHARED_CONTACTS</name></expr>, <expr><name>LINK_PREVIEWS</name></expr>, <expr><name>UNIDENTIFIED</name></expr>,
      <expr><literal type="string">"json_group_array(json_object("</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>ROW_ID</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>ROW_ID</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>UNIQUE_ID</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>UNIQUE_ID</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>MMS_ID</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>MMS_ID</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>SIZE</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>SIZE</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>FILE_NAME</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>FILE_NAME</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>DATA</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>DATA</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>THUMBNAIL</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>THUMBNAIL</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CONTENT_TYPE</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CONTENT_TYPE</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CONTENT_LOCATION</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CONTENT_LOCATION</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>FAST_PREFLIGHT_ID</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>FAST_PREFLIGHT_ID</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>VOICE_NOTE</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>VOICE_NOTE</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>WIDTH</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>WIDTH</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>HEIGHT</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>HEIGHT</name></name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>QUOTE</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>QUOTE</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CONTENT_DISPOSITION</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CONTENT_DISPOSITION</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>NAME</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_STATE</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_STATE</name></name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
          <literal type="string">"'"</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CAPTION</name></name> <operator>+</operator> <literal type="string">"', "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>CAPTION</name></name> <operator>+</operator>
          <literal type="string">")) AS "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>ATTACHMENT_JSON_ALIAS</name></name></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RAW_ID_WHERE</name> <init>= <expr><name>TABLE_NAME</name> <operator>+</operator> <literal type="string">"._id = ?"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>EarlyReceiptCache</name></type> <name>earlyDeliveryReceiptCache</name> <init>= <expr><operator>new</operator> <call><name>EarlyReceiptCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>EarlyReceiptCache</name></type> <name>earlyReadReceiptCache</name>     <init>= <expr><operator>new</operator> <call><name>EarlyReceiptCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>JobManager</name></type> <name>jobManager</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>MmsDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>databaseHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobManager</name></name> <operator>=</operator> <call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>String</name></type> <name>getTableName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>TABLE_NAME</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getMessageCountForThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"COUNT(*)"</literal></expr>}</block></expr></argument>, <argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addFailures</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type> <name>failure</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name>addToDocument</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>NETWORK_FAILURE</name></expr></argument>, <argument><expr><name>failure</name></expr></argument>, <argument><expr><name><name>NetworkFailureList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>removeFailure</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>NetworkFailure</name></type> <name>failure</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <expr_stmt><expr><call><name>removeFromDocument</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>NETWORK_FAILURE</name></expr></argument>, <argument><expr><name>failure</name></expr></argument>, <argument><expr><name><name>NetworkFailureList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>incrementReceiptCount</name><parameter_list>(<parameter><decl><type><name>SyncMessageId</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deliveryReceipt</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>readReceipt</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>         <name>cursor</name>   <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>        <name>found</name>    <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>, <expr><name>THREAD_ID</name></expr>, <expr><name>MESSAGE_BOX</name></expr>, <expr><name>ADDRESS</name></expr>}</block></expr></argument>, <argument><expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name><name>Types</name><operator>.</operator><name>isOutgoingMessageType</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>Address</name></type> <name>theirAddress</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Address</name></type> <name>ourAddress</name>   <init>= <expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type>  <name>columnName</name>   <init>= <expr><ternary><condition><expr><name>deliveryReceipt</name></expr> ?</condition><then> <expr><name>DELIVERY_RECEIPT_COUNT</name></expr> </then><else>: <expr><name>READ_RECEIPT_COUNT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>ourAddress</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>theirAddress</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>theirAddress</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>id</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type>  <name>status</name>   <init>= <expr><ternary><condition><expr><name>deliveryReceipt</name></expr> ?</condition><then> <expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>STATUS_DELIVERED</name></name></expr> </then><else>: <expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>STATUS_READ</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>found</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" SET "</literal> <operator>+</operator>
                             <name>columnName</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>columnName</name> <operator>+</operator> <literal type="string">" + 1 WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                             <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupReceiptDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>ourAddress</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>deliveryReceipt</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>earlyDeliveryReceiptCache</name><operator>.</operator><name>increment</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>readReceipt</name></expr>)</condition><then>     <block type="pseudo"><expr_stmt><expr><call><name><name>earlyReadReceiptCache</name><operator>.</operator><name>increment</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></then></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getThreadIdForMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>sql</name>        <init>= <expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>sqlArgs</name>  <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>getThreadIdFor</name><parameter_list>(<parameter><decl><type><name>IncomingMediaMessage</name></type> <name>retrieved</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>RecipientFormattingException</name></expr></argument>, <argument><expr><name>MmsException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Recipient</name></type> <name>groupRecipients</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>groupRecipients</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>Recipient</name></type> <name>sender</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>sender</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>getThreadIdFor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>NotificationInd</name></type> <name>notification</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>fromString</name> <init>= <expr><ternary><condition><expr><call><name><name>notification</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>notification</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextString</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>
                      ?</condition><then> <expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>notification</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                      </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>fromString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Cursor</name></type> <name>rawQuery</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>String</name><index>[]</index></name></type> <name>arguments</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>database</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT "</literal> <operator>+</operator> <call><name><name>Util</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>MMS_PROJECTION</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call> <operator>+</operator>
                             <literal type="string">" FROM "</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator>  <literal type="string">" LEFT OUTER JOIN "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator>
                             <literal type="string">" ON ("</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>ID</name></name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>MMS_ID</name></name> <operator>+</operator> <literal type="string">")"</literal> <operator>+</operator>
                             <literal type="string">" WHERE "</literal> <operator>+</operator> <name>where</name> <operator>+</operator> <literal type="string">" GROUP BY "</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"."</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>ID</name></name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>getMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name>rawQuery</name><argument_list>(<argument><expr><name>RAW_ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>messageId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setNotifyConverationListeners</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cursor</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Reader</name></type> <name>getExpireStartedMessages</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>where</name> <init>= <expr><name>EXPIRE_STARTED</name> <operator>+</operator> <literal type="string">" &gt; 0"</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>readerFor</name><argument_list>(<argument><expr><call><name>rawQuery</name><argument_list>(<argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateMailboxBitmask</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOn</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator>
                   <literal type="string">" SET "</literal> <operator>+</operator> <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">" = ("</literal> <operator>+</operator> <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">" &amp; "</literal> <operator>+</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name> <operator>-</operator> <name>maskOff</name><operator>)</operator> <operator>+</operator> <literal type="string">" | "</literal> <operator>+</operator> <name>maskOn</name> <operator>+</operator> <literal type="string">" )"</literal> <operator>+</operator>
                   <literal type="string">" WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>id</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>threadId</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>threadId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsOutbox</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_OUTBOX_TYPE</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsForcedSms</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>MESSAGE_FORCE_SMS_BIT</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsPendingInsecureSmsFallback</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_PENDING_INSECURE_SMS_FALLBACK</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsSending</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_SENDING_TYPE</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsSentFailed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_SENT_FAILED_TYPE</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markAsSent</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>secure</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_SENT_TYPE</name></name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>secure</name></expr> ?</condition><then> <expr><name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markDownloadState</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name>     <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>STATUS</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>messageId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsNoSession</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_NO_SESSION_BIT</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

<comment type="line">//  public void markAsSecure(long messageId) {</comment>
<comment type="line">//    updateMailboxBitmask(messageId, 0, Types.SECURE_MESSAGE_BIT, Optional.&lt;Long&gt;absent());</comment>
<comment type="line">//  }</comment>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsInsecure</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Optional</name><operator>.</operator></name>&lt;<name>Long</name><operator>&gt;</operator><call><name>absent</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

<comment type="line">//  public void markAsPush(long messageId) {</comment>
<comment type="line">//    updateMailboxBitmask(messageId, 0, Types.PUSH_MESSAGE_BIT, Optional.&lt;Long&gt;absent());</comment>
<comment type="line">//  }</comment>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsDecryptFailed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_FAILED_BIT</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsDecryptDuplicate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_DUPLICATE_BIT</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsLegacyVersion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateMailboxBitmask</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_LEGACY_BIT</name></name></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markUnidentified</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unidentified</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>UNIDENTIFIED</name></expr></argument>, <argument><expr><ternary><condition><expr><name>unidentified</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markExpireStarted</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>markExpireStarted</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markExpireStarted</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>startedTimestamp</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRE_STARTED</name></expr></argument>, <argument><expr><name>startedTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsNotified</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name>      <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ContentValues</name></type>  <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NOTIFIED</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>


  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>setMessagesRead</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>setMessagesRead</name><argument_list>(<argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">" = 0"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>setAllMessagesRead</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>setMessagesRead</name><argument_list>(<argument><expr><name>READ</name> <operator>+</operator> <literal type="string">" = 0"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>setMessagesRead</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arguments</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type>          <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>result</name>   <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>                  <name>cursor</name>   <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>, <expr><name>ADDRESS</name></expr>, <expr><name>DATE_SENT</name></expr>, <expr><name>MESSAGE_BOX</name></expr>, <expr><name>EXPIRES_IN</name></expr>, <expr><name>EXPIRE_STARTED</name></expr>}</block></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while<condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name><name>Types</name><operator>.</operator><name>isSecureType</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>SyncMessageId</name></type>  <name>syncMessageId</name>  <init>= <expr><operator>new</operator> <call><name>SyncMessageId</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ExpirationInfo</name></type> <name>expirationInfo</name> <init>= <expr><operator>new</operator> <call><name>ExpirationInfo</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkedMessageInfo</name><argument_list>(<argument><expr><name>syncMessageId</name></expr></argument>, <argument><expr><name>expirationInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>setTimestampRead</name><parameter_list>(<parameter><decl><type><name>SyncMessageId</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>proposedExpireStarted</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type>         <name>database</name>        <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>expiring</name>        <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>                 <name>cursor</name>          <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>, <expr><name>THREAD_ID</name></expr>, <expr><name>MESSAGE_BOX</name></expr>, <expr><name>EXPIRES_IN</name></expr>, <expr><name>EXPIRE_STARTED</name></expr>, <expr><name>ADDRESS</name></expr>}</block></expr></argument>, <argument><expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>Address</name></type> <name>theirAddress</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Address</name></type> <name>ourAddress</name>   <init>= <expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>ourAddress</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>theirAddress</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>theirAddress</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>long</name></type> <name>id</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>threadId</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>expiresIn</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>expireStarted</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>EXPIRE_STARTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>expireStarted</name> <operator>=</operator> <ternary><condition><expr><name>expireStarted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>proposedExpireStarted</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>proposedExpireStarted</name></expr></else></ternary></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>expiresIn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRE_STARTED</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>expiring</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>expiresIn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>

          <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>updateReadState</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLastSeen</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><name>expiring</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>updateMessageBody</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>updateMessageBodyAndType</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>updateMessageBodyAndType</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOn</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" SET "</literal> <operator>+</operator> <name>BODY</name> <operator>+</operator> <literal type="string">" = ?, "</literal> <operator>+</operator>
               <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">" = ("</literal> <operator>+</operator> <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">" &amp; "</literal> <operator>+</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name> <operator>-</operator> <name>maskOff</name><operator>)</operator> <operator>+</operator> <literal type="string">" | "</literal> <operator>+</operator> <name>maskOn</name> <operator>+</operator> <literal type="string">") "</literal> <operator>+</operator>
               <literal type="string">"WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
               <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>body</name></expr>, <expr><name>messageId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MmsNotificationInfo</name></argument>&gt;</argument_list></name></type> <name>getNotification</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>rawQuery</name><argument_list>(<argument><expr><name>RAW_ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MmsNotificationInfo</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>CONTENT_LOCATION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>TRANSACTION_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                                   <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></else></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>OutgoingMediaMessage</name></type> <name>getOutgoingMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>MmsException</name></expr></argument>, <argument><expr><name>NoSuchMessageException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>AttachmentDatabase</name></type> <name>attachmentDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>             <name>cursor</name>             <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>rawQuery</name><argument_list>(<argument><expr><name>RAW_ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type> <name>associatedAttachments</name> <init>= <expr><call><name><name>attachmentDatabase</name><operator>.</operator><name>getAttachmentsForMessage</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type>             <name>outboxType</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>           <name>body</name>               <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>BODY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>             <name>timestamp</name>          <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>NORMALIZED_DATE_SENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>              <name>subscriptionId</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>             <name>expiresIn</name>          <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>           <name>address</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>             <name>threadId</name>           <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>              <name>distributionType</name>   <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getDistributionType</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>           <name>mismatchDocument</name>   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>MISMATCHED_IDENTITIES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>           <name>networkDocument</name>    <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>NETWORK_FAILURE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>long</name></type>              <name>quoteId</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>QUOTE_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>            <name>quoteAuthor</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>QUOTE_AUTHOR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>            <name>quoteText</name>          <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>QUOTE_BODY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type>           <name>quoteMissing</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>QUOTE_MISSING</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type>  <name>quoteAttachments</name>   <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>associatedAttachments</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Attachment</name><operator>::</operator><name>isQuote</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>(</operator><name>Attachment</name><operator>)</operator><name>a</name></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type>     <name>contacts</name>           <init>= <expr><call><name>getSharedContacts</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>associatedAttachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type>   <name>contactAttachments</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>contacts</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Contact</name><operator>::</operator><name>getAvatarAttachment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>previews</name>           <init>= <expr><call><name>getLinkPreviews</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>associatedAttachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type>   <name>previewAttachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>previews</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>lp</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>lp</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type>  <name>attachments</name>        <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>associatedAttachments</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><name>Attachment</name><operator>::</operator><name>isQuote</name></expr></argument>)</argument_list></call>
                                                                               <operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><name>contactAttachments</name><operator>::</operator><name>contains</name></expr></argument>)</argument_list></call>
                                                                               <operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><name>previewAttachments</name><operator>::</operator><name>contains</name></expr></argument>)</argument_list></call>
                                                                               <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>(</operator><name>Attachment</name><operator>)</operator><name>a</name></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Recipient</name></type>                 <name>recipient</name>       <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type>      <name>networkFailures</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name>      <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>QuoteModel</name></type>                <name>quote</name>           <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>quoteId</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>quoteText</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>quoteAttachments</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>quote</name> <operator>=</operator> <operator>new</operator> <call><name>QuoteModel</name><argument_list>(<argument><expr><name>quoteId</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>quoteAuthor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quoteText</name></expr></argument>, <argument><expr><name>quoteMissing</name></expr></argument>, <argument><expr><name>quoteAttachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mismatchDocument</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <expr_stmt><expr><name>mismatches</name> <operator>=</operator> <call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>mismatchDocument</name></expr></argument>, <argument><expr><name><name>IdentityKeyMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>networkDocument</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <expr_stmt><expr><name>networkFailures</name> <operator>=</operator> <call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>networkDocument</name></expr></argument>, <argument><expr><name><name>NetworkFailureList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>

        <if>if <condition>(<expr><name>body</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>Types</name><operator>.</operator><name>isGroupQuit</name></name><argument_list>(<argument><expr><name>outboxType</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>Types</name><operator>.</operator><name>isGroupUpdate</name></name><argument_list>(<argument><expr><name>outboxType</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
          <return>return <expr><operator>new</operator> <call><name>OutgoingGroupMediaMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>attachments</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>contacts</name></expr></argument>, <argument><expr><name>previews</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>Types</name><operator>.</operator><name>isExpirationTimerUpdate</name></name><argument_list>(<argument><expr><name>outboxType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><operator>new</operator> <call><name>OutgoingExpirationUpdateMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>expiresIn</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif></if>

        <decl_stmt><decl><type><name>OutgoingMediaMessage</name></type> <name>message</name> <init>= <expr><operator>new</operator> <call><name>OutgoingMediaMessage</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>attachments</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>subscriptionId</name></expr></argument>, <argument><expr><name>expiresIn</name></expr></argument>, <argument><expr><name>distributionType</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>contacts</name></expr></argument>, <argument><expr><name>previews</name></expr></argument>, <argument><expr><name>networkFailures</name></expr></argument>, <argument><expr><name>mismatches</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>Types</name><operator>.</operator><name>isSecureType</name></name><argument_list>(<argument><expr><name>outboxType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><operator>new</operator> <call><name>OutgoingSecureMediaMessage</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>

        <return>return <expr><name>message</name></expr>;</return>
      }</block></then></if>

      <throw>throw <expr><operator>new</operator> <call><name>NoSuchMessageException</name><argument_list>(<argument><expr><literal type="string">"No record found for id: "</literal> <operator>+</operator> <name>messageId</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>MmsException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>getSharedContacts</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>serializedContacts</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>SHARED_CONTACTS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>serializedContacts</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>AttachmentId</name></argument>, <argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type> <name>attachmentIdMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>DatabaseAttachment</name></type> <name>attachment</name> <range>: <expr><name>attachments</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>attachmentIdMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>contacts</name>     <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>JSONArray</name></type>     <name>jsonContacts</name> <init>= <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>serializedContacts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>jsonContacts</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>Contact</name></type> <name>contact</name> <init>= <expr><call><name><name>Contact</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>jsonContacts</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachmentId</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>DatabaseAttachment</name></type> <name>attachment</name>    <init>= <expr><call><name><name>attachmentIdMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachmentId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Avatar</name></type>             <name>updatedAvatar</name> <init>= <expr><operator>new</operator> <call><name>Avatar</name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachmentId</name><argument_list>()</argument_list></call></expr></argument>,
                                                        <argument><expr><name>attachment</name></expr></argument>,
                                                        <argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isProfile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>contacts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name>contact</name></expr></argument>, <argument><expr><name>updatedAvatar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>contacts</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></for>

      <return>return <expr><name>contacts</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse shared contacts."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>getLinkPreviews</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>serializedPreviews</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>LINK_PREVIEWS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>serializedPreviews</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>AttachmentId</name></argument>, <argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type> <name>attachmentIdMap</name> <init>= <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>DatabaseAttachment</name></type> <name>attachment</name> <range>: <expr><name>attachments</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>attachmentIdMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <try>try <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>previews</name>     <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>JSONArray</name></type>         <name>jsonPreviews</name> <init>= <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>(<argument><expr><name>serializedPreviews</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>jsonPreviews</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>LinkPreview</name></type> <name>preview</name> <init>= <expr><call><name><name>LinkPreview</name><operator>.</operator><name>deserialize</name></name><argument_list>(<argument><expr><call><name><name>jsonPreviews</name><operator>.</operator><name>getJSONObject</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>preview</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>DatabaseAttachment</name></type> <name>attachment</name> <init>= <expr><call><name><name>attachmentIdMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>preview</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>attachment</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>previews</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkPreview</name><argument_list>(<argument><expr><call><name><name>preview</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>preview</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>attachment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>previews</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>preview</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></for>

      <return>return <expr><name>previews</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse shared contacts."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <return>return <expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>copyMessageInbox</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>MmsException</name></expr></argument></throws> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>OutgoingMediaMessage</name></type> <name>request</name> <init>= <expr><call><name>getOutgoingMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>request</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>request</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name><name>contentValues</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>, <argument><expr><call><name><name>request</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><call><name><name>request</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>DatabaseAttachment</name></type> <name>databaseAttachment</name> <init>= <expr><operator>(</operator><name>DatabaseAttachment</name><operator>)</operator><name>attachment</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>attachments</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DatabaseAttachment</name><argument_list>(<argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getMmsId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>hasData</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>hasThumbnail</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getLocation</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getRelay</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getDigest</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getFastPreflightId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>isVoiceNote</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>isQuote</name></name><argument_list>()</argument_list></call></expr></argument>,
                                               <argument><expr><call><name><name>databaseAttachment</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <return>return <expr><call><name>insertMediaMessage</name><argument_list>(<argument><expr><call><name><name>request</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name>attachments</name></expr></argument>,
                                <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>request</name><operator>.</operator><name>getSharedContacts</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><call><name><name>request</name><operator>.</operator><name>getLinkPreviews</name></name><argument_list>()</argument_list></call></expr></argument>,
                                <argument><expr><name>contentValues</name></expr></argument>,
                                <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>MmsException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InsertResult</name></argument>&gt;</argument_list></name></type> <name>insertMessageInbox</name><parameter_list>(<parameter><decl><type><name>IncomingMediaMessage</name></type> <name>retrieved</name></decl></parameter>,
                                                    <parameter><decl><type><name>String</name></type> <name>contentLocation</name></decl></parameter>,
                                                    <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mailbox</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>MmsException</name></expr></argument></throws>
  <block>{
    <if>if <condition>(<expr><name>threadId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <call><name><name>retrieved</name><operator>.</operator><name>isGroupMessage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <try>try <block>{
        <expr_stmt><expr><name>threadId</name> <operator>=</operator> <call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>retrieved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>RecipientFormattingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"MmsDatabase"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>threadId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
          <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>MmsException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>
      }</block></catch></try>
    }</block></then></if>

    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>, <argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MESSAGE_TYPE</name></expr></argument>, <argument><expr><name><name>PduHeaders</name><operator>.</operator><name>MESSAGE_TYPE_RETRIEVE_CONF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>CONTENT_LOCATION</name></expr></argument>, <argument><expr><name>contentLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>STATUS</name></expr></argument>, <argument><expr><name><name>Status</name><operator>.</operator><name>DOWNLOAD_INITIALIZED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name>generatePduCompatTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PART_COUNT</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>retrieved</name><operator>.</operator><name>isExpirationUpdate</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>UNIDENTIFIED</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>isUnidentified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>contentValues</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>contentValues</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>quoteAttachments</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_ID</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_BODY</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_AUTHOR</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAuthor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_MISSING</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>retrieved</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOriginalMissing</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>quoteAttachments</name> <operator>=</operator> <call><name><name>retrieved</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>isPushMessage</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isDuplicate</name><argument_list>(<argument><expr><name>retrieved</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring duplicate media message ("</literal> <operator>+</operator> <call><name><name>retrieved</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name></type> <name>messageId</name> <init>= <expr><call><name>insertMediaMessage</name><argument_list>(<argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>quoteAttachments</name></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getSharedContacts</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>retrieved</name><operator>.</operator><name>getLinkPreviews</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>Types</name><operator>.</operator><name>isExpirationTimerUpdate</name></name><argument_list>(<argument><expr><name>mailbox</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementUnread</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InsertResult</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InsertResult</name></argument>&gt;</argument_list></name></type> <name>insertMessageInbox</name><parameter_list>(<parameter><decl><type><name>IncomingMediaMessage</name></type> <name>retrieved</name></decl></parameter>,
                                                   <parameter><decl><type><name>String</name></type> <name>contentLocation</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>MmsException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>isPushMessage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>isExpirationUpdate</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>EXPIRATION_TIMER_UPDATE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>insertMessageInbox</name><argument_list>(<argument><expr><name>retrieved</name></expr></argument>, <argument><expr><name>contentLocation</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InsertResult</name></argument>&gt;</argument_list></name></type> <name>insertSecureDecryptedMessageInbox</name><parameter_list>(<parameter><decl><type><name>IncomingMediaMessage</name></type> <name>retrieved</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>MmsException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>isPushMessage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>retrieved</name><operator>.</operator><name>isExpirationUpdate</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>EXPIRATION_TIMER_UPDATE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name>insertMessageInbox</name><argument_list>(<argument><expr><name>retrieved</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>insertMessageInbox</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>NotificationInd</name></type> <name>notification</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subscriptionId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type>       <name>db</name>             <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>                 <name>threadId</name>       <init>= <expr><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>notification</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ContentValues</name></type>        <name>contentValues</name>  <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ContentValuesBuilder</name></type> <name>contentBuilder</name> <init>= <expr><operator>new</operator> <call><name>ContentValuesBuilder</name><argument_list>(<argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Message received type: "</literal> <operator>+</operator> <call><name><name>notification</name><operator>.</operator><name>getMessageType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name><name>contentBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>CONTENT_LOCATION</name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>getContentLocation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>EXPIRY</name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>getExpiry</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>MESSAGE_SIZE</name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>getMessageSize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>TRANSACTION_ID</name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>getTransactionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentBuilder</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>MESSAGE_TYPE</name></expr></argument>, <argument><expr><call><name><name>notification</name><operator>.</operator><name>getMessageType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>notification</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>toIsoString</name></name><argument_list>(<argument><expr><call><name><name>notification</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>STATUS</name></expr></argument>, <argument><expr><name><name>Status</name><operator>.</operator><name>DOWNLOAD_INITIALIZED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name>generatePduCompatTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>Util</name><operator>.</operator><name>isDefaultSmsProvider</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>, <argument><expr><name>subscriptionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>contentValues</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>contentValues</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name>long</name></type> <name>messageId</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markIncomingNotificationReceived</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name><operator>.</operator><name>isDefaultSmsProvider</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementUnread</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>insertMessageOutbox</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>OutgoingMediaMessage</name></type> <name>message</name></decl></parameter>,
                                  <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>forceSms</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>SmsDatabase</name><operator>.</operator><name>InsertListener</name></name></type> <name>insertListener</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>MmsException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><name><name>Types</name><operator>.</operator><name>BASE_SENDING_TYPE</name></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isSecure</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name><operator>)</operator></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name>forceSms</name></expr>)</condition><then>           <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>MESSAGE_FORCE_SMS_BIT</name></name></expr>;</expr_stmt></block></then></if>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if      <condition>(<expr><operator>(</operator><operator>(</operator><name>OutgoingGroupMediaMessage</name><operator>)</operator><name>message</name><operator>)</operator><operator>.</operator><call><name>isGroupUpdate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>GROUP_UPDATE_BIT</name></name></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>OutgoingGroupMediaMessage</name><operator>)</operator><name>message</name><operator>)</operator><operator>.</operator><call><name>isGroupQuit</name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>GROUP_QUIT_BIT</name></name></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isExpirationUpdate</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>EXPIRATION_TIMER_UPDATE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>earlyDeliveryReceipts</name> <init>= <expr><call><name><name>earlyDeliveryReceiptCache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>earlyReadReceipts</name>     <init>= <expr><call><name><name>earlyReadReceiptCache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MESSAGE_TYPE</name></expr></argument>, <argument><expr><name><name>PduHeaders</name><operator>.</operator><name>MESSAGE_TYPE_SEND_REQ</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DELIVERY_RECEIPT_COUNT</name></expr></argument>, <argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>earlyDeliveryReceipts</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToLong</name><argument_list>(<argument><expr><name>Long</name><operator>::</operator><name>longValue</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ_RECEIPT_COUNT</name></expr></argument>, <argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>earlyReadReceipts</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToLong</name><argument_list>(<argument><expr><name>Long</name><operator>::</operator><name>longValue</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>quoteAttachments</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_ID</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_AUTHOR</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAuthor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_BODY</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>QUOTE_MISSING</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOriginalMissing</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>quoteAttachments</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachments</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>long</name></type> <name>messageId</name> <init>= <expr><call><name>insertMediaMessage</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>quoteAttachments</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSharedContacts</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getLinkPreviews</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>insertListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isGroup</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type>      <name>members</name>         <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getGroupMembers</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toGroupString</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>GroupReceiptDatabase</name></type> <name>receiptDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupReceiptDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>receiptDatabase</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Recipient</name><operator>::</operator><name>getAddress</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>,
                             <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>STATUS_UNDELIVERED</name></name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>Address</name></type> <name>address</name> <range>: <expr><call><name><name>earlyDeliveryReceipts</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>receiptDatabase</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>STATUS_DELIVERED</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
      <for>for <control>(<init><decl><type><name>Address</name></type> <name>address</name> <range>: <expr><call><name><name>earlyReadReceipts</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control>     <block type="pseudo"><expr_stmt><expr><call><name><name>receiptDatabase</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>STATUS_READ</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLastSeen</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setHasSent</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>messageId</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>insertMediaMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>quoteAttachments</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>sharedContacts</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>linkPreviews</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ContentValues</name></type> <name>contentValues</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>SmsDatabase</name><operator>.</operator><name>InsertListener</name></name></type> <name>insertListener</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>MmsException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type>     <name>db</name>            <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttachmentDatabase</name></type> <name>partsDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>allAttachments</name>     <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>contactAttachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>sharedContacts</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Contact</name><operator>::</operator><name>getAvatarAttachment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>previewAttachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>linkPreviews</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>lp</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>lp</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>allAttachments</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>allAttachments</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>contactAttachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>allAttachments</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>previewAttachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BODY</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PART_COUNT</name></expr></argument>, <argument><expr><call><name><name>allAttachments</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>messageId</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>, <argument><name>AttachmentId</name></argument>&gt;</argument_list></name></type> <name>insertedAttachments</name> <init>= <expr><call><name><name>partsDatabase</name><operator>.</operator><name>insertAttachmentsForMessage</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>allAttachments</name></expr></argument>, <argument><expr><name>quoteAttachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                        <name>serializedContacts</name>  <init>= <expr><call><name>getSerializedSharedContacts</name><argument_list>(<argument><expr><name>insertedAttachments</name></expr></argument>, <argument><expr><name>sharedContacts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                        <name>serializedPreviews</name>  <init>= <expr><call><name>getSerializedLinkPreviews</name><argument_list>(<argument><expr><name>insertedAttachments</name></expr></argument>, <argument><expr><name>linkPreviews</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>serializedContacts</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>contactValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>contactValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SHARED_CONTACTS</name></expr></argument>, <argument><expr><name>serializedContacts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contactValues</name></expr></argument>, <argument><expr><name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>rows</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to update message with shared contact data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>serializedPreviews</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>contactValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>contactValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>LINK_PREVIEWS</name></expr></argument>, <argument><expr><name>serializedPreviews</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contactValues</name></expr></argument>, <argument><expr><name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr> }</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>rows</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to update message with link preview data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>messageId</name></expr>;</return>
    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>insertListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>insertListener</name><operator>.</operator><name>onComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><call><name><name>contentValues</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>contentValues</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>delete</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type>               <name>threadId</name>           <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AttachmentDatabase</name></type> <name>attachmentDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>attachmentDatabase</name><operator>.</operator><name>deleteAttachmentsForMessage</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GroupReceiptDatabase</name></type> <name>groupReceiptDatabase</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupReceiptDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>groupReceiptDatabase</name><operator>.</operator><name>deleteRowsForMessage</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>messageId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>threadDeleted</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>threadDeleted</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>deleteThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>singleThreadSet</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>singleThreadSet</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>deleteThreads</name><argument_list>(<argument><expr><name>singleThreadSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getSerializedSharedContacts</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>, <argument><name>AttachmentId</name></argument>&gt;</argument_list></name></type> <name>insertedAttachmentIds</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type> <name>contacts</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>contacts</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>JSONArray</name></type> <name>sharedContactJson</name> <init>= <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Contact</name></type> <name>contact</name> <range>: <expr><name>contacts</name></expr></range></decl></init>)</control> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>AttachmentId</name></type> <name>attachmentId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>contact</name><operator>.</operator><name>getAvatarAttachment</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachmentId</name> <operator>=</operator> <call><name><name>insertedAttachmentIds</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatarAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>Avatar</name></type>  <name>updatedAvatar</name>  <init>= <expr><operator>new</operator> <call><name>Avatar</name><argument_list>(<argument><expr><name>attachmentId</name></expr></argument>,
                                            <argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatarAttachment</name></name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>contact</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isProfile</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Contact</name></type> <name>updatedContact</name> <init>= <expr><operator>new</operator> <call><name>Contact</name><argument_list>(<argument><expr><name>contact</name></expr></argument>, <argument><expr><name>updatedAvatar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>sharedContactJson</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>updatedContact</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to serialize shared contact. Skipping it."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></for>
    <return>return <expr><call><name><name>sharedContactJson</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>String</name></type> <name>getSerializedLinkPreviews</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>, <argument><name>AttachmentId</name></argument>&gt;</argument_list></name></type> <name>insertedAttachmentIds</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>previews</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>previews</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>JSONArray</name></type> <name>linkPreviewJson</name> <init>= <expr><operator>new</operator> <call><name>JSONArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>LinkPreview</name></type> <name>preview</name> <range>: <expr><name>previews</name></expr></range></decl></init>)</control> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>AttachmentId</name></type> <name>attachmentId</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>preview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachmentId</name> <operator>=</operator> <call><name><name>insertedAttachmentIds</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>preview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <decl_stmt><decl><type><name>LinkPreview</name></type> <name>updatedPreview</name> <init>= <expr><operator>new</operator> <call><name>LinkPreview</name><argument_list>(<argument><expr><call><name><name>preview</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>preview</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>attachmentId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>linkPreviewJson</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>JSONObject</name><argument_list>(<argument><expr><call><name><name>updatedPreview</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>JSONException</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to serialize shared contact. Skipping it."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></for>
    <return>return <expr><call><name><name>linkPreviewJson</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isDuplicate</name><parameter_list>(<parameter><decl><type><name>IncomingMediaMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>         <name>cursor</name>   <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>ADDRESS</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                                             <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>message</name><operator>.</operator><name>getFrom</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                                             <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <return>return <expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSent</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{  <expr><name>MESSAGE_BOX</name></expr> }</block></expr></argument>, <argument><expr><name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>MESSAGE_BOX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name><name>Types</name><operator>.</operator><name>isSentType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></try>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <comment type="block">/*package*/</comment> <function><type><name>void</name></type> <name>deleteThreads</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>threadIds</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>where</name>      <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>long</name></type> <name>threadId</name> <range>: <expr><name>threadIds</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>where</name> <operator>+=</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = '"</literal> <operator>+</operator> <name>threadId</name> <operator>+</operator> <literal type="string">"' OR "</literal></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>where</name> <operator>=</operator> <call><name><name>where</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>where</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>}</block></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <comment type="block">/*package*/</comment><function><type><name>void</name></type> <name>deleteMessagesInThreadBeforeDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>where</name>      <init>= <expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ? AND (CASE ("</literal> <operator>+</operator> <name>MESSAGE_BOX</name> <operator>+</operator> <literal type="string">" &amp; "</literal> <operator>+</operator> <name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name> <operator>+</operator> <literal type="string">") "</literal></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>long</name></type> <name>outgoingType</name> <range>: <expr><name><name>Types</name><operator>.</operator><name>OUTGOING_MESSAGE_TYPES</name></name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>where</name> <operator>+=</operator> <literal type="string">" WHEN "</literal> <operator>+</operator> <name>outgoingType</name> <operator>+</operator> <literal type="string">" THEN "</literal> <operator>+</operator> <name>DATE_SENT</name> <operator>+</operator> <literal type="string">" &lt; "</literal> <operator>+</operator> <name>date</name></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><name>where</name> <operator>+=</operator> <operator>(</operator><literal type="string">" ELSE "</literal> <operator>+</operator> <name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">" &lt; "</literal> <operator>+</operator> <name>date</name> <operator>+</operator> <literal type="string">" END)"</literal><operator>)</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>}</block></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"MmsDatabase"</literal></expr></argument>, <argument><expr><literal type="string">"Trimming: "</literal> <operator>+</operator> <call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>delete</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>


  <function><specifier>public</specifier> <type><name>void</name></type> <name>deleteAllThreads</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>deleteAllAttachments</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getGroupReceiptDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>deleteAllRows</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>getCarrierMmsInformation</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>apn</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name>                <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><call><name><name>Uri</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><literal type="string">"content://telephony/carriers"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"current"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>selection</name>       <init>= <expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>apn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><literal type="string">"apn = ?"</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>selectionArgs</name> <init>= <expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>apn</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>apn</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>}</block></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <return>return <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>selection</name></expr></argument>, <argument><expr><name>selectionArgs</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NullPointerException</name></type> <name>npe</name></decl></parameter>)</parameter_list> <block>{
      <comment type="line">// NOTE - This is dumb, but on some devices there's an NPE in the Android framework</comment>
      <comment type="line">// for the provider of this call, which gets rethrown back to here through a binder</comment>
      <comment type="line">// call.</comment>
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><name>npe</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Reader</name></type> <name>readerFor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>OutgoingMessageReader</name></type> <name>readerFor</name><parameter_list>(<parameter><decl><type><name>OutgoingMediaMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>OutgoingMessageReader</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Status</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOWNLOAD_INITIALIZED</name>     <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOWNLOAD_NO_CONNECTIVITY</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOWNLOAD_CONNECTING</name>      <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOWNLOAD_SOFT_FAILURE</name>    <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOWNLOAD_HARD_FAILURE</name>    <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOWNLOAD_APN_UNAVAILABLE</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>MmsNotificationInfo</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Address</name></type> <name>from</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>  <name>contentLocation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>  <name>transactionId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>     <name>subscriptionId</name></decl>;</decl_stmt>

    <constructor><name>MmsNotificationInfo</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contentLocation</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>transactionId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subscriptionId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>from</name></name>            <operator>=</operator> <ternary><condition><expr><name>from</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="null">null</literal></expr> </then><else>: <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contentLocation</name></name> <operator>=</operator> <name>contentLocation</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>transactionId</name></name>   <operator>=</operator> <name>transactionId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subscriptionId</name></name>  <operator>=</operator> <name>subscriptionId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getContentLocation</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>contentLocation</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>getTransactionId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>transactionId</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSubscriptionId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>subscriptionId</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Address</name></type> <name>getFrom</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>from</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> class <name>OutgoingMessageReader</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OutgoingMediaMessage</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                 <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                 <name>threadId</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OutgoingMessageReader</name><parameter_list>(<parameter><decl><type><name>OutgoingMediaMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name> <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>MessageRecord</name></type> <name>getCurrent</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>SlideDeck</name></type> <name>slideDeck</name> <init>= <expr><operator>new</operator> <call><name>SlideDeck</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>MediaMmsMessageRecord</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name>slideDeck</name></expr></argument>, <argument><expr><call><name><name>slideDeck</name><operator>.</operator><name>getSlides</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><ternary><condition><expr><call><name><name>message</name><operator>.</operator><name>isSecure</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>getOutgoingEncryptedMessageType</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>getOutgoingSmsMessageType</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                                       <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>message</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                       <argument><expr><ternary><condition><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then>
                                           <expr><operator>new</operator> <call><name>Quote</name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAuthor</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOriginalMissing</name><argument_list>()</argument_list></call></expr></argument>,
                                                     <argument><expr><operator>new</operator> <call><name>SlideDeck</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getOutgoingQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttachments</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
                                           <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>,
                                       <argument><expr><call><name><name>message</name><operator>.</operator><name>getSharedContacts</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getLinkPreviews</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> class <name>Reader</name> <super><implements>implements <name>Closeable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Reader</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>MessageRecord</name></type> <name>getNext</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

      <return>return <expr><call><name>getCurrent</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>MessageRecord</name></type> <name>getCurrent</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>mmsType</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>MESSAGE_TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>mmsType</name> <operator>==</operator> <name><name>PduHeaders</name><operator>.</operator><name>MESSAGE_TYPE_NOTIFICATION_IND</name></name></expr>)</condition><then> <block>{
        <return>return <expr><call><name>getNotificationMmsMessageRecord</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><call><name>getMediaMmsMessageRecord</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>NotificationMmsMessageRecord</name></type> <name>getNotificationMmsMessageRecord</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type>      <name>id</name>                   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>dateSent</name>             <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>NORMALIZED_DATE_SENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>dateReceived</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>NORMALIZED_DATE_RECEIVED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>threadId</name>             <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>THREAD_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>mailbox</name>              <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>MESSAGE_BOX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>    <name>address</name>              <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>       <name>addressDeviceId</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>ADDRESS_DEVICE_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name>            <init>= <expr><call><name>getRecipientFor</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>String</name></type>    <name>contentLocation</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>CONTENT_LOCATION</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>    <name>transactionId</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>TRANSACTION_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>messageSize</name>          <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>MESSAGE_SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>      <name>expiry</name>               <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>EXPIRY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>       <name>status</name>               <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>       <name>deliveryReceiptCount</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>DELIVERY_RECEIPT_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>       <name>readReceiptCount</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>READ_RECEIPT_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>       <name>subscriptionId</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>SUBSCRIPTION_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isReadReceiptsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>readReceiptCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type><name>contentLocationBytes</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type><name>transactionIdBytes</name>   <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>contentLocation</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>contentLocationBytes</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name><operator>.</operator><name>toIsoBytes</name></name><argument_list>(<argument><expr><name>contentLocation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>transactionIdBytes</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name><operator>.</operator><name>toIsoBytes</name></name><argument_list>(<argument><expr><name>transactionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <decl_stmt><decl><type><name>SlideDeck</name></type> <name>slideDeck</name> <init>= <expr><operator>new</operator> <call><name>SlideDeck</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MmsNotificationAttachment</name><argument_list>(<argument><expr><name>status</name></expr></argument>, <argument><expr><name>messageSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


      <return>return <expr><operator>new</operator> <call><name>NotificationMmsMessageRecord</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>,
                                              <argument><expr><name>addressDeviceId</name></expr></argument>, <argument><expr><name>dateSent</name></expr></argument>, <argument><expr><name>dateReceived</name></expr></argument>, <argument><expr><name>deliveryReceiptCount</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>,
                                              <argument><expr><name>contentLocationBytes</name></expr></argument>, <argument><expr><name>messageSize</name></expr></argument>, <argument><expr><name>expiry</name></expr></argument>, <argument><expr><name>status</name></expr></argument>,
                                              <argument><expr><name>transactionIdBytes</name></expr></argument>, <argument><expr><name>mailbox</name></expr></argument>, <argument><expr><name>subscriptionId</name></expr></argument>, <argument><expr><name>slideDeck</name></expr></argument>,
                                              <argument><expr><name>readReceiptCount</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>MediaMmsMessageRecord</name></type> <name>getMediaMmsMessageRecord</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type>               <name>id</name>                   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>               <name>dateSent</name>             <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>NORMALIZED_DATE_SENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>               <name>dateReceived</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>NORMALIZED_DATE_RECEIVED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>               <name>box</name>                  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>MESSAGE_BOX</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>               <name>threadId</name>             <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>THREAD_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>             <name>address</name>              <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>                <name>addressDeviceId</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>ADDRESS_DEVICE_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>                <name>deliveryReceiptCount</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>DELIVERY_RECEIPT_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>                <name>readReceiptCount</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>READ_RECEIPT_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>             <name>body</name>                 <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>BODY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>                <name>partCount</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>PART_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>             <name>mismatchDocument</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>MISMATCHED_IDENTITIES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>             <name>networkDocument</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>NETWORK_FAILURE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>                <name>subscriptionId</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>SUBSCRIPTION_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>               <name>expiresIn</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>EXPIRES_IN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>               <name>expireStarted</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>EXPIRE_STARTED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>            <name>unidentified</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>UNIDENTIFIED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isReadReceiptsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>readReceiptCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name>Recipient</name></type>                 <name>recipient</name>          <init>= <expr><call><name>getRecipientFor</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name>         <init>= <expr><call><name>getMismatchedIdentities</name><argument_list>(<argument><expr><name>mismatchDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type>      <name>networkFailures</name>    <init>= <expr><call><name>getFailures</name><argument_list>(<argument><expr><name>networkDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type>  <name>attachments</name>        <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttachment</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Contact</name></argument>&gt;</argument_list></name></type>             <name>contacts</name>           <init>= <expr><call><name>getSharedContacts</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type>           <name>contactAttachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>contacts</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Contact</name><operator>::</operator><name>getAvatarAttachment</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>a</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><name>a</name> <operator>!=</operator> <literal type="null">null</literal></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type>         <name>previews</name>           <init>= <expr><call><name>getLinkPreviews</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type>           <name>previewAttachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>previews</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>lp</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>lp</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>lp</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SlideDeck</name></type>                 <name>slideDeck</name>          <init>= <expr><call><name>getSlideDeck</name><argument_list>(<argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><name>contactAttachments</name><operator>::</operator><name>contains</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><name>previewAttachments</name><operator>::</operator><name>contains</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Quote</name></type>                     <name>quote</name>              <init>= <expr><call><name>getQuote</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>MediaMmsMessageRecord</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>,
                                       <argument><expr><name>addressDeviceId</name></expr></argument>, <argument><expr><name>dateSent</name></expr></argument>, <argument><expr><name>dateReceived</name></expr></argument>, <argument><expr><name>deliveryReceiptCount</name></expr></argument>,
                                       <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>slideDeck</name></expr></argument>, <argument><expr><name>partCount</name></expr></argument>, <argument><expr><name>box</name></expr></argument>, <argument><expr><name>mismatches</name></expr></argument>,
                                       <argument><expr><name>networkFailures</name></expr></argument>, <argument><expr><name>subscriptionId</name></expr></argument>, <argument><expr><name>expiresIn</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>,
                                       <argument><expr><name>readReceiptCount</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>, <argument><expr><name>contacts</name></expr></argument>, <argument><expr><name>previews</name></expr></argument>, <argument><expr><name>unidentified</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>Recipient</name></type> <name>getRecipientFor</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>serialized</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Address</name></type> <name>address</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"insert-address-token"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>address</name> <operator>=</operator> <name><name>Address</name><operator>.</operator><name>UNKNOWN</name></name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>address</name> <operator>=</operator> <call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><name>serialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      }</block></else></if>
      <return>return <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>getMismatchedIdentities</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <try>try <block>{
          <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>IdentityKeyMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></then></if>

      <return>return <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>NetworkFailure</name></argument>&gt;</argument_list></name></type> <name>getFailures</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <try>try <block>{
          <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>NetworkFailureList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></then></if>

      <return>return <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>SlideDeck</name></type> <name>getSlideDeck</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Attachment</name></extends></argument>&gt;</argument_list></name></type> <name>messageAttachmnets</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><name>Attachment</name><operator>::</operator><name>isQuote</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><operator>new</operator> <call><name>SlideDeck</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageAttachmnets</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Quote</name></type> <name>getQuote</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type>                       <name>quoteId</name>          <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>QUOTE_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                     <name>quoteAuthor</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>QUOTE_AUTHOR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>                     <name>quoteText</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>QUOTE_BODY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>                    <name>quoteMissing</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>QUOTE_MISSING</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>DatabaseAttachment</name></argument>&gt;</argument_list></name></type>   <name>attachments</name>      <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getAttachment</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>Attachment</name></extends></argument>&gt;</argument_list></name></type> <name>quoteAttachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><name>Attachment</name><operator>::</operator><name>isQuote</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SlideDeck</name></type>                  <name>quoteDeck</name>        <init>= <expr><operator>new</operator> <call><name>SlideDeck</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>quoteAttachments</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>quoteId</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>quoteAuthor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><operator>new</operator> <call><name>Quote</name><argument_list>(<argument><expr><name>quoteId</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>quoteAuthor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>quoteText</name></expr></argument>, <argument><expr><name>quoteMissing</name></expr></argument>, <argument><expr><name>quoteDeck</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>generatePduCompatTimestamp</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>long</name></type> <name>time</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>time</name> <operator>-</operator> <operator>(</operator><name>time</name> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</return>
  }</block></function>
}</block></class>
</unit>
