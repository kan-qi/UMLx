<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\ApnDatabase.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>LegacyMmsConnection</name><operator>.</operator><name>Apn</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Database to query APN and MMSC information
 */</comment>
<class><specifier>public</specifier> class <name>ApnDatabase</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ApnDatabase</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SQLiteDatabase</name></type> <name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>        <name>context</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATABASE_NAME</name> <init>= <expr><literal type="string">"apns.db"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ASSET_PATH</name>    <init>= <expr><literal type="string">"databases"</literal> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <name>DATABASE_NAME</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name>              <init>= <expr><literal type="string">"apns"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ID_COLUMN</name>               <init>= <expr><literal type="string">"_id"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MCC_MNC_COLUMN</name>          <init>= <expr><literal type="string">"mccmnc"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MCC_COLUMN</name>              <init>= <expr><literal type="string">"mcc"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MNC_COLUMN</name>              <init>= <expr><literal type="string">"mnc"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CARRIER_COLUMN</name>          <init>= <expr><literal type="string">"carrier"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>APN_COLUMN</name>              <init>= <expr><literal type="string">"apn"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMSC_COLUMN</name>             <init>= <expr><literal type="string">"mmsc"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PORT_COLUMN</name>             <init>= <expr><literal type="string">"port"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TYPE_COLUMN</name>             <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROTOCOL_COLUMN</name>         <init>= <expr><literal type="string">"protocol"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BEARER_COLUMN</name>           <init>= <expr><literal type="string">"bearer"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ROAMING_PROTOCOL_COLUMN</name> <init>= <expr><literal type="string">"roaming_protocol"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CARRIER_ENABLED_COLUMN</name>  <init>= <expr><literal type="string">"carrier_enabled"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMS_PROXY_COLUMN</name>        <init>= <expr><literal type="string">"mmsproxy"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MMS_PORT_COLUMN</name>         <init>= <expr><literal type="string">"mmsport"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROXY_COLUMN</name>            <init>= <expr><literal type="string">"proxy"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MVNO_MATCH_DATA_COLUMN</name>  <init>= <expr><literal type="string">"mvno_match_data"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>MVNO_TYPE_COLUMN</name>        <init>= <expr><literal type="string">"mvno"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>AUTH_TYPE_COLUMN</name>        <init>= <expr><literal type="string">"authtype"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>USER_COLUMN</name>             <init>= <expr><literal type="string">"user"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PASSWORD_COLUMN</name>         <init>= <expr><literal type="string">"password"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SERVER_COLUMN</name>           <init>= <expr><literal type="string">"server"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>BASE_SELECTION</name> <init>= <expr><name>MCC_MNC_COLUMN</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name>ApnDatabase</name></type> <name>instance</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <specifier>static</specifier> <type><name>ApnDatabase</name></type> <name>getInstance</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name>instance</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>instance</name> <operator>=</operator> <operator>new</operator> <call><name>ApnDatabase</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>instance</name></expr>;</return>
  }</block></function>

  <constructor><specifier>private</specifier> <name>ApnDatabase</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>File</name></type> <name>dbFile</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getDatabasePath</name></name><argument_list>(<argument><expr><name>DATABASE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>dbFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>exists</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>dbFile</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>mkdir</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"couldn't make databases directory"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>copy</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>open</name><argument_list>(<argument><expr><name>ASSET_PATH</name></expr></argument>, <argument><expr><name><name>AssetManager</name><operator>.</operator><name>ACCESS_STREAMING</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>dbFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>db</name></name> <operator>=</operator> <call><name><name>SQLiteDatabase</name><operator>.</operator><name>openDatabase</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getDatabasePath</name></name><argument_list>(<argument><expr><name>DATABASE_NAME</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPath</name><argument_list>()</argument_list></call></expr></argument>,
                                            <argument><expr><literal type="null">null</literal></expr></argument>,
                                            <argument><expr><name><name>SQLiteDatabase</name><operator>.</operator><name>OPEN_READONLY</name></name> <operator>|</operator> <name><name>SQLiteDatabase</name><operator>.</operator><name>NO_LOCALIZED_COLLATORS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLiteException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>Apn</name></type> <name>getCustomApnParameters</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>mmsc</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMmscUrl</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mmsc</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>mmsc</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"http"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>mmsc</name> <operator>=</operator> <literal type="string">"http://"</literal> <operator>+</operator> <name>mmsc</name></expr>;</expr_stmt></block></then></if>

      <decl_stmt><decl><type><name>String</name></type> <name>proxy</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMmscProxy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>port</name>  <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMmscProxyPort</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>user</name>  <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMmscUsername</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>pass</name>  <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMmscPassword</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>Apn</name><argument_list>(<argument><expr><name>mmsc</name></expr></argument>, <argument><expr><name>proxy</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Apn</name></type> <name>getDefaultApnParameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mccmnc</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>apn</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>mccmnc</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"mccmnc was null, returning null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>Apn</name><operator>.</operator><name>EMPTY</name></name></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <if>if <condition>(<expr><name>apn</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Querying table for MCC+MNC "</literal> <operator>+</operator> <name>mccmnc</name> <operator>+</operator> <literal type="string">" and APN name "</literal> <operator>+</operator> <name>apn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                          <argument><expr><name>BASE_SELECTION</name> <operator>+</operator> <literal type="string">" AND "</literal> <operator>+</operator> <name>APN_COLUMN</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                          <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>mccmnc</name></expr>, <expr><name>apn</name></expr>}</block></expr></argument>,
                          <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Querying table for MCC+MNC "</literal> <operator>+</operator> <name>mccmnc</name> <operator>+</operator> <literal type="string">" without APN name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>,
                          <argument><expr><name>BASE_SELECTION</name></expr></argument>,
                          <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>mccmnc</name></expr>}</block></expr></argument>,
                          <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Apn</name></type> <name>params</name> <init>= <expr><operator>new</operator> <call><name>Apn</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>MMSC_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>MMS_PROXY_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>MMS_PORT_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>USER_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>PASSWORD_COLUMN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Returning preferred APN "</literal> <operator>+</operator> <name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>params</name></expr>;</return>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No matching APNs found, returning null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name><name>Apn</name><operator>.</operator><name>EMPTY</name></name></expr>;</return>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Apn</name></argument>&gt;</argument_list></name></type> <name>getMmsConnectionParameters</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>mccmnc</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>apn</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Apn</name></type> <name>customApn</name>  <init>= <expr><call><name>getCustomApnParameters</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Apn</name></type> <name>defaultApn</name> <init>= <expr><call><name>getDefaultApnParameters</name><argument_list>(<argument><expr><name>mccmnc</name></expr></argument>, <argument><expr><name>apn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Apn</name></type> <name>result</name>     <init>= <expr><operator>new</operator> <call><name>Apn</name><argument_list>(<argument><expr><name>customApn</name></expr></argument>, <argument><expr><name>defaultApn</name></expr></argument>,
                             <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUseCustomMmsc</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUseCustomMmscProxy</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUseCustomMmscProxyPort</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUseCustomMmscUsername</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getUseCustomMmscPassword</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>result</name><operator>.</operator><name>getMmsc</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return></block></then>
    <else>else                                     <block type="pseudo"><return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>
}</block></class>
</unit>
