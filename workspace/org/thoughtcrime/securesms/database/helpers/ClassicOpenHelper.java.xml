<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\helpers\ClassicOpenHelper.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteConstraintException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteOpenHelper</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonProperty</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>NumberParseException</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>PhoneNumberUtil</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>Phonenumber</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>i18n</name><operator>.</operator><name>phonenumbers</name><operator>.</operator><name>ShortNumberInfo</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>DatabaseUpgradeActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AttachmentSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ClassicDecryptingPartInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterSecretUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DraftDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupReceiptDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>IdentityDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>PushDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ThreadDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>MessageNotifier</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DelimiterUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Hex</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>IdentityKey</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidMessageException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Arrays</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>regex</name><operator>.</operator><name>Pattern</name></name>;</import>

<class><specifier>public</specifier> class <name>ClassicOpenHelper</name> <super><extends>extends <name>SQLiteOpenHelper</name></extends></super> <block>{

  <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NAME</name> <init>= <expr><literal type="string">"messages.db"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_IDENTITIES_VERSION</name>                   <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_INDEXES_VERSION</name>                      <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_DATE_SENT_VERSION</name>                    <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_DRAFTS_VERSION</name>                       <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_NEW_TYPES_VERSION</name>                    <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_MMS_BODY_VERSION</name>                     <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_MMS_FROM_VERSION</name>                     <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_TOFU_IDENTITY_VERSION</name>                <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_PUSH_DATABASE_VERSION</name>                <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_GROUP_DATABASE_VERSION</name>               <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_PUSH_FIX_VERSION</name>                     <init>= <expr><literal type="number">12</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_DELIVERY_RECEIPTS</name>                    <init>= <expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_PART_DATA_SIZE_VERSION</name>               <init>= <expr><literal type="number">14</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_THUMBNAILS_VERSION</name>                   <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_IDENTITY_COLUMN_VERSION</name>              <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_UNIQUE_PART_IDS_VERSION</name>              <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_RECIPIENT_PREFS_DB</name>                   <init>= <expr><literal type="number">18</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_ENVELOPE_CONTENT_VERSION</name>             <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_COLOR_PREFERENCE_VERSION</name>             <init>= <expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_DB_OPTIMIZATIONS_VERSION</name>             <init>= <expr><literal type="number">21</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_INVITE_REMINDERS_VERSION</name>             <init>= <expr><literal type="number">22</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_CONVERSATION_LIST_THUMBNAILS_VERSION</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_ARCHIVE_VERSION</name>                      <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_CONVERSATION_LIST_STATUS_VERSION</name>     <init>= <expr><literal type="number">25</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MIGRATED_CONVERSATION_LIST_STATUS_VERSION</name>       <init>= <expr><literal type="number">26</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_SUBSCRIPTION_ID_VERSION</name>              <init>= <expr><literal type="number">27</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_EXPIRE_MESSAGES_VERSION</name>              <init>= <expr><literal type="number">28</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_LAST_SEEN</name>                            <init>= <expr><literal type="number">29</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_DIGEST</name>                               <init>= <expr><literal type="number">30</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_NOTIFIED</name>                             <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_DOCUMENTS</name>                            <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_FAST_PREFLIGHT</name>                       <init>= <expr><literal type="number">33</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_VOICE_NOTES</name>                          <init>= <expr><literal type="number">34</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_IDENTITY_TIMESTAMP</name>                   <init>= <expr><literal type="number">35</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SANIFY_ATTACHMENT_DOWNLOAD</name>                      <init>= <expr><literal type="number">36</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO_MORE_CANONICAL_ADDRESS_DATABASE</name>              <init>= <expr><literal type="number">37</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NO_MORE_RECIPIENTS_PLURAL</name>                       <init>= <expr><literal type="number">38</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERNAL_DIRECTORY</name>                              <init>= <expr><literal type="number">39</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTERNAL_SYSTEM_DISPLAY_NAME</name>                    <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROFILES</name>                                        <init>= <expr><literal type="number">41</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PROFILE_SHARING_APPROVAL</name>                        <init>= <expr><literal type="number">42</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNSEEN_NUMBER_OFFER</name>                             <init>= <expr><literal type="number">43</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>READ_RECEIPTS</name>                                   <init>= <expr><literal type="number">44</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>GROUP_RECEIPT_TRACKING</name>                          <init>= <expr><literal type="number">45</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>UNREAD_COUNT_VERSION</name>                            <init>= <expr><literal type="number">46</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MORE_RECIPIENT_FIELDS</name>                           <init>= <expr><literal type="number">47</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DATABASE_VERSION</name>                                <init>= <expr><literal type="number">47</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ClassicOpenHelper</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ClassicOpenHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>ThreadDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>IdentityDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>DraftDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>PushDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>GroupDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>RecipientDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>CREATE_TABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>CREATE_INDEXS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>CREATE_INDEXS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>CREATE_INDEXS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>ThreadDatabase</name><operator>.</operator><name>CREATE_INDEXS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>DraftDatabase</name><operator>.</operator><name>CREATE_INDEXS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>GroupDatabase</name><operator>.</operator><name>CREATE_INDEXS</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>CREATE_INDEXES</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onApplicationLevelUpgrade</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fromVersion</name></decl></parameter>,
                                        <parameter><decl><type><name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>DatabaseUpgradeListener</name></name></type> <name>listener</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name>getWritableDatabase</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>fromVersion</name> <operator>&lt;</operator> <name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>NO_MORE_KEY_EXCHANGE_PREFIX_VERSION</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>KEY_EXCHANGE</name>             <init>= <expr><literal type="string">"?TextSecureKeyExchange"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>PROCESSED_KEY_EXCHANGE</name>   <init>= <expr><literal type="string">"?TextSecureKeyExchangd"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>STALE_KEY_EXCHANGE</name>       <init>= <expr><literal type="string">"?TextSecureKeyExchangs"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>ROW_LIMIT</name>                   <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name> <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>smsCount</name>              <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>threadCount</name>           <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>skip</name>                  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"COUNT(*)"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"type &amp; "</literal> <operator>+</operator> <literal type="number">0x80000000</literal> <operator>+</operator> <literal type="string">" != 0"</literal></expr></argument>,
                               <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>smsCount</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"COUNT(*)"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"snippet_type &amp; "</literal> <operator>+</operator> <literal type="number">0x80000000</literal> <operator>+</operator> <literal type="string">" != 0"</literal></expr></argument>,
                        <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>threadCount</name> <operator>=</operator> <call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name>Cursor</name></type> <name>smsCursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><literal type="string">"Upgrade count: "</literal> <operator>+</operator> <operator>(</operator><name>smsCount</name> <operator>+</operator> <name>threadCount</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <do>do <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><literal type="string">"Looping SMS cursor..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>smsCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><call><name><name>smsCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><name>smsCursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"type"</literal></expr>, <expr><literal type="string">"body"</literal></expr>}</block></expr></argument>,
                             <argument><expr><literal type="string">"type &amp; "</literal> <operator>+</operator> <literal type="number">0x80000000</literal> <operator>+</operator> <literal type="string">" != 0"</literal></expr></argument>,
                             <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"_id"</literal></expr></argument>, <argument><expr><name>skip</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>ROW_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>smsCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>smsCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name><name>smsCursor</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>skip</name></expr></argument>, <argument><expr><name>smsCount</name> <operator>+</operator> <name>threadCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><call><name><name>masterCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><call><name><name>smsCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>smsCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>type</name>   <init>= <expr><call><name><name>smsCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>smsCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>id</name>     <init>= <expr><call><name><name>smsCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>smsCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>body</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>KEY_EXCHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>body</name>  <operator>=</operator> <call><name><name>body</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>body</name>  <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>type</name> <operator>|=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = ?, type = ? WHERE _id = ?"</literal></expr></argument>,
                         <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>body</name></expr>, <expr><name>type</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>body</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>PROCESSED_KEY_EXCHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>body</name>  <operator>=</operator> <call><name><name>body</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>PROCESSED_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>body</name>  <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>type</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x8000</literal> <operator>|</operator> <literal type="number">0x2000</literal><operator>)</operator></expr>;</expr_stmt>

              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = ?, type = ? WHERE _id = ?"</literal></expr></argument>,
                         <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>body</name></expr>, <expr><name>type</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>body</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>STALE_KEY_EXCHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>body</name>  <operator>=</operator> <call><name><name>body</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>STALE_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>body</name>  <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>type</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x8000</literal> <operator>|</operator> <literal type="number">0x4000</literal><operator>)</operator></expr>;</expr_stmt>

              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = ?, type = ? WHERE _id = ?"</literal></expr></argument>,
                         <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>body</name></expr>, <expr><name>type</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></while>

        <expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>ROW_LIMIT</name></expr>;</expr_stmt>
      }</block> while <condition>(<expr><name>smsCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>smsCursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>



      <decl_stmt><decl><type><name>Cursor</name></type> <name>threadCursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>skip</name>                <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <do>do <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><literal type="string">"Looping thread cursor..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>threadCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><call><name><name>threadCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><name>threadCursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"snippet_type"</literal></expr>, <expr><literal type="string">"snippet"</literal></expr>}</block></expr></argument>,
                                <argument><expr><literal type="string">"snippet_type &amp; "</literal> <operator>+</operator> <literal type="number">0x80000000</literal> <operator>+</operator> <literal type="string">" != 0"</literal></expr></argument>,
                                <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"_id"</literal></expr></argument>, <argument><expr><name>skip</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>ROW_LIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>threadCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>threadCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><name>smsCount</name> <operator>+</operator> <call><name><name>threadCursor</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>smsCount</name> <operator>+</operator> <name>threadCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <try>try <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>snippet</name>   <init>= <expr><call><name><name>threadCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>threadCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"snippet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>snippetType</name> <init>= <expr><call><name><name>threadCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>threadCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"snippet_type"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type> <name>id</name>          <init>= <expr><call><name><name>threadCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>threadCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>snippet</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>snippet</name> <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><name>snippet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <if>if <condition>(<expr><call><name><name>snippet</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>KEY_EXCHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>snippet</name>      <operator>=</operator> <call><name><name>snippet</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>snippet</name>      <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>snippet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>snippetType</name> <operator>|=</operator> <literal type="number">0x8000</literal></expr>;</expr_stmt>

              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = ?, snippet_type = ? WHERE _id = ?"</literal></expr></argument>,
                         <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>snippet</name></expr>, <expr><name>snippetType</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>snippet</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>PROCESSED_KEY_EXCHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>snippet</name>      <operator>=</operator> <call><name><name>snippet</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>PROCESSED_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>snippet</name>      <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>snippet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>snippetType</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x8000</literal> <operator>|</operator> <literal type="number">0x2000</literal><operator>)</operator></expr>;</expr_stmt>

              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = ?, snippet_type = ? WHERE _id = ?"</literal></expr></argument>,
                         <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>snippet</name></expr>, <expr><name>snippetType</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>snippet</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name>STALE_KEY_EXCHANGE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>snippet</name>      <operator>=</operator> <call><name><name>snippet</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><call><name><name>STALE_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>snippet</name>      <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>snippet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>snippetType</name> <operator>|=</operator> <operator>(</operator><literal type="number">0x8000</literal> <operator>|</operator> <literal type="number">0x4000</literal><operator>)</operator></expr>;</expr_stmt>

              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = ?, snippet_type = ? WHERE _id = ?"</literal></expr></argument>,
                         <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>snippet</name></expr>, <expr><name>snippetType</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></while>

        <expr_stmt><expr><name>skip</name> <operator>+=</operator> <name>ROW_LIMIT</name></expr>;</expr_stmt>
      }</block> while <condition>(<expr><name>threadCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>threadCursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

      <if>if <condition>(<expr><name>smsCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>smsCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <if>if <condition>(<expr><name>threadCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>threadCursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>fromVersion</name> <operator>&lt;</operator> <name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>MMS_BODY_VERSION</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><literal type="string">"Update MMS bodies..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name> <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Cursor</name></type> <name>mmsCursor</name>          <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>}</block></expr></argument>,
                                           <argument><expr><literal type="string">"msg_box &amp; "</literal> <operator>+</operator> <literal type="number">0x80000000L</literal> <operator>+</operator> <literal type="string">" != 0"</literal></expr></argument>,
                                           <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><literal type="string">"Got MMS rows: "</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>mmsCursor</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="string">"null"</literal></expr> </then><else>: <expr><call><name><name>mmsCursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>mmsCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mmsCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name><name>mmsCursor</name><operator>.</operator><name>getPosition</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mmsCursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>long</name></type> <name>mmsId</name>        <init>= <expr><call><name><name>mmsCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>mmsCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>body</name>       <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>partCount</name>     <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type> <name>partCursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"ct"</literal></expr>, <expr><literal type="string">"_data"</literal></expr>, <expr><literal type="string">"encrypted"</literal></expr>}</block></expr></argument>,
                                     <argument><expr><literal type="string">"mid = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>mmsId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>partCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>partCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>String</name></type> <name>contentType</name> <init>= <expr><call><name><name>partCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>partCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"ct"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isTextType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <try>try <block>{
              <decl_stmt><decl><type><name>long</name></type> <name>partId</name>         <init>= <expr><call><name><name>partCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>partCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>String</name></type> <name>dataLocation</name> <init>= <expr><call><name><name>partCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>partCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>boolean</name></type> <name>encrypted</name>   <init>= <expr><call><name><name>partCursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>partCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"encrypted"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>File</name></type> <name>dataFile</name>       <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>dataLocation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <decl_stmt><decl><type><name>InputStream</name></type> <name>is</name></decl>;</decl_stmt>

              <decl_stmt><decl><type><name>AttachmentSecret</name></type> <name>attachmentSecret</name> <init>= <expr><operator>new</operator> <call><name>AttachmentSecret</name><argument_list>(<argument><expr><call><name><name>masterSecret</name><operator>.</operator><name>getEncryptionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr></argument>,
                                                                       <argument><expr><call><name><name>masterSecret</name><operator>.</operator><name>getMacKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><name>encrypted</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>=</operator> <call><name><name>ClassicDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>dataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
              <else>else           <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>dataFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

              <expr_stmt><expr><name>body</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>body</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>Util</name><operator>.</operator><name>readFullyAsString</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>body</name> <operator>+</operator> <literal type="string">" "</literal> <operator>+</operator> <call><name><name>Util</name><operator>.</operator><name>readFullyAsString</name></name><argument_list>(<argument><expr><name>is</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

              <comment type="line">//noinspection ResultOfMethodCallIgnored</comment>
              <expr_stmt><expr><call><name><name>dataFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>partId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
              <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
          }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>MediaUtil</name><operator>.</operator><name>isAudioType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>||</operator>
              <call><name><name>MediaUtil</name><operator>.</operator><name>isImageType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call> <operator>||</operator>
              <call><name><name>MediaUtil</name><operator>.</operator><name>isVideoType</name></name><argument_list>(<argument><expr><name>contentType</name></expr></argument>)</argument_list></call></expr>)</condition><then>
          <block>{
            <expr_stmt><expr><name>partCount</name><operator>++</operator></expr>;</expr_stmt>
          }</block></then></if></elseif></if>
        }</block></while>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET body = ?, part_count = ? WHERE _id = ?"</literal></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>body</name></expr>, <expr><name>partCount</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>mmsId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET part_count = ? WHERE _id = ?"</literal></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>partCount</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>mmsId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"DatabaseFactory"</literal></expr></argument>, <argument><expr><literal type="string">"Updated body: "</literal> <operator>+</operator> <name>body</name> <operator>+</operator> <literal type="string">" and part_count: "</literal> <operator>+</operator> <name>partCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></then></if>

    <if>if <condition>(<expr><name>fromVersion</name> <operator>&lt;</operator> <name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>TOFU_IDENTITIES_VERSION</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>File</name></type> <name>sessionDirectory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>File</name><operator>.</operator><name>separator</name></name> <operator>+</operator> <literal type="string">"sessions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>sessionDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>sessionDirectory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>sessions</name> <init>= <expr><call><name><name>sessionDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>sessions</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <for>for <control>(<init><decl><type><name>File</name></type> <name>session</name> <range>: <expr><name>sessions</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>name</name><operator>.</operator><name>matches</name></name><argument_list>(<argument><expr><literal type="string">"[0-9]+"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>long</name></type>        <name>recipientId</name> <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>IdentityKey</name></type> <name>identityKey</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <comment type="line">// NOTE (4/21/14) -- At this moment in time, we're forgetting the ability to parse</comment>
              <comment type="line">// V1 session records.  Despite our usual attempts to avoid using shared code in the</comment>
              <comment type="line">// upgrade path, this is too complex to put here directly.  Thus, unfortunately</comment>
              <comment type="line">// this operation is now lost to the ages.  From the git log, it seems to have been</comment>
              <comment type="line">// almost exactly a year since this went in, so hopefully the bulk of people have</comment>
              <comment type="line">// already upgraded.</comment>
<comment type="line">//              IdentityKey identityKey     = Session.getRemoteIdentityKey(context, masterSecret, recipientId);</comment>

              <if>if <condition>(<expr><name>identityKey</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name> <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>identityKeyString</name>  <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>identityKey</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>String</name></type> <name>macString</name>          <init>= <expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>masterCipher</name><operator>.</operator><name>getMacFor</name></name><argument_list>(<argument><expr><name>recipientId</name> <operator>+</operator>
                                                                                          <name>identityKeyString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"REPLACE INTO identities (recipient, key, mac) VALUES (?, ?, ?)"</literal></expr></argument>,
                           <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>recipientId</name><operator>+</operator><literal type="string">""</literal></expr>, <expr><name>identityKeyString</name></expr>, <expr><name>macString</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
            }</block></then></if>
          }</block></for>
        }</block></then></if>
      }</block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>fromVersion</name> <operator>&lt;</operator> <name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>ASYMMETRIC_MASTER_SECRET_FIX_VERSION</name></name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>MasterSecretUtil</name><operator>.</operator><name>hasAsymmericMasterSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>MasterSecretUtil</name><operator>.</operator><name>generateAsymmetricMasterSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>MasterCipher</name></type> <name>masterCipher</name> <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Cursor</name></type>       <name>cursor</name>       <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>,
                            <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>SmsDatabase</name><operator>.</operator><name>ID</name></name></expr>, <expr><name><name>SmsDatabase</name><operator>.</operator><name>BODY</name></name></expr>, <expr><name><name>SmsDatabase</name><operator>.</operator><name>TYPE</name></name></expr>}</block></expr></argument>,
                            <argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>TYPE</name></name> <operator>+</operator> <literal type="string">" &amp; ? == 0"</literal></expr></argument>,
                            <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                            <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>long</name></type>   <name>id</name>   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type>   <name>type</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>String</name></type> <name>encryptedBody</name> <init>= <expr><call><name><name>masterCipher</name><operator>.</operator><name>encryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ContentValues</name></type> <name>update</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>BODY</name></name></expr></argument>, <argument><expr><name>encryptedBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>update</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>TYPE</name></name></expr></argument>, <argument><expr><name>type</name> <operator>|</operator> <literal type="number">0x80000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// Inline now deprecated symmetric encryption type</comment>

            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><name>update</name></expr></argument>, <argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>ID</name></name>  <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                      <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></while>
        }</block> <finally>finally <block>{
          <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></finally></try>
      }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<comment type="line">//    DecryptingQueue.schedulePendingDecrypts(context, masterSecret);</comment>
    <expr_stmt><expr><call><name><name>MessageNotifier</name><operator>.</operator><name>updateNotification</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_IDENTITIES_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE identities (_id INTEGER PRIMARY KEY, key TEXT UNIQUE, name TEXT UNIQUE, mac TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_INDEXES_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_thread_id_index ON sms (thread_id);"</literal></expr>,
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_read_index ON sms (read);"</literal></expr>,
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_read_and_thread_id_index ON sms (read,thread_id);"</literal></expr>,
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_type_index ON sms (type);"</literal></expr>
      }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_thread_id_index ON mms (thread_id);"</literal></expr>,
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_read_index ON mms (read);"</literal></expr>,
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_read_and_thread_id_index ON mms (read,thread_id);"</literal></expr>,
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_message_box_index ON mms (msg_box);"</literal></expr>
      }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS part_mms_id_index ON part (mid);"</literal></expr>
      }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS thread_recipient_ids_index ON thread (recipient_ids);"</literal></expr>,
      }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_addresses_mms_id_index ON mms_addresses (mms_id);"</literal></expr>,
      }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_DATE_SENT_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN date_sent INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET date_sent = date;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN date_received INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET date_received = date;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_DRAFTS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE drafts (_id INTEGER PRIMARY KEY, thread_id INTEGER, type TEXT, value TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>executeStatements</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
          <expr><literal type="string">"CREATE INDEX IF NOT EXISTS draft_thread_index ON drafts (thread_id);"</literal></expr>,
      }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_NEW_TYPES_VERSION</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>KEY_EXCHANGE</name>             <init>= <expr><literal type="string">"?TextSecureKeyExchange"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>SYMMETRIC_ENCRYPT</name>        <init>= <expr><literal type="string">"?TextSecureLocalEncrypt"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>ASYMMETRIC_ENCRYPT</name>       <init>= <expr><literal type="string">"?TextSecureAsymmetricEncrypt"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>ASYMMETRIC_LOCAL_ENCRYPT</name> <init>= <expr><literal type="string">"?TextSecureAsymmetricLocalEncrypt"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>PROCESSED_KEY_EXCHANGE</name>   <init>= <expr><literal type="string">"?TextSecureKeyExchangd"</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type> <name>STALE_KEY_EXCHANGE</name>       <init>= <expr><literal type="string">"?TextSecureKeyExchangs"</literal></expr></init></decl>;</decl_stmt>

      <comment type="line">// SMS Updates</comment>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="number">20L</literal><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">1L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="number">21L</literal><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">43L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="number">22L</literal><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">4L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="number">23L</literal><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">2L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="number">24L</literal><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">5L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">21L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">42L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">23L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">44L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">45L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x800000L</literal> <operator>|</operator> <literal type="number">0x10000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">46L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">47L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET type = ? WHERE type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x800000L</literal> <operator>|</operator> <literal type="number">0x08000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">48L</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = substr(body, ?), type = type | ? WHERE body LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>SYMMETRIC_ENCRYPT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><literal type="number">0x80000000L</literal><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><name>SYMMETRIC_ENCRYPT</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = substr(body, ?), type = type | ? WHERE body LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>ASYMMETRIC_LOCAL_ENCRYPT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><literal type="number">0x40000000L</literal><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><name>ASYMMETRIC_LOCAL_ENCRYPT</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = substr(body, ?), type = type | ? WHERE body LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>ASYMMETRIC_ENCRYPT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><operator>(</operator><literal type="number">0x800000L</literal> <operator>|</operator> <literal type="number">0x20000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><name>ASYMMETRIC_ENCRYPT</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = substr(body, ?), type = type | ? WHERE body LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><literal type="number">0x8000L</literal><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><name>KEY_EXCHANGE</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = substr(body, ?), type = type | ? WHERE body LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>PROCESSED_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><operator>(</operator><literal type="number">0x8000L</literal> <operator>|</operator> <literal type="number">0x2000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><name>PROCESSED_KEY_EXCHANGE</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE sms SET body = substr(body, ?), type = type | ? WHERE body LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>STALE_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><operator>(</operator><literal type="number">0x8000L</literal> <operator>|</operator> <literal type="number">0x4000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><name>STALE_KEY_EXCHANGE</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// MMS Updates</comment>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">1</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">23L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">2</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">21L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">4</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">24L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">12</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">21L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator> <operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">5</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">23L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator> <operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">6</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x20000000L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator> <operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">7</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x80000000L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator> <operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">8</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x08000000L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator> <operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">9</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET msg_box = ? WHERE msg_box = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><literal type="number">20L</literal> <operator>|</operator> <literal type="number">0x10000000L</literal> <operator>|</operator> <literal type="number">0x800000L</literal><operator>)</operator> <operator>+</operator><literal type="string">""</literal></expr>, <expr><literal type="number">10</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Thread Updates</comment>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN snippet_type INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = substr(snippet, ?), "</literal> <operator>+</operator>
                 <literal type="string">"snippet_type = ? WHERE snippet LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>SYMMETRIC_ENCRYPT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><literal type="number">0x80000000L</literal><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><name>SYMMETRIC_ENCRYPT</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = substr(snippet, ?), "</literal> <operator>+</operator>
                 <literal type="string">"snippet_type = ? WHERE snippet LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>ASYMMETRIC_LOCAL_ENCRYPT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><literal type="number">0x40000000L</literal><operator>+</operator><literal type="string">""</literal></expr>,
                                <expr><name>ASYMMETRIC_LOCAL_ENCRYPT</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = substr(snippet, ?), "</literal> <operator>+</operator>
                 <literal type="string">"snippet_type = ? WHERE snippet LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>ASYMMETRIC_ENCRYPT</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><operator>(</operator><literal type="number">0x800000L</literal> <operator>|</operator> <literal type="number">0x20000000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><name>ASYMMETRIC_ENCRYPT</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = substr(snippet, ?), "</literal> <operator>+</operator>
                 <literal type="string">"snippet_type = ? WHERE snippet LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                     <expr><literal type="number">0x8000L</literal><operator>+</operator><literal type="string">""</literal></expr>,
                     <expr><name>KEY_EXCHANGE</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = substr(snippet, ?), "</literal> <operator>+</operator>
                 <literal type="string">"snippet_type = ? WHERE snippet LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>STALE_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><operator>(</operator><literal type="number">0x8000L</literal> <operator>|</operator> <literal type="number">0x4000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><name>STALE_KEY_EXCHANGE</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET snippet = substr(snippet, ?), "</literal> <operator>+</operator>
                 <literal type="string">"snippet_type = ? WHERE snippet LIKE ?"</literal></expr></argument>,
                 <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><operator>(</operator><call><name><name>PROCESSED_KEY_EXCHANGE</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><operator>(</operator><literal type="number">0x8000L</literal> <operator>|</operator> <literal type="number">0x2000L</literal><operator>)</operator><operator>+</operator><literal type="string">""</literal></expr>,
                               <expr><name>PROCESSED_KEY_EXCHANGE</name> <operator>+</operator> <literal type="string">"%"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_MMS_BODY_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN body TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN part_count INTEGER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_MMS_FROM_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN address TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"mms_addresses"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"type = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="number">0x89</literal><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>,
                               <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>mmsId</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"mms_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET address = ? WHERE _id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>address</name></expr>, <expr><name>mmsId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_TOFU_IDENTITY_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE identities"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE identities (_id INTEGER PRIMARY KEY, recipient INTEGER UNIQUE, key TEXT, mac TEXT);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_PUSH_DATABASE_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE push (_id INTEGER PRIMARY KEY, type INTEGER, source TEXT, destinations TEXT, body TEXT, TIMESTAMP INTEGER);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN pending_push INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS pending_push_index ON part (pending_push);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_GROUP_DATABASE_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE groups (_id INTEGER PRIMARY KEY, group_id TEXT, title TEXT, members TEXT, avatar BLOB, avatar_id INTEGER, avatar_key BLOB, avatar_content_type TEXT, avatar_relay TEXT, timestamp INTEGER, active INTEGER DEFAULT 1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE UNIQUE INDEX IF NOT EXISTS group_id_index ON groups (GROUP_ID);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE push ADD COLUMN device_id INTEGER DEFAULT 1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN address_device_id INTEGER DEFAULT 1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN address_device_id INTEGER DEFAULT 1;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_PUSH_FIX_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TEMPORARY table push_backup (_id INTEGER PRIMARY KEY, type INTEGER, source, TEXT, destinations TEXT, body TEXT, timestamp INTEGER, device_id INTEGER DEFAULT 1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO push_backup(_id, type, source, body, timestamp, device_id) SELECT _id, type, source, body, timestamp, device_id FROM push;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE push"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE push (_id INTEGER PRIMARY KEY, type INTEGER, source TEXT, body TEXT, timestamp INTEGER, device_id INTEGER DEFAULT 1);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO push (_id, type, source, body, timestamp, device_id) SELECT _id, type, source, body, timestamp, device_id FROM push_backup;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE push_backup;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_DELIVERY_RECEIPTS</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN delivery_receipt_count INTEGER DEFAULT 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN delivery_receipt_count INTEGER DEFAULT 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_date_sent_index ON sms (date_sent);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_date_sent_index ON mms (date);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_PART_DATA_SIZE_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN data_size INTEGER DEFAULT 0;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_THUMBNAILS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN thumbnail TEXT;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN aspect_ratio REAL;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_IDENTITY_COLUMN_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN mismatched_identities TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN mismatched_identities TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN network_failures TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_UNIQUE_PART_IDS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN unique_id INTEGER NOT NULL DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_RECIPIENT_PREFS_DB</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE recipient_preferences "</literal> <operator>+</operator>
                 <literal type="string">"(_id INTEGER PRIMARY KEY, recipient_ids TEXT UNIQUE, block INTEGER DEFAULT 0, "</literal> <operator>+</operator>
                 <literal type="string">"notification TEXT DEFAULT NULL, vibrate INTEGER DEFAULT 0, mute_until INTEGER DEFAULT 0)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_ENVELOPE_CONTENT_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE push ADD COLUMN content TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_COLOR_PREFERENCE_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN color TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_DB_OPTIMIZATIONS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE mms SET date_received = (date_received * 1000), date = (date * 1000);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_thread_date_index ON sms (thread_id, date);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_thread_date_index ON mms (thread_id, date_received);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_INVITE_REMINDERS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN seen_invite_reminder INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_CONVERSATION_LIST_THUMBNAILS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN snippet_uri TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_ARCHIVE_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN archived INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS archived_index ON thread (archived)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_CONVERSATION_LIST_STATUS_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN status INTEGER DEFAULT -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN delivery_receipt_count INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>MIGRATED_CONVERSATION_LIST_STATUS_VERSION</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Cursor</name></type> <name>threadCursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>threadCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>threadCursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name><name>threadCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>threadCursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT DISTINCT date AS date_received, status, "</literal> <operator>+</operator>
                                    <literal type="string">"delivery_receipt_count FROM sms WHERE (thread_id = ?1) "</literal> <operator>+</operator>
                                    <literal type="string">"UNION ALL SELECT DISTINCT date_received, -1 AS status, "</literal> <operator>+</operator>
                                    <literal type="string">"delivery_receipt_count FROM mms WHERE (thread_id = ?1) "</literal> <operator>+</operator>
                                    <literal type="string">"ORDER BY date_received DESC LIMIT 1"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>threadId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>status</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"status"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>receiptCount</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"delivery_receipt_count"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET status = ?, delivery_receipt_count = ? WHERE _id = ?"</literal></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>status</name> <operator>+</operator> <literal type="string">""</literal></expr>, <expr><name>receiptCount</name> <operator>+</operator> <literal type="string">""</literal></expr>, <expr><name>threadId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_SUBSCRIPTION_ID_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN default_subscription_id INTEGER DEFAULT -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN subscription_id INTEGER DEFAULT -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN subscription_id INTEGER DEFAULT -1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_EXPIRE_MESSAGES_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN expire_messages INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN expires_in INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN expires_in INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN expire_started INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN expire_started INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN expires_in INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_LAST_SEEN</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN last_seen INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_DIGEST</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN digest BLOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE groups ADD COLUMN avatar_digest BLOB"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_NOTIFIED</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN notified INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN notified INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP INDEX sms_read_and_thread_id_index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_read_and_notified_and_thread_id_index ON sms(read,notified,thread_id)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP INDEX mms_read_and_thread_id_index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS mms_read_and_notified_and_thread_id_index ON mms(read,notified,thread_id)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_DOCUMENTS</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN file_name TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_FAST_PREFLIGHT</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN fast_preflight_id TEXT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_VOICE_NOTES</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE part ADD COLUMN voice_note INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_IDENTITY_TIMESTAMP</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE identities ADD COLUMN timestamp INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE identities ADD COLUMN first_use INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE identities ADD COLUMN nonblocking_approval INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE identities ADD COLUMN verified INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP INDEX archived_index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS archived_count_index ON thread (archived, message_count)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>SANIFY_ATTACHMENT_DOWNLOAD</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE part SET pending_push = '2' WHERE pending_push = '1'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>NO_MORE_CANONICAL_ADDRESS_DATABASE</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>SQLiteOpenHelper</name></type> <name>canonicalAddressDatabaseHelper</name> <init>= <expr><operator>new</operator> <class><super><name>SQLiteOpenHelper</name></super><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="string">"canonical_address.db"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"No canonical address DB?"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{}</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>
      
      <decl_stmt><decl><type><name>SQLiteDatabase</name></type>    <name>canonicalAddressDatabase</name>       <init>= <expr><call><name><name>canonicalAddressDatabaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>NumberMigrator</name></type>    <name>numberMigrator</name>                 <init>= <expr><operator>new</operator> <call><name>NumberMigrator</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// Migrate Thread Database</comment>
      <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"recipient_ids"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>     <name>threadId</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>   <name>recipientIdsList</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>recipientIds</name>     <init>= <expr><call><name><name>recipientIdsList</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>addresses</name>        <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>recipientIds</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>recipientIds</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>addresses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>DelimiterUtil</name><operator>.</operator><name>escape</name></name><argument_list>(<argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>addresses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
          }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve: "</literal> <operator>+</operator> <name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">", recipientIdsList: '"</literal> <operator>+</operator> <name>recipientIdsList</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          }</block></else></if>

          <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate Identity database</comment>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE identities_migrated (_id INTEGER PRIMARY KEY, address TEXT UNIQUE, key TEXT, first_use INTEGER DEFAULT 0, timestamp INTEGER DEFAULT 0, verified INTEGER DEFAULT 0, nonblocking_approval INTEGER DEFAULT 0);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"identities"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id, recipient, key, first_use, timestamp, verified, nonblocking_approval"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>                  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>   <name>recipientId</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>key</name>                 <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>firstUse</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name></type>   <name>timestamp</name>           <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>verified</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type>    <name>nonblockingApproval</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name>      <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>recipientId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"key"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"first_use"</literal></expr></argument>, <argument><expr><name>firstUse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"timestamp"</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"verified"</literal></expr></argument>, <argument><expr><name>verified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"nonblocking_approval"</literal></expr></argument>, <argument><expr><name>nonblockingApproval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve: "</literal> <operator>+</operator> <name>recipientId</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></else></if>

        <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="string">"identities_migrated"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE identities"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE identities_migrated RENAME TO identities"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Migrate recipient preferences database</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"recipient_ids"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>     <name>id</name>               <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>   <name>recipientIdsList</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>recipientIds</name>     <init>= <expr><call><name><name>recipientIdsList</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>addresses</name>        <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><name><name>recipientIds</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>recipientIds</name><operator>.</operator><name>length</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>addresses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>DelimiterUtil</name><operator>.</operator><name>escape</name></name><argument_list>(<argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>addresses</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"Unknown"</literal></expr>;</expr_stmt>
          }</block></then></if></elseif> <else>else <block>{
            <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve: "</literal> <operator>+</operator> <name><name>recipientIds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="string">", recipientIdsList: '"</literal> <operator>+</operator> <name>recipientIdsList</name> <operator>+</operator> <literal type="string">"'"</literal></expr></argument>)</argument_list></call></expr>;</throw>
          }</block></else></if>

          <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <expr_stmt><expr><call><name><name>Arrays</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>addresses</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <try>try <block>{
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>SQLiteConstraintException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate SMS database</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate MMS database</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate MmsAddressDatabase</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"mms_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><literal type="string">"insert-address-token"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"mms_addresses"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate SMS mismatched identities</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"mismatched_identities"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"mismatched_identities IS NOT NULL"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>document</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>PreCanonicalAddressIdentityMismatchList</name></type> <name>oldDocumentList</name> <init>= <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>PreCanonicalAddressIdentityMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressIdentityMismatchDocument</name></argument>&gt;</argument_list></name></type> <name>newDocumentList</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>PreCanonicalAddressIdentityMismatchDocument</name></type> <name>oldDocument</name> <range>: <expr><name><name>oldDocumentList</name><operator>.</operator><name>list</name></name></expr></range></decl></init>)</control> <block>{
              <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>oldDocument</name><operator>.</operator><name>recipientId</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>newDocumentList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostCanonicalAddressIdentityMismatchDocument</name><argument_list>(<argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>oldDocument</name><operator>.</operator><name>identityKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then> <else>else <block>{
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve: "</literal> <operator>+</operator> <name><name>oldDocument</name><operator>.</operator><name>recipientId</name></name></expr></argument>)</argument_list></call></expr>;</throw>
              }</block></else></if>

              <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>

            <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mismatched_identities"</literal></expr></argument>, <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostCanonicalAddressIdentityMismatchList</name><argument_list>(<argument><expr><name>newDocumentList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate MMS mismatched identities</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"mismatched_identities"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"mismatched_identities IS NOT NULL"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>document</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>PreCanonicalAddressIdentityMismatchList</name></type> <name>oldDocumentList</name> <init>= <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>PreCanonicalAddressIdentityMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressIdentityMismatchDocument</name></argument>&gt;</argument_list></name></type> <name>newDocumentList</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>PreCanonicalAddressIdentityMismatchDocument</name></type> <name>oldDocument</name> <range>: <expr><name><name>oldDocumentList</name><operator>.</operator><name>list</name></name></expr></range></decl></init>)</control> <block>{
              <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>oldDocument</name><operator>.</operator><name>recipientId</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>newDocumentList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostCanonicalAddressIdentityMismatchDocument</name><argument_list>(<argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>oldDocument</name><operator>.</operator><name>identityKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then> <else>else <block>{
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve: "</literal> <operator>+</operator> <name><name>oldDocument</name><operator>.</operator><name>recipientId</name></name></expr></argument>)</argument_list></call></expr>;</throw>
              }</block></else></if>

              <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>

            <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mismatched_identities"</literal></expr></argument>, <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostCanonicalAddressIdentityMismatchList</name><argument_list>(<argument><expr><name>newDocumentList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">// Migrate MMS network failures</comment>
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"network_failures"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"network_failures IS NOT NULL"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>   <name>id</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>document</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>PreCanonicalAddressNetworkFailureList</name></type> <name>oldDocumentList</name> <init>= <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>PreCanonicalAddressNetworkFailureList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressNetworkFailureDocument</name></argument>&gt;</argument_list></name></type> <name>newDocumentList</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>PreCanonicalAddressNetworkFailureDocument</name></type> <name>oldDocument</name> <range>: <expr><name><name>oldDocumentList</name><operator>.</operator><name>list</name></name></expr></range></decl></init>)</control> <block>{
              <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name><name>oldDocument</name><operator>.</operator><name>recipientId</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>address</name> <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>newDocumentList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostCanonicalAddressNetworkFailureDocument</name><argument_list>(<argument><expr><call><name><name>numberMigrator</name><operator>.</operator><name>migrate</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then> <else>else <block>{
                <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Unable to resolve: "</literal> <operator>+</operator> <name><name>oldDocument</name><operator>.</operator><name>recipientId</name></name></expr></argument>)</argument_list></call></expr>;</throw>
              }</block></else></if>

              <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
            }</block></for>

            <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"network_failures"</literal></expr></argument>, <argument><expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PostCanonicalAddressNetworkFailureList</name><argument_list>(<argument><expr><name>newDocumentList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>
      }</block></while>

      <comment type="line">// Migrate sessions</comment>
      <decl_stmt><decl><type><name>File</name></type> <name>sessionsDirectory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"sessions-v2"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>sessionsDirectory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>sessionsDirectory</name><operator>.</operator><name>isDirectory</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>sessions</name> <init>= <expr><call><name><name>sessionsDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>File</name></type> <name>session</name> <range>: <expr><name>sessions</name></expr></range></decl></init>)</control> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>sessionParts</name> <init>= <expr><call><name><name>session</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>split</name><argument_list>(<argument><expr><literal type="string">"[.]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name></type>     <name>recipientId</name>  <init>= <expr><call><name><name>Long</name><operator>.</operator><name>parseLong</name></name><argument_list>(<argument><expr><name><name>sessionParts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>deviceId</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><name><name>sessionParts</name><operator>.</operator><name>length</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>deviceId</name> <operator>=</operator> <call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name><name>sessionParts</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else                         <block type="pseudo"><expr_stmt><expr><name>deviceId</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

            <decl_stmt><decl><type><name>Cursor</name></type> <name>resolved</name> <init>= <expr><call><name><name>canonicalAddressDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"canonical_addresses"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"address"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>recipientId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>resolved</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>String</name></type> <name>address</name>     <init>= <expr><call><name><name>resolved</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>File</name></type>   <name>destination</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>session</name><operator>.</operator><name>getParentFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>address</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>deviceId</name> <operator>!=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"."</literal> <operator>+</operator> <name>deviceId</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <if>if <condition>(<expr><operator>!</operator><call><name><name>session</name><operator>.</operator><name>renameTo</name></name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Session rename failed: "</literal> <operator>+</operator> <name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
            }</block></then></if>

            <if>if <condition>(<expr><name>resolved</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>resolved</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></for>
      }</block></then></if>

    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>NO_MORE_RECIPIENTS_PLURAL</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE groups ADD COLUMN mms INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"recipient_ids"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>     <name>threadId</name>          <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>   <name>addressListString</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>addressList</name>       <init>= <expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>addressListString</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>addressList</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>, <argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>unescape</name></name><argument_list>(<argument><expr><name>addressListString</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>       <name>groupId</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>members</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><operator>new</operator> <call><name>SecureRandom</name><argument_list>()</argument_list></call><operator>.</operator><call><name>nextBytes</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <for>for <control>(<init><decl><type><name>String</name></type> <name>address</name> <range>: <expr><name>addressList</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>members</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>escape</name></name><argument_list>(<argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>unescape</name></name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></for>

          <expr_stmt><expr><call><name><name>members</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>escape</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>members</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>String</name></type>        <name>encodedGroupId</name> <init>= <expr><literal type="string">"__signal_mms_group__!"</literal> <operator>+</operator> <call><name><name>Hex</name><operator>.</operator><name>toStringCondensed</name></name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>groupValues</name>    <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>threadValues</name>   <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>groupValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"group_id"</literal></expr></argument>, <argument><expr><name>encodedGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>groupValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"members"</literal></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>members</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>groupValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>threadValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>, <argument><expr><name>encodedGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>groupValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><name>threadValues</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><name>threadValues</name></expr></argument>, <argument><expr><literal type="string">"recipient_ids = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>addressListString</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>, <expr><literal type="string">"recipient_ids"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>     <name>id</name>                <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type>   <name>addressListString</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>addressList</name>       <init>= <expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>addressListString</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>addressList</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>, <argument><expr><call><name><name>DelimiterUtil</name><operator>.</operator><name>unescape</name></name><argument_list>(<argument><expr><name>addressListString</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Found preferences for MMS thread that appears to be gone: "</literal> <operator>+</operator> <name>addressListString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>

      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT mms._id, thread.recipient_ids FROM mms, thread WHERE mms.address IS NULL AND mms.thread_id = thread._id"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>long</name></type>          <name>id</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"address"</literal></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><literal type="string">"_id = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTERNAL_DIRECTORY</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN registered INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>OldDirectoryDatabaseHelper</name></type> <name>directoryDatabaseHelper</name> <init>= <expr><operator>new</operator> <call><name>OldDirectoryDatabaseHelper</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SQLiteDatabase</name></type>             <name>directoryDatabase</name>       <init>= <expr><call><name><name>directoryDatabaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>directoryDatabase</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"directory"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"number"</literal></expr>, <expr><literal type="string">"registered"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type>        <name>address</name>       <init>= <expr><operator>new</operator> <call><name>NumberMigrator</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>migrate</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"registered"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><literal type="string">"recipient_ids = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name></expr></argument></argument_list></call></expr></condition><then> <block>{<expr_stmt><expr><name>address</name></expr></expr_stmt>}</block></then></if>)</block> <expr_stmt><expr><operator>&lt;</operator> <literal type="number">1</literal></expr></expr_stmt></while>)</block> <block>{
          <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></class>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTERNAL_SYSTEM_DISPLAY_NAME</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN system_display_name TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>PROFILES</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN profile_key TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN signal_profile_name TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN signal_profile_avatar TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>PROFILE_SHARING_APPROVAL</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN profile_sharing_approval INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>UNSEEN_NUMBER_OFFER</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN has_sent INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>READ_RECEIPTS</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE sms ADD COLUMN read_receipt_count INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE mms ADD COLUMN read_receipt_count INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN read_receipt_count INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>GROUP_RECEIPT_TRACKING</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE group_receipts (_id INTEGER PRIMARY KEY, mms_id  INTEGER, address TEXT, status INTEGER, timestamp INTEGER)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE INDEX IF NOT EXISTS group_receipt_mms_id_index ON group_receipts (mms_id)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>UNREAD_COUNT_VERSION</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE thread ADD COLUMN unread_count INTEGER DEFAULT 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"_id"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="string">"read = 0"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
        <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>long</name></type> <name>threadId</name>    <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type>  <name>unreadCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

          <try>try <init>(<decl><type><name>Cursor</name></type> <name>smsCursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) FROM sms WHERE thread_id = ? AND read = '0'"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <if>if <condition>(<expr><name>smsCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>smsCursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>unreadCount</name> <operator>+=</operator> <call><name><name>smsCursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></try>

          <try>try <init>(<decl><type><name>Cursor</name></type> <name>mmsCursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT COUNT(*) FROM mms WHERE thread_id = ? AND read = '0'"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <if>if <condition>(<expr><name>mmsCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mmsCursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>unreadCount</name> <operator>+=</operator> <call><name><name>mmsCursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></try>

          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE thread SET unread_count = ? WHERE _id = ?"</literal></expr></argument>,
                     <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>unreadCount</name></expr></argument>)</argument_list></call></expr>,
                                   <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
      }</block></try>
    }</block></then></if>

    <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>MORE_RECIPIENT_FIELDS</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN system_contact_photo TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN system_phone_label TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE recipient_preferences ADD COLUMN system_contact_uri TEXT DEFAULT NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>Permissions</name><operator>.</operator><name>hasAny</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_CONTACTS</name></name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>WRITE_CONTACTS</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
          <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>Address</name></type> <name>address</name> <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"recipient_ids"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>address</name><operator>.</operator><name>isPhone</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <decl_stmt><decl><type><name>Uri</name></type> <name>lookup</name> <init>= <expr><call><name><name>Uri</name><operator>.</operator><name>withAppendedPath</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>CONTENT_FILTER_URI</name></name></expr></argument>, <argument><expr><call><name><name>Uri</name><operator>.</operator><name>encode</name></name><argument_list>(<argument><expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <try>try <init>(<decl><type><name>Cursor</name></type> <name>contactCursor</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>query</name><argument_list>(<argument><expr><name>lookup</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>DISPLAY_NAME</name></name></expr>,
                                                                                                   <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>LOOKUP_KEY</name></name></expr>,
                                                                                                   <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>_ID</name></name></expr>,
                                                                                                   <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>NUMBER</name></name></expr>,
                                                                                                   <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>LABEL</name></name></expr>,
                                                                                                   <expr><name><name>ContactsContract</name><operator>.</operator><name>PhoneLookup</name><operator>.</operator><name>PHOTO_URI</name></name></expr>}</block></expr></argument>,
                                                                             <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init>
              <block>{
                <if>if <condition>(<expr><name>contactCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>contactCursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                  <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"system_contact_photo"</literal></expr></argument>, <argument><expr><call><name><name>contactCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"system_phone_label"</literal></expr></argument>, <argument><expr><call><name><name>contactCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"system_contact_uri"</literal></expr></argument>, <argument><expr><call><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>getLookupUri</name></name><argument_list>(<argument><expr><call><name><name>contactCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>contactCursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><literal type="string">"recipient_ids = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>address</name><operator>.</operator><name>toPhoneString</name></name><argument_list>()</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
              }</block></try>
            }</block></then></if>
          }</block></while>
        }</block></try>
      }</block></then></if>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }

  private <function><type><name>void</name></type> <name>executeStatements</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>statements</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>String</name></type> <name>statement</name> <range>: <expr><name>statements</name></expr></range></decl></init>)</control>
      <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PreCanonicalAddressIdentityMismatchList</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"m"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PreCanonicalAddressIdentityMismatchDocument</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PostCanonicalAddressIdentityMismatchList</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"m"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressIdentityMismatchDocument</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PostCanonicalAddressIdentityMismatchList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressIdentityMismatchDocument</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PreCanonicalAddressIdentityMismatchDocument</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"r"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>long</name></type> <name>recipientId</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"k"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>identityKey</name></decl>;</decl_stmt>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PostCanonicalAddressIdentityMismatchDocument</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"a"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>address</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"k"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>identityKey</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PostCanonicalAddressIdentityMismatchDocument</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <constructor><specifier>public</specifier> <name>PostCanonicalAddressIdentityMismatchDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>identityKey</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name>     <operator>=</operator> <name>address</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>identityKey</name></name> <operator>=</operator> <name>identityKey</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PreCanonicalAddressNetworkFailureList</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"l"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PreCanonicalAddressNetworkFailureDocument</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PostCanonicalAddressNetworkFailureList</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"l"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressNetworkFailureDocument</name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PostCanonicalAddressNetworkFailureList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>PostCanonicalAddressNetworkFailureDocument</name></argument>&gt;</argument_list></name></type> <name>list</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>list</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PreCanonicalAddressNetworkFailureDocument</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"r"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>long</name></type> <name>recipientId</name></decl>;</decl_stmt>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PostCanonicalAddressNetworkFailureDocument</name> <block>{
    <decl_stmt><decl><annotation>@<name>JsonProperty</name><argument_list>(<argument><expr><name>value</name> <operator>=</operator> <literal type="string">"a"</literal></expr></argument>)</argument_list></annotation>
    <specifier>private</specifier> <type><name>String</name></type> <name>address</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PostCanonicalAddressNetworkFailureDocument</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

    <constructor><specifier>public</specifier> <name>PostCanonicalAddressNetworkFailureDocument</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>address</name></name> <operator>=</operator> <name>address</name></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>NumberMigrator</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>NumberMigrator</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>SHORT_COUNTRIES</name> <init>= <expr><operator>new</operator> <class><super><name><name>HashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{<block>{
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"NU"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"TK"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"NC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"AC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>}</block></class></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>localNumber</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>                  <name>localNumberString</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>                  <name>localCountryCode</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PhoneNumberUtil</name></type> <name>phoneNumberUtil</name> <init>= <expr><call><name><name>PhoneNumberUtil</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Pattern</name></type>         <name>ALPHA_PATTERN</name>   <init>= <expr><call><name><name>Pattern</name><operator>.</operator><name>compile</name></name><argument_list>(<argument><expr><literal type="string">"[a-zA-Z]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>NumberMigrator</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>localNumber</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localNumberString</name></name> <operator>=</operator> <name>localNumber</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localNumber</name></name>       <operator>=</operator> <call><name><name>phoneNumberUtil</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>localNumber</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>localCountryCode</name></name>  <operator>=</operator> <call><name><name>phoneNumberUtil</name><operator>.</operator><name>getRegionCodeForNumber</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>localNumber</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>String</name></type> <name>migrate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>number</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>number</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>                             <block type="pseudo"><return>return <expr><literal type="string">"Unknown"</literal></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>number</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"__textsecure_group__!"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>number</name></expr>;</return></block></then></if>
      <if>if <condition>(<expr><call><name><name>ALPHA_PATTERN</name><operator>.</operator><name>matcher</name></name><argument_list>(<argument><expr><name>number</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>find</name><argument_list>()</argument_list></call></expr>)</condition><then>       <block type="pseudo"><return>return <expr><call><name><name>number</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

      <decl_stmt><decl><type><name>String</name></type> <name>bareNumber</name> <init>= <expr><call><name><name>number</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"[^0-9+]"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>number</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="string">"Unknown"</literal></expr>;</return></block></then>
        <else>else                                  <block type="pseudo"><return>return <expr><call><name><name>number</name><operator>.</operator><name>trim</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
      }</block></then></if>

      <comment type="line">// libphonenumber doesn't seem to be correct for Germany and Finland</comment>
      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="string">"DE"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"FI"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call> <operator>||</operator> <literal type="string">"SK"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
        <return>return <expr><name>bareNumber</name></expr>;</return>
      }</block></then></if>

      <comment type="line">// libphonenumber seems incorrect for Russia and a few other countries with 4 digit short codes.</comment>
      <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>SHORT_COUNTRIES</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>bareNumber</name></expr>;</return>
      }</block></then></if>

      <try>try <block>{
        <decl_stmt><decl><type><name><name>Phonenumber</name><operator>.</operator><name>PhoneNumber</name></name></type> <name>parsedNumber</name> <init>= <expr><call><name><name>phoneNumberUtil</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><name>bareNumber</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>ShortNumberInfo</name><operator>.</operator><name>getInstance</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPossibleShortNumberForRegion</name><argument_list>(<argument><expr><name>parsedNumber</name></expr></argument>, <argument><expr><name>localCountryCode</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><name>bareNumber</name></expr>;</return>
        }</block></then></if>

        <return>return <expr><call><name><name>phoneNumberUtil</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>parsedNumber</name></expr></argument>, <argument><expr><name><name>PhoneNumberUtil</name><operator>.</operator><name>PhoneNumberFormat</name><operator>.</operator><name>E164</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberParseException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>bareNumber</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then>
          <block type="pseudo"><return>return <expr><name>bareNumber</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>String</name></type> <name>localNumberImprecise</name> <init>= <expr><name>localNumberString</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>localNumberImprecise</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>localNumberImprecise</name> <operator>=</operator> <call><name><name>localNumberImprecise</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if <condition>(<expr><call><name><name>localNumberImprecise</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>localNumberImprecise</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
          <block type="pseudo"><return>return <expr><literal type="string">"+"</literal> <operator>+</operator> <name>number</name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>difference</name> <init>= <expr><call><name><name>localNumberImprecise</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>bareNumber</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><literal type="string">"+"</literal> <operator>+</operator> <call><name><name>localNumberImprecise</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>difference</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>bareNumber</name></expr>;</return>
      }</block></catch></try>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>OldDirectoryDatabaseHelper</name> <super><extends>extends <name>SQLiteOpenHelper</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_CHANGE_FROM_TOKEN_TO_E164_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_VOICE_COLUMN</name>                     <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTRODUCED_VIDEO_COLUMN</name>                     <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATABASE_NAME</name>    <init>= <expr><literal type="string">"whisper_directory.db"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>DATABASE_VERSION</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name>   <init>= <expr><literal type="string">"directory"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>ID</name>           <init>= <expr><literal type="string">"_id"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>NUMBER</name>       <init>= <expr><literal type="string">"number"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REGISTERED</name>   <init>= <expr><literal type="string">"registered"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>RELAY</name>        <init>= <expr><literal type="string">"relay"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TIMESTAMP</name>    <init>= <expr><literal type="string">"timestamp"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VOICE</name>        <init>= <expr><literal type="string">"voice"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>VIDEO</name>        <init>= <expr><literal type="string">"video"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CREATE_TABLE</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" INTEGER PRIMARY KEY, "</literal> <operator>+</operator>
        <name>NUMBER</name>       <operator>+</operator> <literal type="string">" TEXT UNIQUE, "</literal> <operator>+</operator>
        <name>REGISTERED</name>   <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
        <name>RELAY</name>        <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator>
        <name>TIMESTAMP</name>    <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
        <name>VOICE</name>        <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
        <name>VIDEO</name>        <operator>+</operator> <literal type="string">" INTEGER);"</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OldDirectoryDatabaseHelper</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>DATABASE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATABASE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><name>CREATE_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onUpgrade</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newVersion</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_CHANGE_FROM_TOKEN_TO_E164_NUMBER</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE directory;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"CREATE TABLE directory ( _id INTEGER PRIMARY KEY, "</literal> <operator>+</operator>
                       <literal type="string">"number TEXT UNIQUE, "</literal> <operator>+</operator>
                       <literal type="string">"registered INTEGER, "</literal> <operator>+</operator>
                       <literal type="string">"relay TEXT, "</literal> <operator>+</operator>
                       <literal type="string">"supports_sms INTEGER, "</literal> <operator>+</operator>
                       <literal type="string">"timestamp INTEGER);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_VOICE_COLUMN</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE directory ADD COLUMN voice INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>oldVersion</name> <operator>&lt;</operator> <name>INTRODUCED_VIDEO_COLUMN</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"ALTER TABLE directory ADD COLUMN video INTEGER;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>
}
</unit>
