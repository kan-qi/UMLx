<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\helpers\PreKeyMigrationHelper.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>annotation</name><operator>.</operator><name>JsonProperty</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>OneTimePreKeyDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SignedPreKeyDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Conversions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidMessageException</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>PreKeyRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>state</name><operator>.</operator><name>SignedPreKeyRecord</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStreamReader</name></name>;</import>

<class>class <name>PreKeyMigrationHelper</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PREKEY_DIRECTORY</name>        <init>= <expr><literal type="string">"prekeys"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SIGNED_PREKEY_DIRECTORY</name> <init>= <expr><literal type="string">"signed_prekeys"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>PLAINTEXT_VERSION</name>      <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>CURRENT_VERSION_MARKER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PreKeyMigrationHelper</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>static</specifier> <type><name>boolean</name></type> <name>migratePreKeys</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SQLiteDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type>  <name>preKeyFiles</name> <init>= <expr><call><name>getPreKeyDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>listFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>clean</name>       <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>preKeyFiles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name>File</name></type> <name>preKeyFile</name> <range>: <expr><name>preKeyFiles</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><operator>!</operator><literal type="string">"index.dat"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>preKeyFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>PreKeyRecord</name></type> <name>preKey</name> <init>= <expr><operator>new</operator> <call><name>PreKeyRecord</name><argument_list>(<argument><expr><call><name>loadSerializedRecord</name><argument_list>(<argument><expr><name>preKeyFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OneTimePreKeyDatabase</name><operator>.</operator><name>KEY_ID</name></name></expr></argument>, <argument><expr><call><name><name>preKey</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OneTimePreKeyDatabase</name><operator>.</operator><name>PUBLIC_KEY</name></name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>preKey</name><operator>.</operator><name>getKeyPair</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPublicKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>OneTimePreKeyDatabase</name><operator>.</operator><name>PRIVATE_KEY</name></name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>preKey</name><operator>.</operator><name>getKeyPair</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrivateKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>OneTimePreKeyDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Migrated one-time prekey: "</literal> <operator>+</operator> <call><name><name>preKey</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>clean</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>
      }</block></for>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>signedPreKeyFiles</name> <init>= <expr><call><name>getSignedPreKeyDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>listFiles</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>signedPreKeyFiles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name>File</name></type> <name>signedPreKeyFile</name> <range>: <expr><name>signedPreKeyFiles</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><operator>!</operator><literal type="string">"index.dat"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>signedPreKeyFile</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <try>try <block>{
            <decl_stmt><decl><type><name>SignedPreKeyRecord</name></type> <name>signedPreKey</name> <init>= <expr><operator>new</operator> <call><name>SignedPreKeyRecord</name><argument_list>(<argument><expr><call><name>loadSerializedRecord</name><argument_list>(<argument><expr><name>signedPreKeyFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>KEY_ID</name></name></expr></argument>, <argument><expr><call><name><name>signedPreKey</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>PUBLIC_KEY</name></name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>signedPreKey</name><operator>.</operator><name>getKeyPair</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPublicKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>PRIVATE_KEY</name></name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>signedPreKey</name><operator>.</operator><name>getKeyPair</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPrivateKey</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>SIGNATURE</name></name></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><call><name><name>signedPreKey</name><operator>.</operator><name>getSignature</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>TIMESTAMP</name></name></expr></argument>, <argument><expr><call><name><name>signedPreKey</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Migrated signed prekey: "</literal> <operator>+</operator> <call><name><name>signedPreKey</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>clean</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          }</block></catch></try>
        }</block></then></if>
      }</block></for>
    }</block></then></if>

    <decl_stmt><decl><type><name>File</name></type> <name>oneTimePreKeyIndex</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getPreKeyDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>PreKeyIndex</name><operator>.</operator><name>FILE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>signedPreKeyIndex</name>  <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name>getSignedPreKeyDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>SignedPreKeyIndex</name><operator>.</operator><name>FILE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>oneTimePreKeyIndex</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>oneTimePreKeyIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PreKeyIndex</name></type>        <name>index</name> <init>= <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>PreKeyIndex</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Setting next prekey id: "</literal> <operator>+</operator> <name><name>index</name><operator>.</operator><name>nextPreKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setNextPreKeyId</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>nextPreKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>signedPreKeyIndex</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name>InputStreamReader</name></type> <name>reader</name> <init>= <expr><operator>new</operator> <call><name>InputStreamReader</name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>signedPreKeyIndex</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SignedPreKeyIndex</name></type> <name>index</name>  <init>= <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>reader</name></expr></argument>, <argument><expr><name><name>SignedPreKeyIndex</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Setting next signed prekey id: "</literal> <operator>+</operator> <name><name>index</name><operator>.</operator><name>nextSignedPreKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Setting active signed prekey id: "</literal> <operator>+</operator> <name><name>index</name><operator>.</operator><name>activeSignedPreKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setNextSignedPreKeyId</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>nextSignedPreKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setActiveSignedPreKeyId</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>index</name><operator>.</operator><name>activeSignedPreKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></then></if>

    <return>return <expr><name>clean</name></expr>;</return>
  }</block></function>

  <function><specifier>static</specifier> <type><name>void</name></type> <name>cleanUpPreKeys</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>File</name></type>   <name>preKeyDirectory</name> <init>= <expr><call><name>getPreKeyDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>preKeyFiles</name>     <init>= <expr><call><name><name>preKeyDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>preKeyFiles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name>File</name></type> <name>preKeyFile</name> <range>: <expr><name>preKeyFiles</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Deleting: "</literal> <operator>+</operator> <call><name><name>preKeyFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>preKeyFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Deleting: "</literal> <operator>+</operator> <call><name><name>preKeyDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>preKeyDirectory</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>File</name></type>   <name>signedPreKeyDirectory</name> <init>= <expr><call><name>getSignedPreKeyDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>File</name><index>[]</index></name></type> <name>signedPreKeyFiles</name>     <init>= <expr><call><name><name>signedPreKeyDirectory</name><operator>.</operator><name>listFiles</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>signedPreKeyFiles</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name>File</name></type> <name>signedPreKeyFile</name> <range>: <expr><name>signedPreKeyFiles</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Deleting: "</literal> <operator>+</operator> <call><name><name>signedPreKeyFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>signedPreKeyFile</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></for>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Deleting: "</literal> <operator>+</operator> <call><name><name>signedPreKeyDirectory</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>signedPreKeyDirectory</name><operator>.</operator><name>delete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>loadSerializedRecord</name><parameter_list>(<parameter><decl><type><name>File</name></type> <name>recordFile</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument>, <argument><expr><name>InvalidMessageException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fin</name>           <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>recordFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>             <name>recordVersion</name> <init>= <expr><call><name>readInteger</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>recordVersion</name> <operator>&gt;</operator> <name>CURRENT_VERSION_MARKER</name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid version: "</literal> <operator>+</operator> <name>recordVersion</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>serializedRecord</name> <init>= <expr><call><name>readBlob</name><argument_list>(<argument><expr><name>fin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>recordVersion</name> <operator>&lt;</operator> <name>PLAINTEXT_VERSION</name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Migration didn't happen! "</literal> <operator>+</operator> <call><name><name>recordFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>recordVersion</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>fin</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>serializedRecord</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getPreKeyDirectory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getRecordsDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>PREKEY_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getSignedPreKeyDirectory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getRecordsDirectory</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>SIGNED_PREKEY_DIRECTORY</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>File</name></type> <name>getRecordsDirectory</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>directoryName</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>File</name></type> <name>directory</name> <init>= <expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getFilesDir</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>directoryName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>directory</name><operator>.</operator><name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>directory</name><operator>.</operator><name>mkdirs</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"PreKey directory creation failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <return>return <expr><name>directory</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>readBlob</name><parameter_list>(<parameter><decl><type><name>FileInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>length</name>       <init>= <expr><call><name>readInteger</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>blobBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>length</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>blobBytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>blobBytes</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>blobBytes</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>readInteger</name><parameter_list>(<parameter><decl><type><name>FileInputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>integer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>integer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>Conversions</name><operator>.</operator><name>byteArrayToInt</name></name><argument_list>(<argument><expr><name>integer</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>PreKeyIndex</name> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILE_NAME</name> <init>= <expr><literal type="string">"index.dat"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
    <specifier>private</specifier> <type><name>int</name></type> <name>nextPreKeyId</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>PreKeyIndex</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SignedPreKeyIndex</name> <block>{
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>FILE_NAME</name> <init>= <expr><literal type="string">"index.dat"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
    <specifier>private</specifier> <type><name>int</name></type> <name>nextSignedPreKeyId</name></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>JsonProperty</name></annotation>
    <specifier>private</specifier> <type><name>int</name></type> <name>activeSignedPreKeyId</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SignedPreKeyIndex</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

  }</block></class>


}</block></class>
</unit>
