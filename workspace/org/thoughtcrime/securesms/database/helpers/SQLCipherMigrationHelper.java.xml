<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\helpers\SQLCipherMigrationHelper.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>function</name><operator>.</operator><name>BiFunction</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>DatabaseUpgradeActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AsymmetricMasterCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AttachmentSecretProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterCipher</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>MasterSecretUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>service</name><operator>.</operator><name>GenericForegroundService</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Base64</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>InvalidMessageException</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>SQLCipherMigrationHelper</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SQLCipherMigrationHelper</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>ENCRYPTION_SYMMETRIC_BIT</name>  <init>= <expr><literal type="number">0x80000000</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>ENCRYPTION_ASYMMETRIC_BIT</name> <init>= <expr><literal type="number">0x40000000</literal></expr></init></decl>;</decl_stmt>

  <function><specifier>static</specifier> <type><name>void</name></type> <name>migratePlaintext</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>legacyDb</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>modernDb</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><call><name><name>GenericForegroundService</name><operator>.</operator><name>startForegroundTask</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SQLCipherMigrationHelper_migrating_signal_database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"identities"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"push"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"groups"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"recipient_preferences"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"group_receipts"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>GenericForegroundService</name><operator>.</operator><name>stopForegroundTask</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>migrateCiphertext</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MasterSecret</name></type> <name>masterSecret</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>legacyDb</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>modernDb</name></decl></parameter>,
                                       <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>DatabaseUpgradeActivity</name><operator>.</operator><name>DatabaseUpgradeListener</name></name></type> <name>listener</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>MasterCipher</name></type>           <name>legacyCipher</name>           <init>= <expr><operator>new</operator> <call><name>MasterCipher</name><argument_list>(<argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AsymmetricMasterCipher</name></type> <name>legacyAsymmetricCipher</name> <init>= <expr><operator>new</operator> <call><name>AsymmetricMasterCipher</name><argument_list>(<argument><expr><call><name><name>MasterSecretUtil</name><operator>.</operator><name>getAsymmetricMasterSecret</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>masterSecret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>GenericForegroundService</name><operator>.</operator><name>startForegroundTask</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>SQLCipherMigrationHelper_migrating_signal_database</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"sms"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>row</name></decl></parameter>, <parameter><decl><name>progress</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>plaintext</name> <init>= <expr><call><name>getPlaintextBody</name><argument_list>(<argument><expr><name>legacyCipher</name></expr></argument>, <argument><expr><name>legacyAsymmetricCipher</name></expr></argument>,
                                                        <argument><expr><call><name><name>row</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>progress</name><operator>.</operator><name>first</name></name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name>getTotalProgress</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>row</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>row</name></decl></parameter>, <parameter><decl><name>progress</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>plaintext</name> <init>= <expr><call><name>getPlaintextBody</name><argument_list>(<argument><expr><name>legacyCipher</name></expr></argument>, <argument><expr><name>legacyAsymmetricCipher</name></expr></argument>,
                                                        <argument><expr><call><name><name>row</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><literal type="string">"msg_box"</literal></expr></argument>)</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"body"</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"msg_box"</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>progress</name><operator>.</operator><name>first</name></name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name>getTotalProgress</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>row</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>row</name></decl></parameter>, <parameter><decl><name>progress</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>fileName</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"file_name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>mediaKey</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"cd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"file_name"</literal></expr></argument>, <argument><expr><call><name><name>legacyCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <try>try <block>{
          <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>mediaKey</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>plaintext</name></decl>;</decl_stmt>

            <if>if <condition>(<expr><call><name><name>mediaKey</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><literal type="string">"?ASYNC-"</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>plaintext</name> <operator>=</operator> <call><name><name>legacyAsymmetricCipher</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><call><name><name>mediaKey</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="string">"?ASYNC-"</literal><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
              <expr_stmt><expr><name>plaintext</name> <operator>=</operator> <call><name><name>legacyCipher</name><operator>.</operator><name>decryptBytes</name></name><argument_list>(<argument><expr><call><name><name>Base64</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>mediaKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>

            <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"cd"</literal></expr></argument>, <argument><expr><call><name><name>Base64</name><operator>.</operator><name>encodeBytes</name></name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> | <type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>progress</name><operator>.</operator><name>first</name></name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name>getTotalProgress</name><argument_list>(<argument><expr><literal type="number">2000</literal></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>row</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"thread"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>row</name></decl></parameter>, <parameter><decl><name>progress</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><name>Long</name></type> <name>snippetType</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getAsLong</name></name><argument_list>(<argument><expr><literal type="string">"snippet_type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>snippetType</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>snippetType</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt></block></then></if>

        <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>plaintext</name> <init>= <expr><call><name>getPlaintextBody</name><argument_list>(<argument><expr><name>legacyCipher</name></expr></argument>, <argument><expr><name>legacyAsymmetricCipher</name></expr></argument>,
                                                        <argument><expr><name>snippetType</name></expr></argument>, <argument><expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"snippet"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"snippet"</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"snippet_type"</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>progress</name><operator>.</operator><name>first</name></name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name>getTotalProgress</name><argument_list>(<argument><expr><literal type="number">3000</literal></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>row</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <expr_stmt><expr><call><name>copyTable</name><argument_list>(<argument><expr><literal type="string">"drafts"</literal></expr></argument>, <argument><expr><name>legacyDb</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>row</name></decl></parameter>, <parameter><decl><name>progress</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>draftType</name> <init>= <expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>draft</name>     <init>= <expr><call><name><name>row</name><operator>.</operator><name>getAsString</name></name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>draftType</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"type"</literal></expr></argument>, <argument><expr><call><name><name>legacyCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><name>draftType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
          <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>draft</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="string">"value"</literal></expr></argument>, <argument><expr><call><name><name>legacyCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><name>draft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>progress</name><operator>.</operator><name>first</name></name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setProgress</name></name><argument_list>(<argument><expr><call><name>getTotalProgress</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>progress</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name>row</name></expr>;</return>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>AttachmentSecretProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setClassicKey</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>masterSecret</name><operator>.</operator><name>getEncryptionKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>masterSecret</name><operator>.</operator><name>getMacKey</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getEncoded</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setNeedsSqlCipherMigration</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>GenericForegroundService</name><operator>.</operator><name>stopForegroundTask</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>copyTable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>tableName</name></decl></parameter>,
                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>sqlite</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>legacyDb</name></decl></parameter>,
                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>modernDb</name></decl></parameter>,
                                <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>BiFunction</name><argument_list type="generic">&lt;<argument><name>ContentValues</name></argument>, <argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>, <argument><name>Integer</name></argument>&gt;</argument_list></name></argument>, <argument><name>ContentValues</name></argument>&gt;</argument_list></name></type> <name>transformer</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>destinationColumns</name> <init>= <expr><call><name>getTableColumns</name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><name>modernDb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>legacyDb</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>count</name>    <init>= <expr><ternary><condition><expr><operator>(</operator><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>progress</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ContentValues</name></type> <name>row</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>cursor</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <decl_stmt><decl><type><name>String</name></type> <name>columnName</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getColumnName</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>destinationColumns</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <switch>switch <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
              <case>case <expr><name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_STRING</name></name></expr>:</case>  <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <break>break;</break>
              <case>case <expr><name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_FLOAT</name></name></expr>:</case>   <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <break>break;</break>
              <case>case <expr><name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_INTEGER</name></name></expr>:</case> <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break>break;</break>
              <case>case <expr><name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_BLOB</name></name></expr>:</case>    <expr_stmt><expr><call><name><name>row</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>columnName</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getBlob</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <break>break;</break>
            }</block></switch>
          }</block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>transformer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name><name>transformer</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>progress</name><operator>++</operator></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>modernDb</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>tableName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPlaintextBody</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MasterCipher</name></type> <name>legacyCipher</name></decl></parameter>,
                                                     <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AsymmetricMasterCipher</name></type> <name>legacyAsymmetricCipher</name></decl></parameter>,
                                                     <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>,
                                                     <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>)</parameter_list>
  <block>{
    <try>try <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if      <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ENCRYPTION_SYMMETRIC_BIT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>legacyCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><operator>(</operator><name>type</name> <operator>&amp;</operator> <name>ENCRYPTION_ASYMMETRIC_BIT</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>body</name> <operator>=</operator> <call><name><name>legacyAsymmetricCipher</name><operator>.</operator><name>decryptBody</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidMessageException</name></type> | <type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>

    <expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ENCRYPTION_SYMMETRIC_BIT</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>type</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>ENCRYPTION_ASYMMETRIC_BIT</name><operator>)</operator></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getTableColumns</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>tableName</name></decl></parameter>, <parameter><decl><type><name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>database</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"PRAGMA table_info("</literal> <operator>+</operator> <name>tableName</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getTotalProgress</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sectionOffset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sectionProgress</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sectionTotal</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>percentOfSectionComplete</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>sectionProgress</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>sectionTotal</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>sectionOffset</name> <operator>+</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><literal type="number">1000</literal><operator>)</operator> <operator>*</operator> <name>percentOfSectionComplete</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
