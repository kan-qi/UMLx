<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\EarlyReceiptCache.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>LRUCache</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>EarlyReceiptCache</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>EarlyReceiptCache</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LRUCache</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>cache</name> <init>= <expr><operator>new</operator> <call><name><name>LRUCache</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>increment</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><name>Address</name></type> <name>origin</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>this</name><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Early receipt: (%d, %s)"</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><call><name><name>origin</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>receipts</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>receipts</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>receipts</name> <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Long</name></type> <name>count</name> <init>= <expr><call><name><name>receipts</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>origin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>count</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>receipts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>origin</name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>receipts</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>origin</name></expr></argument>, <argument><expr><literal type="number">1L</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>cache</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>receipts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>remove</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>receipts</name> <init>= <expr><call><name><name>cache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>this</name><operator>+</operator><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"Checking early receipts (%d): %d"</literal></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><ternary><condition><expr><name>receipts</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>receipts</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><ternary><condition><expr><name>receipts</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><name>receipts</name></expr> </then><else>: <expr><operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></else></ternary></expr>;</return>
  }</block></function>
}</block></class>
</unit>
