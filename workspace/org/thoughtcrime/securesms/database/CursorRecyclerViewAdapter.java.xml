<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\CursorRecyclerViewAdapter.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2015 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>DataSetObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>VisibleForTesting</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<comment type="block" format="javadoc">/**
 * RecyclerView.Adapter that manages a Cursor, comparable to the CursorAdapter usable in ListView/GridView.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name><name>CursorRecyclerViewAdapter</name><parameter_list>&lt;<parameter><name>VH</name> <extends>extends <name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></extends></parameter>&gt;</parameter_list></name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name><name>Adapter</name><argument_list type="generic">&lt;<argument><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></argument>&gt;</argument_list></name></name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>DataSetObserver</name></type> <name>observer</name> <init>= <expr><operator>new</operator> <call><name>AdapterDataSetObserver</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>  <name>HEADER_TYPE</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>  <name>FOOTER_TYPE</name> <init>= <expr><name><name>Integer</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>HEADER_ID</name>   <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>VisibleForTesting</name></annotation> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>FOOTER_ID</name>   <init>= <expr><name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier>           <type><name>Cursor</name></type>  <name>cursor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><name>boolean</name></type> <name>valid</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>View</name></type>    <name>header</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>View</name></type>    <name>footer</name></decl>;</decl_stmt>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>HeaderFooterViewHolder</name> <super><extends>extends <name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>HeaderFooterViewHolder</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>itemView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>itemView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <constructor><specifier>protected</specifier> <name>CursorRecyclerViewAdapter</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>registerDataSetObserver</name></name><argument_list>(<argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></constructor>

  <function><specifier>protected</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Context</name></type> <name>getContext</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>context</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Cursor</name></type> <name>getCursor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>cursor</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setHeaderView</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>View</name></type> <name>header</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>header</name></name> <operator>=</operator> <name>header</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>View</name></type> <name>getHeaderView</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>header</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setFooterView</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>View</name></type> <name>footer</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>footer</name></name> <operator>=</operator> <name>footer</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasHeaderView</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>header</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasFooterView</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>footer</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>changeCursor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Cursor</name></type> <name>old</name> <init>= <expr><call><name>swapCursor</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>old</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>swapCursor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>newCursor</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>newCursor</name> <operator>==</operator> <name>cursor</name></expr>)</condition><then> <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Cursor</name></type> <name>oldCursor</name> <init>= <expr><name>cursor</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>oldCursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>oldCursor</name><operator>.</operator><name>unregisterDataSetObserver</name></name><argument_list>(<argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>cursor</name> <operator>=</operator> <name>newCursor</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>registerDataSetObserver</name></name><argument_list>(<argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>valid</name> <operator>=</operator> <name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>oldCursor</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getItemCount</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isActiveCursor</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

    <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call>
           <operator>+</operator> <call><name>getFastAccessSize</name><argument_list>()</argument_list></call>
           <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>hasHeaderView</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator>
           <operator>+</operator> <operator>(</operator><ternary><condition><expr><call><name>hasFooterView</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getCursorCount</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>onViewRecycled</name><parameter_list>(<parameter><decl><type><name>ViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>holder</name> <operator>instanceof</operator> <name>HeaderFooterViewHolder</name><operator>)</operator></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>onItemViewRecycled</name><argument_list>(<argument><expr><operator>(</operator><name>VH</name><operator>)</operator><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onItemViewRecycled</name><parameter_list>(<parameter><decl><type><name>VH</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>ViewHolder</name></type> <name>onCreateViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>viewType</name></expr>)</condition> <block>{
    <case>case <expr><name>HEADER_TYPE</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>HeaderFooterViewHolder</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>FOOTER_TYPE</name></expr>:</case> <return>return <expr><operator>new</operator> <call><name>HeaderFooterViewHolder</name><argument_list>(<argument><expr><name>footer</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>          <return>return <expr><call><name>onCreateItemViewHolder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>, <argument><expr><name>viewType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></switch>
  }</block></function>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>VH</name></type> <name>onCreateItemViewHolder</name><parameter_list>(<parameter><decl><type><name>ViewGroup</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>viewType</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unchecked"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isHeaderPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isFooterPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name>isFastAccessPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>onBindFastAccessItemViewHolder</name><argument_list>(<argument><expr><operator>(</operator><name>VH</name><operator>)</operator><name>viewHolder</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else                                <block type="pseudo"><expr_stmt><expr><call><name>onBindItemViewHolder</name><argument_list>(<argument><expr><operator>(</operator><name>VH</name><operator>)</operator><name>viewHolder</name></expr></argument>, <argument><expr><call><name>getCursorAtPositionOrThrow</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></then></if>
  }</block></function>

  <function_decl><specifier>public</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>onBindItemViewHolder</name><parameter_list>(<parameter><decl><type><name>VH</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>onBindFastAccessItemViewHolder</name><parameter_list>(<parameter><decl><type><name>VH</name></type> <name>viewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{

  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>int</name></type> <name>getItemViewType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isHeaderPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><name>HEADER_TYPE</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name>isFooterPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><name>FOOTER_TYPE</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name>isFastAccessPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getFastAccessItemViewType</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <return>return <expr><call><name>getItemViewType</name><argument_list>(<argument><expr><call><name>getCursorAtPositionOrThrow</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getItemViewType</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <specifier>final</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isHeaderPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><name>HEADER_ID</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name>isFooterPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then>     <block type="pseudo"><return>return <expr><name>FOOTER_ID</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><call><name>isFastAccessPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getFastAccessItemId</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name></type> <name>itemId</name> <init>= <expr><call><name>getItemId</name><argument_list>(<argument><expr><call><name>getCursorAtPositionOrThrow</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><ternary><condition><expr><name>itemId</name> <operator>&lt;=</operator> <name><name>Long</name><operator>.</operator><name>MIN_VALUE</name></name> <operator>+</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>itemId</name> <operator>+</operator> <literal type="number">2</literal></expr> </then><else>: <expr><name>itemId</name></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getItemId</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><literal type="string">"_id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Cursor</name></type> <name>getCursorAtPositionOrThrow</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name>isActiveCursor</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"this should only be called when the cursor is valid"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>moveToPosition</name></name><argument_list>(<argument><expr><call><name>getCursorPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"couldn't move cursor to position "</literal> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="string">" (actual cursor position "</literal> <operator>+</operator> <call><name>getCursorPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <return>return <expr><name>cursor</name></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isActiveCursor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>valid</name> <operator>&amp;&amp;</operator> <name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isFooterPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>hasFooterView</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>position</name> <operator>==</operator> <call><name>getItemCount</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isHeaderPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>hasHeaderView</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>position</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getCursorPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>hasHeaderView</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>position</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>position</name> <operator>-</operator> <call><name>getFastAccessSize</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>int</name></type> <name>getFastAccessItemViewType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isFastAccessPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>long</name></type> <name>getFastAccessItemId</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>int</name></type> <name>getFastAccessSize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> class <name>AdapterDataSetObserver</name> <super><extends>extends <name>DataSetObserver</name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onChanged</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onInvalidated</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onInvalidated</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>valid</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
