<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\database\SmsDatabase.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 * Copyright (C) 2013 - 2017 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>
<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteStatement</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatchList</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>helpers</name><operator>.</operator><name>SQLCipherOpenHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>SmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobmanager</name><operator>.</operator><name>JobManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>TrimThreadJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>IncomingGroupMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>IncomingTextMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>OutgoingTextMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>SecureRandom</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Database for storage of SMS messages.
 *
 * @author Moxie Marlinspike
 */</comment>
<class><specifier>public</specifier> class <name>SmsDatabase</name> <super><extends>extends <name>MessagingDatabase</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SmsDatabase</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TABLE_NAME</name>         <init>= <expr><literal type="string">"sms"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PERSON</name>             <init>= <expr><literal type="string">"person"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATE_RECEIVED</name>      <init>= <expr><literal type="string">"date"</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>DATE_SENT</name>          <init>= <expr><literal type="string">"date_sent"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>PROTOCOL</name>           <init>= <expr><literal type="string">"protocol"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>STATUS</name>             <init>= <expr><literal type="string">"status"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TYPE</name>               <init>= <expr><literal type="string">"type"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>REPLY_PATH_PRESENT</name> <init>= <expr><literal type="string">"reply_path_present"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SUBJECT</name>            <init>= <expr><literal type="string">"subject"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>public</specifier>  <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>SERVICE_CENTER</name>     <init>= <expr><literal type="string">"service_center"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>CREATE_TABLE</name> <init>= <expr><literal type="string">"CREATE TABLE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" integer PRIMARY KEY, "</literal>                <operator>+</operator>
    <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>ADDRESS</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>ADDRESS_DEVICE_ID</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 1, "</literal> <operator>+</operator> <name>PERSON</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
    <name>DATE_RECEIVED</name>  <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>DATE_SENT</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>PROTOCOL</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator>
    <name>STATUS</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT -1,"</literal> <operator>+</operator> <name>TYPE</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator> <name>REPLY_PATH_PRESENT</name> <operator>+</operator> <literal type="string">" INTEGER, "</literal> <operator>+</operator>
    <name>DELIVERY_RECEIPT_COUNT</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0,"</literal> <operator>+</operator> <name>SUBJECT</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>BODY</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator>
    <name>MISMATCHED_IDENTITIES</name> <operator>+</operator> <literal type="string">" TEXT DEFAULT NULL, "</literal> <operator>+</operator> <name>SERVICE_CENTER</name> <operator>+</operator> <literal type="string">" TEXT, "</literal> <operator>+</operator> <name>SUBSCRIPTION_ID</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT -1, "</literal> <operator>+</operator>
    <name>EXPIRES_IN</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>EXPIRE_STARTED</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>NOTIFIED</name> <operator>+</operator> <literal type="string">" DEFAULT 0, "</literal> <operator>+</operator>
    <name>READ_RECEIPT_COUNT</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0, "</literal> <operator>+</operator> <name>UNIDENTIFIED</name> <operator>+</operator> <literal type="string">" INTEGER DEFAULT 0);"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>CREATE_INDEXS</name> <init>= <expr><block>{
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_thread_id_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_read_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_read_and_notified_and_thread_id_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">"("</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>NOTIFIED</name> <operator>+</operator> <literal type="string">","</literal>  <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_type_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>TYPE</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_date_sent_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>DATE_SENT</name> <operator>+</operator> <literal type="string">");"</literal></expr>,
    <expr><literal type="string">"CREATE INDEX IF NOT EXISTS sms_thread_date_index ON "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">");"</literal></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>MESSAGE_PROJECTION</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{
      <expr><name>ID</name></expr>, <expr><name>THREAD_ID</name></expr>, <expr><name>ADDRESS</name></expr>, <expr><name>ADDRESS_DEVICE_ID</name></expr>, <expr><name>PERSON</name></expr>,
      <expr><name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">" AS "</literal> <operator>+</operator> <name>NORMALIZED_DATE_RECEIVED</name></expr>,
      <expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" AS "</literal> <operator>+</operator> <name>NORMALIZED_DATE_SENT</name></expr>,
      <expr><name>PROTOCOL</name></expr>, <expr><name>READ</name></expr>, <expr><name>STATUS</name></expr>, <expr><name>TYPE</name></expr>,
      <expr><name>REPLY_PATH_PRESENT</name></expr>, <expr><name>SUBJECT</name></expr>, <expr><name>BODY</name></expr>, <expr><name>SERVICE_CENTER</name></expr>, <expr><name>DELIVERY_RECEIPT_COUNT</name></expr>,
      <expr><name>MISMATCHED_IDENTITIES</name></expr>, <expr><name>SUBSCRIPTION_ID</name></expr>, <expr><name>EXPIRES_IN</name></expr>, <expr><name>EXPIRE_STARTED</name></expr>,
      <expr><name>NOTIFIED</name></expr>, <expr><name>READ_RECEIPT_COUNT</name></expr>, <expr><name>UNIDENTIFIED</name></expr>
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>EarlyReceiptCache</name></type> <name>earlyDeliveryReceiptCache</name> <init>= <expr><operator>new</operator> <call><name>EarlyReceiptCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>EarlyReceiptCache</name></type> <name>earlyReadReceiptCache</name>     <init>= <expr><operator>new</operator> <call><name>EarlyReceiptCache</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>JobManager</name></type> <name>jobManager</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SmsDatabase</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SQLCipherOpenHelper</name></type> <name>databaseHelper</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>databaseHelper</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>jobManager</name></name> <operator>=</operator> <call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>protected</specifier> <type><name>String</name></type> <name>getTableName</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>TABLE_NAME</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateTypeBitmask</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOn</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"MessageDatabase"</literal></expr></argument>, <argument><expr><literal type="string">"Updating ID: "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" to base type: "</literal> <operator>+</operator> <name>maskOn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator>
               <literal type="string">" SET "</literal> <operator>+</operator> <name>TYPE</name> <operator>+</operator> <literal type="string">" = ("</literal> <operator>+</operator> <name>TYPE</name> <operator>+</operator> <literal type="string">" &amp; "</literal> <operator>+</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name> <operator>-</operator> <name>maskOff</name><operator>)</operator> <operator>+</operator> <literal type="string">" | "</literal> <operator>+</operator> <name>maskOn</name> <operator>+</operator> <literal type="string">" )"</literal> <operator>+</operator>
               <literal type="string">" WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>getThreadIdForMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>sql</name>        <init>= <expr><literal type="string">"SELECT "</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>sqlArgs</name>  <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>sqlArgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else
        <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></else></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getMessageCount</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"COUNT(*)"</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
      <else>else                                        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getMessageCountForThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name>     <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"COUNT(*)"</literal></expr>}</block></expr></argument>, <argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                        <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsEndSession</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>END_SESSION_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsPreKeyBundle</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_BUNDLE_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsInvalidVersionKeyExchange</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_INVALID_VERSION_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsSecure</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsInsecure</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsPush</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsForcedSms</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>MESSAGE_FORCE_SMS_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsDecryptFailed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_FAILED_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsDecryptDuplicate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_DUPLICATE_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsNoSession</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_NO_SESSION_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsLegacyVersion</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_REMOTE_LEGACY_BIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsOutbox</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_OUTBOX_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsPendingInsecureSmsFallback</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_PENDING_INSECURE_SMS_FALLBACK</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markAsSent</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isSecure</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_SENT_TYPE</name></name> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>isSecure</name></expr> ?</condition><then> <expr><name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsSending</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_SENDING_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsMissedCall</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>MISSED_CALL_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markUnidentified</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unidentified</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>UNIDENTIFIED</name></expr></argument>, <argument><expr><ternary><condition><expr><name>unidentified</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markExpireStarted</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>markExpireStarted</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>markExpireStarted</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>startedAtTimestamp</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRE_STARTED</name></expr></argument>, <argument><expr><name>startedAtTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markStatus</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"MessageDatabase"</literal></expr></argument>, <argument><expr><literal type="string">"Updating ID: "</literal> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="string">" to status: "</literal> <operator>+</operator> <name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>STATUS</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>id</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsSentFailed</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateTypeBitmask</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_SENT_FAILED_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>markAsNotified</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name>      <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ContentValues</name></type>  <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>NOTIFIED</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>incrementReceiptCount</name><parameter_list>(<parameter><decl><type><name>SyncMessageId</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>deliveryReceipt</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>readReceipt</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name>     <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>         <name>cursor</name>       <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>        <name>foundMessage</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>, <expr><name>THREAD_ID</name></expr>, <expr><name>ADDRESS</name></expr>, <expr><name>TYPE</name></expr>}</block></expr></argument>,
                              <argument><expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                              <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name><name>Types</name><operator>.</operator><name>isOutgoingMessageType</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>Address</name></type> <name>theirAddress</name> <init>= <expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>Address</name></type> <name>ourAddress</name>   <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>String</name></type>  <name>columnName</name>   <init>= <expr><ternary><condition><expr><name>deliveryReceipt</name></expr> ?</condition><then> <expr><name>DELIVERY_RECEIPT_COUNT</name></expr> </then><else>: <expr><name>READ_RECEIPT_COUNT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><call><name><name>ourAddress</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>theirAddress</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator>
                             <literal type="string">" SET "</literal> <operator>+</operator> <name>columnName</name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name>columnName</name> <operator>+</operator> <literal type="string">" + 1 WHERE "</literal> <operator>+</operator>
                             <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                             <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>foundMessage</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></while>

      <if>if <condition>(<expr><operator>!</operator><name>foundMessage</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>deliveryReceipt</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>earlyDeliveryReceiptCache</name><operator>.</operator><name>increment</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>readReceipt</name></expr>)</condition><then>     <block type="pseudo"><expr_stmt><expr><call><name><name>earlyReadReceiptCache</name><operator>.</operator><name>increment</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      }</block></then></if>

    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>setTimestampRead</name><parameter_list>(<parameter><decl><type><name>SyncMessageId</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>proposedExpireStarted</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type>         <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>expiring</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>                 <name>cursor</name>   <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>, <expr><name>THREAD_ID</name></expr>, <expr><name>ADDRESS</name></expr>, <expr><name>TYPE</name></expr>, <expr><name>EXPIRES_IN</name></expr>, <expr><name>EXPIRE_STARTED</name></expr>}</block></expr></argument>,
                              <argument><expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>messageId</name><operator>.</operator><name>getTimetamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                              <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>Address</name></type> <name>theirAddress</name> <init>= <expr><call><name><name>messageId</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Address</name></type> <name>ourAddress</name>   <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>ourAddress</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>theirAddress</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>long</name></type> <name>id</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>threadId</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>expiresIn</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>long</name></type> <name>expireStarted</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>EXPIRE_STARTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>expireStarted</name> <operator>=</operator> <ternary><condition><expr><name>expireStarted</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>proposedExpireStarted</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>proposedExpireStarted</name></expr></else></ternary></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>expiresIn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRE_STARTED</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>expiring</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>expiresIn</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>

          <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name>ID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>updateReadState</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLastSeen</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>

    <return>return <expr><name>expiring</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>setMessagesRead</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>setMessagesRead</name><argument_list>(<argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>READ</name> <operator>+</operator> <literal type="string">" = 0"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>setAllMessagesRead</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>setMessagesRead</name><argument_list>(<argument><expr><name>READ</name> <operator>+</operator> <literal type="string">" = 0"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>setMessagesRead</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>where</name></decl></parameter>, <parameter><decl><type><name><name>String</name><index>[]</index></name></type> <name>arguments</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type>          <name>database</name>  <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MarkedMessageInfo</name></argument>&gt;</argument_list></name></type> <name>results</name>   <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>                  <name>cursor</name>    <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <try>try <block>{
      <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>ID</name></expr>, <expr><name>ADDRESS</name></expr>, <expr><name>DATE_SENT</name></expr>, <expr><name>TYPE</name></expr>, <expr><name>EXPIRES_IN</name></expr>, <expr><name>EXPIRE_STARTED</name></expr>}</block></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name><name>Types</name><operator>.</operator><name>isSecureType</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>SyncMessageId</name></type>  <name>syncMessageId</name>  <init>= <expr><operator>new</operator> <call><name>SyncMessageId</name><argument_list>(<argument><expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>ExpirationInfo</name></type> <name>expirationInfo</name> <init>= <expr><operator>new</operator> <call><name>ExpirationInfo</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>MarkedMessageInfo</name><argument_list>(<argument><expr><name>syncMessageId</name></expr></argument>, <argument><expr><name>expirationInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>

      <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>arguments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>updateBundleMessageBody</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>updateMessageBodyAndType</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>updateMessageBody</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>updateMessageBodyAndType</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>ENCRYPTION_MASK</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>updateMessageBodyAndType</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOff</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>maskOn</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"UPDATE "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" SET "</literal> <operator>+</operator> <name>BODY</name> <operator>+</operator> <literal type="string">" = ?, "</literal> <operator>+</operator>
                   <name>TYPE</name> <operator>+</operator> <literal type="string">" = ("</literal> <operator>+</operator> <name>TYPE</name> <operator>+</operator> <literal type="string">" &amp; "</literal> <operator>+</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name> <operator>-</operator> <name>maskOff</name><operator>)</operator> <operator>+</operator> <literal type="string">" | "</literal> <operator>+</operator> <name>maskOn</name> <operator>+</operator> <literal type="string">") "</literal> <operator>+</operator>
                   <literal type="string">"WHERE "</literal> <operator>+</operator> <name>ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
               <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>body</name></expr>, <expr><name>messageId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name> <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>copyMessageInbox</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>SmsMessageRecord</name></type> <name>record</name> <init>= <expr><call><name>getMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><operator>(</operator><call><name><name>record</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name><operator>)</operator> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS_DEVICE_ID</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getRecipientDeviceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getDateSent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PROTOCOL</name></expr></argument>, <argument><expr><literal type="number">31337</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BODY</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>           <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>           <name>newMessageId</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>newMessageId</name></expr></argument>, <argument><expr><call><name><name>record</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchMessageException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>insertReceivedCall</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>insertCallLog</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>INCOMING_CALL_TYPE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>insertOutgoingCall</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>insertCallLog</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>OUTGOING_CALL_TYPE</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>insertMissedCall</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>insertCallLog</name><argument_list>(<argument><expr><name>address</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>MISSED_CALL_TYPE</name></name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>insertCallLog</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>address</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>unread</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>      <name>threadId</name>  <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS_DEVICE_ID</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><ternary><condition><expr><name>unread</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>messageId</name>    <init>= <expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>unread</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementUnread</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name><name>Pair</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InsertResult</name></argument>&gt;</argument_list></name></type> <name>insertMessageInbox</name><parameter_list>(<parameter><decl><type><name>IncomingTextMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isJoined</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><name>type</name> <operator>&amp;</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>TOTAL_MASK</name></name> <operator>-</operator> <name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name><operator>)</operator><operator>)</operator> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>JOINED_TYPE</name></name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isPreKeyBundle</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_BUNDLE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isSecureMessage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr>;</expr_stmt>
      <if>if      <condition>(<expr><operator>(</operator><operator>(</operator><name>IncomingGroupMessage</name><operator>)</operator><name>message</name><operator>)</operator><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>GROUP_UPDATE_BIT</name></name></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>IncomingGroupMessage</name><operator>)</operator><name>message</name><operator>)</operator><operator>.</operator><call><name>isQuit</name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>GROUP_QUIT_BIT</name></name></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isEndSession</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>END_SESSION_BIT</name></name></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isPush</name></name><argument_list>()</argument_list></call></expr>)</condition><then>                <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>()</argument_list></call></expr>)</condition><then>      <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_IDENTITY_UPDATE_BIT</name></name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isContentPreKeyBundle</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_CONTENT_FORMAT</name></name></expr>;</expr_stmt></block></then></if>

    <if>if      <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_IDENTITY_VERIFIED_BIT</name></name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then>     <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_IDENTITY_DEFAULT_BIT</name></name></expr>;</expr_stmt></block></then></if></elseif></if>

    <decl_stmt><decl><type><name>Recipient</name></type> <name>recipient</name> <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSender</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Recipient</name></type> <name>groupRecipient</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>groupRecipient</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>groupRecipient</name> <operator>=</operator> <call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getGroupId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>boolean</name></type>    <name>unread</name>     <init>= <expr><operator>(</operator><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name><operator>.</operator><name>isDefaultSmsProvider</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>||</operator>
                            <call><name><name>message</name><operator>.</operator><name>isSecureMessage</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>message</name><operator>.</operator><name>isGroup</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>message</name><operator>.</operator><name>isPreKeyBundle</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                            <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name></type>       <name>threadId</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>groupRecipient</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>threadId</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                        <block type="pseudo"><expr_stmt><expr><name>threadId</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getThreadIdFor</name><argument_list>(<argument><expr><name>groupRecipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <decl_stmt><decl><type><name>ContentValues</name></type> <name>values</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSender</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS_DEVICE_ID</name></expr></argument>,  <argument><expr><call><name><name>message</name><operator>.</operator><name>getSenderDeviceId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimestampMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>PROTOCOL</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getProtocol</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><ternary><condition><expr><name>unread</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>UNIDENTIFIED</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>isUnidentified</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getPseudoSubject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUBJECT</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getPseudoSubject</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>REPLY_PATH_PRESENT</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>isReplyPathPresent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SERVICE_CENTER</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getServiceCenterAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BODY</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getMessageBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>values</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isPush</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isDuplicate</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Duplicate message ("</literal> <operator>+</operator> <call><name><name>message</name><operator>.</operator><name>getSentTimestampMillis</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"), ignoring..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>        <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>           <name>messageId</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>unread</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>incrementUnread</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getRecipientDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDefaultSubscriptionId</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>InsertResult</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>InsertResult</name></argument>&gt;</argument_list></name></type> <name>insertMessageInbox</name><parameter_list>(<parameter><decl><type><name>IncomingTextMessage</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>insertMessageInbox</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name><name>Types</name><operator>.</operator><name>BASE_INBOX_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>insertMessageOutbox</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>OutgoingTextMessage</name></type> <name>message</name></decl></parameter>,
                                  <parameter><decl><type><name>boolean</name></type> <name>forceSms</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>, <parameter><decl><type><name>InsertListener</name></type> <name>insertListener</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>type</name> <init>= <expr><name><name>Types</name><operator>.</operator><name>BASE_SENDING_TYPE</name></name></expr></init></decl>;</decl_stmt>

    <if>if      <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isKeyExchange</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_BIT</name></name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isSecureMessage</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <operator>(</operator><name><name>Types</name><operator>.</operator><name>SECURE_MESSAGE_BIT</name></name> <operator>|</operator> <name><name>Types</name><operator>.</operator><name>PUSH_MESSAGE_BIT</name></name><operator>)</operator></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isEndSession</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>END_SESSION_BIT</name></name></expr>;</expr_stmt></block></then></if></elseif></if>
    <if>if      <condition>(<expr><name>forceSms</name></expr>)</condition><then>                  <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>MESSAGE_FORCE_SMS_BIT</name></name></expr>;</expr_stmt></block></then></if>

    <if>if      <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_IDENTITY_VERIFIED_BIT</name></name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>type</name> <operator>|=</operator> <name><name>Types</name><operator>.</operator><name>KEY_EXCHANGE_IDENTITY_DEFAULT_BIT</name></name></expr>;</expr_stmt></block></then></if></elseif></if>

    <decl_stmt><decl><type><name>Address</name></type>            <name>address</name>               <init>= <expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>earlyDeliveryReceipts</name> <init>= <expr><call><name><name>earlyDeliveryReceiptCache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Map</name><argument_list type="generic">&lt;<argument><name>Address</name></argument>, <argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>earlyReadReceipts</name>     <init>= <expr><call><name><name>earlyReadReceiptCache</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><call><name><name>address</name><operator>.</operator><name>serialize</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>THREAD_ID</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>BODY</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getMessageBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_RECEIVED</name></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DATE_SENT</name></expr></argument>, <argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>TYPE</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>SUBSCRIPTION_ID</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>EXPIRES_IN</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>DELIVERY_RECEIPT_COUNT</name></expr></argument>, <argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>earlyDeliveryReceipts</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToLong</name><argument_list>(<argument><expr><name>Long</name><operator>::</operator><name>longValue</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>READ_RECEIPT_COUNT</name></expr></argument>, <argument><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>earlyReadReceipts</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>mapToLong</name><argument_list>(<argument><expr><name>Long</name><operator>::</operator><name>longValue</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>sum</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>        <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>           <name>messageId</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>ADDRESS</name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>insertListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>insertListener</name><operator>.</operator><name>onComplete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setLastSeen</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setHasSent</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>message</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>jobManager</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TrimThreadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>messageId</name></expr>;</return>
  }</block></function>

  <function><type><name>Cursor</name></type> <name>getMessages</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>skip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>MESSAGE_PROJECTION</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>ID</name></expr></argument>, <argument><expr><name>skip</name> <operator>+</operator> <literal type="string">","</literal> <operator>+</operator> <name>limit</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><type><name>Cursor</name></type> <name>getOutgoingMessages</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>outgoingSelection</name> <init>= <expr><name>TYPE</name> <operator>+</operator> <literal type="string">" &amp; "</literal>  <operator>+</operator> <name><name>Types</name><operator>.</operator><name>BASE_TYPE_MASK</name></name> <operator>+</operator> <literal type="string">" = "</literal> <operator>+</operator> <name><name>Types</name><operator>.</operator><name>BASE_OUTBOX_TYPE</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>        <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>MESSAGE_PROJECTION</name></expr></argument>, <argument><expr><name>outgoingSelection</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>getExpirationStartedMessages</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>         <name>where</name> <init>= <expr><name>EXPIRE_STARTED</name> <operator>+</operator> <literal type="string">" &gt; 0"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>    <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>MESSAGE_PROJECTION</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>SmsMessageRecord</name></type> <name>getMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>NoSuchMessageException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name>     <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>         <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>MESSAGE_PROJECTION</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><name>messageId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Reader</name></type>         <name>reader</name> <init>= <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SmsMessageRecord</name></type> <name>record</name> <init>= <expr><call><name><name>reader</name><operator>.</operator><name>getNext</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>reader</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>record</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>NoSuchMessageException</name><argument_list>(<argument><expr><literal type="string">"No message for ID: "</literal> <operator>+</operator> <name>messageId</name></expr></argument>)</argument_list></call></expr>;</throw></block></then>
    <else>else                <block type="pseudo"><return>return <expr><name>record</name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>Cursor</name></type> <name>getMessageCursor</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>MESSAGE_PROJECTION</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>messageId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setNotifyConverationListeners</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>cursor</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>deleteMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"MessageDatabase"</literal></expr></argument>, <argument><expr><literal type="string">"Deleting: "</literal> <operator>+</operator> <name>messageId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>threadId</name>     <init>= <expr><call><name>getThreadIdForMessage</name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>ID_WHERE</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>messageId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>threadDeleted</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>notifyConversationListeners</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>threadDeleted</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>ensureMigration</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isDuplicate</name><parameter_list>(<parameter><decl><type><name>IncomingTextMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getReadableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Cursor</name></type>         <name>cursor</name>   <init>= <expr><call><name><name>database</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>DATE_SENT</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>ADDRESS</name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
                                             <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name><block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSentTimestampMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>message</name><operator>.</operator><name>getSender</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>}</block></expr></argument>,
                                             <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <return>return <expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block> <finally>finally <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></finally></try>
  }</block></function>

  <comment type="block">/*package */</comment><function><type><name>void</name></type> <name>deleteThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name><operator>+</operator><literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block">/*package*/</comment><function><type><name>void</name></type> <name>deleteMessagesInThreadBeforeDate</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>date</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>where</name>      <init>= <expr><name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = ? AND (CASE "</literal> <operator>+</operator> <name>TYPE</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>long</name></type> <name>outgoingType</name> <range>: <expr><name><name>Types</name><operator>.</operator><name>OUTGOING_MESSAGE_TYPES</name></name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>where</name> <operator>+=</operator> <literal type="string">" WHEN "</literal> <operator>+</operator> <name>outgoingType</name> <operator>+</operator> <literal type="string">" THEN "</literal> <operator>+</operator> <name>DATE_SENT</name> <operator>+</operator> <literal type="string">" &lt; "</literal> <operator>+</operator> <name>date</name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>where</name> <operator>+=</operator> <operator>(</operator><literal type="string">" ELSE "</literal> <operator>+</operator> <name>DATE_RECEIVED</name> <operator>+</operator> <literal type="string">" &lt; "</literal> <operator>+</operator> <name>date</name> <operator>+</operator> <literal type="string">" END)"</literal><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><name>threadId</name> <operator>+</operator> <literal type="string">""</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block">/*package*/</comment> <function><type><name>void</name></type> <name>deleteThreads</name><parameter_list>(<parameter><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>threadIds</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>where</name>      <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>long</name></type> <name>threadId</name> <range>: <expr><name>threadIds</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>where</name> <operator>+=</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">" = '"</literal> <operator>+</operator> <name>threadId</name> <operator>+</operator> <literal type="string">"' OR "</literal></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>where</name> <operator>=</operator> <call><name><name>where</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>where</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block">/*package */</comment> <function><type><name>void</name></type> <name>deleteAllThreads</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>db</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name>TABLE_NAME</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block">/*package*/</comment> <function><type><name>SQLiteDatabase</name></type> <name>beginTransaction</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>SQLiteDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>databaseHelper</name><operator>.</operator><name>getWritableDatabase</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>database</name></expr>;</return>
  }</block></function>

  <comment type="block">/*package*/</comment> <function><type><name>void</name></type> <name>endTransaction</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block">/*package*/</comment> <function><type><name>SQLiteStatement</name></type> <name>createInsertStatement</name><parameter_list>(<parameter><decl><type><name>SQLiteDatabase</name></type> <name>database</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>database</name><operator>.</operator><name>compileStatement</name></name><argument_list>(<argument><expr><literal type="string">"INSERT INTO "</literal> <operator>+</operator> <name>TABLE_NAME</name> <operator>+</operator> <literal type="string">" ("</literal> <operator>+</operator> <name>ADDRESS</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>PERSON</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>DATE_SENT</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>DATE_RECEIVED</name>  <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>PROTOCOL</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>READ</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>STATUS</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>TYPE</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>REPLY_PATH_PRESENT</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>SUBJECT</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>BODY</name> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator>
                                                                      <name>SERVICE_CENTER</name> <operator>+</operator>
                                                                      <literal type="string">", "</literal> <operator>+</operator> <name>THREAD_ID</name> <operator>+</operator> <literal type="string">") "</literal> <operator>+</operator>
                                     <literal type="string">" VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Status</name> <block>{
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATUS_NONE</name>     <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATUS_COMPLETE</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATUS_PENDING</name>   <init>= <expr><literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATUS_FAILED</name>    <init>= <expr><literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>
  }</block></class>

  <function><specifier>public</specifier> <type><name>Reader</name></type> <name>readerFor</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Reader</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>OutgoingMessageReader</name></type> <name>readerFor</name><parameter_list>(<parameter><decl><type><name>OutgoingTextMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>OutgoingMessageReader</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> class <name>OutgoingMessageReader</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OutgoingTextMessage</name></type> <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                <name>threadId</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>OutgoingMessageReader</name><parameter_list>(<parameter><decl><type><name>OutgoingTextMessage</name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name>  <operator>=</operator> <name>message</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>id</name></name>       <operator>=</operator> <call><name><name>SecureRandom</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"SHA1PRNG"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>nextLong</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>MessageRecord</name></type> <name>getCurrent</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>SmsMessageRecord</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getMessageBody</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>message</name><operator>.</operator><name>isSecureMessage</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>getOutgoingEncryptedMessageType</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>MmsSmsColumns</name><operator>.</operator><name>Types</name><operator>.</operator><name>getOutgoingSmsMessageType</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>,
                                  <argument><expr><name>threadId</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>message</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call></expr></argument>,
                                  <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> class <name>Reader</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Cursor</name></type> <name>cursor</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Reader</name><parameter_list>(<parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cursor</name></name> <operator>=</operator> <name>cursor</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>SmsMessageRecord</name></type> <name>getNext</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <operator>!</operator><call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

      <return>return <expr><call><name>getCurrent</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>cursor</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
      <else>else                <block type="pseudo"><return>return <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return></block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>SmsMessageRecord</name></type> <name>getCurrent</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type>    <name>messageId</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Address</name></type> <name>address</name>              <init>= <expr><call><name><name>Address</name><operator>.</operator><name>fromSerialized</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>ADDRESS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>addressDeviceId</name>      <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>ADDRESS_DEVICE_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>    <name>type</name>                 <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>TYPE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>    <name>dateReceived</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>NORMALIZED_DATE_RECEIVED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>    <name>dateSent</name>             <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>NORMALIZED_DATE_SENT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>    <name>threadId</name>             <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>THREAD_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>status</name>               <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>STATUS</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>deliveryReceiptCount</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>DELIVERY_RECEIPT_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>readReceiptCount</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>READ_RECEIPT_COUNT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>  <name>mismatchDocument</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>MISMATCHED_IDENTITIES</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>subscriptionId</name>       <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>SUBSCRIPTION_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>    <name>expiresIn</name>            <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>EXPIRES_IN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type>    <name>expireStarted</name>        <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>EXPIRE_STARTED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>  <name>body</name>                 <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>BODY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>unidentified</name>         <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>UNIDENTIFIED</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isReadReceiptsEnabled</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>readReceiptCount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name> <init>= <expr><call><name>getMismatches</name><argument_list>(<argument><expr><name>mismatchDocument</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Recipient</name></type>                 <name>recipient</name>  <init>= <expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>address</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <return>return <expr><operator>new</operator> <call><name>SmsMessageRecord</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>,
                                  <argument><expr><name>recipient</name></expr></argument>,
                                  <argument><expr><name>addressDeviceId</name></expr></argument>,
                                  <argument><expr><name>dateSent</name></expr></argument>, <argument><expr><name>dateReceived</name></expr></argument>, <argument><expr><name>deliveryReceiptCount</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,
                                  <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>status</name></expr></argument>, <argument><expr><name>mismatches</name></expr></argument>, <argument><expr><name>subscriptionId</name></expr></argument>,
                                  <argument><expr><name>expiresIn</name></expr></argument>, <argument><expr><name>expireStarted</name></expr></argument>, <argument><expr><name>readReceiptCount</name></expr></argument>, <argument><expr><name>unidentified</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>getMismatches</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>document</name></decl></parameter>)</parameter_list> <block>{
      <try>try <block>{
        <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>fromJson</name></name><argument_list>(<argument><expr><name>document</name></expr></argument>, <argument><expr><name><name>IdentityKeyMismatchList</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getList</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then></if>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <return>return <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>cursor</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>InsertListener</name> <block>{
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onComplete</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

}</block></class>
</unit>
