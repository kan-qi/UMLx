<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\backup\FullBackupImporter.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ContentValues</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>Pair</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AttachmentSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ModernEncryptingPartOutputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupReceiptDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>ThreadDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>notifications</name><operator>.</operator><name>NotificationChannels</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>profiles</name><operator>.</operator><name>AvatarHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Conversions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>kdf</name><operator>.</operator><name>HKDFv3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BadPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IllegalBlockSizeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>FullBackupImporter</name> <super><extends>extends <name>FullBackupBase</name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>FullBackupImporter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>importFile</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>,
                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>BackupRecordInputStream</name></type> <name>inputStream</name> <init>= <expr><operator>new</operator> <call><name>BackupRecordInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                     <name>count</name>       <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>beginTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>dropAllTables</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>BackupFrame</name></type> <name>frame</name></decl>;</decl_stmt>

      <while>while <condition>(<expr><operator>!</operator><operator>(</operator><name>frame</name> <operator>=</operator> <call><name><name>inputStream</name><operator>.</operator><name>readFrame</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getEnd</name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>count</name><operator>++</operator> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BackupEvent</name><argument_list>(<argument><expr><name><name>BackupEvent</name><operator>.</operator><name>Type</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if      <condition>(<expr><call><name><name>frame</name><operator>.</operator><name>hasVersion</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name>processVersion</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>frame</name><operator>.</operator><name>hasStatement</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name>processStatement</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><call><name><name>frame</name><operator>.</operator><name>hasPreference</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>processPreference</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>getPreference</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><call><name><name>frame</name><operator>.</operator><name>hasAttachment</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>processAttachment</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><call><name><name>frame</name><operator>.</operator><name>hasAvatar</name></name><argument_list>()</argument_list></call></expr>)</condition><then>     <block type="pseudo"><expr_stmt><expr><call><name>processAvatar</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>frame</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>inputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
      }</block></while>

      <expr_stmt><expr><call><name>trimEntriesForExpiredMessages</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setTransactionSuccessful</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>endTransaction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>

    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BackupEvent</name><argument_list>(<argument><expr><name><name>BackupEvent</name><operator>.</operator><name>Type</name><operator>.</operator><name>FINISHED</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>processVersion</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>DatabaseVersion</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><call><name><name>version</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>db</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>DatabaseDowngradeException</name><argument_list>(<argument><expr><call><name><name>db</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>version</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>setVersion</name></name><argument_list>(<argument><expr><call><name><name>version</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>processStatement</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>SqlStatement</name></type> <name>statement</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>isForSmsFtsSecretTable</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>SMS_FTS_TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>isForMmsFtsSecretTable</name> <init>= <expr><call><name><name>statement</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>contains</name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>MMS_FTS_TABLE_NAME</name></name> <operator>+</operator> <literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>isForSmsFtsSecretTable</name> <operator>||</operator> <name>isForMmsFtsSecretTable</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Ignoring import for statement: "</literal> <operator>+</operator> <call><name><name>statement</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Object</name></argument>&gt;</argument_list></name></type> <name>parameters</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parameter</name> <range>: <expr><call><name><name>statement</name><operator>.</operator><name>getParametersList</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if      <condition>(<expr><call><name><name>parameter</name><operator>.</operator><name>hasStringParamter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>parameter</name><operator>.</operator><name>getStringParamter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><call><name><name>parameter</name><operator>.</operator><name>hasDoubleParameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>parameter</name><operator>.</operator><name>getDoubleParameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>parameter</name><operator>.</operator><name>hasIntegerParameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>parameter</name><operator>.</operator><name>getIntegerParameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>parameter</name><operator>.</operator><name>hasBlobParameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>parameter</name><operator>.</operator><name>getBlobParameter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><call><name><name>parameter</name><operator>.</operator><name>hasNullparameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>parameters</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
    }</block></for>

    <if>if <condition>(<expr><call><name><name>parameters</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>parameters</name><operator>.</operator><name>toArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                       <block type="pseudo"><expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>processAttachment</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>, <parameter><decl><type><name>BackupRecordInputStream</name></type> <name>inputStream</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>File</name></type> <name>partsDirectory</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getDir</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>DIRECTORY</name></name></expr></argument>, <argument><expr><name><name>Context</name><operator>.</operator><name>MODE_PRIVATE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>File</name></type> <name>dataFile</name>       <init>= <expr><call><name><name>File</name><operator>.</operator><name>createTempFile</name></name><argument_list>(<argument><expr><literal type="string">"part"</literal></expr></argument>, <argument><expr><literal type="string">".mms"</literal></expr></argument>, <argument><expr><name>partsDirectory</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Pair</name><argument_list type="generic">&lt;<argument><name><name>byte</name><index>[]</index></name></argument>, <argument><name>OutputStream</name></argument>&gt;</argument_list></name></type> <name>output</name> <init>= <expr><call><name><name>ModernEncryptingPartOutputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>dataFile</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>inputStream</name><operator>.</operator><name>readAttachmentTo</name></name><argument_list>(<argument><expr><name><name>output</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ContentValues</name></type> <name>contentValues</name> <init>= <expr><operator>new</operator> <call><name>ContentValues</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>DATA</name></name></expr></argument>, <argument><expr><call><name><name>dataFile</name><operator>.</operator><name>getAbsolutePath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>THUMBNAIL</name></name></expr></argument>, <argument><expr><operator>(</operator><name>String</name><operator>)</operator><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contentValues</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>DATA_RANDOM</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><name>contentValues</name></expr></argument>,
              <argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>ROW_ID</name></name> <operator>+</operator> <literal type="string">" = ? AND "</literal> <operator>+</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>UNIQUE_ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getRowId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>, <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>processAvatar</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>avatar</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>BackupRecordInputStream</name></type> <name>inputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name><name>inputStream</name><operator>.</operator><name>readAttachmentTo</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><call><name><name>AvatarHelper</name><operator>.</operator><name>getAvatarFile</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>avatar</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>avatar</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"ApplySharedPref"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>processPreference</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>SharedPreference</name></type> <name>preference</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>SharedPreferences</name></type> <name>preferences</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getSharedPreferences</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>preferences</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getKey</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>preference</name><operator>.</operator><name>getValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>commit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>dropAllTables</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT name, type FROM sqlite_master"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><literal type="string">"table"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>execSQL</name></name><argument_list>(<argument><expr><literal type="string">"DROP TABLE IF EXISTS "</literal> <operator>+</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></while>
    }</block></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>trimEntriesForExpiredMessages</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>trimmedCondition</name> <init>= <expr><literal type="string">" NOT IN (SELECT "</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>ID</name></name> <operator>+</operator> <literal type="string">" FROM "</literal> <operator>+</operator> <name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name> <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>db</name><operator>.</operator><name>delete</name></name><argument_list>(<argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>MMS_ID</name></name> <operator>+</operator> <name>trimmedCondition</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>ROW_ID</name></name></expr>, <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>UNIQUE_ID</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>where</name>   <init>= <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>MMS_ID</name></name> <operator>+</operator> <name>trimmedCondition</name></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getAttachmentDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>deleteAttachment</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentId</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>ThreadDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>ThreadDatabase</name><operator>.</operator><name>ID</name></name></expr> }</block></expr></argument>, <argument><expr><name><name>ThreadDatabase</name><operator>.</operator><name>EXPIRES_IN</name></name> <operator>+</operator> <literal type="string">" &gt; 0"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getThreadDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>update</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></while>
    }</block></try>
  }</block></function>


  <class><specifier>private</specifier> <specifier>static</specifier> class <name>BackupRecordInputStream</name> <super><extends>extends <name>BackupStream</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>InputStream</name></type> <name>in</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Cipher</name></type>      <name>cipher</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Mac</name></type>         <name>mac</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>cipherKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>macKey</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>counter</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>BackupRecordInputStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <try>try <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>in</name></name>     <operator>=</operator> <operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerLengthBytes</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>headerLengthBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>headerLength</name> <init>= <expr><call><name><name>Conversions</name><operator>.</operator><name>byteArrayToInt</name></name><argument_list>(<argument><expr><name>headerLengthBytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>headerFrame</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name>headerLength</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>headerFrame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>BackupFrame</name></type> <name>frame</name> <init>= <expr><call><name><name>BackupFrame</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>headerFrame</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>frame</name><operator>.</operator><name>hasHeader</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Backup stream does not start with header!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>header</name> <init>= <expr><call><name><name>frame</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iv</name></name> <operator>=</operator> <call><name><name>header</name><operator>.</operator><name>getIv</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>iv</name><operator>.</operator><name>length</name></name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Invalid IV length!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>   <name>key</name>     <init>= <expr><call><name>getBackupKey</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>header</name><operator>.</operator><name>hasSalt</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>header</name><operator>.</operator><name>getSalt</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>   <name>derived</name> <init>= <expr><operator>new</operator> <call><name>HKDFv3</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deriveSecrets</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Backup Export"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>split</name>   <init>= <expr><call><name><name>ByteUtil</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>derived</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipherKey</name></name> <operator>=</operator> <name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>macKey</name></name>    <operator>=</operator> <name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipher</name></name> <operator>=</operator> <call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CTR/NoPadding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mac</name></name>    <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>macKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>counter</name></name> <operator>=</operator> <call><name><name>Conversions</name><operator>.</operator><name>byteArrayToInt</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></constructor>

    <function><type><name>BackupFrame</name></type> <name>readFrame</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <return>return <expr><call><name>readFrame</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>readAttachmentTo</name><parameter_list>(<parameter><decl><type><name>OutputStream</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>cipherKey</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name><name>in</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>read</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"File ended early!"</literal></expr></argument>)</argument_list></call></expr>;</throw></block></then></if>

          <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>plaintext</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>plaintext</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>

          <expr_stmt><expr><name>length</name> <operator>-=</operator> <name>read</name></expr>;</expr_stmt>
        }</block></while>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>plaintext</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>plaintext</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>plaintext</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ourMac</name>   <init>= <expr><call><name><name>ByteUtil</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>theirMac</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <try>try <block>{
          <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>theirMac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <comment type="line">//destination.delete();</comment>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch></try>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>MessageDigest</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>ourMac</name></expr></argument>, <argument><expr><name>theirMac</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <comment type="line">//destination.delete();</comment>
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Bad MAC"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> | <type><name>IllegalBlockSizeException</name></type> | <type><name>BadPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>BackupFrame</name></type> <name>readFrame</name><parameter_list>(<parameter><decl><type><name>InputStream</name></type> <name>in</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>length</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>frame</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><call><name><name>Conversions</name><operator>.</operator><name>byteArrayToInt</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>theirMac</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>System</name><operator>.</operator><name>arraycopy</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>theirMac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>theirMac</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ourMac</name> <init>= <expr><call><name><name>ByteUtil</name><operator>.</operator><name>trim</name></name><argument_list>(<argument><expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name><name>MessageDigest</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>ourMac</name></expr></argument>, <argument><expr><name>theirMac</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Bad MAC"</literal></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>cipherKey</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>plaintext</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <return>return <expr><call><name><name>BackupFrame</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>plaintext</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> | <type><name>IllegalBlockSizeException</name></type> | <type><name>BadPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>DatabaseDowngradeException</name> <super><extends>extends <name>IOException</name></extends></super> <block>{
    <constructor><name>DatabaseDowngradeException</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>currentVersion</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>backupVersion</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><literal type="string">"Tried to import a backup with version "</literal> <operator>+</operator> <name>backupVersion</name> <operator>+</operator> <literal type="string">" into a database with version "</literal> <operator>+</operator> <name>currentVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>
}</block></class>
</unit>
