<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\backup\BackupProtos.java"><comment type="line">// Generated by the protocol buffer compiler.  DO NOT EDIT!</comment>
<comment type="line">// source: Backups.proto</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name></name>;</package>

<class><specifier>public</specifier> <specifier>final</specifier> class <name>BackupProtos</name> <block>{
  <constructor><specifier>private</specifier> <name>BackupProtos</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>registerAllExtensions</name><parameter_list>(
      <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistry</name></name></type> <name>registry</name></decl></parameter>)</parameter_list> <block>{
  }</block></function>
  <interface><specifier>public</specifier> interface <name>SqlStatementOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional string statement = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasStatement</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getStatement</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getStatementBytes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// repeated .signal.SqlStatement.SqlParameter parameters = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name></type> 
        <name>getParametersList</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>getParameters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>int</name></type> <name>getParametersCount</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></extends></argument>&gt;</argument_list></name></name></type> 
        <name>getParametersOrBuilderList</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></type> <name>getParametersOrBuilder</name><parameter_list>(
        <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.SqlStatement}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>SqlStatement</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>SqlStatementOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use SqlStatement.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>SqlStatement</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>SqlStatement</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>SqlStatement</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SqlStatement</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>SqlStatement</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>SqlStatement</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">18</literal></expr>:</case> <block>{
              <if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>mutable_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mutable_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>mutable_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>parameters_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>SqlStatement</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>SqlStatement</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>SqlStatement</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>SqlStatement</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>SqlStatement</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <interface><specifier>public</specifier> interface <name>SqlParameterOrBuilder</name>
        <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

      <comment type="line">// optional string stringParamter = 1;</comment>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>boolean</name></type> <name>hasStringParamter</name><parameter_list>()</parameter_list>;</function_decl>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
       */</comment>
      <function_decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getStringParamter</name><parameter_list>()</parameter_list>;</function_decl>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
       */</comment>
      <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getStringParamterBytes</name><parameter_list>()</parameter_list>;</function_decl>

      <comment type="line">// optional uint64 integerParameter = 2;</comment>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>boolean</name></type> <name>hasIntegerParameter</name><parameter_list>()</parameter_list>;</function_decl>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>long</name></type> <name>getIntegerParameter</name><parameter_list>()</parameter_list>;</function_decl>

      <comment type="line">// optional double doubleParameter = 3;</comment>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>boolean</name></type> <name>hasDoubleParameter</name><parameter_list>()</parameter_list>;</function_decl>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>double</name></type> <name>getDoubleParameter</name><parameter_list>()</parameter_list>;</function_decl>

      <comment type="line">// optional bytes blobParameter = 4;</comment>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>boolean</name></type> <name>hasBlobParameter</name><parameter_list>()</parameter_list>;</function_decl>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
       */</comment>
      <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getBlobParameter</name><parameter_list>()</parameter_list>;</function_decl>

      <comment type="line">// optional bool nullparameter = 5;</comment>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>boolean</name></type> <name>hasNullparameter</name><parameter_list>()</parameter_list>;</function_decl>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
       */</comment>
      <function_decl><type><name>boolean</name></type> <name>getNullparameter</name><parameter_list>()</parameter_list>;</function_decl>
    }</block></interface>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.SqlStatement.SqlParameter}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>SqlParameter</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
        <implements>implements <name>SqlParameterOrBuilder</name></implements></super> <block>{
      <comment type="line">// Use SqlParameter.newBuilder() to construct.</comment>
      <constructor><specifier>private</specifier> <name>SqlParameter</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <constructor><specifier>private</specifier> <name>SqlParameter</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>SqlParameter</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SqlParameter</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>defaultInstance</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>SqlParameter</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>defaultInstance</name></expr>;</return>
      }</block></function>

      <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
      <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
      <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
          <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
      }</block></function>
      <constructor><specifier>private</specifier> <name>SqlParameter</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
            <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
          <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
              <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <break>break;</break>
              <default>default:</default> <block>{
                <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                       <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                  <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>
              }</block>
              <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
                <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
              }</block>
              <case>case <expr><literal type="number">16</literal></expr>:</case> <block>{
                <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>integerParameter_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
              }</block>
              <case>case <expr><literal type="number">25</literal></expr>:</case> <block>{
                <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>doubleParameter_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readDouble</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
              }</block>
              <case>case <expr><literal type="number">34</literal></expr>:</case> <block>{
                <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>blobParameter_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
              }</block>
              <case>case <expr><literal type="number">40</literal></expr>:</case> <block>{
                <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>nullparameter_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
              }</block>
            }</block></switch>
          }</block></while>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
              <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></finally></try>
      }</block></constructor>
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_SqlParameter_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_SqlParameter_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>SqlParameter</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
          <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>SqlParameter</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
        <function><specifier>public</specifier> <type><name>SqlParameter</name></type> <name>parsePartialFrom</name><parameter_list>(
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
          <return>return <expr><operator>new</operator> <call><name>SqlParameter</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>

      <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
      <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>SqlParameter</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>PARSER</name></expr>;</return>
      }</block></function>

      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
      <comment type="line">// optional string stringParamter = 1;</comment>
      <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STRINGPARAMTER_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>stringParamter_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasStringParamter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getStringParamter</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>stringParamter_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
          <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>bs</name> <init>= 
              <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><call><name><name>bs</name><operator>.</operator><name>toStringUtf8</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name><name>bs</name><operator>.</operator><name>isValidUtf8</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
          }</block></then></if>
          <return>return <expr><name>s</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getStringParamterBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>stringParamter_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
              <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                  <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
          <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <comment type="line">// optional uint64 integerParameter = 2;</comment>
      <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>INTEGERPARAMETER_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>integerParameter_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasIntegerParameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>long</name></type> <name>getIntegerParameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>integerParameter_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional double doubleParameter = 3;</comment>
      <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DOUBLEPARAMETER_FIELD_NUMBER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>doubleParameter_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasDoubleParameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>double</name></type> <name>getDoubleParameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>doubleParameter_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional bytes blobParameter = 4;</comment>
      <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BLOBPARAMETER_FIELD_NUMBER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>blobParameter_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasBlobParameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getBlobParameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>blobParameter_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional bool nullparameter = 5;</comment>
      <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NULLPARAMETER_FIELD_NUMBER</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>nullparameter_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasNullparameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getNullparameter</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>nullparameter_</name></expr>;</return>
      }</block></function>

      <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>integerParameter_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>doubleParameter_</name> <operator>=</operator> <literal type="number">0D</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>blobParameter_</name> <operator>=</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>nullparameter_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

        <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getStringParamterBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt64</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>integerParameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeDouble</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>doubleParameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>blobParameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>nullparameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

        <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
            <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getStringParamterBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
            <operator>.</operator><name>computeUInt64Size</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>integerParameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
            <operator>.</operator><name>computeDoubleSize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>doubleParameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
            <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>blobParameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
            <operator>.</operator><name>computeBoolSize</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>nullparameter_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
        <return>return <expr><name>size</name></expr>;</return>
      }</block></function>

      <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
      <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
      <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(
          <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parseFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
      <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

      <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
      <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><name>builder</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * Protobuf type {@code signal.SqlStatement.SqlParameter}
       */</comment>
      <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
          <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
         <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></implements></super> <block>{
        <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
            <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_SqlParameter_descriptor</name></name></expr>;</return>
        }</block></function>

        <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
            <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_SqlParameter_fieldAccessorTable</name>
              <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                  <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.SqlStatement.SqlParameter.newBuilder()</comment>
        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>

        <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></constructor>
        <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
          <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
          }</block></then></if>
        }</block></function>
        <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>integerParameter_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>doubleParameter_</name> <operator>=</operator> <literal type="number">0D</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>blobParameter_</name> <operator>=</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000008</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>nullparameter_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000010</literal><operator>)</operator></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
            <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_SqlParameter_descriptor</name></name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
          }</block></then></if>
          <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>stringParamter_</name></name> <operator>=</operator> <name>stringParamter_</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>integerParameter_</name></name> <operator>=</operator> <name>integerParameter_</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>doubleParameter_</name></name> <operator>=</operator> <name>doubleParameter_</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>blobParameter_</name></name> <operator>=</operator> <name>blobParameter_</name></expr>;</expr_stmt>
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>nullparameter_</name></name> <operator>=</operator> <name>nullparameter_</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>result</name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></expr>)</condition><then> <block>{
            <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>this</name></expr>;</return>
          }</block></else></if>
        }</block></function>

        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
          <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasStringParamter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>stringParamter_</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasIntegerParameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setIntegerParameter</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getIntegerParameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasDoubleParameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setDoubleParameter</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getDoubleParameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasBlobParameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setBlobParameter</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getBlobParameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasNullparameter</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>setNullparameter</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getNullparameter</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
            <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
          <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
          <try>try <block>{
            <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <throw>throw <expr><name>e</name></expr>;</throw>
          }</block></catch> <finally>finally <block>{
            <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></finally></try>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

        <comment type="line">// optional string stringParamter = 1;</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>stringParamter_</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasStringParamter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getStringParamter</name><parameter_list>()</parameter_list> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>stringParamter_</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name><operator>)</operator>
                <operator>.</operator><call><name>toStringUtf8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
            <return>return <expr><name>s</name></expr>;</return>
          }</block></then> <else>else <block>{
            <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
          }</block></else></if>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
            <name>getStringParamterBytes</name><parameter_list>()</parameter_list> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>stringParamter_</name></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
                <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                    <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
            <return>return <expr><name>b</name></expr>;</return>
          }</block></then> <else>else <block>{
            <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
          }</block></else></if>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setStringParamter</name><parameter_list>(
            <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearStringParamter</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStringParamter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional string stringParamter = 1;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setStringParamterBytes</name><parameter_list>(
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>stringParamter_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <comment type="line">// optional uint64 integerParameter = 2;</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>integerParameter_</name></decl> ;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasIntegerParameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>long</name></type> <name>getIntegerParameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><name>integerParameter_</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setIntegerParameter</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>integerParameter_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional uint64 integerParameter = 2;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearIntegerParameter</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>integerParameter_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <comment type="line">// optional double doubleParameter = 3;</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>double</name></type> <name>doubleParameter_</name></decl> ;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasDoubleParameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>double</name></type> <name>getDoubleParameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><name>doubleParameter_</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setDoubleParameter</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>doubleParameter_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional double doubleParameter = 3;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearDoubleParameter</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>doubleParameter_</name> <operator>=</operator> <literal type="number">0D</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <comment type="line">// optional bytes blobParameter = 4;</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>blobParameter_</name> <init>= <expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr></init></decl>;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasBlobParameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getBlobParameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><name>blobParameter_</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setBlobParameter</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>blobParameter_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bytes blobParameter = 4;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearBlobParameter</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000008</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>blobParameter_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBlobParameter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <comment type="line">// optional bool nullparameter = 5;</comment>
        <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>nullparameter_</name></decl> ;</decl_stmt>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasNullparameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getNullparameter</name><parameter_list>()</parameter_list> <block>{
          <return>return <expr><name>nullparameter_</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setNullparameter</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>nullparameter_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>
        <comment type="block" format="javadoc">/**
         * &lt;code&gt;optional bool nullparameter = 5;&lt;/code&gt;
         */</comment>
        <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearNullparameter</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000010</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>nullparameter_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></function>

        <comment type="line">// @@protoc_insertion_point(builder_scope:signal.SqlStatement.SqlParameter)</comment>
      }</block></class>

      <static>static <block>{
        <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>SqlParameter</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></static>

      <comment type="line">// @@protoc_insertion_point(class_scope:signal.SqlStatement.SqlParameter)</comment>
    }</block></class>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional string statement = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATEMENT_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>statement_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasStatement</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getStatement</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>statement_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>bs</name> <init>= 
            <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><call><name><name>bs</name><operator>.</operator><name>toStringUtf8</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>bs</name><operator>.</operator><name>isValidUtf8</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>s</name></expr>;</return>
      }</block></else></if>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getStatementBytes</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>statement_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
            <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></else></if>
    }</block></function>

    <comment type="line">// repeated .signal.SqlStatement.SqlParameter parameters = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PARAMETERS_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name></type> <name>parameters_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name></type> <name>getParametersList</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>parameters_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></extends></argument>&gt;</argument_list></name></name></type> 
        <name>getParametersOrBuilderList</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>parameters_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getParametersCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>parameters_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>getParameters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>parameters_</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></type> <name>getParametersOrBuilder</name><parameter_list>(
        <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>parameters_</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>statement_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getStatementBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>parameters_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>parameters_</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getStatementBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>parameters_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name><name>parameters_</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.SqlStatement}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.SqlStatement.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>getParametersFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>statement_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SqlStatement_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>statement_</name></name> <operator>=</operator> <name>statement_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>parameters_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
          }</block></then></if>
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>parameters_</name></name> <operator>=</operator> <name>parameters_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>parameters_</name></name> <operator>=</operator> <call><name><name>parametersBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasStatement</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>statement_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>!</operator><call><name><name>other</name><operator>.</operator><name>parameters_</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>parameters_</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>parameters_</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
              <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>parameters_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <else>else <block>{
          <if>if <condition>(<expr><operator>!</operator><call><name><name>other</name><operator>.</operator><name>parameters_</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>parametersBuilder_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>parameters_</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
              <expr_stmt><expr><name>parametersBuilder_</name> <operator>=</operator> 
                <ternary><condition><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr> ?</condition><then>
                   <expr><call><name>getParametersFieldBuilder</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
              <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>addAllMessages</name></name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>parameters_</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
          }</block></then></if>
        }</block></else></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional string statement = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>statement_</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasStatement</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getStatement</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>statement_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name><operator>)</operator>
              <operator>.</operator><call><name>toStringUtf8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
          <return>return <expr><name>s</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getStatementBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>statement_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
              <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                  <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
          <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setStatement</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearStatement</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getStatement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string statement = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setStatementBytes</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// repeated .signal.SqlStatement.SqlParameter parameters = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name></type> <name>parameters_</name> <init>=
        <expr><call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>ensureParametersIsMutable</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <operator>new</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><name>parameters_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
         }</block></then></if>
      }</block></function>

      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>RepeatedFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>parametersBuilder_</name></decl>;</decl_stmt>

      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>&gt;</argument_list></name></name></type> <name>getParametersList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>parameters_</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>getMessageList</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>int</name></type> <name>getParametersCount</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>parameters_</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>getParameters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>parameters_</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setParameters</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setParameters</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>addParameters</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>addMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>addParameters</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>addMessage</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>addParameters</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>addMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>addParameters</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>addMessage</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>addAllParameters</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></extends></argument>&gt;</argument_list></name></name></type> <name>values</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>parameters_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>addAllMessages</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearParameters</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>removeParameters</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>ensureParametersIsMutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>parameters_</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></type> <name>getParametersBuilder</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getParametersFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></type> <name>getParametersOrBuilder</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>parameters_</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>  }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name>?</name> <extends>extends <name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></extends></argument>&gt;</argument_list></name></name></type> 
           <name>getParametersOrBuilderList</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>parametersBuilder_</name><operator>.</operator><name>getMessageOrBuilderList</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name><operator>.</operator><name>unmodifiableList</name></name><argument_list>(<argument><expr><name>parameters_</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></type> <name>addParametersBuilder</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getParametersFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addBuilder</name><argument_list>(
            <argument><expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></type> <name>addParametersBuilder</name><parameter_list>(
          <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>getParametersFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addBuilder</name><argument_list>(
            <argument><expr><name>index</name></expr></argument>, <argument><expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;repeated .signal.SqlStatement.SqlParameter parameters = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></argument>&gt;</argument_list></name></name></type> 
           <name>getParametersBuilderList</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>getParametersFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilderList</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>RepeatedFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getParametersFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>parametersBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>parametersBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>RepeatedFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameterOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>parameters_</name></expr></argument>,
                  <argument><expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>parameters_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>parametersBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.SqlStatement)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>SqlStatement</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.SqlStatement)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>SharedPreferenceOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional string file = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string file = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasFile</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string file = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getFile</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string file = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getFileBytes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional string key = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string key = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasKey</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string key = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getKey</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string key = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getKeyBytes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional string value = 3;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string value = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasValue</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string value = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getValue</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string value = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getValueBytes</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.SharedPreference}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>SharedPreference</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>SharedPreferenceOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use SharedPreference.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>SharedPreference</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>SharedPreference</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>SharedPreference</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>SharedPreference</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>SharedPreference</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>SharedPreference</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>file_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">18</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>key_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">26</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>value_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SharedPreference_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SharedPreference_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>SharedPreference</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>SharedPreference</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>SharedPreference</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>SharedPreference</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>SharedPreference</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional string file = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FILE_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>file_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string file = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasFile</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string file = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>file_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>bs</name> <init>= 
            <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><call><name><name>bs</name><operator>.</operator><name>toStringUtf8</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>bs</name><operator>.</operator><name>isValidUtf8</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>file_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>s</name></expr>;</return>
      }</block></else></if>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string file = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getFileBytes</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>file_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
            <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>file_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></else></if>
    }</block></function>

    <comment type="line">// optional string key = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>KEY_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>key_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string key = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasKey</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string key = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>key_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>bs</name> <init>= 
            <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><call><name><name>bs</name><operator>.</operator><name>toStringUtf8</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>bs</name><operator>.</operator><name>isValidUtf8</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>key_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>s</name></expr>;</return>
      }</block></else></if>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string key = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getKeyBytes</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>key_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
            <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>key_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></else></if>
    }</block></function>

    <comment type="line">// optional string value = 3;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VALUE_FIELD_NUMBER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>value_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string value = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasValue</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string value = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>value_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>bs</name> <init>= 
            <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><call><name><name>bs</name><operator>.</operator><name>toStringUtf8</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>bs</name><operator>.</operator><name>isValidUtf8</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>s</name></expr>;</return>
      }</block></else></if>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string value = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getValueBytes</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>value_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
            <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></else></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>file_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>key_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>value_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getFileBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>getKeyBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>getValueBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getFileBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>getKeyBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name>getValueBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.SharedPreference}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SharedPreference_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SharedPreference_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.SharedPreference.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>file_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>value_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_SharedPreference_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>file_</name></name> <operator>=</operator> <name>file_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>key_</name></name> <operator>=</operator> <name>key_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>value_</name></name> <operator>=</operator> <name>value_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasFile</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>file_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>file_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasKey</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>key_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>key_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasValue</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>value_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>value_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional string file = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>file_</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string file = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasFile</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string file = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getFile</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>file_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name><operator>)</operator>
              <operator>.</operator><call><name>toStringUtf8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>file_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
          <return>return <expr><name>s</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string file = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getFileBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>file_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
              <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                  <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>file_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
          <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string file = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setFile</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>file_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string file = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearFile</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>file_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string file = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setFileBytes</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>file_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional string key = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>key_</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string key = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasKey</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string key = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getKey</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>key_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name><operator>)</operator>
              <operator>.</operator><call><name>toStringUtf8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>key_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
          <return>return <expr><name>s</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string key = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getKeyBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>key_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
              <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                  <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>key_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
          <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string key = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setKey</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string key = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearKey</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string key = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setKeyBytes</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>key_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional string value = 3;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>value_</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string value = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasValue</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string value = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getValue</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>value_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name><operator>)</operator>
              <operator>.</operator><call><name>toStringUtf8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
          <return>return <expr><name>s</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string value = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getValueBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>value_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
              <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                  <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
          <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string value = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setValue</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string value = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearValue</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>value_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string value = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setValueBytes</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>value_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.SharedPreference)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>SharedPreference</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.SharedPreference)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>AttachmentOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional uint64 rowId = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasRowId</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>long</name></type> <name>getRowId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional uint64 attachmentId = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasAttachmentId</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>long</name></type> <name>getAttachmentId</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional uint32 length = 3;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasLength</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>int</name></type> <name>getLength</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.Attachment}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Attachment</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>AttachmentOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use Attachment.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>Attachment</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>Attachment</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Attachment</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Attachment</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Attachment</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>Attachment</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">8</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>rowId_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">16</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>attachmentId_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt64</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">24</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>length_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Attachment_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Attachment_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>Attachment</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional uint64 rowId = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ROWID_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>rowId_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasRowId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getRowId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>rowId_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional uint64 attachmentId = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATTACHMENTID_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>attachmentId_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAttachmentId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getAttachmentId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>attachmentId_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional uint32 length = 3;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LENGTH_FIELD_NUMBER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>length_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLength</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>length_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>rowId_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>attachmentId_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>length_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt64</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rowId_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt64</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>attachmentId_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt32</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>length_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt64Size</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rowId_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt64Size</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>attachmentId_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt32Size</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>length_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.Attachment}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Attachment_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Attachment_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.Attachment.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowId_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>attachmentId_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>length_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Attachment_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>rowId_</name></name> <operator>=</operator> <name>rowId_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>attachmentId_</name></name> <operator>=</operator> <name>attachmentId_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>length_</name></name> <operator>=</operator> <name>length_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasRowId</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setRowId</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getRowId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasAttachmentId</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setAttachmentId</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getAttachmentId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasLength</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setLength</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional uint64 rowId = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>rowId_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasRowId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>long</name></type> <name>getRowId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>rowId_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setRowId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowId_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 rowId = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearRowId</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowId_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional uint64 attachmentId = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>attachmentId_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAttachmentId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>long</name></type> <name>getAttachmentId</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>attachmentId_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setAttachmentId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>attachmentId_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint64 attachmentId = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearAttachmentId</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>attachmentId_</name> <operator>=</operator> <literal type="number">0L</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional uint32 length = 3;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>length_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>int</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>length_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>length_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearLength</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>length_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.Attachment)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Attachment</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.Attachment)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>AvatarOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional string name = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string name = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasName</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string name = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getName</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string name = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getNameBytes</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional uint32 length = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasLength</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>int</name></type> <name>getLength</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.Avatar}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Avatar</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>AvatarOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use Avatar.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>Avatar</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>Avatar</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Avatar</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Avatar</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Avatar</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>Avatar</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>name_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">16</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>length_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Avatar_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Avatar_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Avatar</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>Avatar</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>Avatar</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>Avatar</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Avatar</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional string name = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>NAME_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>name_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string name = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasName</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string name = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>name_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>bs</name> <init>= 
            <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><call><name><name>bs</name><operator>.</operator><name>toStringUtf8</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>bs</name><operator>.</operator><name>isValidUtf8</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>name_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>s</name></expr>;</return>
      }</block></else></if>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional string name = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
        <name>getNameBytes</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>name_</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
            <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>name_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
      }</block></else></if>
    }</block></function>

    <comment type="line">// optional uint32 length = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>LENGTH_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>length_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLength</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>length_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>name_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>length_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getNameBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt32</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>length_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>getNameBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt32Size</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>length_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.Avatar}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Avatar_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Avatar_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.Avatar.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>name_</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>length_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Avatar_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>name_</name></name> <operator>=</operator> <name>name_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>length_</name></name> <operator>=</operator> <name>length_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasName</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>name_</name> <operator>=</operator> <name><name>other</name><operator>.</operator><name>name_</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasLength</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setLength</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getLength</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional string name = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>name_</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string name = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasName</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string name = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>getName</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>name_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ref</name> <operator>instanceof</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>s</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name><operator>)</operator>
              <operator>.</operator><call><name>toStringUtf8</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>name_</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
          <return>return <expr><name>s</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string name = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type>
          <name>getNameBytes</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>ref</name> <init>= <expr><name>name_</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ref</name> <operator>instanceof</operator> <name>String</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>b</name> <init>= 
              <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>copyFromUtf8</name></name><argument_list>(
                  <argument><expr><operator>(</operator><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name><operator>)</operator> <name>ref</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>name_</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
          <return>return <expr><name>b</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><operator>(</operator><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name><operator>)</operator> <name>ref</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string name = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setName</name><parameter_list>(
          <parameter><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>name_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string name = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearName</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>name_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional string name = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setNameBytes</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>name_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional uint32 length = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>length_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>int</name></type> <name>getLength</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>length_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setLength</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>length_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 length = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearLength</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>length_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.Avatar)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Avatar</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.Avatar)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>DatabaseVersionOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional uint32 version = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasVersion</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>int</name></type> <name>getVersion</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.DatabaseVersion}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>DatabaseVersion</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>DatabaseVersionOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use DatabaseVersion.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>DatabaseVersion</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>DatabaseVersion</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>DatabaseVersion</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>DatabaseVersion</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>DatabaseVersion</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>DatabaseVersion</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">8</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readUInt32</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_DatabaseVersion_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_DatabaseVersion_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>DatabaseVersion</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>DatabaseVersion</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>DatabaseVersion</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>DatabaseVersion</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>DatabaseVersion</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional uint32 version = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VERSION_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>version_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVersion</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>version_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>version_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeUInt32</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>version_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeUInt32Size</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>version_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.DatabaseVersion}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_DatabaseVersion_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_DatabaseVersion_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.DatabaseVersion.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>version_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_DatabaseVersion_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>version_</name></name> <operator>=</operator> <name>version_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasVersion</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setVersion</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional uint32 version = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>version_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>int</name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>version_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>version_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional uint32 version = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearVersion</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>version_</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.DatabaseVersion)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>DatabaseVersion</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.DatabaseVersion)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>HeaderOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional bytes iv = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasIv</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getIv</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional bytes salt = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasSalt</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getSalt</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.Header}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Header</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>HeaderOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use Header.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>Header</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>Header</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Header</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Header</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>Header</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>Header</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>iv_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">18</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>salt_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBytes</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Header_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Header_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>Header</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>Header</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional bytes iv = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>IV_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>iv_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasIv</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getIv</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>iv_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional bytes salt = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SALT_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>salt_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasSalt</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getSalt</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>salt_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>iv_</name> <operator>=</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>salt_</name> <operator>=</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iv_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBytes</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>salt_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iv_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBytesSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>salt_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.Header}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Header_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Header_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.Header.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iv_</name> <operator>=</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>salt_</name> <operator>=</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_Header_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>iv_</name></name> <operator>=</operator> <name>iv_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>salt_</name></name> <operator>=</operator> <name>salt_</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasIv</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setIv</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getIv</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasSalt</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setSalt</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getSalt</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional bytes iv = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>iv_</name> <init>= <expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasIv</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getIv</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>iv_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setIv</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>iv_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes iv = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearIv</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>iv_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional bytes salt = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>salt_</name> <init>= <expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name><operator>.</operator><name>EMPTY</name></name></expr></init></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasSalt</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>getSalt</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>salt_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setSalt</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
    <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
  }</block></then></if>
  <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>salt_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bytes salt = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearSalt</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>salt_</name> <operator>=</operator> <call><name>getDefaultInstance</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSalt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.Header)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>Header</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.Header)</comment>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>BackupFrameOrBuilder</name>
      <super><extends>extends <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>MessageOrBuilder</name></name></extends></super> <block>{

    <comment type="line">// optional .signal.Header header = 1;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasHeader</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>getHeader</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></type> <name>getHeaderOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.SqlStatement statement = 2;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasStatement</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>getStatement</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></type> <name>getStatementOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.SharedPreference preference = 3;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasPreference</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>getPreference</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></type> <name>getPreferenceOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.Attachment attachment = 4;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasAttachment</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>getAttachment</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></type> <name>getAttachmentOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.DatabaseVersion version = 5;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasVersion</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>getVersion</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></type> <name>getVersionOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional bool end = 6;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasEnd</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>getEnd</name><parameter_list>()</parameter_list>;</function_decl>

    <comment type="line">// optional .signal.Avatar avatar = 7;</comment>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
     */</comment>
    <function_decl><type><name>boolean</name></type> <name>hasAvatar</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>getAvatar</name><parameter_list>()</parameter_list>;</function_decl>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
     */</comment>
    <function_decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></type> <name>getAvatarOrBuilder</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
  <comment type="block" format="javadoc">/**
   * Protobuf type {@code signal.BackupFrame}
   */</comment>
  <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>BackupFrame</name> <super><extends>extends
      <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name></name></extends>
      <implements>implements <name>BackupFrameOrBuilder</name></implements></super> <block>{
    <comment type="line">// Use BackupFrame.newBuilder() to construct.</comment>
    <constructor><specifier>private</specifier> <name>BackupFrame</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></name></type> <name>builder</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>builder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>builder</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <constructor><specifier>private</specifier> <name>BackupFrame</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>noInit</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></constructor>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>BackupFrame</name></type> <name>defaultInstance</name></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>BackupFrame</name></type> <name>getDefaultInstance</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>BackupFrame</name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>defaultInstance</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type> <name>unknownFields</name></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name></name></type>
        <name>getUnknownFields</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name></expr>;</return>
    }</block></function>
    <constructor><specifier>private</specifier> <name>BackupFrame</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>initFields</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>mutable_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>Builder</name></name></type> <name>unknownFields</name> <init>=
          <expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>UnknownFieldSet</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>done</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>tag</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>readTag</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
              <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              <break>break;</break>
            <default>default:</default> <block>{
              <if>if <condition>(<expr><operator>!</operator><call><name>parseUnknownField</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>unknownFields</name></expr></argument>,
                                     <argument><expr><name>extensionRegistry</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
              }</block></then></if>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">10</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>header_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>header_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>header_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>header_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">18</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>statement_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>statement_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">26</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>preference_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>preference_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>preference_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>preference_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">34</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>attachment_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>attachment_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">42</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>version_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>version_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">48</literal></expr>:</case> <block>{
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>end_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readBool</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
            <case>case <expr><literal type="number">58</literal></expr>:</case> <block>{
              <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name></name></type> <name>subBuilder</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
              <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>subBuilder</name> <operator>=</operator> <call><name><name>avatar_</name><operator>.</operator><name>toBuilder</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>readMessage</name></name><argument_list>(<argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>PARSER</name></name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if>if <condition>(<expr><name>subBuilder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>subBuilder</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>avatar_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <call><name><name>subBuilder</name><operator>.</operator><name>buildPartial</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
              <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000040</literal></expr>;</expr_stmt>
              <break>break;</break>
            }</block>
          }</block></switch>
        }</block></while>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><call><name><name>e</name><operator>.</operator><name>setUnfinishedMessage</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name><argument_list>(
            <argument><expr><call><name><name>e</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>setUnfinishedMessage</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch> <finally>finally <block>{
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownFields</name></name> <operator>=</operator> <call><name><name>unknownFields</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>makeExtensionsImmutable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></finally></try>
    }</block></constructor>
    <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
        <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_BackupFrame_descriptor</name></name></expr>;</return>
    }</block></function>

    <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
        <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_BackupFrame_fieldAccessorTable</name>
          <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
              <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>BackupFrame</name></argument>&gt;</argument_list></name></name></type> <name>PARSER</name> <init>=
        <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>AbstractParser</name><argument_list type="generic">&lt;<argument><name>BackupFrame</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>BackupFrame</name></type> <name>parsePartialFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
        <return>return <expr><operator>new</operator> <call><name>BackupFrame</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>Parser</name><argument_list type="generic">&lt;<argument><name>BackupFrame</name></argument>&gt;</argument_list></name></name></type> <name>getParserForType</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>PARSER</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>
    <comment type="line">// optional .signal.Header header = 1;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>HEADER_FIELD_NUMBER</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>header_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasHeader</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>getHeader</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>header_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></type> <name>getHeaderOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>header_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.SqlStatement statement = 2;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>STATEMENT_FIELD_NUMBER</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>statement_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasStatement</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>getStatement</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>statement_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></type> <name>getStatementOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>statement_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.SharedPreference preference = 3;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PREFERENCE_FIELD_NUMBER</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>preference_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPreference</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>getPreference</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>preference_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></type> <name>getPreferenceOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>preference_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.Attachment attachment = 4;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ATTACHMENT_FIELD_NUMBER</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>attachment_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAttachment</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>getAttachment</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>attachment_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></type> <name>getAttachmentOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>attachment_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.DatabaseVersion version = 5;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>VERSION_FIELD_NUMBER</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>version_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVersion</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>version_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></type> <name>getVersionOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>version_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional bool end = 6;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>END_FIELD_NUMBER</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>end_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasEnd</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000020</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getEnd</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>end_</name></expr>;</return>
    }</block></function>

    <comment type="line">// optional .signal.Avatar avatar = 7;</comment>
    <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>AVATAR_FIELD_NUMBER</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>avatar_</name></decl>;</decl_stmt>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAvatar</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>getAvatar</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>avatar_</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
     */</comment>
    <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></type> <name>getAvatarOrBuilder</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>avatar_</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>initFields</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>header_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>preference_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>end_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <decl_stmt><decl><specifier>private</specifier> <type><name>byte</name></type> <name>memoizedIsInitialized</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>byte</name></type> <name>isInitialized</name> <init>= <expr><name>memoizedIsInitialized</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>isInitialized</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>isInitialized</name> <operator>==</operator> <literal type="number">1</literal></expr>;</return></block></then></if>

      <expr_stmt><expr><name>memoizedIsInitialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>writeTo</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name></name></type> <name>output</name></decl></parameter>)</parameter_list>
                        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>header_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>statement_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>preference_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>attachment_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>version_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000020</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeBool</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>end_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>writeMessage</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>avatar_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>writeTo</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>memoizedSerializedSize</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <function><specifier>public</specifier> <type><name>int</name></type> <name>getSerializedSize</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name>memoizedSerializedSize</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>size</name></expr>;</return></block></then></if>

      <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>header_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>statement_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>preference_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>attachment_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>version_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000020</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeBoolSize</name></name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>end_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedOutputStream</name>
          <operator>.</operator><name>computeMessageSize</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>avatar_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>getUnknownFields</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializedSize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>memoizedSerializedSize</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></function>

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>serialVersionUID</name> <init>= <expr><literal type="number">0L</literal></expr></init></decl>;</decl_stmt>
    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Object</name></name></type> <name>writeReplace</name><parameter_list>()</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ObjectStreamException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>writeReplace</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(<parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseDelimitedFrom</name><parameter_list>(
        <parameter><decl><type><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseDelimitedFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parseFrom</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
        <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
      <return>return <expr><call><name><name>PARSER</name><operator>.</operator><name>parseFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name><name>Builder</name><operator>.</operator><name>create</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>newBuilder</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>prototype</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name>newBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>prototype</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><specifier>public</specifier> <type><name>Builder</name></type> <name>toBuilder</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>newBuilder</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><annotation>@<name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>Override</name></name></annotation>
    <specifier>protected</specifier> <type><name>Builder</name></type> <name>newBuilderForType</name><parameter_list>(
        <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Builder</name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name>Builder</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>builder</name></expr>;</return>
    }</block></function>
    <comment type="block" format="javadoc">/**
     * Protobuf type {@code signal.BackupFrame}
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> class <name>Builder</name> <super><extends>extends
        <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name><name>Builder</name><argument_list type="generic">&lt;<argument><name>Builder</name></argument>&gt;</argument_list></name></name></extends>
       <implements>implements <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrameOrBuilder</name></name></implements></super> <block>{
      <function><specifier>public</specifier> <specifier>static</specifier> <specifier>final</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_BackupFrame_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>protected</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
          <name>internalGetFieldAccessorTable</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_BackupFrame_fieldAccessorTable</name>
            <operator>.</operator><name>ensureFieldAccessorsInitialized</name></name><argument_list>(
                <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>Builder</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <comment type="line">// Construct using org.thoughtcrime.securesms.backup.BackupProtos.BackupFrame.newBuilder()</comment>
      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>

      <constructor><specifier>private</specifier> <name>Builder</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>BuilderParent</name></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>parent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>maybeForceBuilderInitialization</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></constructor>
      <function><specifier>private</specifier> <type><name>void</name></type> <name>maybeForceBuilderInitialization</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>alwaysUseFieldBuilders</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>getHeaderFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getStatementFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getPreferenceFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getAttachmentFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getVersionFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getAvatarFieldBuilder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
      <function><specifier>private</specifier> <specifier>static</specifier> <type><name>Builder</name></type> <name>create</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>new</operator> <call><name>Builder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>header_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>headerBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>statementBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>preference_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000008</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>versionBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000010</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>end_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000020</literal><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000040</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clone</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name>create</name><argument_list>()</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
          <name>getDescriptorForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>internal_static_signal_BackupFrame_descriptor</name></name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>getDefaultInstanceForType</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>result</name> <init>= <expr><call><name>buildPartial</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>result</name><operator>.</operator><name>isInitialized</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <throw>throw <expr><call><name>newUninitializedMessageException</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</throw>
        }</block></then></if>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>buildPartial</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>from_bitField0_</name> <init>= <expr><name>bitField0_</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to_bitField0_</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>header_</name></name> <operator>=</operator> <name>header_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>header_</name></name> <operator>=</operator> <call><name><name>headerBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>statement_</name></name> <operator>=</operator> <name>statement_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>statement_</name></name> <operator>=</operator> <call><name><name>statementBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>preference_</name></name> <operator>=</operator> <name>preference_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>preference_</name></name> <operator>=</operator> <call><name><name>preferenceBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>attachment_</name></name> <operator>=</operator> <name>attachment_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>attachment_</name></name> <operator>=</operator> <call><name><name>attachmentBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>version_</name></name> <operator>=</operator> <name>version_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>version_</name></name> <operator>=</operator> <call><name><name>versionBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000020</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>end_</name></name> <operator>=</operator> <name>end_</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>from_bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>to_bitField0_</name> <operator>|=</operator> <literal type="number">0x00000040</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>avatar_</name></name> <operator>=</operator> <name>avatar_</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>result</name><operator>.</operator><name>avatar_</name></name> <operator>=</operator> <call><name><name>avatarBuilder_</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>bitField0_</name></name> <operator>=</operator> <name>to_bitField0_</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onBuilt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>result</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Message</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>instanceof</operator> <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></expr>)</condition><then> <block>{
          <return>return <expr><call><name>mergeFrom</name><argument_list>(<argument><expr><operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name><operator>)</operator><name>other</name></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>this</name></expr>;</return>
        }</block></else></if>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>other</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>other</name> <operator>==</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasHeader</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeHeader</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getHeader</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasStatement</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeStatement</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getStatement</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasPreference</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergePreference</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getPreference</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasAttachment</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeAttachment</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasVersion</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeVersion</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasEnd</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>setEnd</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getEnd</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><call><name><name>other</name><operator>.</operator><name>hasAvatar</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>mergeAvatar</name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getAvatar</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>mergeUnknownFields</name></name><argument_list>(<argument><expr><call><name><name>other</name><operator>.</operator><name>getUnknownFields</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <specifier>final</specifier> <type><name>boolean</name></type> <name>isInitialized</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>

      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeFrom</name><parameter_list>(
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>CodedInputStream</name></name></type> <name>input</name></decl></parameter>,
          <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistryLite</name></name></type> <name>extensionRegistry</name></decl></parameter>)</parameter_list>
          <throws>throws <argument><expr><name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name></expr></argument></throws> <block>{
        <decl_stmt><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>parsedMessage</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
        <try>try <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <call><name><name>PARSER</name><operator>.</operator><name>parsePartialFrom</name></name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>extensionRegistry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>InvalidProtocolBufferException</name></name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>parsedMessage</name> <operator>=</operator> <operator>(</operator><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name><operator>)</operator> <call><name><name>e</name><operator>.</operator><name>getUnfinishedMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <throw>throw <expr><name>e</name></expr>;</throw>
        }</block></catch> <finally>finally <block>{
          <if>if <condition>(<expr><name>parsedMessage</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>mergeFrom</name><argument_list>(<argument><expr><name>parsedMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></finally></try>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>bitField0_</name></decl>;</decl_stmt>

      <comment type="line">// optional .signal.Header header = 1;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>header_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>headerBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasHeader</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>getHeader</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>header_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>headerBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setHeader</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>header_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>headerBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setHeader</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>header_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>headerBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeHeader</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000001</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>header_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>header_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>header_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>header_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>headerBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearHeader</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>header_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>headerBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000001</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name></name></type> <name>getHeaderBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000001</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getHeaderFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></type> <name>getHeaderOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>headerBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>header_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Header header = 1;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getHeaderFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>headerBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>headerBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>HeaderOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>header_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>header_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>headerBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.SqlStatement statement = 2;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>statement_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>statementBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasStatement</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>getStatement</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>statement_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>statementBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setStatement</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>statementBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setStatement</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>statementBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeStatement</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000002</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>statement_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>statement_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>statement_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>statement_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>statementBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearStatement</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>statementBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000002</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></type> <name>getStatementBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000002</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getStatementFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></type> <name>getStatementOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>statementBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>statement_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SqlStatement statement = 2;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getStatementFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>statementBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>statementBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SqlStatementOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>statement_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>statement_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>statementBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.SharedPreference preference = 3;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>preference_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>preferenceBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasPreference</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>getPreference</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>preference_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setPreference</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>preference_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setPreference</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>preference_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergePreference</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000004</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>preference_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>preference_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>preference_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>preference_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearPreference</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>preference_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000004</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name></name></type> <name>getPreferenceBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000004</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getPreferenceFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></type> <name>getPreferenceOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>preferenceBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>preference_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.SharedPreference preference = 3;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getPreferenceFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>preferenceBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>preferenceBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>SharedPreferenceOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>preference_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>preference_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>preferenceBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.Attachment attachment = 4;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>attachment_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>attachmentBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAttachment</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>getAttachment</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>attachment_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setAttachment</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setAttachment</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeAttachment</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000008</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>attachment_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>attachment_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>attachment_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearAttachment</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000008</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name></name></type> <name>getAttachmentBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000008</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getAttachmentFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></type> <name>getAttachmentOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>attachmentBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>attachment_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Attachment attachment = 4;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getAttachmentFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>attachmentBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>attachmentBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AttachmentOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>attachment_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>attachment_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>attachmentBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.DatabaseVersion version = 5;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>version_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>versionBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasVersion</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>getVersion</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>version_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>versionBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setVersion</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>version_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>versionBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setVersion</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>versionBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeVersion</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000010</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>version_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>version_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>version_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>version_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>versionBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearVersion</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>version_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>versionBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000010</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name></name></type> <name>getVersionBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000010</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getVersionFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></type> <name>getVersionOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>versionBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>version_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.DatabaseVersion version = 5;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getVersionFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>versionBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>versionBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>DatabaseVersionOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>version_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>version_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>versionBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional bool end = 6;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>end_</name></decl> ;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasEnd</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000020</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000020</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>getEnd</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>end_</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setEnd</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000020</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>end_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional bool end = 6;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearEnd</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000020</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>end_</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>

      <comment type="line">// optional .signal.Avatar avatar = 7;</comment>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>avatar_</name> <init>= <expr><call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> <name>avatarBuilder_</name></decl>;</decl_stmt>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>boolean</name></type> <name>hasAvatar</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>getAvatar</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><name>avatar_</name></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>getMessage</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setAvatar</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <throw>throw <expr><operator>new</operator> <call><name>NullPointerException</name><argument_list>()</argument_list></call></expr>;</throw>
          }</block></then></if>
          <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000040</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>setAvatar</name><parameter_list>(
          <parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name></name></type> <name>builderForValue</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name><name>builderForValue</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000040</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>mergeAvatar</name><parameter_list>(<parameter><decl><type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00000040</literal><operator>)</operator> <operator>&amp;&amp;</operator>
              <name>avatar_</name> <operator>!=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>avatar_</name> <operator>=</operator>
              <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>newBuilder</name></name><argument_list>(<argument><expr><name>avatar_</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>mergeFrom</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>buildPartial</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>mergeFrom</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000040</literal></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name>Builder</name></type> <name>clearAvatar</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <call><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>getDefaultInstance</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>bitField0_</name> <operator>=</operator> <operator>(</operator><name>bitField0_</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0x00000040</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>this</name></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name></name></type> <name>getAvatarBuilder</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>bitField0_</name> <operator>|=</operator> <literal type="number">0x00000040</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>onChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>getAvatarFieldBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBuilder</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>public</specifier> <type><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></type> <name>getAvatarOrBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <return>return <expr><call><name><name>avatarBuilder_</name><operator>.</operator><name>getMessageOrBuilder</name></name><argument_list>()</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
          <return>return <expr><name>avatar_</name></expr>;</return>
        }</block></else></if>
      }</block></function>
      <comment type="block" format="javadoc">/**
       * &lt;code&gt;optional .signal.Avatar avatar = 7;&lt;/code&gt;
       */</comment>
      <function><specifier>private</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
          <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></argument>&gt;</argument_list></name></name></type> 
          <name>getAvatarFieldBuilder</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>avatarBuilder_</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>avatarBuilder_</name> <operator>=</operator> <operator>new</operator> <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name><name>SingleFieldBuilder</name><argument_list type="generic">&lt;
              <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>Builder</name></name></argument>, <argument><name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name><operator>.</operator><name>BackupProtos</name><operator>.</operator><name>AvatarOrBuilder</name></name></argument>&gt;</argument_list></name></name><argument_list>(
                  <argument><expr><name>avatar_</name></expr></argument>,
                  <argument><expr><call><name>getParentForChildren</name><argument_list>()</argument_list></call></expr></argument>,
                  <argument><expr><call><name>isClean</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>avatar_</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>avatarBuilder_</name></expr>;</return>
      }</block></function>

      <comment type="line">// @@protoc_insertion_point(builder_scope:signal.BackupFrame)</comment>
    }</block></class>

    <static>static <block>{
      <expr_stmt><expr><name>defaultInstance</name> <operator>=</operator> <operator>new</operator> <call><name>BackupFrame</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>defaultInstance</name><operator>.</operator><name>initFields</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></static>

    <comment type="line">// @@protoc_insertion_point(class_scope:signal.BackupFrame)</comment>
  }</block></class>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_SqlStatement_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_SqlStatement_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_SqlStatement_SqlParameter_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_SqlStatement_SqlParameter_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_SharedPreference_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_SharedPreference_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_Attachment_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_Attachment_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_Avatar_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_Avatar_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_DatabaseVersion_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_DatabaseVersion_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_Header_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_Header_fieldAccessorTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>Descriptor</name></name></type>
    <name>internal_static_signal_BackupFrame_descriptor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier>
    <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name></type>
      <name>internal_static_signal_BackupFrame_fieldAccessorTable</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name></name></type>
      <name>getDescriptor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>descriptor</name></expr>;</return>
  }</block></function>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name></name></type>
      <name>descriptor</name></decl>;</decl_stmt>
  <static>static <block>{
    <decl_stmt><decl><type><name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name></type> <name>descriptorData</name> <init>= <expr><block>{
      <expr><literal type="string">"\n\rBackups.proto\022\006signal\"\342\001\n\014SqlStatement"</literal> <operator>+</operator>
      <literal type="string">"\022\021\n\tstatement\030\001 \001(\t\0225\n\nparameters\030\002 \003(\0132"</literal> <operator>+</operator>
      <literal type="string">"!.signal.SqlStatement.SqlParameter\032\207\001\n\014S"</literal> <operator>+</operator>
      <literal type="string">"qlParameter\022\026\n\016stringParamter\030\001 \001(\t\022\030\n\020i"</literal> <operator>+</operator>
      <literal type="string">"ntegerParameter\030\002 \001(\004\022\027\n\017doubleParameter"</literal> <operator>+</operator>
      <literal type="string">"\030\003 \001(\001\022\025\n\rblobParameter\030\004 \001(\014\022\025\n\rnullpar"</literal> <operator>+</operator>
      <literal type="string">"ameter\030\005 \001(\010\"&lt;\n\020SharedPreference\022\014\n\004file"</literal> <operator>+</operator>
      <literal type="string">"\030\001 \001(\t\022\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"A\n\nAt"</literal> <operator>+</operator>
      <literal type="string">"tachment\022\r\n\005rowId\030\001 \001(\004\022\024\n\014attachmentId\030"</literal> <operator>+</operator>
      <literal type="string">"\002 \001(\004\022\016\n\006length\030\003 \001(\r\"&amp;\n\006Avatar\022\014\n\004name\030"</literal></expr>,
      <expr><literal type="string">"\001 \001(\t\022\016\n\006length\030\002 \001(\r\"\"\n\017DatabaseVersion"</literal> <operator>+</operator>
      <literal type="string">"\022\017\n\007version\030\001 \001(\r\"\"\n\006Header\022\n\n\002iv\030\001 \001(\014\022"</literal> <operator>+</operator>
      <literal type="string">"\014\n\004salt\030\002 \001(\014\"\203\002\n\013BackupFrame\022\036\n\006header\030"</literal> <operator>+</operator>
      <literal type="string">"\001 \001(\0132\016.signal.Header\022\'\n\tstatement\030\002 \001(\013"</literal> <operator>+</operator>
      <literal type="string">"2\024.signal.SqlStatement\022,\n\npreference\030\003 \001"</literal> <operator>+</operator>
      <literal type="string">"(\0132\030.signal.SharedPreference\022&amp;\n\nattachme"</literal> <operator>+</operator>
      <literal type="string">"nt\030\004 \001(\0132\022.signal.Attachment\022(\n\007version\030"</literal> <operator>+</operator>
      <literal type="string">"\005 \001(\0132\027.signal.DatabaseVersion\022\013\n\003end\030\006 "</literal> <operator>+</operator>
      <literal type="string">"\001(\010\022\036\n\006avatar\030\007 \001(\0132\016.signal.AvatarB1\n!o"</literal> <operator>+</operator>
      <literal type="string">"rg.thoughtcrime.securesms.backupB\014Backup"</literal></expr>,
      <expr><literal type="string">"Protos"</literal></expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name><operator>.</operator><name>InternalDescriptorAssigner</name></name></type> <name>assigner</name> <init>=
      <expr><operator>new</operator> <class><super><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name><operator>.</operator><name>InternalDescriptorAssigner</name></name></super><argument_list>()</argument_list> <block>{
        <function><specifier>public</specifier> <type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ExtensionRegistry</name></name></type> <name>assignDescriptors</name><parameter_list>(
            <parameter><decl><type><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name></name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>descriptor</name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_SqlStatement_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_SqlStatement_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_SqlStatement_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Statement"</literal></expr>, <expr><literal type="string">"Parameters"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_SqlStatement_SqlParameter_descriptor</name> <operator>=</operator>
            <call><name><name>internal_static_signal_SqlStatement_descriptor</name><operator>.</operator><name>getNestedTypes</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_SqlStatement_SqlParameter_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_SqlStatement_SqlParameter_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"StringParamter"</literal></expr>, <expr><literal type="string">"IntegerParameter"</literal></expr>, <expr><literal type="string">"DoubleParameter"</literal></expr>, <expr><literal type="string">"BlobParameter"</literal></expr>, <expr><literal type="string">"Nullparameter"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_SharedPreference_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_SharedPreference_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_SharedPreference_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"File"</literal></expr>, <expr><literal type="string">"Key"</literal></expr>, <expr><literal type="string">"Value"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Attachment_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Attachment_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_Attachment_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"RowId"</literal></expr>, <expr><literal type="string">"AttachmentId"</literal></expr>, <expr><literal type="string">"Length"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Avatar_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Avatar_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_Avatar_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Name"</literal></expr>, <expr><literal type="string">"Length"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_DatabaseVersion_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_DatabaseVersion_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_DatabaseVersion_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Version"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Header_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_Header_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_Header_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Iv"</literal></expr>, <expr><literal type="string">"Salt"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_BackupFrame_descriptor</name> <operator>=</operator>
            <call><name>getDescriptor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageTypes</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>internal_static_signal_BackupFrame_fieldAccessorTable</name> <operator>=</operator> <operator>new</operator>
            <call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>GeneratedMessage</name><operator>.</operator><name>FieldAccessorTable</name></name><argument_list>(
              <argument><expr><name>internal_static_signal_BackupFrame_descriptor</name></expr></argument>,
              <argument><expr><operator>new</operator> <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>String</name><index>[]</index></name> <block>{ <expr><literal type="string">"Header"</literal></expr>, <expr><literal type="string">"Statement"</literal></expr>, <expr><literal type="string">"Preference"</literal></expr>, <expr><literal type="string">"Attachment"</literal></expr>, <expr><literal type="string">"Version"</literal></expr>, <expr><literal type="string">"End"</literal></expr>, <expr><literal type="string">"Avatar"</literal></expr>, }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>
      }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name>
      <operator>.</operator><name>internalBuildGeneratedFileFrom</name></name><argument_list>(<argument><expr><name>descriptorData</name></expr></argument>,
        <argument><expr><operator>new</operator> <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>Descriptors</name><operator>.</operator><name>FileDescriptor</name><index>[]</index></name> <block>{
        }</block></expr></argument>, <argument><expr><name>assigner</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></static>

  <comment type="line">// @@protoc_insertion_point(outer_class_scope)</comment>
}</block></class>
</unit>
