<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\backup\FullBackupExporter.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>backup</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>function</name><operator>.</operator><name>Consumer</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>function</name><operator>.</operator><name>Predicate</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>google</name><operator>.</operator><name>protobuf</name><operator>.</operator><name>ByteString</name></name>;</import>

<import>import <name><name>net</name><operator>.</operator><name>sqlcipher</name><operator>.</operator><name>database</name><operator>.</operator><name>SQLiteDatabase</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>AttachmentId</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>AttachmentSecret</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ClassicDecryptingPartInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IdentityKeyUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>crypto</name><operator>.</operator><name>ModernDecryptingPartInputStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>GroupReceiptDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsColumns</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>OneTimePreKeyDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SearchDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SessionDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SignedPreKeyDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>profiles</name><operator>.</operator><name>AvatarHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Conversions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>kdf</name><operator>.</operator><name>HKDFv3</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>BadPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>IllegalBlockSizeException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class><specifier>public</specifier> class <name>FullBackupExporter</name> <super><extends>extends <name>FullBackupBase</name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>FullBackupExporter</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>export</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>input</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>output</name></decl></parameter>,
                            <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>BackupFrameOutputStream</name></type> <name>outputStream</name> <init>= <expr><operator>new</operator> <call><name>BackupFrameOutputStream</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>passphrase</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>writeDatabaseVersion</name></name><argument_list>(<argument><expr><call><name><name>input</name><operator>.</operator><name>getVersion</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr><call><name>exportSchema</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>          <name>count</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>String</name></type> <name>table</name> <range>: <expr><name>tables</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>exportTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cursor</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>cursor</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>MmsSmsColumns</name><operator>.</operator><name>EXPIRES_IN</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></block></lambda></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>exportTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cursor</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>isForNonExpiringMessage</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>GroupReceiptDatabase</name><operator>.</operator><name>MMS_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>exportTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cursor</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>isForNonExpiringMessage</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>MMS_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>cursor</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>exportAttachment</name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SignedPreKeyDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call>       <operator>&amp;&amp;</operator>
                 <operator>!</operator><call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>OneTimePreKeyDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call>      <operator>&amp;&amp;</operator>
                 <operator>!</operator><call><name><name>table</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SessionDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>)</argument_list></call>            <operator>&amp;&amp;</operator>
                 <operator>!</operator><call><name><name>table</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>SMS_FTS_TABLE_NAME</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                 <operator>!</operator><call><name><name>table</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>MMS_FTS_TABLE_NAME</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>exportTable</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></for>

    <for>for <control>(<init><decl><type><name><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>preference</name> <range>: <expr><call><name><name>IdentityKeyUtil</name><operator>.</operator><name>getBackupRecord</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BackupEvent</name><argument_list>(<argument><expr><name><name>BackupEvent</name><operator>.</operator><name>Type</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>preference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>File</name></type> <name>avatar</name> <range>: <expr><call><name><name>AvatarHelper</name><operator>.</operator><name>getAvatarFiles</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BackupEvent</name><argument_list>(<argument><expr><name><name>BackupEvent</name><operator>.</operator><name>Type</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>avatar</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>avatar</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>avatar</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>writeEnd</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BackupEvent</name><argument_list>(<argument><expr><name><name>BackupEvent</name><operator>.</operator><name>Type</name><operator>.</operator><name>FINISHED</name></name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>exportSchema</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>input</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>BackupFrameOutputStream</name></type> <name>outputStream</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>tables</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT sql, name, type FROM sqlite_master"</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>String</name></type> <name>sql</name>  <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>name</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>type</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>sql</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{

          <decl_stmt><decl><type><name>boolean</name></type> <name>isSmsFtsSecretTable</name> <init>= <expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>SMS_FTS_TABLE_NAME</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>SMS_FTS_TABLE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>boolean</name></type> <name>isMmsFtsSecretTable</name> <init>= <expr><name>name</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>name</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>MMS_FTS_TABLE_NAME</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>name</name><operator>.</operator><name>startsWith</name></name><argument_list>(<argument><expr><name><name>SearchDatabase</name><operator>.</operator><name>MMS_FTS_TABLE_NAME</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><operator>!</operator><name>isSmsFtsSecretTable</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>isMmsFtsSecretTable</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><literal type="string">"table"</literal><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>tables</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>

            <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStatement</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>
      }</block></while>
    }</block></try>

    <return>return <expr><name>tables</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>exportTable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation>   <name>String</name></type> <name>table</name></decl></parameter>,
                                 <parameter><decl><type><annotation>@<name>NonNull</name></annotation>   <name>SQLiteDatabase</name></type> <name>input</name></decl></parameter>,
                                 <parameter><decl><type><annotation>@<name>NonNull</name></annotation>   <name>BackupFrameOutputStream</name></type> <name>outputStream</name></decl></parameter>,
                                 <parameter><decl><type><annotation>@<name>Nullable</name></annotation>  <name><name>Predicate</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></type> <name>predicate</name></decl></parameter>,
                                 <parameter><decl><type><annotation>@<name>Nullable</name></annotation>  <name><name>Consumer</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></type> <name>postProcess</name></decl></parameter>,
                                            <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>template</name> <init>= <expr><literal type="string">"INSERT INTO "</literal> <operator>+</operator> <name>table</name> <operator>+</operator> <literal type="string">" VALUES "</literal></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>input</name><operator>.</operator><name>rawQuery</name></name><argument_list>(<argument><expr><literal type="string">"SELECT * FROM "</literal> <operator>+</operator> <name>table</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <while>while <condition>(<expr><name>cursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>cursor</name><operator>.</operator><name>moveToNext</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>post</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BackupEvent</name><argument_list>(<argument><expr><name><name>BackupEvent</name><operator>.</operator><name>Type</name><operator>.</operator><name>PROGRESS</name></name></expr></argument>, <argument><expr><operator>++</operator><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>predicate</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>predicate</name><operator>.</operator><name>test</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>StringBuilder</name></type>                     <name>statement</name>        <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>(<argument><expr><name>template</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>Builder</name></name></type> <name>statementBuilder</name> <init>= <expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>cursor</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_STRING</name></name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>statementBuilder</name><operator>.</operator><name>addParameters</name></name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStringParamter</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_FLOAT</name></name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>statementBuilder</name><operator>.</operator><name>addParameters</name></name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDoubleParameter</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getDouble</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_INTEGER</name></name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>statementBuilder</name><operator>.</operator><name>addParameters</name></name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setIntegerParameter</name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_BLOB</name></name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>statementBuilder</name><operator>.</operator><name>addParameters</name></name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBlobParameter</name><argument_list>(<argument><expr><call><name><name>ByteString</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getBlob</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Cursor</name><operator>.</operator><name>FIELD_TYPE_NULL</name></name></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>statementBuilder</name><operator>.</operator><name>addParameters</name></name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name><operator>.</operator><name>SqlParameter</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setNullparameter</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
              <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"unknown type?"</literal>  <operator>+</operator> <call><name><name>cursor</name><operator>.</operator><name>getType</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
            }</block></else></if>

            <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>cursor</name><operator>.</operator><name>getColumnCount</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></for>

          <expr_stmt><expr><call><name><name>statement</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>statementBuilder</name><operator>.</operator><name>setStatement</name></name><argument_list>(<argument><expr><call><name><name>statement</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <if>if <condition>(<expr><name>postProcess</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>postProcess</name><operator>.</operator><name>accept</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
      }</block></while>
    }</block></try>

    <return>return <expr><name>count</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>exportAttachment</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Cursor</name></type> <name>cursor</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>BackupFrameOutputStream</name></type> <name>outputStream</name></decl></parameter>)</parameter_list> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>rowId</name>    <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>ROW_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>uniqueId</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>UNIQUE_ID</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>long</name></type> <name>size</name>     <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>SIZE</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>String</name></type> <name>data</name>   <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>DATA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>random</name> <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getBlob</name></name><argument_list>(<argument><expr><call><name><name>cursor</name><operator>.</operator><name>getColumnIndexOrThrow</name></name><argument_list>(<argument><expr><name><name>AttachmentDatabase</name><operator>.</operator><name>DATA_RANDOM</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>calculateVeryOldStreamLength</name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>random</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>random</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>inputStream</name> <operator>=</operator> <call><name><name>ModernDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else                                       <block type="pseudo"><expr_stmt><expr><name>inputStream</name> <operator>=</operator> <call><name><name>ClassicDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentId</name><argument_list>(<argument><expr><name>rowId</name></expr></argument>, <argument><expr><name>uniqueId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></catch></try>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>long</name></type> <name>calculateVeryOldStreamLength</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentSecret</name></type> <name>attachmentSecret</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>random</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>data</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>random</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>random</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">32</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>inputStream</name> <operator>=</operator> <call><name><name>ModernDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                                       <block type="pseudo"><expr_stmt><expr><name>inputStream</name> <operator>=</operator> <call><name><name>ClassicDecryptingPartInputStream</name><operator>.</operator><name>createFor</name></name><argument_list>(<argument><expr><name>attachmentSecret</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>File</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>inputStream</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>buffer</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
      <expr_stmt><expr><name>result</name> <operator>+=</operator> <name>read</name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <specifier>static</specifier> <type><name>boolean</name></type> <name>isForNonExpiringMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SQLiteDatabase</name></type> <name>db</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>mmsId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>columns</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><name><name>MmsDatabase</name><operator>.</operator><name>EXPIRES_IN</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type>   <name>where</name>   <init>= <expr><name><name>MmsDatabase</name><operator>.</operator><name>ID</name></name> <operator>+</operator> <literal type="string">" = ?"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>args</name>    <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{ <expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>mmsId</name></expr></argument>)</argument_list></call></expr> }</block></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>Cursor</name></type> <name>mmsCursor</name> <init>= <expr><call><name><name>db</name><operator>.</operator><name>query</name></name><argument_list>(<argument><expr><name><name>MmsDatabase</name><operator>.</operator><name>TABLE_NAME</name></name></expr></argument>, <argument><expr><name>columns</name></expr></argument>, <argument><expr><name>where</name></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <if>if <condition>(<expr><name>mmsCursor</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mmsCursor</name><operator>.</operator><name>moveToFirst</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>mmsCursor</name><operator>.</operator><name>getLong</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
      }</block></then></if>
    }</block></try>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>


  <class><specifier>private</specifier> <specifier>static</specifier> class <name>BackupFrameOutputStream</name> <super><extends>extends <name>BackupStream</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OutputStream</name></type> <name>outputStream</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Cipher</name></type>       <name>cipher</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Mac</name></type>          <name>mac</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>       <name>cipherKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>       <name>macKey</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>iv</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>counter</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>BackupFrameOutputStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>output</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>passphrase</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <try>try <block>{
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>   <name>salt</name>    <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>   <name>key</name>     <init>= <expr><call><name>getBackupKey</name><argument_list>(<argument><expr><name>passphrase</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>   <name>derived</name> <init>= <expr><operator>new</operator> <call><name>HKDFv3</name><argument_list>()</argument_list></call><operator>.</operator><call><name>deriveSecrets</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"Backup Export"</literal><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index><index>[]</index></name></type> <name>split</name>   <init>= <expr><call><name><name>ByteUtil</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><name>derived</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipherKey</name></name> <operator>=</operator> <name><name>split</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>macKey</name></name>    <operator>=</operator> <name><name>split</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cipher</name></name>       <operator>=</operator> <call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CTR/NoPadding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mac</name></name>          <operator>=</operator> <call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outputStream</name></name> <operator>=</operator> <operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>iv</name></name>           <operator>=</operator> <call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>counter</name></name>      <operator>=</operator> <call><name><name>Conversions</name><operator>.</operator><name>byteArrayToInt</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>macKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>header</name> <init>= <expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setHeader</name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>Header</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                                           <operator>.</operator><call><name>setIv</name><argument_list>(<argument><expr><call><name><name>ByteString</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                                           <operator>.</operator><call><name>setSalt</name><argument_list>(<argument><expr><call><name><name>ByteString</name><operator>.</operator><name>copyFrom</name></name><argument_list>(<argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toByteArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidKeyException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>BackupProtos</name><operator>.</operator><name>SharedPreference</name></name></type> <name>preference</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setPreference</name><argument_list>(<argument><expr><name>preference</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name><name>BackupProtos</name><operator>.</operator><name>SqlStatement</name></name></type> <name>statement</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStatement</name><argument_list>(<argument><expr><name>statement</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>avatarName</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>setAvatar</name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>Avatar</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                                <operator>.</operator><call><name>setName</name><argument_list>(<argument><expr><name>avatarName</name></expr></argument>)</argument_list></call>
                                                                                <operator>.</operator><call><name>setLength</name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                                <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>writeStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>AttachmentId</name></type> <name>attachmentId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>InputStream</name></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>setAttachment</name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>Attachment</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                                                        <operator>.</operator><call><name>setRowId</name><argument_list>(<argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getRowId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                                        <operator>.</operator><call><name>setAttachmentId</name><argument_list>(<argument><expr><call><name><name>attachmentId</name><operator>.</operator><name>getUniqueId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                                        <operator>.</operator><call><name>setLength</name><argument_list>(<argument><expr><call><name><name>Util</name><operator>.</operator><name>toIntExact</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                                                        <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>writeStream</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>writeDatabaseVersion</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call>
                                                  <operator>.</operator><call><name>setVersion</name><argument_list>(<argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>DatabaseVersion</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVersion</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                  <operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>writeEnd</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>outputStream</name></expr></argument>, <argument><expr><call><name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name><operator>.</operator><name>newBuilder</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setEnd</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>build</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>writeStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>InputStream</name></type> <name>inputStream</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>cipherKey</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>buffer</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>read</name></decl>;</decl_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name><name>inputStream</name><operator>.</operator><name>read</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
          <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>ciphertext</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if>if <condition>(<expr><name>ciphertext</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>ciphertext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>ciphertext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></while>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>remainder</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><name>remainder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>attachmentDigest</name> <init>= <expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>attachmentDigest</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> | <type><name>IllegalBlockSizeException</name></type> | <type><name>BadPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>OutputStream</name></type> <name>out</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>BackupProtos</name><operator>.</operator><name>BackupFrame</name></name></type> <name>frame</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>counter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>cipherKey</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>frameCiphertext</name> <init>= <expr><call><name><name>cipher</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><call><name><name>frame</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>frameMac</name>        <init>= <expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>frameCiphertext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>length</name>          <init>= <expr><call><name><name>Conversions</name><operator>.</operator><name>intToByteArray</name></name><argument_list>(<argument><expr><name><name>frameCiphertext</name><operator>.</operator><name>length</name></name> <operator>+</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>frameCiphertext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>out</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>frameMac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InvalidKeyException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> | <type><name>IllegalBlockSizeException</name></type> | <type><name>BadPaddingException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></catch></try>
    }</block></function>


    <function><specifier>public</specifier> <type><name>void</name></type> <name>close</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
      <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
