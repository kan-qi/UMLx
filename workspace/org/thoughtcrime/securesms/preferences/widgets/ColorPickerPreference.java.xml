<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\preferences\widgets\ColorPickerPreference.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>preferences</name><operator>.</operator><name>widgets</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArrayUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>DialogPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceViewHolder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>takisoft</name><operator>.</operator><name>colorpicker</name><operator>.</operator><name>ColorPickerDialog</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>takisoft</name><operator>.</operator><name>colorpicker</name><operator>.</operator><name>ColorPickerDialog</name><operator>.</operator><name>Size</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>takisoft</name><operator>.</operator><name>colorpicker</name><operator>.</operator><name>ColorStateDrawable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>ColorPickerPreference</name> <super><extends>extends <name>DialogPreference</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ColorPickerPreference</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>int</name><index>[]</index></name></type> <name>colors</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>CharSequence</name><index>[]</index></name></type> <name>colorDescriptions</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>columns</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>sortColors</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ImageView</name></type> <name>colorWidget</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>OnPreferenceChangeListener</name></type> <name>listener</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ColorPickerPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleRes</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><name>defStyleRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference</name></name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>colorsId</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getResourceId</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference_colors</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>color_picker_default_colors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>colorsId</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>colors</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntArray</name><argument_list>(<argument><expr><name>colorsId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>colorDescriptions</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getTextArray</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference_colorDescriptions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>color</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference_currentColor</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>columns</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference_columns</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference_colorSize</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sortColors</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ColorPickerPreference_sortColors</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setWidgetLayoutResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>preference_widget_color_swatch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ColorPickerPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"RestrictedApi"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <name>ColorPickerPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><call><name><name>TypedArrayUtils</name><operator>.</operator><name>getAttr</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>dialogPreferenceStyle</name></name></expr></argument>,
                                                 <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>dialogPreferenceStyle</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ColorPickerPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setOnPreferenceChangeListener</name><parameter_list>(<parameter><decl><type><name>OnPreferenceChangeListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnPreferenceChangeListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onBindViewHolder</name><parameter_list>(<parameter><decl><type><name>PreferenceViewHolder</name></type> <name>holder</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBindViewHolder</name></name><argument_list>(<argument><expr><name>holder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>colorWidget</name> <operator>=</operator> <operator>(</operator><name>ImageView</name><operator>)</operator> <call><name><name>holder</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>color_picker_widget</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setColorOnWidget</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setColorOnWidget</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>colorWidget</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Drawable</name><index>[]</index></name></type> <name>colorDrawable</name> <init>= <expr><operator>new</operator> <name><name>Drawable</name><index>[]</index></name>
        <block>{<expr><call><name><name>ContextCompat</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>colorpickerpreference_pref_swatch</name></name></expr></argument>)</argument_list></call></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>colorWidget</name><operator>.</operator><name>setImageDrawable</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ColorStateDrawable</name><argument_list>(<argument><expr><name>colorDrawable</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the current color.
   *
   * @return The current color.
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>color</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the current color.
   *
   * @param color The current color.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setInternalColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns all of the available colors.
   *
   * @return The available colors.
   */</comment>
  <function><specifier>public</specifier> <type><name><name>int</name><index>[]</index></name></type> <name>getColors</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>colors</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the available colors.
   *
   * @param colors The available colors.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setColors</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>colors</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <name>colors</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns whether the available colors should be sorted automatically based on their HSV
   * values.
   *
   * @return Whether the available colors should be sorted automatically based on their HSV
   * values.
   */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isSortColors</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>sortColors</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets whether the available colors should be sorted automatically based on their HSV
   * values. The sorting does not modify the order of the original colors supplied via
   * {@link #setColors(int[])} or the XML attribute {@code app:colors}.
   *
   * @param sortColors Whether the available colors should be sorted automatically based on their
   *                   HSV values.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setSortColors</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>sortColors</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sortColors</name></name> <operator>=</operator> <name>sortColors</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the available colors' descriptions that can be used by accessibility services.
   *
   * @return The available colors' descriptions.
   */</comment>
  <function><specifier>public</specifier> <type><name><name>CharSequence</name><index>[]</index></name></type> <name>getColorDescriptions</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>colorDescriptions</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the available colors' descriptions that can be used by accessibility services.
   *
   * @param colorDescriptions The available colors' descriptions.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setColorDescriptions</name><parameter_list>(<parameter><decl><type><name><name>CharSequence</name><index>[]</index></name></type> <name>colorDescriptions</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colorDescriptions</name></name> <operator>=</operator> <name>colorDescriptions</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the number of columns to be used in the picker dialog for displaying the available
   * colors. If the value is less than or equals to 0, the number of columns will be determined
   * automatically by the system using FlexboxLayoutManager.
   *
   * @return The number of columns to be used in the picker dialog.
   * @see com.google.android.flexbox.FlexboxLayoutManager
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getColumns</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>columns</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the number of columns to be used in the picker dialog for displaying the available
   * colors. If the value is less than or equals to 0, the number of columns will be determined
   * automatically by the system using FlexboxLayoutManager.
   *
   * @param columns The number of columns to be used in the picker dialog. Use 0 to set it to
   *                'auto' mode.
   * @see com.google.android.flexbox.FlexboxLayoutManager
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setColumns</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>columns</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>columns</name></name> <operator>=</operator> <name>columns</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Returns the size of the color swatches in the dialog. It can be either
   * {@link ColorPickerDialog#SIZE_SMALL} or {@link ColorPickerDialog#SIZE_LARGE}.
   *
   * @return The size of the color swatches in the dialog.
   * @see ColorPickerDialog#SIZE_SMALL
   * @see ColorPickerDialog#SIZE_LARGE
   */</comment>
  <function><annotation>@<name>Size</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getSize</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>size</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * Sets the size of the color swatches in the dialog. It can be either
   * {@link ColorPickerDialog#SIZE_SMALL} or {@link ColorPickerDialog#SIZE_LARGE}.
   *
   * @param size The size of the color swatches in the dialog. It can be either
   *             {@link ColorPickerDialog#SIZE_SMALL} or {@link ColorPickerDialog#SIZE_LARGE}.
   * @see ColorPickerDialog#SIZE_SMALL
   * @see ColorPickerDialog#SIZE_LARGE
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setSize</name><parameter_list>(<parameter><decl><type><annotation>@<name>Size</name></annotation> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setInternalColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>force</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>oldColor</name> <init>= <expr><call><name>getPersistedInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>changed</name> <init>= <expr><name>oldColor</name> <operator>!=</operator> <name>color</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>changed</name> <operator>||</operator> <name>force</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>color</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>persistInt</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setColorOnWidget</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onPreferenceChange</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name>notifyChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>Object</name></type> <name>onGetDefaultValue</name><parameter_list>(<parameter><decl><type><name>TypedArray</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>a</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSetInitialValue</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>restoreValue</name></decl></parameter>, <parameter><decl><type><name>Object</name></type> <name>defaultValueObj</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>defaultValue</name> <init>= <expr><operator>(</operator><name>String</name><operator>)</operator> <name>defaultValueObj</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setInternalColor</name><argument_list>(<argument><expr><ternary><condition><expr><name>restoreValue</name></expr> ?</condition><then> <expr><call><name>getPersistedInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class></unit>
