<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\glide\cache\EncryptedGifDrawableResourceEncoder.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>glide</name><operator>.</operator><name>cache</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>EncodeStrategy</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>ResourceEncoder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>Resource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>gif</name><operator>.</operator><name>GifDrawable</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>util</name><operator>.</operator><name>ByteBufferUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>EncryptedGifDrawableResourceEncoder</name> <super><extends>extends <name>EncryptedCoder</name></extends> <implements>implements <name><name>ResourceEncoder</name><argument_list type="generic">&lt;<argument><name>GifDrawable</name></argument>&gt;</argument_list></name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>EncryptedGifDrawableResourceEncoder</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type> <name>secret</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EncryptedGifDrawableResourceEncoder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>secret</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name> <operator>=</operator> <name>secret</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>EncodeStrategy</name></type> <name>getEncodeStrategy</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>EncodeStrategy</name><operator>.</operator><name>TRANSFORMED</name></name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>encode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Resource</name><argument_list type="generic">&lt;<argument><name>GifDrawable</name></argument>&gt;</argument_list></name></type> <name>data</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>file</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>GifDrawable</name></type> <name>drawable</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <init>(<decl><type><name>OutputStream</name></type> <name>outputStream</name> <init>= <expr><call><name>createEncryptedOutputStream</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <expr_stmt><expr><call><name><name>ByteBufferUtil</name><operator>.</operator><name>toStream</name></name><argument_list>(<argument><expr><call><name><name>drawable</name><operator>.</operator><name>getBuffer</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>outputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch>
  }</block></function>
}</block></class>
</unit>
