<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\glide\cache\EncryptedCoder.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>glide</name><operator>.</operator><name>cache</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileInputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>FileOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>OutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidAlgorithmParameterException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>InvalidKeyException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>NoSuchAlgorithmException</name></name>;</import>

<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Cipher</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherInputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>CipherOutputStream</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>Mac</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>NoSuchPaddingException</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>IvParameterSpec</name></name>;</import>
<import>import <name><name>javax</name><operator>.</operator><name>crypto</name><operator>.</operator><name>spec</name><operator>.</operator><name>SecretKeySpec</name></name>;</import>

<class>class <name>EncryptedCoder</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>MAGIC_BYTES</name> <init>= <expr><block>{<expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x91</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x5e</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x6d</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xb4</literal></expr>,
                                       <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x09</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xa6</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x68</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xbe</literal></expr>,
                                       <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xe5</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xb1</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x1b</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xd7</literal></expr>,
                                       <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x29</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xe5</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0x04</literal></expr>, <expr><operator>(</operator><name>byte</name><operator>)</operator><literal type="number">0xcc</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <function><type><name>OutputStream</name></type> <name>createEncryptedOutputStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>masterKey</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>random</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getSecretBytes</name></name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Mac</name></type>    <name>mac</name>    <init>= <expr><call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>masterKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>FileOutputStream</name></type> <name>fileOutputStream</name> <init>= <expr><operator>new</operator> <call><name>FileOutputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>           <name>iv</name>               <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>           <name>key</name>              <init>= <expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CTR/NoPadding"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>ENCRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>fileOutputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>MAGIC_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fileOutputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>random</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>CipherOutputStream</name></type> <name>outputStream</name> <init>= <expr><operator>new</operator> <call><name>CipherOutputStream</name><argument_list>(<argument><expr><name>fileOutputStream</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>outputStream</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>MAGIC_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>outputStream</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>InvalidKeyException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><type><name>InputStream</name></type> <name>createEncryptedInputStream</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>masterKey</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>file</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <try>try <block>{
      <decl_stmt><decl><type><name>Mac</name></type>    <name>mac</name>    <init>= <expr><call><name><name>Mac</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mac</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>masterKey</name></expr></argument>, <argument><expr><literal type="string">"HmacSHA256"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>FileInputStream</name></type> <name>fileInputStream</name>     <init>= <expr><operator>new</operator> <call><name>FileInputStream</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>          <name>theirMagic</name>          <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>MAGIC_BYTES</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>          <name>theirRandom</name>         <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type>          <name>theirEncryptedMagic</name> <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><name><name>MAGIC_BYTES</name><operator>.</operator><name>length</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>fileInputStream</name></expr></argument>, <argument><expr><name>theirMagic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>fileInputStream</name></expr></argument>, <argument><expr><name>theirRandom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>MessageDigest</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>theirMagic</name></expr></argument>, <argument><expr><name>MAGIC_BYTES</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Not an encrypted cache file!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>iv</name>  <init>= <expr><operator>new</operator> <name><name>byte</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>key</name> <init>= <expr><call><name><name>mac</name><operator>.</operator><name>doFinal</name></name><argument_list>(<argument><expr><name>theirRandom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Cipher</name></type> <name>cipher</name> <init>= <expr><call><name><name>Cipher</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><literal type="string">"AES/CTR/NoPadding"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>cipher</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name><name>Cipher</name><operator>.</operator><name>DECRYPT_MODE</name></name></expr></argument>, <argument><expr><operator>new</operator> <call><name>SecretKeySpec</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="string">"AES"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>IvParameterSpec</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>CipherInputStream</name></type> <name>inputStream</name> <init>= <expr><operator>new</operator> <call><name>CipherInputStream</name><argument_list>(<argument><expr><name>fileInputStream</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>readFully</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>theirEncryptedMagic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>MessageDigest</name><operator>.</operator><name>isEqual</name></name><argument_list>(<argument><expr><name>theirEncryptedMagic</name></expr></argument>, <argument><expr><name>MAGIC_BYTES</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>IOException</name><argument_list>(<argument><expr><literal type="string">"Key change on encrypted cache file!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <return>return <expr><name>inputStream</name></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NoSuchAlgorithmException</name></type> | <type><name>InvalidKeyException</name></type> | <type><name>NoSuchPaddingException</name></type> | <type><name>InvalidAlgorithmParameterException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>


}</block></class>
</unit>
