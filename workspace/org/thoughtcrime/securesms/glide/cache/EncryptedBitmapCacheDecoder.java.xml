<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\glide\cache\EncryptedBitmapCacheDecoder.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>glide</name><operator>.</operator><name>cache</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>Options</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>ResourceDecoder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>Resource</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>StreamBitmapDecoder</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>File</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>EncryptedBitmapCacheDecoder</name> <super><extends>extends <name>EncryptedCoder</name></extends> <implements>implements <name><name>ResourceDecoder</name><argument_list type="generic">&lt;<argument><name>File</name></argument>, <argument><name>Bitmap</name></argument>&gt;</argument_list></name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>EncryptedBitmapCacheDecoder</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>StreamBitmapDecoder</name></type> <name>streamBitmapDecoder</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>byte</name><index>[]</index></name></type>              <name>secret</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EncryptedBitmapCacheDecoder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>secret</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>StreamBitmapDecoder</name></type> <name>streamBitmapDecoder</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>secret</name></name>              <operator>=</operator> <name>secret</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>streamBitmapDecoder</name></name> <operator>=</operator> <name>streamBitmapDecoder</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>handles</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Checking item for encrypted Bitmap cache decoder: "</literal> <operator>+</operator> <call><name><name>source</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <init>(<decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name>createEncryptedInputStream</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <return>return <expr><call><name><name>streamBitmapDecoder</name><operator>.</operator><name>handles</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></catch>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>Resource</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>decode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>File</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Options</name></type> <name>options</name></decl></parameter>)</parameter_list>
      <throws>throws <argument><expr><name>IOException</name></expr></argument></throws>
  <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Encrypted Bitmap cache decoder running: "</literal> <operator>+</operator> <call><name><name>source</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <try>try <init>(<decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name>createEncryptedInputStream</name><argument_list>(<argument><expr><name>secret</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <return>return <expr><call><name><name>streamBitmapDecoder</name><operator>.</operator><name>decode</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></try>
  }</block></function>
}</block></class>
</unit>
