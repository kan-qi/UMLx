<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\conversation\ConversationItem.java"><comment type="block">/*
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>ActivityNotFoundException</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Typeface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DimenRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextPaint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>BackgroundColorSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>CharacterStyle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ClickableSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>ForegroundColorSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>URLSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>util</name><operator>.</operator><name>Linkify</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>BindableConversationItem</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ConfirmIdentityDialog</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>MediaPreviewActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>MessageDetailsActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>LinkPreviewView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiTextView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name><operator>.</operator><name>LinkPreview</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name><operator>.</operator><name>LinkPreviewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>DatabaseAttachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>AlertView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>AudioView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>AvatarImageView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ConversationItemFooter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ConversationItemThumbnail</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>DocumentView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>QuoteView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>SharedContactView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MediaMmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>Quote</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>AttachmentDownloadJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>MmsDownloadJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>MmsSendJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>SmsSendJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>ImageSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>Slide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlideClickListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlidesClickedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>TextSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientModifiedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>DynamicTheme</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>LongClickCopySpan</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>LongClickMovementMethod</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SearchUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>views</name><operator>.</operator><name>Stub</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A view that displays an individual conversation item within a conversation
 * thread.  Used by ComposeMessageActivity's ListActivity via a ConversationAdapter.
 *
 * @author Moxie Marlinspike
 *
 */</comment>

<class><specifier>public</specifier> class <name>ConversationItem</name> <super><extends>extends <name>LinearLayout</name></extends>
    <implements>implements <name>RecipientModifiedListener</name>, <name>BindableConversationItem</name></implements></super>
<block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ConversationItem</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_MEASURE_CALLS</name>       <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>MAX_BODY_DISPLAY_LENGTH</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>MessageRecord</name></type> <name>messageRecord</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Locale</name></type>        <name>locale</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>       <name>groupThread</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Recipient</name></type>     <name>recipient</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>GlideRequests</name></type> <name>glideRequests</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>protected</specifier> <type><name>ViewGroup</name></type>              <name>bodyBubble</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>QuoteView</name></type>              <name>quoteView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>EmojiTextView</name></type>          <name>bodyText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>ConversationItemFooter</name></type> <name>footer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>TextView</name></type>               <name>groupSender</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>TextView</name></type>               <name>groupSenderProfileName</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>View</name></type>                   <name>groupSenderHolder</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>AvatarImageView</name></type>        <name>contactPhoto</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>ViewGroup</name></type>              <name>contactPhotoHolder</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>AlertView</name></type>              <name>alertView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>   <type><name>ViewGroup</name></type>              <name>container</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type>              <name>batchSelected</name> <init>= <expr><operator>new</operator> <call><name><name>HashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name>Recipient</name></type>                       <name>conversationRecipient</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>ConversationItemThumbnail</name></argument>&gt;</argument_list></name></type> <name>mediaThumbnailStub</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>AudioView</name></argument>&gt;</argument_list></name></type>                 <name>audioViewStub</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>DocumentView</name></argument>&gt;</argument_list></name></type>              <name>documentViewStub</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>SharedContactView</name></argument>&gt;</argument_list></name></type>         <name>sharedContactStub</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>LinkPreviewView</name></argument>&gt;</argument_list></name></type>           <name>linkPreviewStub</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>EventListener</name></type>                   <name>eventListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>defaultBubbleColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>measureCalls</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>PassthroughClickListener</name></type>        <name>passthroughClickListener</name>    <init>= <expr><operator>new</operator> <call><name>PassthroughClickListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AttachmentDownloadClickListener</name></type> <name>downloadClickListener</name>       <init>= <expr><operator>new</operator> <call><name>AttachmentDownloadClickListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SlideClickPassthroughListener</name></type>   <name>singleDownloadClickListener</name> <init>= <expr><operator>new</operator> <call><name>SlideClickPassthroughListener</name><argument_list>(<argument><expr><name>downloadClickListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedContactEventListener</name></type>      <name>sharedContactEventListener</name>  <init>= <expr><operator>new</operator> <call><name>SharedContactEventListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedContactClickListener</name></type>      <name>sharedContactClickListener</name>  <init>= <expr><operator>new</operator> <call><name>SharedContactClickListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LinkPreviewClickListener</name></type>        <name>linkPreviewClickListener</name>    <init>= <expr><operator>new</operator> <call><name>LinkPreviewClickListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ConversationItem</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ConversationItem</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setOnClickListener</name><parameter_list>(<parameter><decl><type><name>OnClickListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ClickListener</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initializeAttributes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bodyText</name></name>                <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>conversation_item_body</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>footer</name></name>                  <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>conversation_item_footer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupSender</name></name>             <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_message_sender</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupSenderProfileName</name></name>  <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_message_sender_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>alertView</name></name>               <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>indicators_parent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactPhoto</name></name>            <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contact_photo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactPhotoHolder</name></name>      <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contact_photo_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bodyBubble</name></name>              <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>body_bubble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaThumbnailStub</name></name>      <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>image_view_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioViewStub</name></name>           <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>audio_view_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>documentViewStub</name></name>        <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>document_view_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>sharedContactStub</name></name>       <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>shared_contact_view_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>linkPreviewStub</name></name>         <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>link_preview_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupSenderHolder</name></name>       <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>group_sender_holder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quoteView</name></name>               <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quote_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>container</name></name>               <operator>=</operator>            <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setOnClickListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ClickListener</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setMovementMethod</name></name><argument_list>(<argument><expr><call><name><name>LongClickMovementMethod</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>bind</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type>           <name>messageRecord</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previousMessageRecord</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>nextMessageRecord</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type>           <name>glideRequests</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type>                  <name>locale</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type>      <name>batchSelected</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type>               <name>conversationRecipient</name></decl></parameter>,
                   <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type>                 <name>searchQuery</name></decl></parameter>,
                            <parameter><decl><type><name>boolean</name></type>                 <name>pulseHighlight</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageRecord</name></name>          <operator>=</operator> <name>messageRecord</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>locale</name></name>                 <operator>=</operator> <name>locale</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>glideRequests</name></name>          <operator>=</operator> <name>glideRequests</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>batchSelected</name></name>          <operator>=</operator> <name>batchSelected</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conversationRecipient</name></name>  <operator>=</operator> <name>conversationRecipient</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>groupThread</name></name>            <operator>=</operator> <call><name><name>conversationRecipient</name><operator>.</operator><name>isGroupRecipient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name>              <operator>=</operator> <call><name><name>messageRecord</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>recipient</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>conversationRecipient</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setGutterSizes</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setMessageShape</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousMessageRecord</name></expr></argument>, <argument><expr><name>nextMessageRecord</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setMediaAttributes</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousMessageRecord</name></expr></argument>, <argument><expr><name>nextMessageRecord</name></expr></argument>, <argument><expr><name>conversationRecipient</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setInteractionState</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>pulseHighlight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBodyText</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>searchQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setBubbleState</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setStatusIcons</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setContactPhoto</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setGroupMessageStatus</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setAuthor</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousMessageRecord</name></expr></argument>, <argument><expr><name>nextMessageRecord</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setQuote</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousMessageRecord</name></expr></argument>, <argument><expr><name>nextMessageRecord</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setMessageSpacing</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousMessageRecord</name></expr></argument>, <argument><expr><name>nextMessageRecord</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setFooter</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>nextMessageRecord</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>groupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setEventListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>EventListener</name></type> <name>eventListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventListener</name></name> <operator>=</operator> <name>eventListener</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>isInEditMode</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>boolean</name></type> <name>needsMeasure</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>hasQuote</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>quoteWidth</name>     <init>= <expr><call><name><name>quoteView</name><operator>.</operator><name>getMeasuredWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>availableWidth</name> <init>= <expr><call><name>getAvailableMessageBubbleWidth</name><argument_list>(<argument><expr><name>quoteView</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>quoteWidth</name> <operator>!=</operator> <name>availableWidth</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>width</name> <operator>=</operator> <name>availableWidth</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>needsMeasure</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>

    <decl_stmt><decl><type><name>ConversationItemFooter</name></type> <name>activeFooter</name>   <init>= <expr><call><name>getActiveFooter</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>                    <name>availableWidth</name> <init>= <expr><call><name>getAvailableMessageBubbleWidth</name><argument_list>(<argument><expr><name>footer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>activeFooter</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>GONE</name> <operator>&amp;&amp;</operator> <call><name><name>activeFooter</name><operator>.</operator><name>getMeasuredWidth</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>availableWidth</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>activeFooter</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>width</name> <operator>=</operator> <name>availableWidth</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>needsMeasure</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>needsMeasure</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>measureCalls</name> <operator>&lt;</operator> <name>MAX_MEASURE_CALLS</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>measureCalls</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>measure</name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Hit measure() cap of "</literal> <operator>+</operator> <name>MAX_MEASURE_CALLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>measureCalls</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getAvailableMessageBubbleWidth</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>forView</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>availableWidth</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>hasAudio</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>availableWidth</name> <operator>=</operator> <call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getLeftMargin</name></name><argument_list>(<argument><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getRightMargin</name></name><argument_list>(<argument><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>hasThumbnail</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>availableWidth</name> <operator>=</operator> <call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMeasuredWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><name>availableWidth</name> <operator>=</operator> <call><name><name>bodyBubble</name><operator>.</operator><name>getMeasuredWidth</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>bodyBubble</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>bodyBubble</name><operator>.</operator><name>getPaddingRight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>availableWidth</name> <operator>-=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getLeftMargin</name></name><argument_list>(<argument><expr><name>forView</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getRightMargin</name></name><argument_list>(<argument><expr><name>forView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>availableWidth</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeAttributes</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type>      <name>attributes</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>conversation_item_bubble_background</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>TypedArray</name></type> <name>attrs</name>      <init>= <expr><call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>defaultBubbleColor</name> <operator>=</operator> <call><name><name>attrs</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>attrs</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>unbind</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>recipient</name><operator>.</operator><name>removeListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>MessageRecord</name></type> <name>getMessageRecord</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>messageRecord</name></expr>;</return>
  }</block></function>

  <comment type="line">/// MessageRecord Attribute Parsers</comment>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setBubbleState</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bodyBubble</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><name>defaultBubbleColor</name></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>bodyBubble</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toConversationColor</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setAudioViewTint</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>conversationRecipient</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setAudioViewTint</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>DynamicTheme</name><operator>.</operator><name>LIGHT</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getTheme</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTint</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>core_grey_60</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>defaultBubbleColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTint</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>, <argument><expr><name>defaultBubbleColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setTint</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getColor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toConversationColor</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setInteractionState</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>pulseHighlight</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>batchSelected</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setBackgroundResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>conversation_item_background</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setSelected</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>pulseHighlight</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setBackgroundResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>conversation_item_background_animated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setSelected</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>postDelayed</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>setSelected</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name>setSelected</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFocusable</name><argument_list>(<argument><expr><operator>!</operator><call><name>shouldInterceptClicks</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setClickable</name><argument_list>(<argument><expr><operator>!</operator><call><name>shouldInterceptClicks</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLongClickable</name><argument_list>(<argument><expr><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFocusable</name><argument_list>(<argument><expr><operator>!</operator><call><name>shouldInterceptClicks</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setClickable</name><argument_list>(<argument><expr><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setEnabled</name><argument_list>(<argument><expr><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>documentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFocusable</name><argument_list>(<argument><expr><operator>!</operator><call><name>shouldInterceptClicks</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setClickable</name><argument_list>(<argument><expr><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isCaptionlessMms</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasAudio</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAudioSlide</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasThumbnail</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThumbnailSlide</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasOnlyThumbnail</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>hasThumbnail</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasAudio</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasDocument</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasSharedContact</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasDocument</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDocumentSlide</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasExtraText</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>hasTextSlide</name>    <init>= <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>hasOverflowText</name> <init>= <expr><call><name><name>messageRecord</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>MAX_BODY_DISPLAY_LENGTH</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>hasTextSlide</name> <operator>||</operator> <name>hasOverflowText</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasQuote</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getQuote</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasSharedContact</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasLinkPreview</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type>  <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getLinkPreviews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setBodyText</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>searchQuery</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setClickable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_SP</name></name></expr></argument>, <argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getMessageBodyTextSize</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name>isCaptionlessMms</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>Spannable</name></type> <name>styledText</name> <init>= <expr><call><name>linkifyMessageBody</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>styledText</name> <operator>=</operator> <call><name><name>SearchUtil</name><operator>.</operator><name>getHighlightedSpan</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>BackgroundColorSpan</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>YELLOW</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><name>styledText</name></expr></argument>, <argument><expr><name>searchQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>styledText</name> <operator>=</operator> <call><name><name>SearchUtil</name><operator>.</operator><name>getHighlightedSpan</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>ForegroundColorSpan</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><name>styledText</name></expr></argument>, <argument><expr><name>searchQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>hasExtraText</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setOverflowText</name></name><argument_list>(<argument><expr><call><name>getLongMessageSpan</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setOverflowText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>styledText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setMediaAttributes</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type>           <name>messageRecord</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previousRecord</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>nextRecord</name></decl></parameter>,
                                  <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type>               <name>conversationRecipient</name></decl></parameter>,
                                           <parameter><decl><type><name>boolean</name></type>                 <name>isGroupThread</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>boolean</name></type> <name>showControls</name> <init>= <expr><operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>hasSharedContact</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>      <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>documentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setContact</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setEventListener</name><argument_list>(<argument><expr><name>sharedContactEventListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><name>sharedContactClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setSharedContactCorners</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousRecord</name></expr></argument>, <argument><expr><name>nextRecord</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>hasLinkPreview</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>      <block type="pseudo"><expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>documentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>sharedContactStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">//noinspection ConstantConditions</comment>
      <decl_stmt><decl><type><name>LinkPreview</name></type> <name>linkPreview</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getLinkPreviews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>linkPreview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>shouldPromotePreviewImage</name><argument_list>(<argument><expr><call><name><name>linkPreview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setImageResource</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ImageSlide</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>linkPreview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>showControls</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setThumbnailClickListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinkPreviewThumbnailClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDownloadClickListener</name><argument_list>(<argument><expr><name>downloadClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLinkPreview</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>linkPreview</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>setThumbnailCorners</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousRecord</name></expr></argument>, <argument><expr><name>nextRecord</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLinkPreviewCorners</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousRecord</name></expr></argument>, <argument><expr><name>nextRecord</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setLinkPreview</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>linkPreview</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDownloadClickedListener</name><argument_list>(<argument><expr><name>downloadClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>setLinkPreviewCorners</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousRecord</name></expr></argument>, <argument><expr><name>nextRecord</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><name>linkPreviewClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


      <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>hasAudio</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>documentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>sharedContactStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">//noinspection ConstantConditions</comment>
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setAudio</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAudioSlide</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>showControls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDownloadClickListener</name><argument_list>(<argument><expr><name>singleDownloadClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>hasDocument</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>      <block type="pseudo"><expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>sharedContactStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">//noinspection ConstantConditions</comment>
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDocument</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDocumentSlide</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>showControls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDocumentClickListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThumbnailClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDownloadClickListener</name><argument_list>(<argument><expr><name>singleDownloadClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>hasThumbnail</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>     <block type="pseudo"><expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>documentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>sharedContactStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <comment type="line">//noinspection ConstantConditions</comment>
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>thumbnailSlides</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThumbnailSlides</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setImageResource</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>,
                                                <argument><expr><name>thumbnailSlides</name></expr></argument>,
                                                <argument><expr><name>showControls</name></expr></argument>,
                                                <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setThumbnailClickListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThumbnailClickListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDownloadClickListener</name><argument_list>(<argument><expr><name>downloadClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnLongClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setOnClickListener</name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>showShade</name><argument_list>(<argument><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>hasExtraText</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setConversationColor</name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>defaultBubbleColor</name></expr>
                                                                               </then><else>: <expr><call><name><name>messageRecord</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toConversationColor</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setThumbnailCorners</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>previousRecord</name></expr></argument>, <argument><expr><name>nextRecord</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>MATCH_PARENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>audioViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>      <block type="pseudo"><expr_stmt><expr><call><name><name>audioViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>documentViewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><call><name><name>documentViewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>sharedContactStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>groupSenderHolder</name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setThumbnailCorners</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type>           <name>current</name></decl></parameter>,
                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>,
                                   <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>,
                                            <parameter><decl><type><name>boolean</name></type>                 <name>isGroupThread</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>defaultRadius</name>  <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_radius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>collapseRadius</name> <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_collapse_radius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>topLeft</name>     <init>= <expr><name>defaultRadius</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>topRight</name>    <init>= <expr><name>defaultRadius</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bottomLeft</name>  <init>= <expr><name>defaultRadius</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bottomRight</name> <init>= <expr><name>defaultRadius</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>isSingularMessage</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>topLeft</name>     <operator>=</operator> <name>defaultRadius</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>topRight</name>    <operator>=</operator> <name>defaultRadius</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>bottomLeft</name>  <operator>=</operator> <name>defaultRadius</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>bottomRight</name> <operator>=</operator> <name>defaultRadius</name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>bottomRight</name> <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>bottomLeft</name> <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEndOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>topRight</name> <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>topLeft</name> <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if></elseif> <else>else <block>{
      <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>topRight</name>    <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bottomRight</name> <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>topLeft</name>    <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bottomLeft</name> <operator>=</operator> <name>collapseRadius</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>bottomLeft</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bottomRight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>isGroupThread</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>topLeft</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>topRight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>hasQuote</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>topLeft</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>topRight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>hasLinkPreview</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>hasExtraText</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>bottomLeft</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bottomRight</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCorners</name><argument_list>(<argument><expr><name>topLeft</name></expr></argument>, <argument><expr><name>topRight</name></expr></argument>, <argument><expr><name>bottomRight</name></expr></argument>, <argument><expr><name>bottomLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setSharedContactCorners</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isSingularMessage</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isEndOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSingularStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setClusteredOutgoingStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setClusteredIncomingStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setLinkPreviewCorners</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>bigImage</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>defaultRadius</name>  <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_radius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>collapseRadius</name> <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_collapse_radius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>bigImage</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCorners</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>isGroupThread</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCorners</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isSingularMessage</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCorners</name><argument_list>(<argument><expr><name>defaultRadius</name></expr></argument>, <argument><expr><name>defaultRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCorners</name><argument_list>(<argument><expr><name>defaultRadius</name></expr></argument>, <argument><expr><name>collapseRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name><name>linkPreviewStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setCorners</name><argument_list>(<argument><expr><name>collapseRadius</name></expr></argument>, <argument><expr><name>defaultRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setContactPhoto</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>contactPhoto</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><call><name><name>contactPhoto</name><operator>.</operator><name>setAvatar</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>shouldPromotePreviewImage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Attachment</name></type> <name>attachment</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>minWidth</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>media_bubble_min_width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name><name>attachment</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>minWidth</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SpannableString</name></type> <name>linkifyMessageBody</name><parameter_list>(<parameter><decl><type><name>SpannableString</name></type> <name>messageBody</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>shouldLinkifyAllLinks</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type>     <name>linkPattern</name> <init>= <expr><name><name>Linkify</name><operator>.</operator><name>WEB_URLS</name></name> <operator>|</operator> <name><name>Linkify</name><operator>.</operator><name>EMAIL_ADDRESSES</name></name> <operator>|</operator> <name><name>Linkify</name><operator>.</operator><name>PHONE_NUMBERS</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>hasLinks</name>    <init>= <expr><call><name><name>Linkify</name><operator>.</operator><name>addLinks</name></name><argument_list>(<argument><expr><name>messageBody</name></expr></argument>, <argument><expr><ternary><condition><expr><name>shouldLinkifyAllLinks</name></expr> ?</condition><then> <expr><name>linkPattern</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>hasLinks</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>messageBody</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>messageBody</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>URLSpan</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>filterNot</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>url</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>LinkPreviewUtil</name><operator>.</operator><name>isLegalUrl</name></name><argument_list>(<argument><expr><call><name><name>url</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
            <operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><name>messageBody</name><operator>::</operator><name>removeSpan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>URLSpan</name><index>[]</index></name></type> <name>urlSpans</name> <init>= <expr><call><name><name>messageBody</name><operator>.</operator><name>getSpans</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>messageBody</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>URLSpan</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>URLSpan</name></type> <name>urlSpan</name> <range>: <expr><name>urlSpans</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><call><name><name>messageBody</name><operator>.</operator><name>getSpanStart</name></name><argument_list>(<argument><expr><name>urlSpan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name><name>messageBody</name><operator>.</operator><name>getSpanEnd</name></name><argument_list>(<argument><expr><name>urlSpan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>messageBody</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongClickCopySpan</name><argument_list>(<argument><expr><call><name><name>urlSpan</name><operator>.</operator><name>getURL</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>Spanned</name><operator>.</operator><name>SPAN_EXCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
    <return>return <expr><name>messageBody</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setStatusIcons</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>bodyText</name><operator>.</operator><name>setCompoundDrawablesWithIntrinsicBounds</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>messageRecord</name><operator>.</operator><name>isKeyExchange</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_menu_login</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>alertView</name><operator>.</operator><name>setFailed</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isPendingInsecureSmsFallback</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>alertView</name><operator>.</operator><name>setPendingApproval</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name><name>alertView</name><operator>.</operator><name>setNone</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setQuote</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>isMmsNotification</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><name>current</name><operator>)</operator><operator>.</operator><call><name>getQuote</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>Quote</name></type> <name>quote</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><name>current</name><operator>)</operator><operator>.</operator><call><name>getQuote</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <assert>assert <expr><name>quote</name> <operator>!=</operator> <literal type="null">null</literal></expr>;</assert>
      <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setQuote</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><call><name><name>quote</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>quote</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>quote</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>quote</name><operator>.</operator><name>isOriginalMissing</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>quote</name><operator>.</operator><name>getAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>.</operator><name>width</name> <operator>=</operator> <name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>view</name></decl></parameter></parameter_list> -&gt; <block>{
        <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onQuoteClicked</name></name><argument_list>(<argument><expr><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>passthroughClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setOnLongClickListener</name></name><argument_list>(<argument><expr><name>passthroughClickListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setTopCornerSizes</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>isGroupThread</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setTopCornerSizes</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
          <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setTopCornerSizes</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name>isSingularMessage</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setTopCornerSizes</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>setTopCornerSizes</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if></elseif></if>

      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setTopMargin</name></name><argument_list>(<argument><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_bubble_top_padding</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>quoteView</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setTopMargin</name></name><argument_list>(<argument><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setGutterSizes</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>isGroupThread</name> <operator>&amp;&amp;</operator> <call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setLeftMargin</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>conversation_group_left_gutter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setLeftMargin</name></name><argument_list>(<argument><expr><name>container</name></expr></argument>, <argument><expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>conversation_individual_left_gutter</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setFooter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>updateLayoutParams</name></name><argument_list>(<argument><expr><name>footer</name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>, <argument><expr><name><name>LayoutParams</name><operator>.</operator><name>WRAP_CONTENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>footer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>sharedContactStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFooter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFooter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name>boolean</name></type> <name>differentTimestamps</name> <init>= <expr><call><name><name>next</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isSameExtendedRelativeTimestamp</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>current</name><operator>.</operator><name>getExpiresIn</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>isSecure</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>current</name><operator>.</operator><name>isPending</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>current</name><operator>.</operator><name>isPendingInsecureSmsFallback</name></name><argument_list>()</argument_list></call> <operator>||</operator>
        <call><name><name>current</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>differentTimestamps</name> <operator>||</operator> <call><name>isEndOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>ConversationItemFooter</name></type> <name>activeFooter</name> <init>= <expr><call><name>getActiveFooter</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>activeFooter</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>activeFooter</name><operator>.</operator><name>setMessageRecord</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>ConversationItemFooter</name></type> <name>getActiveFooter</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>hasSharedContact</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFooter</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>hasOnlyThumbnail</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>mediaThumbnailStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFooter</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <return>return <expr><name>footer</name></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>readDimen</name><parameter_list>(<parameter><decl><type><annotation>@<name>DimenRes</name></annotation> <name>int</name></type> <name>dimenId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelOffset</name><argument_list>(<argument><expr><name>dimenId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>shouldInterceptClicks</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>(</operator><call><name><name>messageRecord</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isMmsNotification</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
            <call><name><name>messageRecord</name><operator>.</operator><name>isPendingInsecureSmsFallback</name></name><argument_list>()</argument_list></call> <operator>||</operator>
            <call><name><name>messageRecord</name><operator>.</operator><name>isBundleKeyExchange</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"SetTextI18n"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>setGroupMessageStatus</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>, <parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>groupThread</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>groupSender</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>toShortString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>recipient</name><operator>.</operator><name>getName</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getProfileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>groupSenderProfileName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">"~"</literal> <operator>+</operator> <call><name><name>recipient</name><operator>.</operator><name>getProfileName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>groupSenderProfileName</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>groupSenderProfileName</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>groupSenderProfileName</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setAuthor</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>isGroupThread</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>contactPhotoHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
          <operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isSameDay</name></name><argument_list>(<argument><expr><call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>current</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name><name>groupSenderHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>groupSenderHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>next</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>current</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>contactPhoto</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>contactPhoto</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>groupSenderHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>contactPhotoHolder</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>contactPhotoHolder</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setMessageShape</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>background</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name>isSingularMessage</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>background</name> <operator>=</operator> <ternary><condition><expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_sent_alone</name></name></expr>
                                        </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_received_alone</name></name></expr></else></ternary></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>background</name> <operator>=</operator> <ternary><condition><expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_sent_start</name></name></expr>
                                        </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_received_start</name></name></expr></else></ternary></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name>isEndOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>background</name> <operator>=</operator> <ternary><condition><expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_sent_end</name></name></expr>
                                        </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_received_end</name></name></expr></else></ternary></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><name>background</name> <operator>=</operator> <ternary><condition><expr><call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_sent_middle</name></name></expr>
                                        </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>message_bubble_background_received_middle</name></name></expr></else></ternary></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>bodyBubble</name><operator>.</operator><name>setBackgroundResource</name></name><argument_list>(<argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isStartOfMessageCluster</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>isGroupThread</name></expr>)</condition><then> <block>{
      <return>return <expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isSameDay</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
             <operator>!</operator><call><name><name>current</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>!</operator><call><name><name>previous</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isSameDay</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>previous</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isEndOfMessageCluster</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>isGroupThread</name></expr>)</condition><then> <block>{
      <return>return <expr><operator>!</operator><call><name><name>next</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isSameDay</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
             <operator>!</operator><call><name><name>current</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRecipient</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>!</operator><call><name><name>next</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isUpdate</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>DateUtils</name><operator>.</operator><name>isSameDay</name></name><argument_list>(<argument><expr><call><name><name>current</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTimestamp</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
             <call><name><name>current</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>next</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOutgoing</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isSingularMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>isEndOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setMessageSpacing</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>current</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>previous</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isGroupThread</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>spacingTop</name> <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>conversation_vertical_message_spacing_collapse</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>spacingBottom</name> <init>= <expr><name>spacingTop</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>isStartOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>previous</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>spacingTop</name> <operator>=</operator> <call><name>readDimen</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>conversation_vertical_message_spacing_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>isEndOfMessageCluster</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>next</name></expr></argument>, <argument><expr><name>isGroupThread</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>spacingBottom</name> <operator>=</operator> <call><name>readDimen</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>conversation_vertical_message_spacing_default</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setPaddingTop</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>spacingTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setPaddingBottom</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>spacingBottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>readDimen</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>DimenRes</name></annotation> <name>int</name></type> <name>dimenId</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelOffset</name><argument_list>(<argument><expr><name>dimenId</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="line">/// Event handlers</comment>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleApproveIdentity</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>IdentityKeyMismatch</name></argument>&gt;</argument_list></name></type> <name>mismatches</name> <init>= <expr><call><name><name>messageRecord</name><operator>.</operator><name>getIdentityKeyMismatches</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>mismatches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"Identity mismatch count: "</literal> <operator>+</operator> <call><name><name>mismatches</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><operator>new</operator> <call><name>ConfirmIdentityDialog</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><call><name><name>mismatches</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Spannable</name></type> <name>getLongMessageSpan</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>   <name>message</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Runnable</name></type> <name>action</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TextSlide</name></type> <name>slide</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>slide</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTransferState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_read_more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>action</name>  <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>eventListener</name><operator>.</operator><name>onMoreTextClicked</name></name><argument_list>(<argument><expr><call><name><name>conversationRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>slide</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTransferState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_STARTED</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_pending</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>action</name>  <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block>{}</block></lambda></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>slide</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_download_more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>action</name>  <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>singleDownloadClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>bodyText</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_read_more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>action</name>  <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>eventListener</name><operator>.</operator><name>onMoreTextClicked</name></name><argument_list>(<argument><expr><call><name><name>conversationRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_read_more</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>action</name>  <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>eventListener</name><operator>.</operator><name>onMoreTextClicked</name></name><argument_list>(<argument><expr><call><name><name>conversationRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>SpannableStringBuilder</name></type> <name>span</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CharacterStyle</name></type> <name>style</name> <init>= <expr><operator>new</operator> <class><super><name>ClickableSpan</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>widget</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>action</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>updateDrawState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TextPaint</name></type> <name>ds</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ds</name><operator>.</operator><name>setTypeface</name></name><argument_list>(<argument><expr><name><name>Typeface</name><operator>.</operator><name>DEFAULT_BOLD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>span</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><name>style</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>span</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Spanned</name><operator>.</operator><name>SPAN_INCLUSIVE_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>span</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onModified</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Recipient</name></type> <name>modified</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name>setBubbleState</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setContactPhoto</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setGroupMessageStatus</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setAudioViewTint</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>, <argument><expr><name>conversationRecipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>SharedContactEventListener</name> <super><implements>implements <name><name>SharedContactView</name><operator>.</operator><name>EventListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAddToContactsClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onAddToContactsClicked</name></name><argument_list>(<argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>passthroughClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onInviteClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>choices</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onInviteSharedContactClicked</name></name><argument_list>(<argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>passthroughClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onMessageClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>choices</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onMessageSharedContactClicked</name></name><argument_list>(<argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>passthroughClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SharedContactClickListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onSharedContactDetailsClicked</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>sharedContactStub</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAvatarView</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>passthroughClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>LinkPreviewClickListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getLinkPreviews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onLinkPreviewClicked</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getLinkPreviews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>passthroughClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>LinkPreviewThumbnailClickListener</name> <super><implements>implements <name>SlideClickListener</name></implements></super> <block>{
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getLinkPreviews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onLinkPreviewClicked</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getLinkPreviews</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>performClick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>AttachmentDownloadClickListener</name> <super><implements>implements <name>SlidesClickedListener</name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onClick() for attachment download"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMmsNotification</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Scheduling MMS attachment download"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MmsDownloadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                  <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Scheduling push attachment downloads for "</literal> <operator>+</operator> <call><name><name>slides</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" items"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
          <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                            <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>AttachmentDownloadJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                                           <argument><expr><operator>(</operator><operator>(</operator><name>DatabaseAttachment</name><operator>)</operator><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getAttachmentId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></else></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>SlideClickPassthroughListener</name> <super><implements>implements <name>SlideClickListener</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SlidesClickedListener</name></type> <name>original</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>SlideClickPassthroughListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SlidesClickedListener</name></type> <name>original</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>original</name></name> <operator>=</operator> <name>original</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>original</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>ThumbnailClickListener</name> <super><implements>implements <name>SlideClickListener</name></implements></super> <block>{
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>shouldInterceptClicks</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>batchSelected</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>performClick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>MediaPreviewActivity</name><operator>.</operator><name>isContentTypeSupported</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setDataAndType</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>conversationRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>OUTGOING_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>DATE_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getTimestamp</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>SIZE_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>CAPTION_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MediaPreviewActivity</name><operator>.</operator><name>LEFT_IS_RECENT_EXTRA</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Clicked: "</literal> <operator>+</operator> <call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">" , "</literal> <operator>+</operator> <call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Uri</name></type> <name>publicUri</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentPublicUri</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Public URI: "</literal> <operator>+</operator> <name>publicUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_VIEW</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>addFlags</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>FLAG_GRANT_READ_URI_PERMISSION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setDataAndType</name></name><argument_list>(<argument><expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentPublicUri</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <try>try <block>{
          <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>ActivityNotFoundException</name></type> <name>anfe</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No activity existed to view the media."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_unable_to_open_media</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
      }</block></then></if></elseif></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>PassthroughClickListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnLongClickListener</name></name>, <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onLongClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>bodyText</name><operator>.</operator><name>hasSelection</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name>performLongClick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>performClick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>ClickListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>OnClickListener</name></type> <name>parent</name></decl>;</decl_stmt>

    <constructor><name>ClickListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>OnClickListener</name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>parent</name></name> <operator>=</operator> <name>parent</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name>shouldInterceptClicks</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>parent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>MESSAGE_ID_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>THREAD_ID_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getThreadId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>TYPE_EXTRA</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>MmsSmsDatabase</name><operator>.</operator><name>MMS_TRANSPORT</name></name></expr> </then><else>: <expr><name><name>MmsSmsDatabase</name><operator>.</operator><name>SMS_TRANSPORT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>IS_PUSH_GROUP_EXTRA</name></name></expr></argument>, <argument><expr><name>groupThread</name> <operator>&amp;&amp;</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isPush</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>conversationRecipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>context</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isIdentityMismatchFailure</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>handleApproveIdentity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isPendingInsecureSmsFallback</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>handleMessageApproval</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></function>
  }</block></class>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleMessageApproval</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>title</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>message</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_click_to_approve_unencrypted_mms_dialog_title</name></name></expr>;</expr_stmt></block></then>
    <else>else                       <block type="pseudo"><expr_stmt><expr><name>title</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_click_to_approve_unencrypted_sms_dialog_title</name></name></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><name>message</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationItem_click_to_approve_unencrypted_dialog_message</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name> <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>message</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>yes</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MmsDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>markAsInsecure</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>markAsOutbox</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>markAsForcedSms</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>MmsSendJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>SmsDatabase</name></type> <name>database</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>markAsInsecure</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>markAsOutbox</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>database</name><operator>.</operator><name>markAsForcedSms</name></name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call>
                          <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                          <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SmsSendJob</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>,
                                              <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getIndividualRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>no</name></name></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>dialogInterface</name></decl></parameter>, <parameter><decl><name>i</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>markAsSentFailed</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>markAsSentFailed</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
