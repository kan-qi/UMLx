<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\conversation\ConversationFragment.java"><comment type="block">/*
 * Copyright (C) 2015 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>DialogInterface</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>ActivityOptionsCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>LoaderManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>Loader</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AppCompatActivity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>view</name><operator>.</operator><name>ActionMode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name><operator>.</operator><name>OnScrollListener</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>ClipboardManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ApplicationContext</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>MessageDetailsActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>PassphraseRequiredActionBarActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>ShareActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ConversationTypingView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>recyclerview</name><operator>.</operator><name>SmoothScrollingLinearLayoutManager</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name><operator>.</operator><name>LinkPreview</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Menu</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MenuItem</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Window</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ViewSwitcher</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name><operator>.</operator><name>ConversationAdapter</name><operator>.</operator><name>HeaderViewHolder</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>conversation</name><operator>.</operator><name>ConversationAdapter</name><operator>.</operator><name>ItemClickListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>ContactUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>SharedContactDetailsActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contactshare</name><operator>.</operator><name>Contact</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsSmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>RecipientDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>loaders</name><operator>.</operator><name>ConversationLoader</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MediaMmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>jobs</name><operator>.</operator><name>DirectoryRefreshJob</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>longmessage</name><operator>.</operator><name>LongMessageActivity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name><operator>.</operator><name>Media</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>OutgoingMediaMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>Slide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>profiles</name><operator>.</operator><name>UnknownSenderView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>MessageSender</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>sms</name><operator>.</operator><name>OutgoingTextMessage</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>CommunicationActions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SaveAttachmentTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>StickyHeaderDecoration</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SimpleTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>task</name><operator>.</operator><name>ProgressDialogAsyncTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>ConversationFragment</name> <super><extends>extends <name>Fragment</name></extends>
  <implements>implements <name><name>LoaderManager</name><operator>.</operator><name><name>LoaderCallbacks</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></name></implements></super>
<block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>       <init>= <expr><call><name><name>ConversationFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LIMIT</name> <init>= <expr><literal type="string">"limit"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>PARTIAL_CONVERSATION_LIMIT</name> <init>= <expr><literal type="number">500</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SCROLL_ANIMATION_THRESHOLD</name> <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>CODE_ADD_EDIT_CONTACT</name>      <init>= <expr><literal type="number">77</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ActionModeCallback</name></type> <name>actionModeCallback</name>     <init>= <expr><operator>new</operator> <call><name>ActionModeCallback</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ItemClickListener</name></type>  <name>selectionClickListener</name> <init>= <expr><operator>new</operator> <call><name>ConversationFragmentItemClickListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ConversationFragmentListener</name></type> <name>listener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Recipient</name></type>                   <name>recipient</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>                        <name>threadId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>                        <name>lastSeen</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                         <name>startingPosition</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                         <name>previousOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                         <name>activeOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>                     <name>firstLoad</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>                        <name>loaderStartTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ActionMode</name></type>                  <name>actionMode</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Locale</name></type>                      <name>locale</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type>                <name>list</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>RecyclerView</name><operator>.</operator><name>ItemDecoration</name></name></type> <name>lastSeenDecoration</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewSwitcher</name></type>                <name>topLoadMoreView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewSwitcher</name></type>                <name>bottomLoadMoreView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ConversationTypingView</name></type>      <name>typingView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>UnknownSenderView</name></type>           <name>unknownSenderView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                        <name>composeDivider</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                        <name>scrollToBottomButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>                    <name>scrollDateHeader</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>icicle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>icicle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>locale</name></name> <operator>=</operator> <operator>(</operator><name>Locale</name><operator>)</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSerializable</name><argument_list>(<argument><expr><name><name>PassphraseRequiredActionBarActivity</name><operator>.</operator><name>LOCALE_EXTRA</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>conversation_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>list</name>                 <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>composeDivider</name>       <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>compose_divider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scrollToBottomButton</name> <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scroll_to_bottom_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scrollDateHeader</name>     <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scroll_date_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scrollToBottomButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>scrollToBottom</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>LinearLayoutManager</name></type> <name>layoutManager</name> <init>= <expr><operator>new</operator> <call><name>SmoothScrollingLinearLayoutManager</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setHasFixedSize</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><name>layoutManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setItemAnimator</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>topLoadMoreView</name>    <operator>=</operator> <operator>(</operator><name>ViewSwitcher</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>load_more_header</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bottomLoadMoreView</name> <operator>=</operator> <operator>(</operator><name>ViewSwitcher</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>load_more_header</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeLoadMoreView</name><argument_list>(<argument><expr><name>topLoadMoreView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeLoadMoreView</name><argument_list>(<argument><expr><name>bottomLoadMoreView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>typingView</name> <operator>=</operator> <operator>(</operator><name>ConversationTypingView</name><operator>)</operator> <call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>conversation_typing_view</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>view</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onActivityCreated</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>bundle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityCreated</name></name><argument_list>(<argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initializeResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeListAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onAttach</name><parameter_list>(<parameter><decl><type><name>Activity</name></type> <name>activity</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttach</name></name><argument_list>(<argument><expr><name>activity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <operator>(</operator><name>ConversationFragmentListener</name><operator>)</operator><name>activity</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onStart</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStart</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeTypingObserver</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onStop</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onStop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypingStatusRepository</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypists</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>removeObservers</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onNewIntent</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>actionMode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>initializeResources</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initializeListAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>threadId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getLoaderManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>restartLoader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Bundle</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>reloadList</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>getLoaderManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>restartLoader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Bundle</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>moveToLastSeen</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>lastSeen</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No need to move to last seen."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name>list</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getListAdapter</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Tried to move to last seen position, but we hadn't initialized the view yet."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findLastSeenPosition</name><argument_list>(<argument><expr><name>lastSeen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scrollToLastSeenPosition</name><argument_list>(<argument><expr><name>position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeResources</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name>         <operator>=</operator> <call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelableExtra</name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name>          <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLongExtra</name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>THREAD_ID_EXTRA</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastSeen</name></name>          <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLongExtra</name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>LAST_SEEN_EXTRA</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startingPosition</name></name>  <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>getActivity</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntent</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntExtra</name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>STARTING_POSITION_EXTRA</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>firstLoad</name></name>         <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unknownSenderView</name></name> <operator>=</operator> <operator>new</operator> <call><name>UnknownSenderView</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>OnScrollListener</name></type> <name>scrollListener</name> <init>= <expr><operator>new</operator> <call><name>ConversationScrollListener</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addOnScrollListener</name></name><argument_list>(<argument><expr><name>scrollListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeListAdapter</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>ConversationAdapter</name></type> <name>adapter</name> <init>= <expr><operator>new</operator> <call><name>ConversationAdapter</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><name>selectionClickListener</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>recipient</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>StickyHeaderDecoration</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setLastSeen</name><argument_list>(<argument><expr><name>lastSeen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getLoaderManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>restartLoader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Bundle</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeLoadMoreView</name><parameter_list>(<parameter><decl><type><name>ViewSwitcher</name></type> <name>loadMoreView</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>loadMoreView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putInt</name></name><argument_list>(<argument><expr><name>KEY_LIMIT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getLoaderManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>restartLoader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>args</name></expr></argument>, <argument><expr><name><name>ConversationFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>loadMoreView</name><operator>.</operator><name>showNext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>loadMoreView</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeTypingObserver</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isTypingIndicatorsEnabled</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getTypingStatusRepository</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTypists</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>observe</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>typingState</name></decl></parameter></parameter_list> -&gt;  <block>{
      <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type>         <name>replacedByIncomingMessage</name></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>typingState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>recipients</name>                <operator>=</operator> <call><name><name>typingState</name><operator>.</operator><name>getTypists</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>replacedByIncomingMessage</name> <operator>=</operator> <call><name><name>typingState</name><operator>.</operator><name>isReplacedByIncomingMessage</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>recipients</name>                <operator>=</operator> <call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>replacedByIncomingMessage</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name><name>typingView</name><operator>.</operator><name>setTypists</name></name><argument_list>(<argument><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name><name>ConversationFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>recipients</name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>isGroupRecipient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>ConversationAdapter</name></type> <name>adapter</name> <init>= <expr><call><name>getListAdapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderView</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>adapter</name><operator>.</operator><name>getHeaderView</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>typingView</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Skipping typing indicator -- the header slot is occupied."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>recipients</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderView</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>isAtBottom</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setVerticalScrollBarEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>smoothScrollToPosition</name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>list</name><operator>.</operator><name>setVerticalScrollBarEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><name>typingView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyItemInserted</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderView</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><name>typingView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyItemInserted</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else  <block>{
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><name>typingView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyItemChanged</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
        }</block></else></if>
      }</block></then> <else>else <block>{
        <if>if <condition>(<expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirstCompletelyVisibleItemPosition</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>replacedByIncomingMessage</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>smoothScrollToPosition</name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">250</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>setVerticalScrollBarEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyItemRemoved</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>list</name><operator>.</operator><name>setVerticalScrollBarEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></lambda></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>replacedByIncomingMessage</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyItemRemoved</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
          <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setCorrectMenuVisibility</name><parameter_list>(<parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>messageRecords</name> <init>= <expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItems</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>            <name>actionMessage</name>  <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>            <name>hasText</name>        <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>            <name>sharedContact</name>  <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>actionMode</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>messageRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <for>for <control>(<init><decl><type><name>MessageRecord</name></type> <name>messageRecord</name> <range>: <expr><name>messageRecords</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isGroupAction</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isCallLog</name></name><argument_list>()</argument_list></call> <operator>||</operator>
          <call><name><name>messageRecord</name><operator>.</operator><name>isJoined</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isExpirationTimerUpdate</name></name><argument_list>()</argument_list></call> <operator>||</operator>
          <call><name><name>messageRecord</name><operator>.</operator><name>isEndSession</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isIdentityUpdate</name></name><argument_list>()</argument_list></call> <operator>||</operator>
          <call><name><name>messageRecord</name><operator>.</operator><name>isIdentityVerified</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>messageRecord</name><operator>.</operator><name>isIdentityDefault</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>actionMessage</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>hasText</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>getSharedContacts</name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>sharedContact</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <if>if <condition>(<expr><call><name><name>messageRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_forward</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_reply</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_details</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_save_attachment</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_resend</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>MessageRecord</name></type> <name>messageRecord</name> <init>= <expr><call><name><name>messageRecords</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_resend</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_save_attachment</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>actionMessage</name>                     <operator>&amp;&amp;</operator>
                                                                  <call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call>              <operator>&amp;&amp;</operator>
                                                                  <operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isMmsNotification</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                                                                  <operator>(</operator><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><name>messageRecord</name><operator>)</operator><operator>.</operator><call><name>containsMediaSlide</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_forward</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>actionMessage</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>sharedContact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_details</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>actionMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_reply</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>actionMessage</name>             <operator>&amp;&amp;</operator>
                                                        <operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isPending</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
                                                        <operator>!</operator><call><name><name>messageRecord</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call>  <operator>&amp;&amp;</operator>
                                                        <call><name><name>messageRecord</name><operator>.</operator><name>isSecure</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name><name>menu</name><operator>.</operator><name>findItem</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_copy</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setVisible</name><argument_list>(<argument><expr><operator>!</operator><name>actionMessage</name> <operator>&amp;&amp;</operator> <name>hasText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>ConversationAdapter</name></type> <name>getListAdapter</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>ConversationAdapter</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>SmoothScrollingLinearLayoutManager</name></type> <name>getListLayoutManager</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>SmoothScrollingLinearLayoutManager</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>MessageRecord</name></type> <name>getSelectedMessageRecord</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>messageRecords</name> <init>= <expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItems</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>messageRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>messageRecords</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>next</name><argument_list>()</argument_list></call></expr>;</return></block></then>
    <else>else                            <block type="pseudo"><throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw></block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>reload</name><parameter_list>(<parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipient</name></name> <operator>=</operator> <name>recipient</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>!=</operator> <name>threadId</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>initializeListAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>scrollToBottom</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirstVisibleItemPosition</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <name>SCROLL_ANIMATION_THRESHOLD</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>smoothScrollToPosition</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>scrollToPosition</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLastSeen</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>lastSeen</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastSeen</name></name> <operator>=</operator> <name>lastSeen</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>lastSeenDecoration</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>removeItemDecoration</name></name><argument_list>(<argument><expr><name>lastSeenDecoration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>lastSeenDecoration</name> <operator>=</operator> <operator>new</operator> <call><name><name>ConversationAdapter</name><operator>.</operator><name>LastSeenHeader</name></name><argument_list>(<argument><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lastSeen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>addItemDecoration</name></name><argument_list>(<argument><expr><name>lastSeenDecoration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleCopyMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>messageRecords</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>messageList</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>messageRecords</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>messageList</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>MessageRecord</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
        <if>if      <condition>(<expr><call><name><name>lhs</name><operator>.</operator><name>getDateReceived</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>rhs</name><operator>.</operator><name>getDateReceived</name></name><argument_list>()</argument_list></call></expr>)</condition><then>  <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then>
        <elseif>else <if>if <condition>(<expr><call><name><name>lhs</name><operator>.</operator><name>getDateReceived</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rhs</name><operator>.</operator><name>getDateReceived</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if></elseif>
        <else>else                                                     <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></else></if>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringBuilder</name></type>    <name>bodyBuilder</name> <init>= <expr><operator>new</operator> <call><name>StringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ClipboardManager</name></type> <name>clipboard</name>   <init>= <expr><operator>(</operator><name>ClipboardManager</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>CLIPBOARD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>MessageRecord</name></type> <name>messageRecord</name> <range>: <expr><name>messageList</name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>body</name> <init>= <expr><call><name><name>messageRecord</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>bodyBuilder</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><name>body</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><call><name><name>bodyBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>bodyBuilder</name><operator>.</operator><name>charAt</name></name><argument_list>(<argument><expr><call><name><name>bodyBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bodyBuilder</name><operator>.</operator><name>deleteCharAt</name></name><argument_list>(<argument><expr><call><name><name>bodyBuilder</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr><call><name><name>bodyBuilder</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name><name>clipboard</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDeleteMessages</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>messageRecords</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type>                 <name>messagesCount</name> <init>= <expr><call><name><name>messageRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name></type> <name>builder</name>       <init>= <expr><operator>new</operator> <call><name><name>AlertDialog</name><operator>.</operator><name>Builder</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setIconAttribute</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>dialog_alert_icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>ConversationFragment_delete_selected_messages</name></name></expr></argument>, <argument><expr><name>messagesCount</name></expr></argument>, <argument><expr><name>messagesCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setMessage</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>ConversationFragment_this_will_permanently_delete_all_n_selected_messages</name></name></expr></argument>, <argument><expr><name>messagesCount</name></expr></argument>, <argument><expr><name>messagesCount</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setCancelable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setPositiveButton</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>delete</name></name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><operator>new</operator> <class><super><name><name>ProgressDialogAsyncTask</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                                                               <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationFragment_deleting</name></name></expr></argument>,
                                                               <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationFragment_deleting_messages</name></name></expr></argument>)</argument_list>
        <block>{
          <function><annotation>@<name>Override</name></annotation>
          <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name><modifier>...</modifier></type> <name>messageRecords</name></decl></parameter>)</parameter_list> <block>{
            <for>for <control>(<init><decl><type><name>MessageRecord</name></type> <name>messageRecord</name> <range>: <expr><name>messageRecords</name></expr></range></decl></init>)</control> <block>{
              <decl_stmt><decl><type><name>boolean</name></type> <name>threadDeleted</name></decl>;</decl_stmt>

              <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>threadDeleted</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsDatabase</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>delete</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then> <else>else <block>{
                <expr_stmt><expr><name>threadDeleted</name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>deleteMessage</name><argument_list>(<argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></else></if>

              <if>if <condition>(<expr><name>threadDeleted</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>threadId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>setThreadId</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></then></if>
            }</block></for>

            <return>return <expr><literal type="null">null</literal></expr>;</return>
          }</block></function>
        }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><call><name><name>messageRecords</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>MessageRecord</name><index>[<expr><call><name><name>messageRecords</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>setNegativeButton</name></name><argument_list>(<argument><expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>cancel</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>builder</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleDisplayDetails</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>MESSAGE_ID_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>THREAD_ID_EXTRA</name></name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>TYPE_EXTRA</name></name></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>message</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>MmsSmsDatabase</name><operator>.</operator><name>MMS_TRANSPORT</name></name></expr> </then><else>: <expr><name><name>MmsSmsDatabase</name><operator>.</operator><name>SMS_TRANSPORT</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>ADDRESS_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>MessageDetailsActivity</name><operator>.</operator><name>IS_PUSH_GROUP_EXTRA</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>isGroupRecipient</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>message</name><operator>.</operator><name>isPush</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleForwardMessage</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>SimpleTask</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><call><name>getLifecycle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name>Intent</name></type> <name>composeIntent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ShareActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TEXT</name></name></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getDisplayBody</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>message</name><operator>.</operator><name>isMms</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>MmsMessageRecord</name></type> <name>mediaMessage</name> <init>= <expr><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <name>message</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type>          <name>isAlbum</name>      <init>= <expr><call><name><name>mediaMessage</name><operator>.</operator><name>containsMediaSlide</name></name><argument_list>()</argument_list></call>                   <operator>&amp;&amp;</operator>
                                        <call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal>  <operator>&amp;&amp;</operator>
                                        <call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAudioSlide</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
                                        <call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDocumentSlide</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>isAlbum</name></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Media</name></argument>&gt;</argument_list></name></type> <name>mediaList</name>   <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                               <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>s</name><operator>.</operator><name>hasImage</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>hasVideo</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                               <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Slide</name><operator>::</operator><name>asAttachment</name></expr></argument>)</argument_list></call>
                                               <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <for>for <control>(<init><decl><type><name>Attachment</name></type> <name>attachment</name> <range>: <expr><name>attachments</name></expr></range></decl></init>)</control> <block>{
            <decl_stmt><decl><type><name>Uri</name></type> <name>uri</name> <init>= <expr><ternary><condition><expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>attachment</name><operator>.</operator><name>getDataUri</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name><name>attachment</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <if>if <condition>(<expr><name>uri</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
              <expr_stmt><expr><call><name><name>mediaList</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Media</name><argument_list>(<argument><expr><name>uri</name></expr></argument>,
                                      <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>attachment</name><operator>.</operator><name>getSize</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>attachment</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
          }</block></for><empty_stmt>;</empty_stmt>

          <if>if <condition>(<expr><operator>!</operator><call><name><name>mediaList</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ConversationActivity</name><operator>.</operator><name>MEDIA_EXTRA</name></name></expr></argument>, <argument><expr><name>mediaList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>mediaMessage</name><operator>.</operator><name>containsMediaSlide</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>Slide</name></type> <name>slide</name> <init>= <expr><call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_STREAM</name></name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <if>if <condition>(<expr><call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUri</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <try>try <init>(<decl><type><name>InputStream</name></type> <name>stream</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><call><name>requireContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>mediaMessage</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>fullBody</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>readFullyAsString</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>composeIntent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>EXTRA_TEXT</name></name></expr></argument>, <argument><expr><name>fullBody</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to read long message text when forwarding."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></catch>
        }</block></then></if>
      }</block></then></if>

      <return>return <expr><name>composeIntent</name></expr>;</return>
    }</block></lambda></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>startActivity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleResendMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MessageRecord</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name><modifier>...</modifier></type> <name>messageRecords</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>MessageSender</name><operator>.</operator><name>resend</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>messageRecords</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></function>
    }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleReplyMessage</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MessageRecord</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>handleReplyMessage</name></name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleSaveAttachment</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MediaMmsMessageRecord</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>SaveAttachmentTask</name><operator>.</operator><name>showWarningDialog</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>DialogInterface</name><operator>.</operator><name>OnClickListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>DialogInterface</name></type> <name>dialog</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>which</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>SaveAttachmentTask</name><operator>.</operator><name>Attachment</name></name></argument>&gt;</argument_list></name></type> <name>attachments</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>message</name><operator>.</operator><name>getSlideDeck</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlides</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                                                                <operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>s</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>s</name><operator>.</operator><name>hasImage</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>hasVideo</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>hasAudio</name></name><argument_list>()</argument_list></call> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>hasDocument</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></block></lambda></expr></argument>)</argument_list></call>
                                                                <operator>.</operator><call><name>map</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name><name>SaveAttachmentTask</name><operator>.</operator><name>Attachment</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getContentType</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>message</name><operator>.</operator><name>getDateReceived</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>getFileName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>orNull</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call>
                                                                <operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>Util</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>SaveAttachmentTask</name></type> <name>saveTask</name> <init>= <expr><operator>new</operator> <call><name>SaveAttachmentTask</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>saveTask</name><operator>.</operator><name>executeOnExecutor</name></name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>, <argument><expr><call><name><name>attachments</name><operator>.</operator><name>toArray</name></name><argument_list>(<argument><expr><operator>new</operator> <name><name>SaveAttachmentTask</name><operator>.</operator><name>Attachment</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"No slide with attachable media found, failing nicely."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>,
                       <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>ConversationFragment_error_while_saving_attachments_to_sd_card</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                       <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></type> <name>onCreateLoader</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCreateLoader"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>loaderStartTime</name> <operator>=</operator> <call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>limit</name>  <init>= <expr><call><name><name>args</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name>KEY_LIMIT</name></expr></argument>, <argument><expr><name>PARTIAL_CONVERSATION_LIMIT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>limit</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>startingPosition</name> <operator>&gt;=</operator> <name>limit</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>startingPosition</name> <operator>-</operator> <operator>(</operator><name>limit</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>startingPosition</name> <operator>-=</operator> <name>offset</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><operator>new</operator> <call><name>ConversationLoader</name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>, <argument><expr><name>lastSeen</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onLoadFinished</name><parameter_list>(<parameter><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></type> <name>cursorLoader</name></decl></parameter>, <parameter><decl><type><name>Cursor</name></type> <name>cursor</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>loadTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>loaderStartTime</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>  <name>count</name>    <init>= <expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onLoadFinished - took "</literal> <operator>+</operator> <name>loadTime</name> <operator>+</operator> <literal type="string">" ms to load a cursor of size "</literal> <operator>+</operator> <name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ConversationLoader</name></type> <name>loader</name> <init>= <expr><operator>(</operator><name>ConversationLoader</name><operator>)</operator><name>cursorLoader</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ConversationAdapter</name></type> <name>adapter</name> <init>= <expr><call><name>getListAdapter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>adapter</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>cursor</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>PARTIAL_CONVERSATION_LIMIT</name> <operator>&amp;&amp;</operator> <call><name><name>loader</name><operator>.</operator><name>hasLimit</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setFooterView</name></name><argument_list>(<argument><expr><name>topLoadMoreView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setFooterView</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>lastSeen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setLastSeen</name><argument_list>(<argument><expr><call><name><name>loader</name><operator>.</operator><name>getLastSeen</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>loader</name><operator>.</operator><name>hasSent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>recipient</name><operator>.</operator><name>isSystemContact</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>recipient</name><operator>.</operator><name>isGroupRecipient</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>recipient</name><operator>.</operator><name>getRegistered</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecipientDatabase</name><operator>.</operator><name>RegisteredState</name><operator>.</operator><name>REGISTERED</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><name>unknownSenderView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>clearHeaderIfNotTyping</name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>loader</name><operator>.</operator><name>hasOffset</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><name>bottomLoadMoreView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>firstLoad</name> <operator>||</operator> <call><name><name>loader</name><operator>.</operator><name>hasOffset</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>previousOffset</name> <operator>=</operator> <call><name><name>loader</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>activeOffset</name> <operator>=</operator> <call><name><name>loader</name><operator>.</operator><name>getOffset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>changeCursor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>lastSeenPosition</name> <init>= <expr><call><name><name>adapter</name><operator>.</operator><name>findLastSeenPosition</name></name><argument_list>(<argument><expr><name>lastSeen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderView</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>typingView</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>lastSeenPosition</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>lastSeenPosition</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>firstLoad</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>startingPosition</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>scrollToStartingPosition</name><argument_list>(<argument><expr><name>startingPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>scrollToLastSeenPosition</name><argument_list>(<argument><expr><name>lastSeenPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><name>firstLoad</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>previousOffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>scrollPosition</name> <init>= <expr><name>previousOffset</name> <operator>+</operator> <call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirstVisibleItemPosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>scrollPosition</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>scrollPosition</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>View</name></type> <name>firstView</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getChildAt</name><argument_list>(<argument><expr><name>scrollPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>pixelOffset</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>firstView</name> <operator>==</operator> <literal type="null">null</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><call><name><name>firstView</name><operator>.</operator><name>getBottom</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>list</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>scrollToPositionWithOffset</name><argument_list>(<argument><expr><name>scrollPosition</name></expr></argument>, <argument><expr><name>pixelOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>previousOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <if>if <condition>(<expr><name>lastSeenPosition</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setLastSeen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>clearHeaderIfNotTyping</name><parameter_list>(<parameter><decl><type><name>ConversationAdapter</name></type> <name>adapter</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>adapter</name><operator>.</operator><name>getHeaderView</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>typingView</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setHeaderView</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onLoaderReset</name><parameter_list>(<parameter><decl><type><name><name>Loader</name><argument_list type="generic">&lt;<argument><name>Cursor</name></argument>&gt;</argument_list></name></type> <name>arg0</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>changeCursor</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>stageOutgoingMessage</name><parameter_list>(<parameter><decl><type><name>OutgoingMediaMessage</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>MessageRecord</name></type> <name>messageRecord</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>readerFor</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCurrent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>getListAdapter</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>clearHeaderIfNotTyping</name><argument_list>(<argument><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setLastSeen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addFastRecord</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>long</name></type> <name>stageOutgoingMessage</name><parameter_list>(<parameter><decl><type><name>OutgoingTextMessage</name></type> <name>message</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>MessageRecord</name></type> <name>messageRecord</name> <init>= <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>readerFor</name><argument_list>(<argument><expr><name>message</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCurrent</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>getListAdapter</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>clearHeaderIfNotTyping</name><argument_list>(<argument><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setLastSeen</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addFastRecord</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><call><name><name>messageRecord</name><operator>.</operator><name>getId</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>releaseOutgoingMessage</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>getListAdapter</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>releaseFastRecord</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>scrollToStartingPosition</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>startingPosition</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>scrollToPosition</name><argument_list>(<argument><expr><name>startingPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pulseHighlightItem</name><argument_list>(<argument><expr><name>startingPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>scrollToLastSeenPosition</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>lastSeenPosition</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>lastSeenPosition</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>scrollToPositionWithOffset</name><argument_list>(<argument><expr><name>lastSeenPosition</name></expr></argument>, <argument><expr><call><name><name>list</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAtBottom</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>list</name><operator>.</operator><name>getChildCount</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>firstVisiblePosition</name> <init>= <expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirstVisibleItemPosition</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getHeaderView</name><argument_list>()</argument_list></call> <operator>==</operator> <name>typingView</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>RecyclerView</name><operator>.</operator><name>ViewHolder</name></name></type> <name>item1</name> <init>= <expr><call><name><name>list</name><operator>.</operator><name>findViewHolderForAdapterPosition</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><name>firstVisiblePosition</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>item1</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>item1</name><operator>.</operator><name>itemView</name><operator>.</operator><name>getBottom</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>list</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then></if>

    <return>return <expr><name>firstVisiblePosition</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>list</name><operator>.</operator><name>getChildAt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getBottom</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <call><name><name>list</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onSearchQueryUpdated</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>String</name></type> <name>query</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>getListAdapter</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>onSearchQueryUpdated</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>jumpToMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>timestamp</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>onMessageNotFound</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>SimpleTask</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><call><name>getLifecycle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                            <operator>.</operator><call><name>getMessagePositionInConversation</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>author</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></lambda></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>moveToMessagePosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>onMessageNotFound</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>moveToMessagePosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>onMessageNotFound</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Moving to message position: "</literal> <operator>+</operator> <name>position</name> <operator>+</operator> <literal type="string">"  activeOffset: "</literal> <operator>+</operator> <name>activeOffset</name> <operator>+</operator> <literal type="string">"  cursorCount: "</literal> <operator>+</operator> <call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCursorCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>position</name> <operator>&gt;=</operator> <name>activeOffset</name> <operator>&amp;&amp;</operator> <name>position</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;</operator> <call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getCursorCount</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><ternary><condition><expr><name>activeOffset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>activeOffset</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>scrollToPosition</name></name><argument_list>(<argument><expr><name>position</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>pulseHighlightItem</name><argument_list>(<argument><expr><name>position</name> <operator>-</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Tried to navigate to message, but it wasn't found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>onMessageNotFound</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>onMessageNotFound</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Message was outside of the loaded range. Need to restart the loader."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>firstLoad</name>        <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>startingPosition</name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getLoaderManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>restartLoader</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>Bundle</name><operator>.</operator><name>EMPTY</name></name></expr></argument>, <argument><expr><name><name>ConversationFragment</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>ConversationFragmentListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>setThreadId</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>handleReplyMessage</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onMessageActionToolbarOpened</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> class <name>ConversationScrollListener</name> <super><extends>extends <name>OnScrollListener</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Animation</name></type>              <name>scrollButtonInAnimation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Animation</name></type>              <name>scrollButtonOutAnimation</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ConversationDateHeader</name></type> <name>conversationDateHeader</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>wasAtBottom</name>           <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>wasAtZoomScrollHeight</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type>    <name>lastPositionId</name>        <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>ConversationScrollListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scrollButtonInAnimation</name></name>  <operator>=</operator> <call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_scale_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scrollButtonOutAnimation</name></name> <operator>=</operator> <call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>fade_scale_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conversationDateHeader</name></name>   <operator>=</operator> <operator>new</operator> <call><name>ConversationDateHeader</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>scrollDateHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>scrollButtonInAnimation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>scrollButtonOutAnimation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScrolled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>rv</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>boolean</name></type> <name>currentlyAtBottom</name>           <init>= <expr><call><name>isAtBottom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>boolean</name></type> <name>currentlyAtZoomScrollHeight</name> <init>= <expr><call><name>isAtZoomScrollHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type>     <name>positionId</name>                  <init>= <expr><call><name>getHeaderPositionId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>currentlyAtBottom</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wasAtBottom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>composeDivider</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>animateOut</name></name><argument_list>(<argument><expr><name>scrollToBottomButton</name></expr></argument>, <argument><expr><name>scrollButtonOutAnimation</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><name>currentlyAtBottom</name> <operator>&amp;&amp;</operator> <name>wasAtBottom</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>composeDivider</name></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>

      <if>if <condition>(<expr><name>currentlyAtZoomScrollHeight</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>wasAtZoomScrollHeight</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>animateIn</name></name><argument_list>(<argument><expr><name>scrollToBottomButton</name></expr></argument>, <argument><expr><name>scrollButtonInAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <if>if <condition>(<expr><name>positionId</name> <operator>!=</operator> <name>lastPositionId</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>bindScrollHeader</name><argument_list>(<argument><expr><name>conversationDateHeader</name></expr></argument>, <argument><expr><name>positionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>wasAtBottom</name>           <operator>=</operator> <name>currentlyAtBottom</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wasAtZoomScrollHeight</name> <operator>=</operator> <name>currentlyAtZoomScrollHeight</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastPositionId</name>        <operator>=</operator> <name>positionId</name></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScrollStateChanged</name><parameter_list>(<parameter><decl><type><name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>newState</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>newState</name> <operator>==</operator> <name><name>RecyclerView</name><operator>.</operator><name>SCROLL_STATE_DRAGGING</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>conversationDateHeader</name><operator>.</operator><name>show</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>newState</name> <operator>==</operator> <name><name>RecyclerView</name><operator>.</operator><name>SCROLL_STATE_IDLE</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>conversationDateHeader</name><operator>.</operator><name>hide</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></function>

    <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isAtZoomScrollHeight</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findFirstCompletelyVisibleItemPosition</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">4</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>getHeaderPositionId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name>getListLayoutManager</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findLastVisibleItemPosition</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>void</name></type> <name>bindScrollHeader</name><parameter_list>(<parameter><decl><type><name>HeaderViewHolder</name></type> <name>headerViewHolder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>positionId</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>ConversationAdapter</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getHeaderId</name><argument_list>(<argument><expr><name>positionId</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ConversationAdapter</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>onBindHeaderViewHolder</name><argument_list>(<argument><expr><name>headerViewHolder</name></expr></argument>, <argument><expr><name>positionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>ConversationFragmentItemClickListener</name> <super><implements>implements <name>ItemClickListener</name></implements></super> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>actionMode</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ConversationAdapter</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>toggleSelection</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItems</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name>setCorrectMenuVisibility</name><argument_list>(<argument><expr><call><name><name>actionMode</name><operator>.</operator><name>getMenu</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItems</name><argument_list>()</argument_list></call><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onItemLongClick</name><parameter_list>(<parameter><decl><type><name>MessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>actionMode</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ConversationAdapter</name><operator>)</operator> <call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>toggleSelection</name><argument_list>(<argument><expr><name>messageRecord</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>actionMode</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AppCompatActivity</name><operator>)</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>startSupportActionMode</name><argument_list>(<argument><expr><name>actionModeCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onQuoteClicked</name><parameter_list>(<parameter><decl><type><name>MmsMessageRecord</name></type> <name>messageRecord</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Received a 'quote clicked' event, but there's no quote..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>messageRecord</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isOriginalMissing</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Clicked on a quote whose original message we never had."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationFragment_quoted_message_not_found</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <expr_stmt><expr><call><name><name>SimpleTask</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><call><name>getLifecycle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
        <return>return <expr><call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsSmsDatabase</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                              <operator>.</operator><call><name>getQuotedMessagePosition</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>,
                                                        <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getId</name><argument_list>()</argument_list></call></expr></argument>,
                                                        <argument><expr><call><name><name>messageRecord</name><operator>.</operator><name>getQuote</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAuthor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></lambda></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>p</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>moveToMessagePosition</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
        <expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationFragment_quoted_message_no_longer_available</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_SHORT</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument></argument_list></call></expr></block></lambda></expr></argument>;</argument_list></call></expr></expr_stmt>
      }</block></function>)</block></class>)</block>;</class>
    }

    @<function><type><name>Override</name>
    <specifier>public</specifier> <name>void</name></type> <name>onLinkPreviewClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LinkPreview</name></type> <name>linkPreview</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>getContext</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>CommunicationActions</name><operator>.</operator><name>openBrowserLink</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>linkPreview</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onMoreTextClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Address</name></type> <name>conversationAddress</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isMms</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>getContext</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>startActivity</name><argument_list>(<argument><expr><call><name><name>LongMessageActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>conversationAddress</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>isMms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onSharedContactDetailsClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contact</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>avatarTransitionView</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>getContext</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name>getActivity</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Bundle</name></type> <name>bundle</name> <init>= <expr><call><name><name>ActivityOptionsCompat</name><operator>.</operator><name>makeSceneTransitionAnimation</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>avatarTransitionView</name></expr></argument>, <argument><expr><literal type="string">"avatar"</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>toBundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>ActivityCompat</name><operator>.</operator><name>startActivity</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>SharedContactDetailsActivity</name><operator>.</operator><name>getIntent</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>contact</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bundle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onAddToContactsClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Contact</name></type> <name>contactWithAvatar</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>getContext</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Intent</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
          <function><annotation>@<name>Override</name></annotation>
          <specifier>protected</specifier> <type><name>Intent</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>voids</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><call><name><name>ContactUtil</name><operator>.</operator><name>buildAddToContactsIntent</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>contactWithAvatar</name></expr></argument>)</argument_list></call></expr>;</return>
          }</block></function>

          <function><annotation>@<name>Override</name></annotation>
          <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Intent</name></type> <name>intent</name></decl></parameter>)</parameter_list> <block>{
            <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>CODE_ADD_EDIT_CONTACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></function>
        }</block></class><operator>.</operator><call><name>execute</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onMessageSharedContactClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>choices</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>getContext</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

      <expr_stmt><expr><call><name><name>ContactUtil</name><operator>.</operator><name>selectRecipientThroughDialog</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>choices</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>recipient</name></decl></parameter></parameter_list> -&gt; <block>{
        <expr_stmt><expr><call><name><name>CommunicationActions</name><operator>.</operator><name>startConversation</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onInviteSharedContactClicked</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>choices</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name>getContext</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

      <expr_stmt><expr><call><name><name>ContactUtil</name><operator>.</operator><name>selectRecipientThroughDialog</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>choices</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>recipient</name></decl></parameter></parameter_list> -&gt; <block>{
        <expr_stmt><expr><call><name><name>CommunicationActions</name><operator>.</operator><name>composeSmsThroughDefaultApp</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>InviteActivity_lets_switch_to_signal</name></name></expr></argument>, <argument><expr><literal type="string">"https://sgnl.link/1KpeYmF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }

  @<function><type><name>Override</name>
  <specifier>public</specifier> <name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>requestCode</name> <operator>==</operator> <name>CODE_ADD_EDIT_CONTACT</name> <operator>&amp;&amp;</operator> <call><name>getContext</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ApplicationContext</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>getJobManager</name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>add</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DirectoryRefreshJob</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getApplicationContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <class><specifier>private</specifier> class <name>ActionModeCallback</name> <super><implements>implements <name><name>ActionMode</name><operator>.</operator><name>Callback</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>statusBarColor</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCreateActionMode</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>MenuInflater</name></type> <name>inflater</name> <init>= <expr><call><name><name>mode</name><operator>.</operator><name>getMenuInflater</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>menu</name><operator>.</operator><name>conversation_context</name></name></expr></argument>, <argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>mode</name><operator>.</operator><name>setTitle</name></name><argument_list>(<argument><expr><literal type="string">"1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>Window</name></type> <name>window</name> <init>= <expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>statusBarColor</name> <operator>=</operator> <call><name><name>window</name><operator>.</operator><name>getStatusBarColor</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>window</name><operator>.</operator><name>setStatusBarColor</name></name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>action_mode_status_bar</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><call><name>setCorrectMenuVisibility</name><argument_list>(<argument><expr><name>menu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onMessageActionToolbarOpened</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onPrepareActionMode</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>actionMode</name></decl></parameter>, <parameter><decl><type><name>Menu</name></type> <name>menu</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDestroyActionMode</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>ConversationAdapter</name><operator>)</operator><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>clearSelection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>list</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>notifyDataSetChanged</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setStatusBarColor</name><argument_list>(<argument><expr><name>statusBarColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>actionMode</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onActionItemClicked</name><parameter_list>(<parameter><decl><type><name>ActionMode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>MenuItem</name></type> <name>item</name></decl></parameter>)</parameter_list> <block>{
      <switch>switch<condition>(<expr><call><name><name>item</name><operator>.</operator><name>getItemId</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_copy</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleCopyMessage</name><argument_list>(<argument><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItems</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_delete_message</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleDeleteMessages</name><argument_list>(<argument><expr><call><name>getListAdapter</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSelectedItems</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_details</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleDisplayDetails</name><argument_list>(<argument><expr><call><name>getSelectedMessageRecord</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_forward</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleForwardMessage</name><argument_list>(<argument><expr><call><name>getSelectedMessageRecord</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_resend</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleResendMessage</name><argument_list>(<argument><expr><call><name>getSelectedMessageRecord</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_save_attachment</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleSaveAttachment</name><argument_list>(<argument><expr><operator>(</operator><name>MediaMmsMessageRecord</name><operator>)</operator><call><name>getSelectedMessageRecord</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        <case>case <expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>menu_context_reply</name></name></expr>:</case>
          <expr_stmt><expr><call><name>handleReplyMessage</name><argument_list>(<argument><expr><call><name>getSelectedMessageRecord</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>actionMode</name><operator>.</operator><name>finish</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></switch>

      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ConversationDateHeader</name> <super><extends>extends <name>HeaderViewHolder</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Animation</name></type> <name>animateIn</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Animation</name></type> <name>animateOut</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>pendingHide</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>ConversationDateHeader</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>TextView</name></type> <name>textView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>textView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>animateIn</name></name>  <operator>=</operator> <call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>slide_from_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>animateOut</name></name> <operator>=</operator> <call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>slide_to_top</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>animateIn</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>animateOut</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>show</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>pendingHide</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>pendingHide</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>animateIn</name></name><argument_list>(<argument><expr><name>textView</name></expr></argument>, <argument><expr><name>animateIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>hide</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><name>pendingHide</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>textView</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
          <if>if <condition>(<expr><name>pendingHide</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>pendingHide</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>animateOut</name></name><argument_list>(<argument><expr><name>textView</name></expr></argument>, <argument><expr><name>animateOut</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></function>
      }</block></class></expr></argument>, <argument><expr><literal type="number">400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>
}
</unit>
