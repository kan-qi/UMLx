<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\ImageDivet.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>ImageDivet</name> <super><extends>extends <name>ImageView</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>CORNER_OFFSET</name> <init>= <expr><literal type="number">12F</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>String</name><index>[]</index></name></type> <name>POSITIONS</name>  <init>= <expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"bottom_right"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Drawable</name></type> <name>drawable</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>drawableIntrinsicWidth</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>drawableIntrinsicHeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>position</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>density</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ImageDivet</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ImageDivet</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ImageDivet</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>position</name> <operator>=</operator> <call><name><name>attrs</name><operator>.</operator><name>getAttributeListValue</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="string">"position"</literal></expr></argument>, <argument><expr><name>POSITIONS</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>density</name> <operator>=</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call><operator>.</operator><name>density</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDrawable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setDrawable</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>attributes</name><index>[]</index></name>     <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name> <block>{<expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>lower_right_divet</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TypedArray</name></type> <name>drawables</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attributes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>position</name></expr>)</condition> <block>{
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><name>drawable</name> <operator>=</operator> <call><name><name>drawables</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></switch>

    <expr_stmt><expr><name>drawableIntrinsicWidth</name>  <operator>=</operator> <call><name><name>drawable</name><operator>.</operator><name>getIntrinsicWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>drawableIntrinsicHeight</name> <operator>=</operator> <call><name><name>drawable</name><operator>.</operator><name>getIntrinsicHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>drawables</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>computeBounds</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>drawable</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>restore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDrawable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getPosition</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>position</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>getCloseOffset</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>CORNER_OFFSET</name> <operator>*</operator> <name>density</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>ImageView</name></type> <name>asImageView</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>this</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>getFarOffset</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getCloseOffset</name><argument_list>()</argument_list></call> <operator>+</operator> <name>drawableIntrinsicHeight</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>computeBounds</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>right</name> <init>= <expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bottom</name> <init>= <expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>position</name></expr>)</condition> <block>{
    <case>case <expr><literal type="number">0</literal></expr>:</case>
     <expr_stmt><expr><call><name><name>drawable</name><operator>.</operator><name>setBounds</name></name><argument_list>(
         <argument><expr><name>right</name> <operator>-</operator> <name>drawableIntrinsicWidth</name></expr></argument>,
         <argument><expr><name>bottom</name> <operator>-</operator> <name>drawableIntrinsicHeight</name></expr></argument>,
         <argument><expr><name>right</name></expr></argument>,
         <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <break>break;</break>
    }</block></switch>
  }</block></function>
}</block></class>
</unit>
