<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\AsciiEmojiView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ResUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>AsciiEmojiView</name> <super><extends>extends <name>View</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>ANTI_ALIAS_FLAG</name></name> <operator>|</operator> <name><name>Paint</name><operator>.</operator><name>FILTER_BITMAP_FLAG</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type> <name>emoji</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AsciiEmojiView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>AsciiEmojiView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setEmoji</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>emoji</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>emoji</name></name> <operator>=</operator> <name>emoji</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>float</name></type> <name>targetFontSize</name> <init>= <expr><literal type="number">0.75f</literal> <operator>*</operator> <call><name>getHeight</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getPaddingTop</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getPaddingBottom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>targetFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>ResUtil</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>emoji_text_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTextAlign</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Align</name><operator>.</operator><name>CENTER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>xPos</name> <init>= <expr><operator>(</operator><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>yPos</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name><name>paint</name><operator>.</operator><name>descent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>paint</name><operator>.</operator><name>ascent</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>overflow</name> <init>= <expr><call><name><name>paint</name><operator>.</operator><name>measureText</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getPaddingLeft</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getPaddingRight</name><argument_list>()</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>overflow</name> <operator>&gt;</operator> <literal type="number">1f</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>targetFontSize</name> <operator>/</operator> <name>overflow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>yPos</name> <operator>=</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><call><name><name>canvas</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><call><name><name>paint</name><operator>.</operator><name>descent</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>paint</name><operator>.</operator><name>ascent</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawText</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>, <argument><expr><name>xPos</name></expr></argument>, <argument><expr><name>yPos</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>widthMeasureSpec</name></expr></argument>, <argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
