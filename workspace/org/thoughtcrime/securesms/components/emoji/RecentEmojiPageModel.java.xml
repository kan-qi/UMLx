<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\RecentEmojiPageModel.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>SharedPreferences</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>type</name><operator>.</operator><name>CollectionType</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>fasterxml</name><operator>.</operator><name>jackson</name><operator>.</operator><name>databind</name><operator>.</operator><name>type</name><operator>.</operator><name>TypeFactory</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>JsonUtils</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>RecentEmojiPageModel</name> <super><implements>implements <name>EmojiPageModel</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>                  <init>= <expr><call><name><name>RecentEmojiPageModel</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>EMOJI_LRU_PREFERENCE</name> <init>= <expr><literal type="string">"pref_recent_emoji2"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>EMOJI_LRU_SIZE</name>       <init>= <expr><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SharedPreferences</name></type>     <name>prefs</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>recentlyUsed</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>RecentEmojiPageModel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>prefs</name></name>        <operator>=</operator> <call><name><name>PreferenceManager</name><operator>.</operator><name>getDefaultSharedPreferences</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recentlyUsed</name></name> <operator>=</operator> <call><name>getPersistedCache</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getPersistedCache</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>serialized</name> <init>= <expr><call><name><name>prefs</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name>EMOJI_LRU_PREFERENCE</name></expr></argument>, <argument><expr><literal type="string">"[]"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <try>try <block>{
      <decl_stmt><decl><type><name>CollectionType</name></type> <name>collectionType</name> <init>= <expr><call><name><name>TypeFactory</name><operator>.</operator><name>defaultInstance</name></name><argument_list>()</argument_list></call>
                                                 <operator>.</operator><call><name>constructCollectionType</name><argument_list>(<argument><expr><name><name>LinkedHashSet</name><operator>.</operator><name>class</name></name></expr></argument>, <argument><expr><name><name>String</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name><name>JsonUtils</name><operator>.</operator><name>getMapper</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>readValue</name><argument_list>(<argument><expr><name>serialized</name></expr></argument>, <argument><expr><name>collectionType</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></catch></try>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>int</name></type> <name>getIconAttr</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>emoji_category_recent</name></name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>getEmoji</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>emoji</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>recentlyUsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>reverse</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>emoji</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Emoji</name></argument>&gt;</argument_list></name></type> <name>getDisplayEmoji</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name>getEmoji</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>map</name><argument_list>(<argument><expr><name>Emoji</name><operator>::</operator><operator>new</operator></expr></argument>)</argument_list></call><operator>.</operator><call><name>toList</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>boolean</name></type> <name>hasSpriteMap</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>String</name></type> <name>getSprite</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>boolean</name></type> <name>isDynamic</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onCodePointSelected</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>emoji</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCodePointSelected("</literal> <operator>+</operator> <name>emoji</name> <operator>+</operator> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recentlyUsed</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recentlyUsed</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>recentlyUsed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>EMOJI_LRU_SIZE</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>iterator</name> <init>= <expr><call><name><name>recentlyUsed</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>iterator</name><operator>.</operator><name>remove</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><specifier>final</specifier> <name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>latestRecentlyUsed</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>recentlyUsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
          <decl_stmt><decl><type><name>String</name></type> <name>serialized</name> <init>= <expr><call><name><name>JsonUtils</name><operator>.</operator><name>toJson</name></name><argument_list>(<argument><expr><name>latestRecentlyUsed</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>prefs</name><operator>.</operator><name>edit</name></name><argument_list>()</argument_list></call>
               <operator>.</operator><call><name>putString</name><argument_list>(<argument><expr><name>EMOJI_LRU_PREFERENCE</name></expr></argument>, <argument><expr><name>serialized</name></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>apply</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>

        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></function>
    }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>String</name><index>[]</index></name></type> <name>toReversePrimitiveArray</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>LinkedHashSet</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>emojiSet</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>emojis</name> <init>= <expr><operator>new</operator> <name><name>String</name><index>[<expr><call><name><name>emojiSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>emojiSet</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>String</name></type> <name>emoji</name> <range>: <expr><name>emojiSet</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name><name>emojis</name><index>[<expr><name>i</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <name>emoji</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>emojis</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
