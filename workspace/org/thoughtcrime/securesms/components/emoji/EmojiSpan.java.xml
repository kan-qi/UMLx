<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\EmojiSpan.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name><operator>.</operator><name>FontMetricsInt</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>EmojiSpan</name> <super><extends>extends <name>AnimatingImageSpan</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>SHIFT_FACTOR</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>            <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>FontMetricsInt</name></type> <name>fm</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EmojiSpan</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Drawable</name></type> <name>drawable</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TextView</name></type> <name>tv</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>drawable</name></expr></argument>, <argument><expr><name>tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fm</name>   <operator>=</operator> <call><name><name>tv</name><operator>.</operator><name>getPaint</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFontMetricsInt</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <ternary><condition><expr><name>fm</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>fm</name><operator>.</operator><name>descent</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>fm</name><operator>.</operator><name>ascent</name></name></expr></argument>)</argument_list></call></expr>
                      </then><else>: <expr><call><name><name>tv</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>conversation_item_body_text_size</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getDrawable</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setBounds</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getSize</name><parameter_list>(<parameter><decl><type><name>Paint</name></type> <name>paint</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>FontMetricsInt</name></type> <name>fm</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>fm</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>this</name><operator>.</operator><name>fm</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>fm</name><operator>.</operator><name>ascent</name></name>  <operator>=</operator> <name><name>this</name><operator>.</operator><name>fm</name><operator>.</operator><name>ascent</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fm</name><operator>.</operator><name>descent</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>fm</name><operator>.</operator><name>descent</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fm</name><operator>.</operator><name>top</name></name>     <operator>=</operator> <name><name>this</name><operator>.</operator><name>fm</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fm</name><operator>.</operator><name>bottom</name></name>  <operator>=</operator> <name><name>this</name><operator>.</operator><name>fm</name><operator>.</operator><name>bottom</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>fm</name><operator>.</operator><name>leading</name></name> <operator>=</operator> <name><name>this</name><operator>.</operator><name>fm</name><operator>.</operator><name>leading</name></name></expr>;</expr_stmt>
      <return>return <expr><name>size</name></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>super</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>fm</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>draw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>, <parameter><decl><type><name>Paint</name></type> <name>paint</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>height</name>          <init>= <expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>centeringMargin</name> <init>= <expr><operator>(</operator><name>height</name> <operator>-</operator> <name>size</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>adjustedMargin</name>  <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>centeringMargin</name> <operator>*</operator> <name>SHIFT_FACTOR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>bottom</name> <operator>-</operator> <name>adjustedMargin</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
