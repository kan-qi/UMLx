<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\parsing\EmojiParser.java"><comment type="block" format="javadoc">/**
 * Copyright (c) 2014-present Vincent DURMONT vdurmont@gmail.com
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>parsing</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Iterator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Based in part on code from emoji-java
 */</comment>
<class><specifier>public</specifier> class <name>EmojiParser</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>EmojiTree</name></type> <name>emojiTree</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EmojiParser</name><parameter_list>(<parameter><decl><type><name>EmojiTree</name></type> <name>emojiTree</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>emojiTree</name></name> <operator>=</operator> <name>emojiTree</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>CandidateList</name></type> <name>findCandidates</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Candidate</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>text</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>new</operator> <call><name>CandidateList</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>boolean</name></type> <name>allEmojis</name> <init>= <expr><call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>emojiEnd</name> <init>= <expr><call><name>getEmojiEndPos</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>emojiEnd</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>EmojiDrawInfo</name></type> <name>drawInfo</name> <init>= <expr><call><name><name>emojiTree</name><operator>.</operator><name>getEmoji</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>emojiEnd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>emojiEnd</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><call><name><name>Fitzpatrick</name><operator>.</operator><name>fitzpatrickFromUnicode</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>emojiEnd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>emojiEnd</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
          }</block></then></if>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Candidate</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>emojiEnd</name></expr></argument>, <argument><expr><name>drawInfo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>emojiEnd</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>allEmojis</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></for>

    <return>return <expr><operator>new</operator> <call><name>CandidateList</name><argument_list>(<argument><expr><name>results</name></expr></argument>, <argument><expr><name>allEmojis</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getEmojiEndPos</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>startPos</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>best</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>startPos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <call><name><name>text</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name><name>EmojiTree</name><operator>.</operator><name>Matches</name></name></type> <name>status</name> <init>= <expr><call><name><name>emojiTree</name><operator>.</operator><name>isEmoji</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>startPos</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>exactMatch</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>best</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>status</name><operator>.</operator><name>impossibleMatch</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><name>best</name></expr>;</return>
      }</block></then></if></elseif></if>
    }</block></for>

    <return>return <expr><name>best</name></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>Candidate</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>           <name>startIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>           <name>endIndex</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>EmojiDrawInfo</name></type> <name>drawInfo</name></decl>;</decl_stmt>

    <constructor><name>Candidate</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>startIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endIndex</name></decl></parameter>, <parameter><decl><type><name>EmojiDrawInfo</name></type> <name>drawInfo</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startIndex</name></name> <operator>=</operator> <name>startIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>endIndex</name></name> <operator>=</operator> <name>endIndex</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>drawInfo</name></name> <operator>=</operator> <name>drawInfo</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>EmojiDrawInfo</name></type> <name>getDrawInfo</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>drawInfo</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getEndIndex</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>endIndex</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getStartIndex</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>startIndex</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>CandidateList</name> <super><implements>implements <name><name>Iterable</name><argument_list type="generic">&lt;<argument><name>Candidate</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>EmojiParser</name><operator>.</operator><name>Candidate</name></name></argument>&gt;</argument_list></name></type> <name>list</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>public</specifier> <type><specifier>final</specifier> <name>boolean</name></type>                     <name>allEmojis</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>CandidateList</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>EmojiParser</name><operator>.</operator><name>Candidate</name></name></argument>&gt;</argument_list></name></type> <name>candidates</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>allEmojis</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>candidates</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>allEmojis</name></name> <operator>=</operator> <name>allEmojis</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>size</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>list</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name><name>Iterator</name><argument_list type="generic">&lt;<argument><name>Candidate</name></argument>&gt;</argument_list></name></type> <name>iterator</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>list</name><operator>.</operator><name>iterator</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

}</block></class>
</unit>
