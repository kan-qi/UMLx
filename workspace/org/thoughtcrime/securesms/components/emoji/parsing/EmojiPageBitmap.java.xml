<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\parsing\EmojiPageBitmap.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>parsing</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>AssetManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>DiskCacheStrategy</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiPageModel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ListenableFutureTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Stopwatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>SoftReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>Callable</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<class><specifier>public</specifier> class <name>EmojiPageBitmap</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>EmojiPageBitmap</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>        <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>EmojiPageModel</name></type> <name>model</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type>          <name>decodeScale</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>SoftReference</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type>        <name>bitmapReference</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>task</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EmojiPageBitmap</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>EmojiPageModel</name></type> <name>model</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>decodeScale</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>     <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>model</name></name>       <operator>=</operator> <name>model</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>decodeScale</name></name> <operator>=</operator> <name>decodeScale</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <type><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>get</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>assertMainThread</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>bitmapReference</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>bitmapReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><operator>new</operator> <call><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>bitmapReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>task</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><name>task</name></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
      <decl_stmt><decl><type><name><name>Callable</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>callable</name> <init>= <expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
        <try>try <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"loading page "</literal> <operator>+</operator> <call><name><name>model</name><operator>.</operator><name>getSprite</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><call><name>loadPage</name><argument_list>()</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>ioe</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>ioe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></catch></try>
        <return>return <expr><literal type="null">null</literal></expr>;</return>
      }</block></lambda></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>task</name> <operator>=</operator> <operator>new</operator> <call><name><name>ListenableFutureTask</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>callable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>new</operator> <class><super><name><name>AsyncTask</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>, <argument><name>Void</name></argument>, <argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation> <specifier>protected</specifier> <type><name>Void</name></type> <name>doInBackground</name><parameter_list>(<parameter><decl><type><name>Void</name><modifier>...</modifier></type> <name>params</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>task</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation> <specifier>protected</specifier> <type><name>void</name></type> <name>onPostExecute</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>aVoid</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><name>task</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>
      }</block></class><operator>.</operator><call><name>executeOnExecutor</name><argument_list>(<argument><expr><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><name>task</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Bitmap</name></type> <name>loadPage</name><parameter_list>()</parameter_list> <throws>throws <argument><expr><name>IOException</name></expr></argument></throws> <block>{
    <if>if <condition>(<expr><name>bitmapReference</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>bitmapReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>bitmapReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>


    <decl_stmt><decl><type><name>float</name></type>                 <name>scale</name>        <init>= <expr><name>decodeScale</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>AssetManager</name></type>          <name>assetManager</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getAssets</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>InputStream</name></type>           <name>assetStream</name>  <init>= <expr><call><name><name>assetManager</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>.</operator><name>getSprite</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name></type> <name>options</name>      <init>= <expr><operator>new</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>Util</name><operator>.</operator><name>isLowMemory</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Low memory detected. Changing sample size."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>options</name><operator>.</operator><name>inSampleSize</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>scale</name> <operator>=</operator> <name>decodeScale</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Stopwatch</name></type> <name>stopwatch</name> <init>= <expr><operator>new</operator> <call><name>Stopwatch</name><argument_list>(<argument><expr><call><name><name>model</name><operator>.</operator><name>getSprite</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Bitmap</name></type>    <name>bitmap</name>    <init>= <expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeStream</name></name><argument_list>(<argument><expr><name>assetStream</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>stopwatch</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"decode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Bitmap</name></type> <name>scaledBitmap</name> <init>= <expr><call><name><name>Bitmap</name><operator>.</operator><name>createScaledBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>stopwatch</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"scale"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stopwatch</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>bitmapReference</name> <operator>=</operator> <operator>new</operator> <call><name><name>SoftReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>scaledBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onPageLoaded("</literal> <operator>+</operator> <call><name><name>model</name><operator>.</operator><name>getSprite</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">")  originalByteCount: "</literal> <operator>+</operator> <call><name><name>bitmap</name><operator>.</operator><name>getByteCount</name></name><argument_list>()</argument_list></call>
                                                    <operator>+</operator> <literal type="string">"  scaledByteCount: "</literal>   <operator>+</operator> <call><name><name>scaledBitmap</name><operator>.</operator><name>getByteCount</name></name><argument_list>()</argument_list></call>
                                                    <operator>+</operator> <literal type="string">"  scaledSize: "</literal>        <operator>+</operator> <call><name><name>scaledBitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"x"</literal> <operator>+</operator> <call><name><name>scaledBitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>scaledBitmap</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>model</name><operator>.</operator><name>getSprite</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
}</block></class>
</unit>
