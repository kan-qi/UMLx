<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\EmojiTextView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextViewCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>AppCompatTextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiProvider</name><operator>.</operator><name>EmojiDrawable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>parsing</name><operator>.</operator><name>EmojiParser</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>


<class><specifier>public</specifier> class <name>EmojiTextView</name> <super><extends>extends <name>AppCompatTextView</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type> <name>scaleEmojis</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>char</name></type> <name>ELLIPSIS</name> <init>= <expr><literal type="char">'â¦'</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type> <name>previousText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>BufferType</name></type>   <name>previousBufferType</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type>        <name>originalFontSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>      <name>useSystemEmoji</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>      <name>sizeChangeInProgress</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>          <name>maxLength</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type> <name>overflowText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type> <name>previousOverflowText</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EmojiTextView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>EmojiTextView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>EmojiTextView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>EmojiTextView</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>scaleEmojis</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>EmojiTextView_scaleEmojis</name></name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>maxLength</name>   <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getInteger</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>EmojiTextView_emoji_maxLength</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>textSize</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>originalFontSize</name> <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>setText</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>BufferType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>EmojiProvider</name></type>             <name>provider</name>   <init>= <expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>EmojiParser</name><operator>.</operator><name>CandidateList</name></name></type> <name>candidates</name> <init>= <expr><call><name><name>provider</name><operator>.</operator><name>getCandidates</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>scaleEmojis</name> <operator>&amp;&amp;</operator> <name>candidates</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name><name>candidates</name><operator>.</operator><name>allEmojis</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type>   <name>emojis</name> <init>= <expr><call><name><name>candidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>scale</name>  <init>= <expr><literal type="number">1.0f</literal></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>emojis</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>scale</name> <operator>+=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>emojis</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>scale</name> <operator>+=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>emojis</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>scale</name> <operator>+=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>emojis</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>scale</name> <operator>+=</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block></then></if>

      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_PX</name></name></expr></argument>, <argument><expr><name>originalFontSize</name> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>scaleEmojis</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_PX</name></name></expr></argument>, <argument><expr><name>originalFontSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <if>if <condition>(<expr><call><name>unchanged</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>overflowText</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name>previousText</name>         <operator>=</operator> <name>text</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>previousOverflowText</name> <operator>=</operator> <name>overflowText</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>previousBufferType</name>   <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>useSystemEmoji</name>       <operator>=</operator> <call><name>useSystemEmoji</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>useSystemEmoji</name> <operator>||</operator> <name>candidates</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>candidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>overflowText</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name>getEllipsize</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TextUtils</name><operator>.</operator><name>TruncateAt</name><operator>.</operator><name>END</name></name> <operator>&amp;&amp;</operator> <name>maxLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ellipsizeAnyTextForMaxLength</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>CharSequence</name></type> <name>emojified</name> <init>= <expr><call><name><name>provider</name><operator>.</operator><name>emojify</name></name><argument_list>(<argument><expr><name>candidates</name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>(<argument><expr><name>emojified</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>overflowText</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>SPANNABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// Android fails to ellipsize spannable strings. (https://issuetracker.google.com/issues/36991688)</comment>
      <comment type="line">// We ellipsize them ourselves by manually truncating the appropriate section.</comment>
      <if>if <condition>(<expr><call><name>getEllipsize</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>TextUtils</name><operator>.</operator><name>TruncateAt</name><operator>.</operator><name>END</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>maxLength</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>ellipsizeAnyTextForMaxLength</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name>ellipsizeEmojiTextForMaxLines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setOverflowText</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CharSequence</name></type> <name>overflowText</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>overflowText</name></name> <operator>=</operator> <name>overflowText</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>previousText</name></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>SPANNABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>ellipsizeAnyTextForMaxLength</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>maxLength</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>maxLength</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>SpannableStringBuilder</name></type> <name>newContent</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>newContent</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>subSequence</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>maxLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><name>ELLIPSIS</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>overflowText</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>EmojiParser</name><operator>.</operator><name>CandidateList</name></name></type> <name>newCandidates</name> <init>= <expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCandidates</name><argument_list>(<argument><expr><name>newContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>useSystemEmoji</name> <operator>||</operator> <name>newCandidates</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name><name>newCandidates</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>newContent</name></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>emojified</name> <init>= <expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>emojify</name><argument_list>(<argument><expr><name>newCandidates</name></expr></argument>, <argument><expr><name>newContent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>emojified</name></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>SPANNABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>ellipsizeEmojiTextForMaxLines</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>post</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name>getLayout</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>ellipsizeEmojiTextForMaxLines</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>int</name></type> <name>maxLines</name> <init>= <expr><call><name><name>TextViewCompat</name><operator>.</operator><name>getMaxLines</name></name><argument_list>(<argument><expr><name><name>EmojiTextView</name><operator>.</operator><name>this</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>maxLines</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>maxLength</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <decl_stmt><decl><type><name>int</name></type> <name>lineCount</name> <init>= <expr><call><name>getLineCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>lineCount</name> <operator>&gt;</operator> <name>maxLines</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>overflowStart</name> <init>= <expr><call><name>getLayout</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getLineStart</name><argument_list>(<argument><expr><name>maxLines</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>overflow</name> <init>= <expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>subSequence</name><argument_list>(<argument><expr><name>overflowStart</name></expr></argument>, <argument><expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type> <name>ellipsized</name> <init>= <expr><call><name><name>TextUtils</name><operator>.</operator><name>ellipsize</name></name><argument_list>(<argument><expr><name>overflow</name></expr></argument>, <argument><expr><call><name>getPaint</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>TextUtils</name><operator>.</operator><name>TruncateAt</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SpannableStringBuilder</name></type> <name>newContent</name> <init>= <expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>newContent</name><operator>.</operator><name>append</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>subSequence</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>overflowStart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                  <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>ellipsized</name><operator>.</operator><name>subSequence</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>ellipsized</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                  <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>overflowText</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>EmojiParser</name><operator>.</operator><name>CandidateList</name></name></type> <name>newCandidates</name> <init>= <expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>getCandidates</name><argument_list>(<argument><expr><name>newContent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>CharSequence</name></type>              <name>emojified</name>     <init>= <expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>emojify</name><argument_list>(<argument><expr><name>newCandidates</name></expr></argument>, <argument><expr><name>newContent</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>emojified</name></expr></argument>, <argument><expr><name><name>BufferType</name><operator>.</operator><name>SPANNABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>unchanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>, <parameter><decl><type><name>CharSequence</name></type> <name>overflowText</name></decl></parameter>, <parameter><decl><type><name>BufferType</name></type> <name>bufferType</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>previousText</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call>                 <operator>&amp;&amp;</operator>
           <call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>previousOverflowText</name></expr></argument>, <argument><expr><name>overflowText</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
           <call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>previousBufferType</name></expr></argument>, <argument><expr><name>bufferType</name></expr></argument>)</argument_list></call>     <operator>&amp;&amp;</operator>
           <name>useSystemEmoji</name> <operator>==</operator> <call><name>useSystemEmoji</name><argument_list>()</argument_list></call>              <operator>&amp;&amp;</operator>
           <operator>!</operator><name>sizeChangeInProgress</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>useSystemEmoji</name><parameter_list>()</parameter_list> <block>{
   <return>return <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isSystemEmojiPreferred</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>oldw</name></expr></argument>, <argument><expr><name>oldh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><name>sizeChangeInProgress</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>sizeChangeInProgress</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setText</name><argument_list>(<argument><expr><name>previousText</name></expr></argument>, <argument><expr><name>previousBufferType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>sizeChangeInProgress</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>invalidateDrawable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Drawable</name></type> <name>drawable</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>drawable</name> <operator>instanceof</operator> <name>EmojiDrawable</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                                   <block type="pseudo"><expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>invalidateDrawable</name></name><argument_list>(<argument><expr><name>drawable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setTextSize</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setTextSize</name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_SP</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setTextSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>unit</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>originalFontSize</name></name> <operator>=</operator> <call><name><name>TypedValue</name><operator>.</operator><name>applyDimension</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
