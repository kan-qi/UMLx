<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\EmojiPageView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>GridLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiPageViewGridAdapter</name><operator>.</operator><name>VariationSelectorListener</name></name>;</import>

<class><specifier>public</specifier> class <name>EmojiPageView</name> <super><extends>extends <name>FrameLayout</name></extends> <implements>implements <name>VariationSelectorListener</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>EmojiPageView</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiPageModel</name></type>                   <name>model</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiPageViewGridAdapter</name></type>         <name>adapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type>                     <name>recyclerView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>GridLayoutManager</name></type>                <name>layoutManager</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>RecyclerView</name><operator>.</operator><name>OnItemTouchListener</name></name></type> <name>scrollDisabler</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>VariationSelectorListener</name></type>        <name>variationSelectorListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiVariationSelectorPopup</name></type>      <name>popup</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EmojiPageView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>,
                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>EmojiSelectionListener</name></type> <name>emojiSelectionListener</name></decl></parameter>,
                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>VariationSelectorListener</name></type> <name>variationSelectorListener</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>view</name> <init>= <expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>emoji_grid_layout</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>variationSelectorListener</name></name> <operator>=</operator> <name>variationSelectorListener</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>recyclerView</name>   <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>emoji</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>layoutManager</name>  <operator>=</operator> <operator>new</operator> <call><name>GridLayoutManager</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>scrollDisabler</name> <operator>=</operator> <operator>new</operator> <call><name>ScrollDisabler</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>popup</name>          <operator>=</operator> <operator>new</operator> <call><name>EmojiVariationSelectorPopup</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>emojiSelectionListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>adapter</name>        <operator>=</operator> <operator>new</operator> <call><name>EmojiPageViewGridAdapter</name><argument_list>(<argument><expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
                                              <argument><expr><name>popup</name></expr></argument>,
                                              <argument><expr><name>emojiSelectionListener</name></expr></argument>,
                                              <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><name>layoutManager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>adapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onSelected</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>model</name><operator>.</operator><name>isDynamic</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>adapter</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>notifyDataSetChanged</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setModel</name><parameter_list>(<parameter><decl><type><name>EmojiPageModel</name></type> <name>model</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>model</name></name> <operator>=</operator> <name>model</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>adapter</name><operator>.</operator><name>setEmoji</name></name><argument_list>(<argument><expr><call><name><name>model</name><operator>.</operator><name>getDisplayEmoji</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onVisibilityChanged</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>changedView</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>visibility</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>visibility</name> <operator>!=</operator> <name>VISIBLE</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>popup</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>idealWidth</name> <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelOffset</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>emoji_drawer_item_width</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>layoutManager</name><operator>.</operator><name>setSpanCount</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>w</name> <operator>/</operator> <name>idealWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onVariationSelectorStateChanged</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>open</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>open</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>addOnItemTouchListener</name></name><argument_list>(<argument><expr><name>scrollDisabler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>post</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>recyclerView</name><operator>.</operator><name>removeOnItemTouchListener</name></name><argument_list>(<argument><expr><name>scrollDisabler</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>variationSelectorListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>variationSelectorListener</name><operator>.</operator><name>onVariationSelectorStateChanged</name></name><argument_list>(<argument><expr><name>open</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>EmojiSelectionListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onEmojiSelected</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>emoji</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>ScrollDisabler</name> <super><implements>implements <name><name>RecyclerView</name><operator>.</operator><name>OnItemTouchListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onInterceptTouchEvent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEvent</name></type> <name>motionEvent</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEvent</name></type> <name>motionEvent</name></decl></parameter>)</parameter_list> <block>{ }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onRequestDisallowInterceptTouchEvent</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ }</block></function>
  }</block></class>
}</block></class>
</unit>
