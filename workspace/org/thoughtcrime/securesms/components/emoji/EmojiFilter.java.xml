<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\emoji\EmojiFilter.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputFilter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spanned</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<class><specifier>public</specifier> class <name>EmojiFilter</name> <super><implements>implements <name>InputFilter</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>view</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>EmojiFilter</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>view</name></name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>CharSequence</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>Spanned</name></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dend</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>char</name><index>[]</index></name></type> <name>v</name> <init>= <expr><operator>new</operator> <name><name>char</name><index>[<expr><name>end</name> <operator>-</operator> <name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>TextUtils</name><operator>.</operator><name>getChars</name></name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Spannable</name></type> <name>emojified</name> <init>= <expr><call><name><name>EmojiProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name><name>view</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>emojify</name><argument_list>(<argument><expr><operator>new</operator> <call><name>String</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>view</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>source</name> <operator>instanceof</operator> <name>Spanned</name> <operator>&amp;&amp;</operator> <name>emojified</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>TextUtils</name><operator>.</operator><name>copySpansFrom</name></name><argument_list>(<argument><expr><operator>(</operator><name>Spanned</name><operator>)</operator> <name>source</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>emojified</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>emojified</name></expr>;</return>
  }</block></function>
}</block></class>
</unit>
