<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\PushRecipientsPanel.java"><comment type="block" format="javadoc">/**
 * Copyright (C) 2011 Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>RecipientsAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>RecipientsEditor</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>Address</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientModifiedListener</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>StringTokenizer</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Panel component combining both an editable field with a button for
 * a list-based contact selector.
 *
 * @author Moxie Marlinspike
 */</comment>
<class><specifier>public</specifier> class <name>PushRecipientsPanel</name> <super><extends>extends <name>RelativeLayout</name></extends> <implements>implements <name>RecipientModifiedListener</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type>                         <name>TAG</name> <init>= <expr><call><name><name>PushRecipientsPanel</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>       <type><name>RecipientsPanelChangedListener</name></type> <name>panelChangeListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>RecipientsEditor</name></type> <name>recipientsText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>             <name>panel</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>RECIPIENTS_MAX_LENGTH</name> <init>= <expr><literal type="number">312</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>PushRecipientsPanel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PushRecipientsPanel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PushRecipientsPanel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getRecipients</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>rawText</name> <init>= <expr><call><name><name>recipientsText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>getRecipientsFromString</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rawText</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>panel</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPanelChangeListener</name><parameter_list>(<parameter><decl><type><name>RecipientsPanelChangedListener</name></type> <name>panelChangeListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>panelChangeListener</name></name> <operator>=</operator> <name>panelChangeListener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>LayoutInflater</name></type> <name>inflater</name> <init>= <expr><operator>(</operator><name>LayoutInflater</name><operator>)</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>LAYOUT_INFLATER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>push_recipients_panel</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>imageButton</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contacts_button</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>ICE_CREAM_SANDWICH</name></name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><operator>(</operator><operator>(</operator><name>MarginLayoutParams</name><operator>)</operator> <call><name><name>imageButton</name><operator>.</operator><name>getLayoutParams</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>topMargin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><name>panel</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recipients_panel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initRecipientsEditor</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initRecipientsEditor</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recipientsText</name></name> <operator>=</operator> <operator>(</operator><name>RecipientsEditor</name><operator>)</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recipients_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name> <init>= <expr><call><name>getRecipients</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Recipient</name></type> <name>recipient</name> <range>: <expr><name>recipients</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>recipient</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RecipientsAdapter</name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>populate</name></name><argument_list>(<argument><expr><name>recipients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FocusChangedListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>setOnItemClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AdapterView</name><operator>.</operator><name>OnItemClickListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onItemClick</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>adapterView</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>panelChangeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>panelChangeListener</name><operator>.</operator><name>onRecipientsPanelUpdate</name></name><argument_list>(<argument><expr><call><name>getRecipients</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getRecipientsFromString</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>rawText</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>asynchronous</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>StringTokenizer</name></type> <name>tokenizer</name>  <init>= <expr><operator>new</operator> <call><name>StringTokenizer</name><argument_list>(<argument><expr><name>rawText</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><call><name><name>tokenizer</name><operator>.</operator><name>hasMoreTokens</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>String</name></type> <name>token</name> <init>= <expr><call><name><name>tokenizer</name><operator>.</operator><name>nextToken</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>hasBracketedNumber</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>recipients</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>parseBracketedNumber</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>asynchronous</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else                           <block type="pseudo"><expr_stmt><expr><call><name><name>recipients</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Recipient</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>Address</name><operator>.</operator><name>fromExternal</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>asynchronous</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
      }</block></then></if>
    }</block></while>

    <return>return <expr><name>recipients</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>hasBracketedNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>openBracketIndex</name> <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>(</operator><name>openBracketIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>
           <operator>(</operator><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>openBracketIndex</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier>  <type><name>String</name></type> <name>parseBracketedNumber</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>begin</name>    <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&lt;'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>end</name>      <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>indexOf</name></name><argument_list>(<argument><expr><literal type="char">'&gt;'</literal></expr></argument>, <argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name></type> <name>value</name> <init>= <expr><call><name><name>recipient</name><operator>.</operator><name>substring</name></name><argument_list>(<argument><expr><name>begin</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><name>value</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onModified</name><parameter_list>(<parameter><decl><type><name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>recipientsText</name><operator>.</operator><name>populate</name></name><argument_list>(<argument><expr><call><name>getRecipients</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>FocusChangedListener</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnFocusChangeListener</name></name></implements></super> <block>{
    <function><specifier>public</specifier> <type><name>void</name></type> <name>onFocusChange</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><operator>!</operator><name>hasFocus</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>panelChangeListener</name> <operator>!=</operator> <literal type="null">null</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>panelChangeListener</name><operator>.</operator><name>onRecipientsPanelUpdate</name></name><argument_list>(<argument><expr><call><name>getRecipients</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>RecipientsPanelChangedListener</name> <block>{
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onRecipientsPanelUpdate</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>recipients</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

}</block></class></unit>
