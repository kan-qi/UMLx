<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\CustomDefaultPreference.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Dialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>app</name><operator>.</operator><name>AlertDialog</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>DialogPreference</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>preference</name><operator>.</operator><name>PreferenceDialogFragmentCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>AdapterView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Spinner</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>CustomDefaultPreference</name><operator>.</operator><name>CustomDefaultPreferenceDialogFragmentCompat</name><operator>.</operator><name>CustomPreferenceValidator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URI</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>net</name><operator>.</operator><name>URISyntaxException</name></name>;</import>


<class><specifier>public</specifier> class <name>CustomDefaultPreference</name> <super><extends>extends <name>DialogPreference</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>CustomDefaultPreference</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>inputType</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>customPreference</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>customToggle</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>CustomPreferenceValidator</name></type> <name>validator</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>String</name></type>                    <name>defaultValue</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>CustomDefaultPreference</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type>      <name>attributeNames</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{<expr><name><name>android</name><operator>.</operator><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>inputType</name></name></expr>, <expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>custom_pref_toggle</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TypedArray</name></type> <name>attributes</name>     <init>= <expr><call><name><name>context</name><operator>.</operator><name>obtainStyledAttributes</name></name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>attributeNames</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>inputType</name></name>        <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customPreference</name></name> <operator>=</operator> <call><name>getKey</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customToggle</name></name>     <operator>=</operator> <call><name><name>attributes</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>validator</name></name>        <operator>=</operator> <operator>new</operator> <call><name><name>CustomDefaultPreferenceDialogFragmentCompat</name><operator>.</operator><name>NullValidator</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>attributes</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setPersistent</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setDialogLayoutResource</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>custom_default_preference_dialog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>CustomDefaultPreference</name></type> <name>setValidator</name><parameter_list>(<parameter><decl><type><name>CustomPreferenceValidator</name></type> <name>validator</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>validator</name></name> <operator>=</operator> <name>validator</name></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>CustomDefaultPreference</name></type> <name>setDefaultValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultValue</name></name> <operator>=</operator> <name>defaultValue</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name>getSummary</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>this</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>String</name></type> <name>getSummary</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isCustom</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CustomDefaultPreference_using_custom</name></name></expr></argument>,
                                    <argument><expr><call><name>getPrettyPrintValue</name><argument_list>(<argument><expr><call><name>getCustomValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CustomDefaultPreference_using_default</name></name></expr></argument>,
                                    <argument><expr><call><name>getPrettyPrintValue</name><argument_list>(<argument><expr><call><name>getDefaultValue</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>getPrettyPrintValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>CustomDefaultPreference_none</name></name></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <else>else                          <block type="pseudo"><return>return <expr><name>value</name></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isCustom</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getBooleanPreference</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>customToggle</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setCustom</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>custom</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setBooleanPreference</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>customToggle</name></expr></argument>, <argument><expr><name>custom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>getCustomValue</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getStringPreference</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>customPreference</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setCustomValue</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setStringPreference</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>customPreference</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>getDefaultValue</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>defaultValue</name></expr>;</return>
  }</block></function>


  <class><specifier>public</specifier> <specifier>static</specifier> class <name>CustomDefaultPreferenceDialogFragmentCompat</name> <super><extends>extends <name>PreferenceDialogFragmentCompat</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>INPUT_TYPE</name> <init>= <expr><literal type="string">"input_type"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>Spinner</name></type>  <name>spinner</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>customText</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type> <name>defaultLabel</name></decl>;</decl_stmt>

    <function><specifier>public</specifier> <specifier>static</specifier> <type><name>CustomDefaultPreferenceDialogFragmentCompat</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>key</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>CustomDefaultPreferenceDialogFragmentCompat</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>CustomDefaultPreferenceDialogFragmentCompat</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Bundle</name></type> <name>b</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>putString</name></name><argument_list>(<argument><expr><name><name>PreferenceDialogFragmentCompat</name><operator>.</operator><name>ARG_KEY</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>fragment</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>onBindDialogView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onBindDialogView"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onBindDialogView</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>CustomDefaultPreference</name></type> <name>preference</name> <init>= <expr><operator>(</operator><name>CustomDefaultPreference</name><operator>)</operator><call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>spinner</name></name>      <operator>=</operator> <operator>(</operator><name>Spinner</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>default_or_custom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultLabel</name></name> <operator>=</operator> <operator>(</operator><name>TextView</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>default_label</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>customText</name></name>   <operator>=</operator> <operator>(</operator><name>EditText</name><operator>)</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>custom_edit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>customText</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>preference</name><operator>.</operator><name>inputType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>customText</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TextValidator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>customText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getCustomValue</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>spinner</name><operator>.</operator><name>setOnItemSelectedListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SelectionLister</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>defaultLabel</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getPrettyPrintValue</name></name><argument_list>(<argument><expr><name><name>preference</name><operator>.</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>


    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>Dialog</name></type> <name>onCreateDialog</name><parameter_list>(<parameter><decl><type><name>Bundle</name></type> <name>instanceState</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>Dialog</name></type> <name>dialog</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>onCreateDialog</name></name><argument_list>(<argument><expr><name>instanceState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>CustomDefaultPreference</name></type> <name>preference</name> <init>= <expr><operator>(</operator><name>CustomDefaultPreference</name><operator>)</operator><call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>preference</name><operator>.</operator><name>isCustom</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>spinner</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else                       <block type="pseudo"><expr_stmt><expr><call><name><name>spinner</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

      <return>return <expr><name>dialog</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onDialogClosed</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>positiveResult</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>CustomDefaultPreference</name></type> <name>preference</name> <init>= <expr><operator>(</operator><name>CustomDefaultPreference</name><operator>)</operator><call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>positiveResult</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>spinner</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name><name>preference</name><operator>.</operator><name>setCustom</name></name><argument_list>(<argument><expr><call><name><name>spinner</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>customText</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>preference</name><operator>.</operator><name>setCustomValue</name></name><argument_list>(<argument><expr><call><name><name>customText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <expr_stmt><expr><call><name><name>preference</name><operator>.</operator><name>setSummary</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>getSummary</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <interface>interface <name>CustomPreferenceValidator</name> <block>{
      <function_decl><specifier>public</specifier> <type><name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <class><specifier>private</specifier> <specifier>static</specifier> class <name>NullValidator</name> <super><implements>implements <name>CustomPreferenceValidator</name></implements></super> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>TextValidator</name> <super><implements>implements <name>TextWatcher</name></implements></super> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CustomDefaultPreference</name></type> <name>preference</name> <init>= <expr><operator>(</operator><name>CustomDefaultPreference</name><operator>)</operator><call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>spinner</name><operator>.</operator><name>getSelectedItemPosition</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>Button</name></type> <name>positiveButton</name> <init>= <expr><operator>(</operator><operator>(</operator><name>AlertDialog</name><operator>)</operator><call><name>getDialog</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getButton</name><argument_list>(<argument><expr><name><name>AlertDialog</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><call><name><name>preference</name><operator>.</operator><name>validator</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>UriValidator</name> <super><implements>implements <name>CustomPreferenceValidator</name></implements></super> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

        <try>try <block>{
          <expr_stmt><expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>URISyntaxException</name></type> <name>mue</name></decl></parameter>)</parameter_list> <block>{
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
      }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>HostnameValidator</name> <super><implements>implements <name>CustomPreferenceValidator</name></implements></super> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

        <try>try <block>{
          <decl_stmt><decl><type><name>URI</name></type> <name>uri</name> <init>= <expr><operator>new</operator> <call><name>URI</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>URISyntaxException</name></type> <name>mue</name></decl></parameter>)</parameter_list> <block>{
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
      }</block></function>
    }</block></class>

    <class><specifier>public</specifier> <specifier>static</specifier> class <name>PortValidator</name> <super><implements>implements <name>CustomPreferenceValidator</name></implements></super> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>isValid</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>value</name></decl></parameter>)</parameter_list> <block>{
        <try>try <block>{
          <expr_stmt><expr><call><name><name>Integer</name><operator>.</operator><name>parseInt</name></name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>NumberFormatException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
      }</block></function>
    }</block></class>

    <class><specifier>private</specifier> class <name>SelectionLister</name> <super><implements>implements <name><name>AdapterView</name><operator>.</operator><name>OnItemSelectedListener</name></name></implements></super> <block>{

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onItemSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>position</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>CustomDefaultPreference</name></type> <name>preference</name> <init>= <expr><operator>(</operator><name>CustomDefaultPreference</name><operator>)</operator><call><name>getPreference</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Button</name></type> <name>positiveButton</name> <init>= <expr><operator>(</operator><operator>(</operator><name>AlertDialog</name><operator>)</operator><call><name>getDialog</name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getButton</name><argument_list>(<argument><expr><name><name>AlertDialog</name><operator>.</operator><name>BUTTON_POSITIVE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>defaultLabel</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>customText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>position</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>positiveButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>position</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name><name>preference</name><operator>.</operator><name>validator</name><operator>.</operator><name>isValid</name></name><argument_list>(<argument><expr><call><name><name>customText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onNothingSelected</name><parameter_list>(<parameter><decl><type><name><name>AdapterView</name><argument_list type="generic">&lt;<argument><name>?</name></argument>&gt;</argument_list></name></type> <name>parent</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>defaultLabel</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>customText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class>

  }</block></class>



}</block></class>
</unit>
