<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\MicrophoneRecorderView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnticipateOvershootInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>DecelerateInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>OvershootInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>ScaleAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>TranslateAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>MicrophoneRecorderView</name> <super><extends>extends <name>FrameLayout</name></extends> <implements>implements <name><name>View</name><operator>.</operator><name>OnTouchListener</name></name></implements></super> <block>{

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>ANIMATION_DURATION</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier>           <type><name>FloatingRecordButton</name></type> <name>floatingRecordButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Listener</name></type>             <name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier>           <type><name>boolean</name></type>              <name>actionInProgress</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>MicrophoneRecorderView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>MicrophoneRecorderView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ImageView</name></type> <name>recordButtonFab</name> <init>= <expr><call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quick_audio_fab</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>floatingRecordButton</name></name> <operator>=</operator> <operator>new</operator> <call><name>FloatingRecordButton</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>recordButtonFab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>recordButton</name> <init>= <expr><call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quick_audio_toggle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>recordButton</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>cancelAction</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>actionInProgress</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>actionInProgress</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>floatingRecordButton</name><operator>.</operator><name>hide</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>floatingRecordButton</name><operator>.</operator><name>lastPositionX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecordCanceled</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>floatingRecordButton</name><operator>.</operator><name>lastPositionX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onTouch</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
        <if>if <condition>(<expr><operator>!</operator><call><name><name>Permissions</name><operator>.</operator><name>hasAll</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>RECORD_AUDIO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecordPermissionRequired</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>actionInProgress</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>floatingRecordButton</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecordPressed</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
        <break>break;</break>
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_CANCEL</name></name></expr>:</case>
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>actionInProgress</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>actionInProgress</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>floatingRecordButton</name><operator>.</operator><name>hide</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecordReleased</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <break>break;</break>
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
        <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>actionInProgress</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>floatingRecordButton</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecordMoved</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>event</name><operator>.</operator><name>getRawX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></then></if>
        <break>break;</break>
    }</block></switch>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>Listener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onRecordPressed</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecordReleased</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecordCanceled</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecordMoved</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>absoluteX</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecordPermissionRequired</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>FloatingRecordButton</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ImageView</name></type> <name>recordButtonFab</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>startPositionX</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>lastPositionX</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>FloatingRecordButton</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>ImageView</name></type> <name>recordButtonFab</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordButtonFab</name></name> <operator>=</operator> <name>recordButtonFab</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>recordButtonFab</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call>
                                                                 <operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>red_500</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                          <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>SRC_IN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>display</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startPositionX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastPositionX</name></name>  <operator>=</operator> <name>x</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>recordButtonFab</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>float</name></type> <name>translation</name> <init>= <expr><ternary><condition><expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>recordButtonFab</name></expr></argument>)</argument_list></call> <operator>==</operator>
          <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">.25f</literal></expr> </then><else>: <expr><literal type="number">.25f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>AnimationSet</name></type> <name>animation</name> <init>= <expr><operator>new</operator> <call><name>AnimationSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">.25f</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">.25f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ScaleAnimation</name><argument_list>(<argument><expr><literal type="number">.5f</literal></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>, <argument><expr><literal type="number">.5f</literal></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>,
                                                <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">.5f</literal></expr></argument>,
                                                <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillBefore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>ANIMATION_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>OvershootInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>recordButtonFab</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>moveTo</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastPositionX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name>getOffset</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Animation</name></type> <name>translateAnimation</name> <init>= <expr><operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                                            <argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                                            <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">.25f</literal></expr></argument>,
                                                            <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">.25f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>translateAnimation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>translateAnimation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>translateAnimation</name><operator>.</operator><name>setFillBefore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>recordButtonFab</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>translateAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>hide</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lastPositionX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name>getOffset</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>AnimationSet</name></type> <name>animation</name> <init>= <expr><operator>new</operator> <call><name>AnimationSet</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Animation</name></type> <name>scaleAnimation</name> <init>= <expr><operator>new</operator> <call><name>ScaleAnimation</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Animation</name></type> <name>translateAnimation</name> <init>= <expr><operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                                            <argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                            <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">.25f</literal></expr></argument>,
                                                            <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">.25f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>scaleAnimation</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AnticipateOvershootInterpolator</name><argument_list>(<argument><expr><literal type="number">1.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>translateAnimation</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecelerateInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>scaleAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><name>translateAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>ANIMATION_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillBefore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AnticipateOvershootInterpolator</name><argument_list>(<argument><expr><literal type="number">1.5f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>recordButtonFab</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>recordButtonFab</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>recordButtonFab</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>float</name></type> <name>getOffset</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>recordButtonFab</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr> ?</condition><then>
          <expr><operator>-</operator><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startPositionX</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>startPositionX</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <type><name>int</name></type> <name>getWidthAdjustment</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name><name>recordButtonFab</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
      <return>return <expr><ternary><condition><expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>recordButtonFab</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr> ?</condition><then> <expr><operator>-</operator><name>width</name></expr> </then><else>: <expr><name>width</name></expr></else></ternary></expr>;</return>
    }</block></function>

  }</block></class>

}</block></class>
</unit>
