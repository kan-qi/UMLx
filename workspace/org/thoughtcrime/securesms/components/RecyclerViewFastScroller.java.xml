<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\RecyclerViewFastScroller.java"><comment type="block" format="javadoc">/**
 * Modified version of
 * https://github.com/AndroidDeveloperLB/LollipopContactsRecyclerViewFastScroller
 *
 * Their license:
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimatorListenerAdapter</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>animation</name><operator>.</operator><name>ObjectAnimator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>RecyclerViewFastScroller</name> <super><extends>extends <name>LinearLayout</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>BUBBLE_ANIMATION_DURATION</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRACK_SNAP_RANGE</name>          <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name>TextView</name></type>     <name>bubble</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation>  <type><name>View</name></type>         <name>handle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>RecyclerView</name></type> <name>recyclerView</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>            <name>height</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ObjectAnimator</name></type> <name>currentAnimator</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>RecyclerView</name><operator>.</operator><name>OnScrollListener</name></name></type> <name>onScrollListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>RecyclerView</name><operator>.</operator><name>OnScrollListener</name></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onScrolled</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>handle</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>   <name>offset</name>      <init>= <expr><call><name><name>recyclerView</name><operator>.</operator><name>computeVerticalScrollOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>   <name>range</name>       <init>= <expr><call><name><name>recyclerView</name><operator>.</operator><name>computeVerticalScrollRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>   <name>extent</name>      <init>= <expr><call><name><name>recyclerView</name><operator>.</operator><name>computeVerticalScrollExtent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>   <name>offsetRange</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>range</name> <operator>-</operator> <name>extent</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setBubbleAndHandlePosition</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Util</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>offsetRange</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>offsetRange</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <interface><specifier>public</specifier> interface <name>FastScrollAdapter</name> <block>{
    <function_decl><type><name>CharSequence</name></type> <name>getBubbleText</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <constructor><specifier>public</specifier> <name>RecyclerViewFastScroller</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>RecyclerViewFastScroller</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOrientation</name><argument_list>(<argument><expr><name>HORIZONTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setClipChildren</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setScrollContainer</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>recycler_view_fast_scroller</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bubble</name> <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fastscroller_bubble</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>handle</name> <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>fastscroller_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>oldw</name></expr></argument>, <argument><expr><name>oldh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>action</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>action</name></expr>)</condition> <block>{
    <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
      <if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>handle</name><operator>.</operator><name>getPaddingLeft</name></name><argument_list>()</argument_list></call> <operator>||</operator>
          <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>handle</name><operator>.</operator><name>getPaddingTop</name></name><argument_list>()</argument_list></call> <operator>||</operator>
          <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>handle</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>handle</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
      <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>
      <if>if <condition>(<expr><name>currentAnimator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>currentAnimator</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><call><name><name>bubble</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>VISIBLE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>showBubble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>handle</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
      <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>y</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setBubbleAndHandlePosition</name><argument_list>(<argument><expr><name>y</name> <operator>/</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setRecyclerViewPosition</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
    <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_CANCEL</name></name></expr>:</case>
      <expr_stmt><expr><call><name><name>handle</name><operator>.</operator><name>setSelected</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>hideBubble</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></switch>
    <return>return <expr><call><name><name>super</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setRecyclerView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>RecyclerView</name></type> <name>recyclerView</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>recyclerView</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>recyclerView</name><operator>.</operator><name>removeOnScrollListener</name></name><argument_list>(<argument><expr><name>onScrollListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recyclerView</name></name> <operator>=</operator> <name>recyclerView</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>addOnScrollListener</name></name><argument_list>(<argument><expr><name>onScrollListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addOnPreDrawListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ViewTreeObserver</name><operator>.</operator><name>OnPreDrawListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>boolean</name></type> <name>onPreDraw</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>getViewTreeObserver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeOnPreDrawListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>handle</name><operator>.</operator><name>isSelected</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>verticalScrollOffset</name> <init>= <expr><call><name><name>recyclerView</name><operator>.</operator><name>computeVerticalScrollOffset</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>verticalScrollRange</name> <init>= <expr><call><name><name>recyclerView</name><operator>.</operator><name>computeVerticalScrollRange</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>proportion</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>verticalScrollOffset</name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>verticalScrollRange</name> <operator>-</operator> <name>height</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>setBubbleAndHandlePosition</name><argument_list>(<argument><expr><name>height</name> <operator>*</operator> <name>proportion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDetachedFromWindow</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetachedFromWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>recyclerView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name><name>recyclerView</name><operator>.</operator><name>removeOnScrollListener</name></name><argument_list>(<argument><expr><name>onScrollListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setRecyclerViewPosition</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>recyclerView</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>itemCount</name> <init>= <expr><call><name><name>recyclerView</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getItemCount</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>proportion</name></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>ViewUtil</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proportion</name> <operator>=</operator> <literal type="number">0f</literal></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>ViewUtil</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>handle</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <name>height</name> <operator>-</operator> <name>TRACK_SNAP_RANGE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>proportion</name> <operator>=</operator> <literal type="number">1f</literal></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><name>proportion</name> <operator>=</operator> <name>y</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>height</name></expr>;</expr_stmt>
      }</block></else></if>

      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>targetPos</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><name>proportion</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>itemCount</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>itemCount</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>LinearLayoutManager</name><operator>)</operator> <call><name><name>recyclerView</name><operator>.</operator><name>getLayoutManager</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>scrollToPositionWithOffset</name><argument_list>(<argument><expr><name>targetPos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>CharSequence</name></type> <name>bubbleText</name> <init>= <expr><operator>(</operator><operator>(</operator><name>FastScrollAdapter</name><operator>)</operator> <call><name><name>recyclerView</name><operator>.</operator><name>getAdapter</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><call><name>getBubbleText</name><argument_list>(<argument><expr><name>targetPos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>bubble</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>bubbleText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setBubbleAndHandlePosition</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>handleHeight</name> <init>= <expr><call><name><name>handle</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>bubbleHeight</name> <init>= <expr><call><name><name>bubble</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>handleY</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><operator>(</operator><name>height</name> <operator>-</operator> <name>handleHeight</name><operator>)</operator> <operator>*</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>handleHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>handle</name></expr></argument>, <argument><expr><name>handleY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setY</name></name><argument_list>(<argument><expr><name>bubble</name></expr></argument>, <argument><expr><call><name><name>Util</name><operator>.</operator><name>clamp</name></name><argument_list>(<argument><expr><name>handleY</name> <operator>-</operator> <name>bubbleHeight</name> <operator>-</operator> <call><name><name>bubble</name><operator>.</operator><name>getPaddingBottom</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name>handleHeight</name></expr></argument>,
                                     <argument><expr><literal type="number">0</literal></expr></argument>,
                                     <argument><expr><name>height</name> <operator>-</operator> <name>bubbleHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>showBubble</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>bubble</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>currentAnimator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>currentAnimator</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>currentAnimator</name> <operator>=</operator> <call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>bubble</name></expr></argument>, <argument><expr><literal type="string">"alpha"</literal></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><name>BUBBLE_ANIMATION_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentAnimator</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>hideBubble</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <literal type="number">11</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>currentAnimator</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>currentAnimator</name><operator>.</operator><name>cancel</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>currentAnimator</name> <operator>=</operator> <call><name><name>ObjectAnimator</name><operator>.</operator><name>ofFloat</name></name><argument_list>(<argument><expr><name>bubble</name></expr></argument>, <argument><expr><literal type="string">"alpha"</literal></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>setDuration</name><argument_list>(<argument><expr><name>BUBBLE_ANIMATION_DURATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentAnimator</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>AnimatorListenerAdapter</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationEnd</name><parameter_list>(<parameter><decl><type><name>Animator</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAnimationEnd</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>bubble</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>currentAnimator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onAnimationCancel</name><parameter_list>(<parameter><decl><type><name>Animator</name></type> <name>animation</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAnimationCancel</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>bubble</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>currentAnimator</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>currentAnimator</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>bubble</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>INVISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>
}</block></class>
</unit>
