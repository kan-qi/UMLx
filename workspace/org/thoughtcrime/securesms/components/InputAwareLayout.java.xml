<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\InputAwareLayout.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>KeyboardAwareLinearLayout</name><operator>.</operator><name>OnKeyboardShownListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>InputAwareLayout</name> <super><extends>extends <name>KeyboardAwareLinearLayout</name></extends> <implements>implements <name>OnKeyboardShownListener</name></implements></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><name>InputView</name></type> <name>current</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>InputAwareLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>InputAwareLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>InputAwareLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>addOnKeyboardShownListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>onKeyboardShown</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>hideAttachedInput</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>EditText</name></type> <name>imeTarget</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <specifier>final</specifier> <name>InputView</name></type> <name>input</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isKeyboardOpen</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>hideSoftkey</name><argument_list>(<argument><expr><name>imeTarget</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
          <expr_stmt><expr><call><name>hideAttachedInput</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getKeyboardHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>current</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <if>if <condition>(<expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>hide</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><call><name><name>input</name><operator>.</operator><name>show</name></name><argument_list>(<argument><expr><call><name>getKeyboardHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>current</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>InputView</name></type> <name>getCurrentInput</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>current</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>hideCurrentInput</name><parameter_list>(<parameter><decl><type><name>EditText</name></type> <name>imeTarget</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isKeyboardOpen</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>hideSoftkey</name><argument_list>(<argument><expr><name>imeTarget</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                  <block type="pseudo"><expr_stmt><expr><call><name>hideAttachedInput</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>hideAttachedInput</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>instant</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>hide</name></name><argument_list>(<argument><expr><name>instant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isInputOpen</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><call><name>isKeyboardOpen</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><name>current</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>current</name><operator>.</operator><name>isShowing</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>showSoftkey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>inputTarget</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>postOnKeyboardOpen</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>hideAttachedInput</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>inputTarget</name><operator>.</operator><name>post</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>Runnable</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation> <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>inputTarget</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getInputMethodManager</name></name><argument_list>(<argument><expr><call><name><name>inputTarget</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>showSoftInput</name><argument_list>(<argument><expr><name>inputTarget</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>hideSoftkey</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>EditText</name></type> <name>inputTarget</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Runnable</name></type> <name>runAfterClose</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>runAfterClose</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>postOnKeyboardClose</name><argument_list>(<argument><expr><name>runAfterClose</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getInputMethodManager</name></name><argument_list>(<argument><expr><call><name><name>inputTarget</name><operator>.</operator><name>getContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
               <operator>.</operator><call><name>hideSoftInputFromWindow</name><argument_list>(<argument><expr><call><name><name>inputTarget</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>InputView</name> <block>{
    <function_decl><type><name>void</name></type> <name>show</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>immediate</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>hide</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>immediate</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>boolean</name></type> <name>isShowing</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>

</unit>
