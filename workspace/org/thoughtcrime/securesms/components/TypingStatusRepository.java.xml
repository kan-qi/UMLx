<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\TypingStatusRepository.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Collectors</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"UseSparseArrays"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>TypingStatusRepository</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>TypingStatusRepository</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>long</name></type> <name>RECIPIENT_TYPING_TIMEOUT</name> <init>= <expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Typist</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>                  <name>typistMap</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Typist</name></argument>, <argument><name>Runnable</name></argument>&gt;</argument_list></name></type>                   <name>timers</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>, <argument><name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>TypingState</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>notifiers</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type>              <name>threadsNotifier</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TypingStatusRepository</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>typistMap</name></name>       <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>timers</name></name>          <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>notifiers</name></name>       <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadsNotifier</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>onTypingStarted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>device</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>author</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Typist</name></argument>&gt;</argument_list></name></type> <name>typists</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>typistMap</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Typist</name></type>      <name>typist</name>  <init>= <expr><operator>new</operator> <call><name>Typist</name><argument_list>(<argument><expr><name>author</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>typists</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>typists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>typistMap</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>typists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyThread</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>typists</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Runnable</name></type> <name>timer</name> <init>= <expr><call><name><name>timers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>timer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>cancelRunnableOnMain</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>timer</name> <operator>=</operator> <lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>onTypingStopped</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>, <argument><expr><name>RECIPIENT_TYPING_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>timers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>, <argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>onTypingStopped</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReplacedByIncomingMessage</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>author</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>serialize</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getLocalNumber</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Typist</name></argument>&gt;</argument_list></name></type> <name>typists</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>typistMap</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Typist</name></type>      <name>typist</name>  <init>= <expr><operator>new</operator> <call><name>Typist</name><argument_list>(<argument><expr><name>author</name></expr></argument>, <argument><expr><name>device</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>typists</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>typists</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>notifyThread</name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>typists</name></expr></argument>, <argument><expr><name>isReplacedByIncomingMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>typists</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>typistMap</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>Runnable</name></type> <name>timer</name> <init>= <expr><call><name><name>timers</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>timer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>cancelRunnableOnMain</name></name><argument_list>(<argument><expr><name>timer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>timers</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>typist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name>TypingState</name></argument>&gt;</argument_list></name></type> <name>getTypists</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>TypingState</name></argument>&gt;</argument_list></name></type> <name>notifier</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>notifiers</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>notifiers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>notifier</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getTypingThreads</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>threadsNotifier</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>TypingState</name></type> <name>empty</name> <init>= <expr><operator>new</operator> <call><name>TypingState</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptyList</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>TypingState</name></argument>&gt;</argument_list></name></type> <name>notifier</name> <range>: <expr><call><name><name>notifiers</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><name>empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <expr_stmt><expr><call><name><name>notifiers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>typistMap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>timers</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>threadsNotifier</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>emptySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyThread</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Typist</name></argument>&gt;</argument_list></name></type> <name>typists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isReplacedByIncomingMessage</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"notifyThread() threadId: "</literal> <operator>+</operator> <name>threadId</name> <operator>+</operator> <literal type="string">"  typists: "</literal> <operator>+</operator> <call><name><name>typists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">"  isReplaced: "</literal> <operator>+</operator> <name>isReplacedByIncomingMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name>TypingState</name></argument>&gt;</argument_list></name></type> <name>notifier</name> <init>= <expr><call><name><name>Util</name><operator>.</operator><name>getOrDefault</name></name><argument_list>(<argument><expr><name>notifiers</name></expr></argument>, <argument><expr><name>threadId</name></expr></argument>, <argument><expr><operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>notifiers</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>threadId</name></expr></argument>, <argument><expr><name>notifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>uniqueTypists</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Typist</name></type> <name>typist</name> <range>: <expr><name>typists</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>uniqueTypists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>typist</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name><name>notifier</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TypingState</name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>uniqueTypists</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>isReplacedByIncomingMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Long</name></argument>&gt;</argument_list></name></type> <name>activeThreads</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>typistMap</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>filter</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>t</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>!</operator><call><name><name>typistMap</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isEmpty</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call><operator>.</operator><call><name>collect</name><argument_list>(<argument><expr><call><name><name>Collectors</name><operator>.</operator><name>toSet</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>threadsNotifier</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><name>activeThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>TypingState</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>typists</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>         <name>replacedByIncomingMessage</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TypingState</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>typists</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>replacedByIncomingMessage</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>typists</name></name>                   <operator>=</operator> <name>typists</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>replacedByIncomingMessage</name></name> <operator>=</operator> <name>replacedByIncomingMessage</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Recipient</name></argument>&gt;</argument_list></name></type> <name>getTypists</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>typists</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isReplacedByIncomingMessage</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>replacedByIncomingMessage</name></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>Typist</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Recipient</name></type> <name>author</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>       <name>device</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>      <name>threadId</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>Typist</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>device</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>threadId</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>author</name></name>   <operator>=</operator> <name>author</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>device</name></name>   <operator>=</operator> <name>device</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>threadId</name></name> <operator>=</operator> <name>threadId</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>Recipient</name></type> <name>getAuthor</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>author</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getDevice</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>device</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>getThreadId</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>threadId</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>Object</name></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>this</name> <operator>==</operator> <name>o</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
      <if>if <condition>(<expr><name>o</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <call><name>getClass</name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>o</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

      <decl_stmt><decl><type><name>Typist</name></type> <name>typist</name> <init>= <expr><operator>(</operator><name>Typist</name><operator>)</operator> <name>o</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>device</name> <operator>!=</operator> <name><name>typist</name><operator>.</operator><name>device</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      <if>if <condition>(<expr><name>threadId</name> <operator>!=</operator> <name><name>typist</name><operator>.</operator><name>threadId</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
      <return>return <expr><call><name><name>author</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name><name>typist</name><operator>.</operator><name>author</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>hashCode</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><call><name><name>author</name><operator>.</operator><name>hashCode</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <name>device</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">31</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call>(<name>int</name>) <argument_list>(<argument><expr><name>threadId</name> <operator>^</operator> <operator>(</operator><name>threadId</name> <operator>&gt;&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>result</name></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
