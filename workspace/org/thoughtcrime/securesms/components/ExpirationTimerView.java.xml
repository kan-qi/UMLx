<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\ExpirationTimerView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>lang</name><operator>.</operator><name>ref</name><operator>.</operator><name>WeakReference</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>

<class><specifier>public</specifier> class <name>ExpirationTimerView</name> <super><extends>extends <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>AppCompatImageView</name></name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>startedAt</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>long</name></type> <name>expiresIn</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>visible</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>stopped</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>frames</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[]</index></name><block>{ <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer00</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer05</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer10</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer15</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer20</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer25</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer30</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer35</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer40</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer45</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer50</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer55</name></name></expr>,
                                          <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>timer60</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ExpirationTimerView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ExpirationTimerView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ExpirationTimerView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setExpirationTime</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>startedAt</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startedAt</name></name> <operator>=</operator> <name>startedAt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expiresIn</name></name> <operator>=</operator> <name>expiresIn</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setPercentComplete</name><argument_list>(<argument><expr><call><name>calculateProgress</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startedAt</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>expiresIn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPercentComplete</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>percentage</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>percentFull</name> <init>= <expr><literal type="number">1</literal> <operator>-</operator> <name>percentage</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>frame</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>ceil</name></name><argument_list>(<argument><expr><name>percentFull</name> <operator>*</operator> <operator>(</operator><name><name>frames</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>frame</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>frames</name><operator>.</operator><name>length</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setImageResource</name><argument_list>(<argument><expr><name><name>frames</name><index>[<expr><name>frame</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>startAnimation</name><parameter_list>()</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <expr_stmt><expr><name>visible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>!</operator><name>stopped</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then>
      <else>else          <block type="pseudo"><expr_stmt><expr><name>stopped</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></else></if>
    }</block></synchronized>

    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AnimationUpdateRunnable</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>calculateAnimationDelay</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startedAt</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>expiresIn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>stopAnimation</name><parameter_list>()</parameter_list> <block>{
    <synchronized>synchronized <init>(<expr><name>this</name></expr>)</init> <block>{
      <expr_stmt><expr><name>visible</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></synchronized>
  }</block></function>

  <function><specifier>private</specifier> <type><name>float</name></type> <name>calculateProgress</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>startedAt</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type>  <name>progressed</name>      <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startedAt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>percentComplete</name> <init>= <expr><operator>(</operator><name>float</name><operator>)</operator><name>progressed</name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>expiresIn</name></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>percentComplete</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>calculateAnimationDelay</name><parameter_list>(<parameter><decl><type><name>long</name></type> <name>startedAt</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>expiresIn</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>progressed</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>startedAt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>remaining</name>  <init>= <expr><name>expiresIn</name> <operator>-</operator> <name>progressed</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>remaining</name> <operator>&lt;</operator> <call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="number">50</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><literal type="number">1000</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AnimationUpdateRunnable</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WeakReference</name><argument_list type="generic">&lt;<argument><name>ExpirationTimerView</name></argument>&gt;</argument_list></name></type> <name>expirationTimerViewReference</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>AnimationUpdateRunnable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>ExpirationTimerView</name></type> <name>expirationTimerView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expirationTimerViewReference</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>WeakReference</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>expirationTimerView</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>ExpirationTimerView</name></type> <name>timerView</name> <init>= <expr><call><name><name>expirationTimerViewReference</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>timerView</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

      <expr_stmt><expr><call><name><name>timerView</name><operator>.</operator><name>setExpirationTime</name></name><argument_list>(<argument><expr><name><name>timerView</name><operator>.</operator><name>startedAt</name></name></expr></argument>, <argument><expr><name><name>timerView</name><operator>.</operator><name>expiresIn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <synchronized>synchronized <init>(<expr><name>timerView</name></expr>)</init> <block>{
        <if>if <condition>(<expr><operator>!</operator><name><name>timerView</name><operator>.</operator><name>visible</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>timerView</name><operator>.</operator><name>stopped</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <return>return;</return>
        }</block></then></if>
      }</block></synchronized>

      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>timerView</name><operator>.</operator><name>calculateAnimationDelay</name></name><argument_list>(<argument><expr><name><name>timerView</name><operator>.</operator><name>startedAt</name></name></expr></argument>, <argument><expr><name><name>timerView</name><operator>.</operator><name>expiresIn</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

}</block></class>
</unit>
