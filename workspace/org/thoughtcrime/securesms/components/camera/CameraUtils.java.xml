<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\camera\CameraUtils.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>CameraInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>Parameters</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name><operator>.</operator><name>Size</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Surface</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"deprecation"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>CameraUtils</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>CameraUtils</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="block">/*
   * modified from: https://github.com/commonsguy/cwac-camera/blob/master/camera/src/com/commonsware/cwac/camera/CameraUtils.java
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Size</name></type> <name>getPreferredPreviewSize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>displayOrientation</name></decl></parameter>,
                                                       <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>,
                                                       <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,
                                                       <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Parameters</name></type> <name>parameters</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>    <name>targetWidth</name>  <init>= <expr><ternary><condition><expr><name>displayOrientation</name> <operator>%</operator> <literal type="number">180</literal> <operator>==</operator> <literal type="number">90</literal></expr> ?</condition><then> <expr><name>height</name></expr> </then><else>: <expr><name>width</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type>    <name>targetHeight</name> <init>= <expr><ternary><condition><expr><name>displayOrientation</name> <operator>%</operator> <literal type="number">180</literal> <operator>==</operator> <literal type="number">90</literal></expr> ?</condition><then> <expr><name>width</name></expr>  </then><else>: <expr><name>height</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>targetRatio</name>  <init>= <expr><operator>(</operator><name>double</name><operator>)</operator> <name>targetWidth</name> <operator>/</operator> <name>targetHeight</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"getPreferredPreviewSize(%d, %d, %d) -&gt; target %dx%d, AR %.02f"</literal></expr></argument>,
                             <argument><expr><name>displayOrientation</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>,
                             <argument><expr><name>targetWidth</name></expr></argument>, <argument><expr><name>targetHeight</name></expr></argument>, <argument><expr><name>targetRatio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Size</name></argument>&gt;</argument_list></name></type> <name>sizes</name>     <init>= <expr><call><name><name>parameters</name><operator>.</operator><name>getSupportedPreviewSizes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Size</name></argument>&gt;</argument_list></name></type> <name>ideals</name>    <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Size</name></argument>&gt;</argument_list></name></type> <name>bigEnough</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>Size</name></type> <name>size</name> <range>: <expr><name>sizes</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"  %dx%d (%.02f)"</literal></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>size</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>size</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name><name>size</name><operator>.</operator><name>height</name></name> <operator>==</operator> <name><name>size</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name>targetRatio</name> <operator>&amp;&amp;</operator> <name><name>size</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name>targetHeight</name> <operator>&amp;&amp;</operator> <name><name>size</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name>targetWidth</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>ideals</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"    (ideal ratio)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name><name>size</name><operator>.</operator><name>width</name></name> <operator>&gt;=</operator> <name>targetWidth</name> <operator>&amp;&amp;</operator> <name><name>size</name><operator>.</operator><name>height</name></name> <operator>&gt;=</operator> <name>targetHeight</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>bigEnough</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"    (good size, suboptimal ratio)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></for>

    <if>if      <condition>(<expr><operator>!</operator><call><name><name>ideals</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>    <block type="pseudo"><return>return <expr><call><name><name>Collections</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>ideals</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AreaComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>bigEnough</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>Collections</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>bigEnough</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AspectRatioComparator</name><argument_list>(<argument><expr><name>targetRatio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    <else>else                           <block type="pseudo"><return>return <expr><call><name><name>Collections</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>sizes</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>AreaComparator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <comment type="line">// based on</comment>
  <comment type="line">// http://developer.android.com/reference/android/hardware/Camera.html#setDisplayOrientation(int)</comment>
  <comment type="line">// and http://stackoverflow.com/a/10383164/115145</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>int</name></type> <name>getCameraDisplayOrientation</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Activity</name></type> <name>activity</name></decl></parameter>,
                                                <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraInfo</name></type> <name>info</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name>int</name></type>            <name>rotation</name> <init>= <expr><call><name><name>activity</name><operator>.</operator><name>getWindowManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getRotation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>            <name>degrees</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>dm</name>       <init>= <expr><operator>new</operator> <call><name>DisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>activity</name><operator>.</operator><name>getWindowManager</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDefaultDisplay</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMetrics</name><argument_list>(<argument><expr><name>dm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>rotation</name></expr>)</condition> <block>{
    <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_0</name></name></expr>:</case>   <expr_stmt><expr><name>degrees</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>   <break>break;</break>
    <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_90</name></name></expr>:</case>  <expr_stmt><expr><name>degrees</name> <operator>=</operator> <literal type="number">90</literal></expr>;</expr_stmt>  <break>break;</break>
    <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_180</name></name></expr>:</case> <expr_stmt><expr><name>degrees</name> <operator>=</operator> <literal type="number">180</literal></expr>;</expr_stmt> <break>break;</break>
    <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_270</name></name></expr>:</case> <expr_stmt><expr><name>degrees</name> <operator>=</operator> <literal type="number">270</literal></expr>;</expr_stmt> <break>break;</break>
    }</block></switch>

    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><literal type="number">360</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>info</name><operator>.</operator><name>orientation</name></name> <operator>+</operator> <name>degrees</name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>(</operator><name><name>info</name><operator>.</operator><name>orientation</name></name> <operator>-</operator> <name>degrees</name> <operator>+</operator> <literal type="number">360</literal><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AreaComparator</name> <super><implements>implements <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name>Size</name></argument>&gt;</argument_list></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>Long</name><operator>.</operator><name>signum</name></name><argument_list>(<argument><expr><name><name>lhs</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>lhs</name><operator>.</operator><name>height</name></name> <operator>-</operator> <name><name>rhs</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>rhs</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>AspectRatioComparator</name> <super><extends>extends <name>AreaComparator</name></extends></super> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>double</name></type> <name>target</name></decl>;</decl_stmt>
    <constructor><specifier>public</specifier> <name>AspectRatioComparator</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>target</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><name>Size</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>lhsDiff</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>target</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>lhs</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>lhs</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name>double</name></type> <name>rhsDiff</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><name>target</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>rhs</name><operator>.</operator><name>width</name></name> <operator>/</operator> <name><name>rhs</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if      <condition>(<expr><name>lhsDiff</name> <operator>&lt;</operator> <name>rhsDiff</name></expr>)</condition><then>  <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then>
      <elseif>else <if>if <condition>(<expr><name>lhsDiff</name> <operator>&gt;</operator> <name>rhsDiff</name></expr>)</condition><then>  <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if></elseif>
      <else>else                         <block type="pseudo"><return>return <expr><call><name><name>super</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
