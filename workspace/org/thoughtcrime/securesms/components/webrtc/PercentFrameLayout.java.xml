<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\webrtc\PercentFrameLayout.java"><comment type="block">/*
 *  Copyright 2015 The WebRTC Project Authors. All rights reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>webrtc</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuffXfermode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Xfermode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Simple container that confines the children to a subrectangle specified as percentage values of
 * the container size. The children are centered horizontally and vertically inside the confined
 * space.
 */</comment>
<class><specifier>public</specifier> class <name>PercentFrameLayout</name> <super><extends>extends <name>ViewGroup</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>xPercent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>yPercent</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>widthPercent</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>heightPercent</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>square</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>hidden</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>PercentFrameLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PercentFrameLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>PercentFrameLayout</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setSquare</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>square</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>square</name></name> <operator>=</operator> <name>square</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setHidden</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hidden</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hidden</name></name> <operator>=</operator> <name>hidden</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isHidden</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>hidden</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPosition</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xPercent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yPercent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>widthPercent</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightPercent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>xPercent</name></name> <operator>=</operator> <name>xPercent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>yPercent</name></name> <operator>=</operator> <name>yPercent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>widthPercent</name></name> <operator>=</operator> <name>widthPercent</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>heightPercent</name></name> <operator>=</operator> <name>heightPercent</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>shouldDelayChildPressedState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>widthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>heightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> <init>= <expr><call><name>getDefaultSize</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>widthMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> <init>= <expr><call><name>getDefaultSize</name><argument_list>(<argument><expr><name><name>Integer</name><operator>.</operator><name>MAX_VALUE</name></name></expr></argument>, <argument><expr><name>heightMeasureSpec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>setMeasuredDimension</name><argument_list>(<argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>childWidth</name>  <init>= <expr><name>width</name> <operator>*</operator> <name>widthPercent</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>childHeight</name> <init>= <expr><name>height</name> <operator>*</operator> <name>heightPercent</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>square</name></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>width</name> <operator>&gt;</operator> <name>height</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>childWidth</name>  <operator>=</operator> <name>childHeight</name></expr>;</expr_stmt></block></then>
      <else>else                <block type="pseudo"><expr_stmt><expr><name>childHeight</name> <operator>=</operator> <name>childWidth</name></expr>;</expr_stmt></block></else></if>
    }</block></then></if>

    <if>if <condition>(<expr><name>hidden</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>childWidth</name>  <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>childHeight</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>childWidthMeasureSpec</name>  <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>childWidth</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>childHeightMeasureSpec</name> <init>= <expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>childHeight</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>AT_MOST</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>getChildCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name>getChildAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>child</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>GONE</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>measure</name></name><argument_list>(<argument><expr><name>childWidthMeasureSpec</name></expr></argument>, <argument><expr><name>childHeightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onLayout</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>changed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>width</name> <init>= <expr><name>right</name> <operator>-</operator> <name>left</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>height</name> <init>= <expr><name>bottom</name> <operator>-</operator> <name>top</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// Sub-rectangle specified by percentage values.</comment>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>subWidth</name> <init>= <expr><name>width</name> <operator>*</operator> <name>widthPercent</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>subHeight</name> <init>= <expr><name>height</name> <operator>*</operator> <name>heightPercent</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>subLeft</name> <init>= <expr><name>left</name> <operator>+</operator> <name>width</name> <operator>*</operator> <name>xPercent</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>subTop</name> <init>= <expr><name>top</name> <operator>+</operator> <name>height</name> <operator>*</operator> <name>yPercent</name> <operator>/</operator> <literal type="number">100</literal></expr></init></decl>;</decl_stmt>


    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>getChildCount</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>View</name></type> <name>child</name> <init>= <expr><call><name>getChildAt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>child</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name>GONE</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childWidth</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getMeasuredWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>childHeight</name> <init>= <expr><call><name><name>child</name><operator>.</operator><name>getMeasuredHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// Center child both vertically and horizontally.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>childLeft</name> <init>= <expr><name>subLeft</name> <operator>+</operator> <operator>(</operator><name>subWidth</name> <operator>-</operator> <name>childWidth</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>childTop</name> <init>= <expr><name>subTop</name> <operator>+</operator> <operator>(</operator><name>subHeight</name> <operator>-</operator> <name>childHeight</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>hidden</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>childLeft</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>childTop</name>  <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><call><name><name>child</name><operator>.</operator><name>layout</name></name><argument_list>(<argument><expr><name>childLeft</name></expr></argument>, <argument><expr><name>childTop</name></expr></argument>, <argument><expr><name>childLeft</name> <operator>+</operator> <name>childWidth</name></expr></argument>, <argument><expr><name>childTop</name> <operator>+</operator> <name>childHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></function>
}</block></class>
</unit>
