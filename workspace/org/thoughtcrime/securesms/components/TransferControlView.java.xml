<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\TransferControlView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name><operator>.</operator><name>Mode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name><operator>.</operator><name>VERSION_CODES</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>content</name><operator>.</operator><name>ContextCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>FastOutSlowInInterpolator</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>nineoldandroids</name><operator>.</operator><name>animation</name><operator>.</operator><name>ValueAnimator</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>pnikosis</name><operator>.</operator><name>materialishprogress</name><operator>.</operator><name>ProgressWheel</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>EventBus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>Subscribe</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>greenrobot</name><operator>.</operator><name>eventbus</name><operator>.</operator><name>ThreadMode</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>attachments</name><operator>.</operator><name>Attachment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>events</name><operator>.</operator><name>PartProgressEvent</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>Slide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>HashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>

<class><specifier>public</specifier> class <name>TransferControlView</name> <super><extends>extends <name>FrameLayout</name></extends></super> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TRANSITION_MS</name> <init>= <expr><literal type="number">300</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>View</name></type>        <name>current</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ProgressWheel</name></type> <name>progressWheel</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type>          <name>downloadDetails</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type>      <name>downloadDetailsText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>           <name>contractedWidth</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>           <name>expandedWidth</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>downloadProgress</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TransferControlView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>TransferControlView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>TransferControlView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>transfer_controls_view</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>final</specifier> <name>Drawable</name></type> <name>background</name> <init>= <expr><call><name><name>ContextCompat</name><operator>.</operator><name>getDrawable</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>transfer_controls_background</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN_MR1</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>background</name><operator>.</operator><name>setColorFilter</name></name><argument_list>(<argument><expr><literal type="number">0x66ffffff</literal></expr></argument>, <argument><expr><name><name>Mode</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>setLongClickable</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>background</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>downloadProgress</name></name>    <operator>=</operator> <operator>new</operator> <call><name><name>HashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>progressWheel</name></name>       <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>progress_wheel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>downloadDetails</name></name>     <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>download_details</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>downloadDetailsText</name></name> <operator>=</operator> <call><name><name>ViewUtil</name><operator>.</operator><name>findById</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>download_details_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contractedWidth</name></name>     <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>transfer_controls_contracted_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>expandedWidth</name></name>       <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>transfer_controls_expanded_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setFocusable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>focusable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><name>focusable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>downloadDetails</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><name>focusable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setClickable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>clickable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setClickable</name></name><argument_list>(<argument><expr><name>clickable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>downloadDetails</name><operator>.</operator><name>setClickable</name></name><argument_list>(<argument><expr><name>clickable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onAttachedToWindow</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttachedToWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isRegistered</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>register</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDetachedFromWindow</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetachedFromWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>EventBus</name><operator>.</operator><name>getDefault</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregister</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setSlide</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slides</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setSlides</name><argument_list>(<argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>slides</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setSlides</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>slides</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Must provide at least one slide."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slides</name></name> <operator>=</operator> <name>slides</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name>isUpdateToExistingSet</name><argument_list>(<argument><expr><name>slides</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>downloadProgress</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>slides</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>s</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>downloadProgress</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0f</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTransferState</name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>downloadProgress</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <switch>switch <condition>(<expr><call><name>getTransferState</name><argument_list>(<argument><expr><name>slides</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_STARTED</name></name></expr>:</case>
        <expr_stmt><expr><call><name>showProgressSpinner</name><argument_list>(<argument><expr><call><name>calculateProgress</name><argument_list>(<argument><expr><name>downloadProgress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_PENDING</name></name></expr>:</case>
      <case>case <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_FAILED</name></name></expr>:</case>
        <expr_stmt><expr><call><name><name>downloadDetailsText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name>getDownloadText</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>slides</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>downloadDetails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></switch>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>showProgressSpinner</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>showProgressSpinner</name><argument_list>(<argument><expr><call><name>calculateProgress</name><argument_list>(<argument><expr><name>downloadProgress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>showProgressSpinner</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>progress</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>progress</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>progressWheel</name><operator>.</operator><name>spin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>progressWheel</name><operator>.</operator><name>setInstantProgress</name></name><argument_list>(<argument><expr><name>progress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>display</name><argument_list>(<argument><expr><name>progressWheel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setDownloadClickListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>Nullable</name></annotation> <name>OnClickListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>downloadDetails</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>clearAnimation</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setVisibility</name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>current</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>clearAnimation</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>current</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>current</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>slides</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setShowDownloadText</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>showDownloadText</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>downloadDetailsText</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>showDownloadText</name></expr> ?</condition><then> <expr><name>VISIBLE</name></expr> </then><else>: <expr><name>GONE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>forceLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isUpdateToExistingSet</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>slides</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>downloadProgress</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>downloadProgress</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getTransferState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>transferState</name> <init>= <expr><name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>Slide</name></type> <name>slide</name> <range>: <expr><name>slides</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_PENDING</name></name> <operator>&amp;&amp;</operator> <name>transferState</name> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>transferState</name> <operator>=</operator> <call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>transferState</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>transferState</name></expr></argument>, <argument><expr><call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></for>
    <return>return <expr><name>transferState</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>getDownloadText</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Slide</name></argument>&gt;</argument_list></name></type> <name>slides</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>slides</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>slides</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>.</operator><call><name>getContentDescription</name><argument_list>()</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>downloadCount</name> <init>= <expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>slides</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>reduce</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>count</name>, <name>slide</name><operator>)</operator> <operator>-&gt;</operator> <call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr> ?</condition><then> <expr><name>count</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>count</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <return>return <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getQuantityString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>plurals</name><operator>.</operator><name>TransferControlView_n_items</name></name></expr></argument>, <argument><expr><name>downloadCount</name></expr></argument>, <argument><expr><name>downloadCount</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>display</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <specifier>final</specifier> <name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>sourceWidth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>current</name> <operator>==</operator> <name>downloadDetails</name> <operator>&amp;&amp;</operator> <call><name><name>downloadDetailsText</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>VISIBLE</name><operator>)</operator></expr> ?</condition><then> <expr><name>expandedWidth</name></expr> </then><else>: <expr><name>contractedWidth</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>targetWidth</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>view</name>    <operator>==</operator> <name>downloadDetails</name> <operator>&amp;&amp;</operator> <call><name><name>downloadDetailsText</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>VISIBLE</name><operator>)</operator></expr> ?</condition><then> <expr><name>expandedWidth</name></expr> </then><else>: <expr><name>contractedWidth</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>current</name> <operator>==</operator> <name>view</name> <operator>||</operator> <name>current</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>layoutParams</name> <init>= <expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>layoutParams</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>targetWidth</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setLayoutParams</name><argument_list>(<argument><expr><name>layoutParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>TRANSITION_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Animator</name></type> <name>anim</name> <init>= <expr><call><name>getWidthAnimator</name><argument_list>(<argument><expr><name>sourceWidth</name></expr></argument>, <argument><expr><name>targetWidth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name>view</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>TRANSITION_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>TRANSITION_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>TRANSITION_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name>current</name> <operator>=</operator> <name>view</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Animator</name></type> <name>getWidthAnimator</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><specifier>final</specifier> <name>int</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>ValueAnimator</name></type> <name>anim</name> <init>= <expr><call><name><name>ValueAnimator</name><operator>.</operator><name>ofInt</name></name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>addUpdateListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>animation</name></decl></parameter></parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>val</name> <init>= <expr><operator>(</operator><name>Integer</name><operator>)</operator><call><name><name>animation</name><operator>.</operator><name>getAnimatedValue</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>layoutParams</name> <init>= <expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>layoutParams</name><operator>.</operator><name>width</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setLayoutParams</name><argument_list>(<argument><expr><name>layoutParams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setInterpolator</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>FastOutSlowInInterpolator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>anim</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name>TRANSITION_MS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>anim</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>float</name></type> <name>calculateProgress</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>Attachment</name></argument>, <argument><name>Float</name></argument>&gt;</argument_list></name></type> <name>downloadProgress</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>totalProgress</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>float</name></type> <name>progress</name> <range>: <expr><call><name><name>downloadProgress</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><name>totalProgress</name> <operator>+=</operator>  <name>progress</name> <operator>/</operator> <call><name><name>downloadProgress</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>totalProgress</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Subscribe</name><argument_list>(<argument><expr><name>sticky</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>, <argument><expr><name>threadMode</name> <operator>=</operator> <name><name>ThreadMode</name><operator>.</operator><name>ASYNC</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onEventAsync</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>PartProgressEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>downloadProgress</name><operator>.</operator><name>containsKey</name></name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>attachment</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
        <expr_stmt><expr><call><name><name>downloadProgress</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>attachment</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name><name>event</name><operator>.</operator><name>progress</name></name><operator>)</operator> <operator>/</operator> <name><name>event</name><operator>.</operator><name>total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>progressWheel</name><operator>.</operator><name>setInstantProgress</name></name><argument_list>(<argument><expr><call><name>calculateProgress</name><argument_list>(<argument><expr><name>downloadProgress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>
}</block></class>
</unit>
