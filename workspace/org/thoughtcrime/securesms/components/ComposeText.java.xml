<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\ComposeText.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>RequiresApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v13</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>EditorInfoCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v13</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputConnectionCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v13</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputContentInfoCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>os</name><operator>.</operator><name>BuildCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Spannable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableString</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>SpannableStringBuilder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name><operator>.</operator><name>TruncateAt</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>style</name><operator>.</operator><name>RelativeSizeSpan</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>EditorInfo</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputConnection</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>TransportOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiEditText</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<class><specifier>public</specifier> class <name>ComposeText</name> <super><extends>extends <name>EmojiEditText</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><name>CharSequence</name></type>    <name>hint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SpannableString</name></type> <name>subHint</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name><name>InputPanel</name><operator>.</operator><name>MediaListener</name></name></type>      <name>mediaListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><name>CursorPositionChangedListener</name></type> <name>cursorPositionChangedListener</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ComposeText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ComposeText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ComposeText</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>String</name></type> <name>getTextTrimmed</name><parameter_list>()</parameter_list><block>{
    <return>return <expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>trim</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onLayout</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>changed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>right</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bottom</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onLayout</name></name><argument_list>(<argument><expr><name>changed</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>subHint</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>setHint</name><argument_list>(<argument><expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>ellipsizeToWidth</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call>
                                            <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>ellipsizeToWidth</name><argument_list>(<argument><expr><name>subHint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>setHint</name><argument_list>(<argument><expr><call><name>ellipsizeToWidth</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSelectionChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selStart</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>selEnd</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSelectionChanged</name></name><argument_list>(<argument><expr><name>selStart</name></expr></argument>, <argument><expr><name>selEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>cursorPositionChangedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cursorPositionChangedListener</name><operator>.</operator><name>onCursorPositionChanged</name></name><argument_list>(<argument><expr><name>selStart</name></expr></argument>, <argument><expr><name>selEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>CharSequence</name></type> <name>ellipsizeToWidth</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>text</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>TextUtils</name><operator>.</operator><name>ellipsize</name></name><argument_list>(<argument><expr><name>text</name></expr></argument>,
                               <argument><expr><call><name>getPaint</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getPaddingLeft</name><argument_list>()</argument_list></call> <operator>-</operator> <call><name>getPaddingRight</name><argument_list>()</argument_list></call></expr></argument>,
                               <argument><expr><name><name>TruncateAt</name><operator>.</operator><name>END</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setHint</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>hint</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CharSequence</name></type> <name>subHint</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>hint</name></name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>subHint</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subHint</name></name> <operator>=</operator> <operator>new</operator> <call><name>SpannableString</name><argument_list>(<argument><expr><name>subHint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>subHint</name><operator>.</operator><name>setSpan</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>RelativeSizeSpan</name><argument_list>(<argument><expr><literal type="number">0.5f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name><name>subHint</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Spannable</name><operator>.</operator><name>SPAN_INCLUSIVE_INCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>subHint</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>subHint</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>SpannableStringBuilder</name><argument_list>()</argument_list></call><operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>ellipsizeToWidth</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call>
                                                <operator>.</operator><call><name>append</name><argument_list>(<argument><expr><call><name>ellipsizeToWidth</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>subHint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setHint</name></name><argument_list>(<argument><expr><call><name>ellipsizeToWidth</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>appendInvite</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>invite</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>toString</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>append</name><argument_list>(<argument><expr><name>invite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setSelection</name><argument_list>(<argument><expr><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setCursorPositionChangedListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CursorPositionChangedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cursorPositionChangedListener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isLandscape</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name> <operator>==</operator> <name><name>Configuration</name><operator>.</operator><name>ORIENTATION_LANDSCAPE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setTransport</name><parameter_list>(<parameter><decl><type><name>TransportOption</name></type> <name>transport</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>useSystemEmoji</name> <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isSystemEmojiPreferred</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isIncognito</name>    <init>= <expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isIncognitoKeyboardEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>imeOptions</name> <init>= <expr><operator>(</operator><call><name>getImeOptions</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>~</operator><name><name>EditorInfo</name><operator>.</operator><name>IME_MASK_ACTION</name></name><operator>)</operator> <operator>|</operator> <name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_SEND</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>inputType</name>  <init>= <expr><call><name>getInputType</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name>isLandscape</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>setImeActionLabel</name><argument_list>(<argument><expr><call><name><name>transport</name><operator>.</operator><name>getComposeHint</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>EditorInfo</name><operator>.</operator><name>IME_ACTION_SEND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else               <block type="pseudo"><expr_stmt><expr><call><name>setImeActionLabel</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <if>if <condition>(<expr><name>useSystemEmoji</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>inputType</name> <operator>=</operator> <operator>(</operator><name>inputType</name> <operator>&amp;</operator> <operator>~</operator><name><name>InputType</name><operator>.</operator><name>TYPE_MASK_VARIATION</name></name><operator>)</operator> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_SHORT_MESSAGE</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>setInputType</name><argument_list>(<argument><expr><name>inputType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setImeOptions</name><argument_list>(<argument><expr><name>imeOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setHint</name><argument_list>(<argument><expr><call><name><name>transport</name><operator>.</operator><name>getComposeHint</name></name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><ternary><condition><expr><call><name><name>transport</name><operator>.</operator><name>getSimName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>
                ?</condition><then> <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>conversation_activity__from_sim_name</name></name></expr></argument>, <argument><expr><call><name><name>transport</name><operator>.</operator><name>getSimName</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>InputConnection</name></type> <name>onCreateInputConnection</name><parameter_list>(<parameter><decl><type><name>EditorInfo</name></type> <name>editorInfo</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>InputConnection</name></type> <name>inputConnection</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>onCreateInputConnection</name></name><argument_list>(<argument><expr><name>editorInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if<condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isEnterSendsEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>editorInfo</name><operator>.</operator><name>imeOptions</name></name> <operator>&amp;=</operator> <operator>~</operator><name><name>EditorInfo</name><operator>.</operator><name>IME_FLAG_NO_ENTER_ACTION</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <literal type="number">21</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>inputConnection</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>mediaListener</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>      <block type="pseudo"><return>return <expr><name>inputConnection</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>inputConnection</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then>    <block type="pseudo"><return>return <expr><literal type="null">null</literal></expr>;</return></block></then></if>

    <expr_stmt><expr><call><name><name>EditorInfoCompat</name><operator>.</operator><name>setContentMimeTypes</name></name><argument_list>(<argument><expr><name>editorInfo</name></expr></argument>, <argument><expr><operator>new</operator> <name><name>String</name><index>[]</index></name> <block>{<expr><literal type="string">"image/jpeg"</literal></expr>, <expr><literal type="string">"image/png"</literal></expr>, <expr><literal type="string">"image/gif"</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name><name>InputConnectionCompat</name><operator>.</operator><name>createWrapper</name></name><argument_list>(<argument><expr><name>inputConnection</name></expr></argument>, <argument><expr><name>editorInfo</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>CommitContentListener</name><argument_list>(<argument><expr><name>mediaListener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setMediaListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>InputPanel</name><operator>.</operator><name>MediaListener</name></name></type> <name>mediaListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaListener</name></name> <operator>=</operator> <name>mediaListener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isIncognitoKeyboardEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setImeOptions</name><argument_list>(<argument><expr><call><name>getImeOptions</name><argument_list>()</argument_list></call> <operator>|</operator> <literal type="number">16777216</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <class><annotation>@<name>RequiresApi</name><argument_list>(<argument><expr><name>api</name> <operator>=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB_MR2</name></name></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> class <name>CommitContentListener</name> <super><implements>implements <name><name>InputConnectionCompat</name><operator>.</operator><name>OnCommitContentListener</name></name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>CommitContentListener</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>InputPanel</name><operator>.</operator><name>MediaListener</name></name></type> <name>mediaListener</name></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>CommitContentListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>InputPanel</name><operator>.</operator><name>MediaListener</name></name></type> <name>mediaListener</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mediaListener</name></name> <operator>=</operator> <name>mediaListener</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onCommitContent</name><parameter_list>(<parameter><decl><type><name>InputContentInfoCompat</name></type> <name>inputContentInfo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>Bundle</name></type> <name>opts</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>BuildCompat</name><operator>.</operator><name>isAtLeastNMR1</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>flags</name> <operator>&amp;</operator> <name><name>InputConnectionCompat</name><operator>.</operator><name>INPUT_CONTENT_GRANT_READ_URI_PERMISSION</name></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <try>try <block>{
          <expr_stmt><expr><call><name><name>inputContentInfo</name><operator>.</operator><name>requestPermission</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></catch></try>
      }</block></then></if>

      <if>if <condition>(<expr><call><name><name>inputContentInfo</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMimeTypeCount</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>mediaListener</name><operator>.</operator><name>onMediaSelected</name></name><argument_list>(<argument><expr><call><name><name>inputContentInfo</name><operator>.</operator><name>getContentUri</name></name><argument_list>()</argument_list></call></expr></argument>,
                                      <argument><expr><call><name><name>inputContentInfo</name><operator>.</operator><name>getDescription</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMimeType</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
      }</block></then></if>

      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>CursorPositionChangedListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onCursorPositionChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
