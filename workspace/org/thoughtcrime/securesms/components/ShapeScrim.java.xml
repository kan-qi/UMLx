<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\ShapeScrim.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuffXfermode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>ShapeScrim</name> <super><extends>extends <name>View</name></extends></super> <block>{

  <enum><specifier>private</specifier> enum <name>ShapeType</name> <block>{
    <decl><name>CIRCLE</name></decl>, <decl><name>SQUARE</name></decl>
  }</block></enum>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Paint</name></type>     <name>eraser</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ShapeType</name></type> <name>shape</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type>     <name>radius</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Bitmap</name></type> <name>scrim</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Canvas</name></type> <name>scrimCanvas</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ShapeScrim</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ShapeScrim</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ShapeScrim</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TypedArray</name></type> <name>typedArray</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ShapeScrim</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>String</name></type>     <name>shapeName</name>  <init>= <expr><call><name><name>typedArray</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ShapeScrim_shape</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if      <condition>(<expr><literal type="string">"square"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>shapeName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>shape</name></name> <operator>=</operator> <name><name>ShapeType</name><operator>.</operator><name>SQUARE</name></name></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><literal type="string">"circle"</literal><operator>.</operator><call><name>equalsIgnoreCase</name><argument_list>(<argument><expr><name>shapeName</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>shape</name></name> <operator>=</operator> <name><name>ShapeType</name><operator>.</operator><name>CIRCLE</name></name></expr>;</expr_stmt></block></then></if></elseif>
      <else>else                                           <block type="pseudo"><expr_stmt><expr><name><name>this</name><operator>.</operator><name>shape</name></name> <operator>=</operator> <name><name>ShapeType</name><operator>.</operator><name>SQUARE</name></name></expr>;</expr_stmt></block></else></if>

      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getFloat</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ShapeScrim_radius</name></name></expr></argument>, <argument><expr><literal type="number">0.4f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>typedArray</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>shape</name></name>  <operator>=</operator> <name><name>ShapeType</name><operator>.</operator><name>SQUARE</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <literal type="number">0.4f</literal></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eraser</name></name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>eraser</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>eraser</name><operator>.</operator><name>setXfermode</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PorterDuffXfermode</name><argument_list>(<argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>CLEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type>   <name>shortDimension</name> <init>= <expr><ternary><condition><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name>getHeight</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>drawRadius</name>     <init>= <expr><name>shortDimension</name> <operator>*</operator> <name>radius</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>scrimCanvas</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>scrim</name> <operator>=</operator> <call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>scrimCanvas</name> <operator>=</operator> <operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>scrim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>scrim</name><operator>.</operator><name>eraseColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scrimCanvas</name><operator>.</operator><name>drawColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>parseColor</name></name><argument_list>(<argument><expr><literal type="string">"#55BDBDBD"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>shape</name> <operator>==</operator> <name><name>ShapeType</name><operator>.</operator><name>CIRCLE</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>drawCircle</name><argument_list>(<argument><expr><name>scrimCanvas</name></expr></argument>, <argument><expr><name>drawRadius</name></expr></argument>, <argument><expr><name>eraser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else                           <block type="pseudo"><expr_stmt><expr><call><name>drawSquare</name><argument_list>(<argument><expr><name>scrimCanvas</name></expr></argument>, <argument><expr><name>drawRadius</name></expr></argument>, <argument><expr><name>eraser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><name>scrim</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldHeight</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>oldHeight</name></expr></argument>, <argument><expr><name>oldHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>width</name> <operator>!=</operator> <name>oldWidth</name> <operator>||</operator> <name>height</name> <operator>!=</operator> <name>oldHeight</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>scrim</name>       <operator>=</operator> <call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>scrimCanvas</name> <operator>=</operator> <operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>scrim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>drawCircle</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Paint</name></type> <name>eraser</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawCircle</name></name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>eraser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>drawSquare</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>radius</name></decl></parameter>, <parameter><decl><type><name>Paint</name></type> <name>eraser</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>left</name>   <init>= <expr><operator>(</operator><call><name>getWidth</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>top</name>    <init>= <expr><operator>(</operator><call><name>getHeight</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>radius</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>right</name>  <init>= <expr><name>left</name> <operator>+</operator> <operator>(</operator><name>radius</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>bottom</name> <init>= <expr><name>top</name> <operator>+</operator> <operator>(</operator><name>radius</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>RectF</name></type> <name>square</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>bottom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawRoundRect</name></name><argument_list>(<argument><expr><name>square</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>eraser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
