<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\AvatarImageView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>ContactsContract</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>AppCompatImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>DiskCacheStrategy</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>avatars</name><operator>.</operator><name>ContactColors</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>avatars</name><operator>.</operator><name>GeneratedContactPhoto</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>contacts</name><operator>.</operator><name>avatars</name><operator>.</operator><name>ResourceContactPhoto</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ThemeUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>AvatarImageView</name> <super><extends>extends <name>AppCompatImageView</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>AvatarImageView</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>LIGHT_THEME_OUTLINE_PAINT</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>Paint</name></type> <name>DARK_THEME_OUTLINE_PAINT</name>  <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <static>static <block>{
    <expr_stmt><expr><call><name><name>LIGHT_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">255</literal> <operator>*</operator> <literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LIGHT_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LIGHT_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>LIGHT_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>DARK_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">255</literal> <operator>*</operator> <literal type="number">0.2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DARK_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DARK_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><literal type="number">1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>DARK_THEME_OUTLINE_PAINT</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></static>

  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>         <name>inverted</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type>           <name>outlinePaint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>OnClickListener</name></type> <name>listener</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>AvatarImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>AvatarImageView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setScaleType</name><argument_list>(<argument><expr><name><name>ScaleType</name><operator>.</operator><name>CENTER_CROP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TypedArray</name></type> <name>typedArray</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>AvatarImageView</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>inverted</name> <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getBoolean</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>typedArray</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>outlinePaint</name> <operator>=</operator> <ternary><condition><expr><call><name><name>ThemeUtil</name><operator>.</operator><name>isDarkTheme</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>DARK_THEME_OUTLINE_PAINT</name></expr> </then><else>: <expr><name>LIGHT_THEME_OUTLINE_PAINT</name></expr></else></ternary></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>dispatchDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispatchDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>cx</name>     <init>= <expr><call><name><name>canvas</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call>  <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>cy</name>     <init>= <expr><call><name><name>canvas</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>radius</name> <init>= <expr><operator>(</operator><call><name><name>canvas</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><call><name><name>outlinePaint</name><operator>.</operator><name>getStrokeWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawCircle</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument>, <argument><expr><name>radius</name></expr></argument>, <argument><expr><name>outlinePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setOnClickListener</name><parameter_list>(<parameter><decl><type><name>OnClickListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setAvatar</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>requestManager</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quickContactEnabled</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>recipient</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>requestManager</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getContactPhoto</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>fallback</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getFallbackContactPhotoDrawable</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>error</name><argument_list>(<argument><expr><call><name><name>recipient</name><operator>.</operator><name>getFallbackContactPhotoDrawable</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>ALL</name></name></expr></argument>)</argument_list></call>
                    <operator>.</operator><call><name>circleCrop</name><argument_list>()</argument_list></call>
                    <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setAvatarClickHandler</name><argument_list>(<argument><expr><name>recipient</name></expr></argument>, <argument><expr><name>quickContactEnabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>setImageDrawable</name><argument_list>(<argument><expr><operator>new</operator> <call><name>ResourceContactPhoto</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_profile_default</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>asDrawable</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ContactColors</name><operator>.</operator><name>UNKNOWN_COLOR</name><operator>.</operator><name>toConversationColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>inverted</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>glideRequests</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setAvatarClickHandler</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Recipient</name></type> <name>recipient</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>quickContactEnabled</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>recipient</name><operator>.</operator><name>isGroupRecipient</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>quickContactEnabled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
        <if>if <condition>(<expr><call><name><name>recipient</name><operator>.</operator><name>getContactUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>ContactsContract</name><operator>.</operator><name>QuickContact</name><operator>.</operator><name>showQuickContact</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>AvatarImageView</name><operator>.</operator><name>this</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getContactUri</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>ContactsContract</name><operator>.</operator><name>QuickContact</name><operator>.</operator><name>MODE_LARGE</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <decl_stmt><decl><type><specifier>final</specifier> <name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><name><name>Intent</name><operator>.</operator><name>ACTION_INSERT_OR_EDIT</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isEmail</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>EMAIL</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toEmailString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>putExtra</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Intents</name><operator>.</operator><name>Insert</name><operator>.</operator><name>PHONE</name></name></expr></argument>, <argument><expr><call><name><name>recipient</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>toPhoneString</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></else></if>
          <expr_stmt><expr><call><name><name>intent</name><operator>.</operator><name>setType</name></name><argument_list>(<argument><expr><name><name>ContactsContract</name><operator>.</operator><name>Contacts</name><operator>.</operator><name>CONTENT_ITEM_TYPE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>startActivity</name><argument_list>(<argument><expr><name>intent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

}</block></class>
</unit>
