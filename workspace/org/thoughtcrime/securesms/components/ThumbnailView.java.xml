<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\ThumbnailView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>UiThread</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>RequestBuilder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>DiskCacheStrategy</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>BitmapTransformation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>CenterCrop</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>FitCenter</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>RoundedCorners</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>request</name><operator>.</operator><name>RequestOptions</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>AttachmentDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>DecryptableStreamUriLoader</name><operator>.</operator><name>DecryptableUri</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequest</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>Slide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlideClickListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlidesClickedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>

<import>import static <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>drawable</name><operator>.</operator><name>DrawableTransitionOptions</name><operator>.</operator><name>withCrossFade</name></name>;</import>

<class><specifier>public</specifier> class <name>ThumbnailView</name> <super><extends>extends <name>FrameLayout</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name>        <init>= <expr><call><name><name>ThumbnailView</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>WIDTH</name>      <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>HEIGHT</name>     <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MIN_WIDTH</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MAX_WIDTH</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MIN_HEIGHT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type>    <name>MAX_HEIGHT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ImageView</name></type>       <name>image</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>            <name>playOverlay</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>            <name>captionIcon</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>OnClickListener</name></type> <name>parentClickListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>dimens</name>        <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>bounds</name>        <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>int</name><index>[]</index></name></type> <name>measureDimens</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransferControlView</name></argument>&gt;</argument_list></name></type> <name>transferControls</name>       <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SlideClickListener</name></type>            <name>thumbnailClickListener</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SlidesClickedListener</name></type>         <name>downloadClickListener</name>  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Slide</name></type>                         <name>slide</name>                  <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ThumbnailView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ThumbnailView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>this</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ThumbnailView</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>thumbnail_view</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>image</name></name>       <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>thumbnail_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>playOverlay</name></name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>play_overlay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>captionIcon</name></name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>thumbnail_caption_icon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>ThumbnailClickDispatcher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TypedArray</name></type> <name>typedArray</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ThumbnailView</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MIN_WIDTH</name></expr>]</index></name>  <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ThumbnailView_minWidth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MAX_WIDTH</name></expr>]</index></name>  <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ThumbnailView_maxWidth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MIN_HEIGHT</name></expr>]</index></name> <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ThumbnailView_minHeight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MAX_HEIGHT</name></expr>]</index></name> <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ThumbnailView_maxHeight</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>radius</name>             <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getDimensionPixelSize</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>ThumbnailView_thumbnail_radius</name></name></expr></argument>, <argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>thumbnail_default_radius</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>typedArray</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>radius</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_collapse_radius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onMeasure</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>originalWidthMeasureSpec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>originalHeightMeasureSpec</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>fillTargetDimensions</name><argument_list>(<argument><expr><name>measureDimens</name></expr></argument>, <argument><expr><name>dimens</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>measureDimens</name><index>[<expr><name>WIDTH</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>measureDimens</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><name>originalWidthMeasureSpec</name></expr></argument>, <argument><expr><name>originalHeightMeasureSpec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>finalWidth</name>  <init>= <expr><name><name>measureDimens</name><index>[<expr><name>WIDTH</name></expr>]</index></name> <operator>+</operator> <call><name>getPaddingLeft</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getPaddingRight</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>finalHeight</name> <init>= <expr><name><name>measureDimens</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>+</operator> <call><name>getPaddingTop</name><argument_list>()</argument_list></call> <operator>+</operator> <call><name>getPaddingBottom</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onMeasure</name></name><argument_list>(<argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>finalWidth</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name><name>MeasureSpec</name><operator>.</operator><name>makeMeasureSpec</name></name><argument_list>(<argument><expr><name>finalHeight</name></expr></argument>, <argument><expr><name><name>MeasureSpec</name><operator>.</operator><name>EXACTLY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"SuspiciousNameCombination"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>fillTargetDimensions</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>targetDimens</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>dimens</name></decl></parameter>, <parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>bounds</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dimensFilledCount</name> <init>= <expr><call><name>getNonZeroCount</name><argument_list>(<argument><expr><name>dimens</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>boundsFilledCount</name> <init>= <expr><call><name>getNonZeroCount</name><argument_list>(<argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>dimensFilledCount</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>boundsFilledCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>targetDimens</name><index>[<expr><name>WIDTH</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>targetDimens</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>double</name></type> <name>naturalWidth</name>  <init>= <expr><name><name>dimens</name><index>[<expr><name>WIDTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>naturalHeight</name> <init>= <expr><name><name>dimens</name><index>[<expr><name>HEIGHT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>minWidth</name>  <init>= <expr><name><name>bounds</name><index>[<expr><name>MIN_WIDTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxWidth</name>  <init>= <expr><name><name>bounds</name><index>[<expr><name>MAX_WIDTH</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minHeight</name> <init>= <expr><name><name>bounds</name><index>[<expr><name>MIN_HEIGHT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxHeight</name> <init>= <expr><name><name>bounds</name><index>[<expr><name>MAX_HEIGHT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>dimensFilledCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>dimensFilledCount</name> <operator>&lt;</operator> <name><name>dimens</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>, <argument><expr><literal type="string">"Width or height has been specified, but not both. Dimens: %f x %f"</literal></expr></argument>,
                                                    <argument><expr><name>naturalWidth</name></expr></argument>, <argument><expr><name>naturalHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <if>if <condition>(<expr><name>boundsFilledCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>boundsFilledCount</name> <operator>&lt;</operator> <name><name>bounds</name><operator>.</operator><name>length</name></name></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name><name>Locale</name><operator>.</operator><name>ENGLISH</name></name></expr></argument>, <argument><expr><literal type="string">"One or more min/max dimensions have been specified, but not all. Bounds: [%d, %d, %d, %d]"</literal></expr></argument>,
                                                    <argument><expr><name>minWidth</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>, <argument><expr><name>minHeight</name></expr></argument>, <argument><expr><name>maxHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>double</name></type> <name>measuredWidth</name>  <init>= <expr><name>naturalWidth</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>measuredHeight</name> <init>= <expr><name>naturalHeight</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>boolean</name></type> <name>widthInBounds</name>  <init>= <expr><name>measuredWidth</name> <operator>&gt;=</operator> <name>minWidth</name> <operator>&amp;&amp;</operator> <name>measuredWidth</name> <operator>&lt;=</operator> <name>maxWidth</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type> <name>heightInBounds</name> <init>= <expr><name>measuredHeight</name> <operator>&gt;=</operator> <name>minHeight</name> <operator>&amp;&amp;</operator> <name>measuredHeight</name> <operator>&lt;=</operator> <name>maxHeight</name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>!</operator><name>widthInBounds</name> <operator>||</operator> <operator>!</operator><name>heightInBounds</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>double</name></type> <name>minWidthRatio</name>  <init>= <expr><name>naturalWidth</name> <operator>/</operator> <name>minWidth</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>maxWidthRatio</name>  <init>= <expr><name>naturalWidth</name> <operator>/</operator> <name>maxWidth</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>minHeightRatio</name> <init>= <expr><name>naturalHeight</name> <operator>/</operator> <name>minHeight</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>maxHeightRatio</name> <init>= <expr><name>naturalHeight</name> <operator>/</operator> <name>maxHeight</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>maxWidthRatio</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>maxHeightRatio</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>maxWidthRatio</name> <operator>&gt;=</operator> <name>maxHeightRatio</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>measuredWidth</name>  <operator>/=</operator> <name>maxWidthRatio</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>measuredHeight</name> <operator>/=</operator> <name>maxWidthRatio</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>measuredWidth</name>  <operator>/=</operator> <name>maxHeightRatio</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>measuredHeight</name> <operator>/=</operator> <name>maxHeightRatio</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>measuredWidth</name>  <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>measuredWidth</name></expr></argument>, <argument><expr><name>minWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>measuredHeight</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>measuredHeight</name></expr></argument>, <argument><expr><name>minHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      }</block></then> <elseif>else <if>if <condition>(<expr><name>minWidthRatio</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name>minHeightRatio</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>minWidthRatio</name> <operator>&lt;=</operator> <name>minHeightRatio</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>measuredWidth</name>  <operator>/=</operator> <name>minWidthRatio</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>measuredHeight</name> <operator>/=</operator> <name>minWidthRatio</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>measuredWidth</name>  <operator>/=</operator> <name>minHeightRatio</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>measuredHeight</name> <operator>/=</operator> <name>minHeightRatio</name></expr>;</expr_stmt>
        }</block></else></if>

        <expr_stmt><expr><name>measuredWidth</name>  <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>measuredWidth</name></expr></argument>, <argument><expr><name>maxWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>measuredHeight</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>measuredHeight</name></expr></argument>, <argument><expr><name>maxHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></then></if>

    <expr_stmt><expr><name><name>targetDimens</name><index>[<expr><name>WIDTH</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>measuredWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>targetDimens</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name>measuredHeight</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getNonZeroCount</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>vals</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>val</name> <range>: <expr><name>vals</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <return>return <expr><name>count</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setOnClickListener</name><parameter_list>(<parameter><decl><type><name>OnClickListener</name></type> <name>l</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>parentClickListener</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setFocusable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>focusable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><name>focusable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>transferControls</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>transferControls</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setFocusable</name><argument_list>(<argument><expr><name>focusable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setClickable</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>clickable</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>setClickable</name></name><argument_list>(<argument><expr><name>clickable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>transferControls</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>transferControls</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setClickable</name><argument_list>(<argument><expr><name>clickable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>TransferControlView</name></type> <name>getTransferControls</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>transferControls</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>transferControls</name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>ViewUtil</name><operator>.</operator><name>inflateStub</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>transfer_controls_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><call><name><name>transferControls</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setBounds</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxHeight</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MIN_WIDTH</name></expr>]</index></name>  <operator>=</operator> <name>minWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MAX_WIDTH</name></expr>]</index></name>  <operator>=</operator> <name>maxWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MIN_HEIGHT</name></expr>]</index></name> <operator>=</operator> <name>minHeight</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bounds</name><index>[<expr><name>MAX_HEIGHT</name></expr>]</index></name> <operator>=</operator> <name>maxHeight</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>forceLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>UiThread</name></annotation>
  <specifier>public</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setImageResource</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>,
                                                    <parameter><decl><type><name>boolean</name></type> <name>showControls</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isPreview</name></decl></parameter>)</parameter_list>
  <block>{
    <return>return <expr><call><name>setImageResource</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>, <argument><expr><name>showControls</name></expr></argument>, <argument><expr><name>isPreview</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>UiThread</name></annotation>
  <specifier>public</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setImageResource</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>,
                                                    <parameter><decl><type><name>boolean</name></type> <name>showControls</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isPreview</name></decl></parameter>,
                                                    <parameter><decl><type><name>int</name></type> <name>naturalWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>naturalHeight</name></decl></parameter>)</parameter_list>
  <block>{
    <if>if <condition>(<expr><name>showControls</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setSlide</name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setDownloadClickListener</name><argument_list>(<argument><expr><operator>new</operator> <call><name>DownloadClickDispatcher</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>transferControls</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>

    <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>slide</name><operator>.</operator><name>hasPlayOverlay</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator>
        <operator>(</operator><call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name> <operator>||</operator> <name>isPreview</name><operator>)</operator></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>playOverlay</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>playOverlay</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>Util</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>slide</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Not re-loading slide "</literal> <operator>+</operator> <call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>slide</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>slide</name><operator>.</operator><name>getFastPreflightId</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
        <call><name><name>this</name><operator>.</operator><name>slide</name><operator>.</operator><name>getFastPreflightId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getFastPreflightId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Not re-loading slide for fast preflight: "</literal> <operator>+</operator> <call><name><name>slide</name><operator>.</operator><name>getFastPreflightId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slide</name></name> <operator>=</operator> <name>slide</name></expr>;</expr_stmt>
      <return>return <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"loading part with id "</literal> <operator>+</operator> <call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call>
               <operator>+</operator> <literal type="string">", progress "</literal> <operator>+</operator> <call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="string">", fast preflight id: "</literal> <operator>+</operator>
               <call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFastPreflightId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slide</name></name> <operator>=</operator> <name>slide</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>captionIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>slide</name><operator>.</operator><name>getCaption</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>VISIBLE</name></expr> </then><else>: <expr><name>GONE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dimens</name><index>[<expr><name>WIDTH</name></expr>]</index></name>  <operator>=</operator> <name>naturalWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dimens</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>=</operator> <name>naturalHeight</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>result</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>buildThumbnailGlideRequest</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>into</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GlideDrawableListeningTarget</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>hasPlaceholder</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>buildPlaceholderGlideRequest</name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>into</name><argument_list>(<argument><expr><operator>new</operator> <call><name>GlideBitmapListeningTarget</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <expr_stmt><expr><call><name><name>glideRequests</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>setImageResource</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>transferControls</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setVisibility</name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <decl_stmt><decl><type><name>GlideRequest</name></type> <name>request</name> <init>= <expr><call><name><name>glideRequests</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecryptableUri</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call>
                                        <operator>.</operator><call><name>transition</name><argument_list>(<argument><expr><call><name>withCrossFade</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>radius</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name><name>request</name><operator>.</operator><name>transforms</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CenterCrop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>RoundedCorners</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name><name>request</name><operator>.</operator><name>transforms</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CenterCrop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>request</name><operator>.</operator><name>into</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>GlideDrawableListeningTarget</name><argument_list>(<argument><expr><name>image</name></expr></argument>, <argument><expr><name>future</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>future</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setThumbnailClickListener</name><parameter_list>(<parameter><decl><type><name>SlideClickListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>thumbnailClickListener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setDownloadClickListener</name><parameter_list>(<parameter><decl><type><name>SlidesClickedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>downloadClickListener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>(<parameter><decl><type><name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>glideRequests</name><operator>.</operator><name>clear</name></name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>transferControls</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>slide</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>showDownloadText</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>showDownloadText</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setShowDownloadText</name><argument_list>(<argument><expr><name>showDownloadText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>showProgressSpinner</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>getTransferControls</name><argument_list>()</argument_list></call><operator>.</operator><call><name>showProgressSpinner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>setRadius</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>radius</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>radius</name></name> <operator>=</operator> <name>radius</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>GlideRequest</name></type> <name>buildThumbnailGlideRequest</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>GlideRequest</name></type> <name>request</name> <init>= <expr><call><name>applySizing</name><argument_list>(<argument><expr><call><name><name>glideRequests</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>DecryptableUri</name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getThumbnailUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>RESOURCE</name></name></expr></argument>)</argument_list></call>
                                          <operator>.</operator><call><name>transition</name><argument_list>(<argument><expr><call><name>withCrossFade</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>CenterCrop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>slide</name><operator>.</operator><name>isInProgress</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>request</name></expr>;</return></block></then>
    <else>else                      <block type="pseudo"><return>return <expr><call><name><name>request</name><operator>.</operator><name>apply</name></name><argument_list>(<argument><expr><call><name><name>RequestOptions</name><operator>.</operator><name>errorOf</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_missing_thumbnail_picture</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>RequestBuilder</name></type> <name>buildPlaceholderGlideRequest</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Slide</name></type> <name>slide</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>applySizing</name><argument_list>(<argument><expr><call><name><name>glideRequests</name><operator>.</operator><name>asBitmap</name></name><argument_list>()</argument_list></call>
                        <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><call><name><name>slide</name><operator>.</operator><name>getPlaceholderRes</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTheme</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>
                        <operator>.</operator><call><name>diskCacheStrategy</name><argument_list>(<argument><expr><name><name>DiskCacheStrategy</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>FitCenter</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>GlideRequest</name></type> <name>applySizing</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequest</name></type> <name>request</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>BitmapTransformation</name></type> <name>fitting</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>int</name><index>[]</index></name></type> <name>size</name> <init>= <expr><operator>new</operator> <name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fillTargetDimensions</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>dimens</name></expr></argument>, <argument><expr><name>bounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>size</name><index>[<expr><name>WIDTH</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>size</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>size</name><index>[<expr><name>WIDTH</name></expr>]</index></name>  <operator>=</operator> <call><name>getDefaultWidth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>size</name><index>[<expr><name>HEIGHT</name></expr>]</index></name> <operator>=</operator> <call><name>getDefaultHeight</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name><name>request</name><operator>.</operator><name>override</name></name><argument_list>(<argument><expr><name><name>size</name><index>[<expr><name>WIDTH</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>size</name><index>[<expr><name>HEIGHT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <if>if <condition>(<expr><name>radius</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>request</name><operator>.</operator><name>transforms</name></name><argument_list>(<argument><expr><name>fitting</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RoundedCorners</name><argument_list>(<argument><expr><name>radius</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>request</name><operator>.</operator><name>transforms</name></name><argument_list>(<argument><expr><name>fitting</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getDefaultWidth</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getDefaultHeight</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>ViewGroup</name><operator>.</operator><name>LayoutParams</name></name></type> <name>params</name> <init>= <expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>params</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>params</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> class <name>ThumbnailClickDispatcher</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>thumbnailClickListener</name>            <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
          <name>slide</name>                             <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
          <call><name><name>slide</name><operator>.</operator><name>asAttachment</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDataUri</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator>
          <call><name><name>slide</name><operator>.</operator><name>getTransferState</name></name><argument_list>()</argument_list></call>          <operator>==</operator> <name><name>AttachmentDatabase</name><operator>.</operator><name>TRANSFER_PROGRESS_DONE</name></name></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><call><name><name>thumbnailClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>parentClickListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>parentClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>DownloadClickDispatcher</name> <super><implements>implements <name><name>View</name><operator>.</operator><name>OnClickListener</name></name></implements></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>view</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onClick() for download button"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>downloadClickListener</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>slide</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>downloadClickListener</name><operator>.</operator><name>onClick</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><call><name><name>Collections</name><operator>.</operator><name>singletonList</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Received a download button click, but unable to execute it. slide: "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>slide</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"  downloadClickListener: "</literal> <operator>+</operator> <call><name><name>String</name><operator>.</operator><name>valueOf</name></name><argument_list>(<argument><expr><name>downloadClickListener</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
