<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\subsampling\AttachmentRegionDecoder.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>subsampling</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapRegionDecoder</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>davemorrissey</name><operator>.</operator><name>labs</name><operator>.</operator><name>subscaleview</name><operator>.</operator><name>decoder</name><operator>.</operator><name>ImageRegionDecoder</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>davemorrissey</name><operator>.</operator><name>labs</name><operator>.</operator><name>subscaleview</name><operator>.</operator><name>decoder</name><operator>.</operator><name>SkiaImageRegionDecoder</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>AttachmentRegionDecoder</name> <super><implements>implements <name>ImageRegionDecoder</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>AttachmentRegionDecoder</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>SkiaImageRegionDecoder</name></type> <name>passthrough</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>BitmapRegionDecoder</name></type> <name>bitmapRegionDecoder</name></decl>;</decl_stmt>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Point</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>Exception</name></expr></argument></throws> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Init!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>PartAuthority</name><operator>.</operator><name>isLocalUri</name></name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>passthrough</name> <operator>=</operator> <operator>new</operator> <call><name>SkiaImageRegionDecoder</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name><name>passthrough</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>InputStream</name></type> <name>inputStream</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmapRegionDecoder</name></name> <operator>=</operator> <call><name><name>BitmapRegionDecoder</name><operator>.</operator><name>newInstance</name></name><argument_list>(<argument><expr><name>inputStream</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>inputStream</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name>Point</name><argument_list>(<argument><expr><call><name><name>bitmapRegionDecoder</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>bitmapRegionDecoder</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>Bitmap</name></type> <name>decodeRegion</name><parameter_list>(<parameter><decl><type><name>Rect</name></type> <name>rect</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sampleSize</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Decode region: "</literal> <operator>+</operator> <name>rect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>passthrough</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>passthrough</name><operator>.</operator><name>decodeRegion</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>sampleSize</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if>

    <synchronized>synchronized<init>(<expr><name>this</name></expr>)</init> <block>{
      <decl_stmt><decl><type><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name></type> <name>options</name> <init>= <expr><operator>new</operator> <call><name><name>BitmapFactory</name><operator>.</operator><name>Options</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>options</name><operator>.</operator><name>inSampleSize</name></name>      <operator>=</operator> <name>sampleSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>options</name><operator>.</operator><name>inPreferredConfig</name></name> <operator>=</operator> <name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>RGB_565</name></name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Bitmap</name></type> <name>bitmap</name> <init>= <expr><call><name><name>bitmapRegionDecoder</name><operator>.</operator><name>decodeRegion</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>bitmap</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>RuntimeException</name><argument_list>(<argument><expr><literal type="string">"Skia image decoder returned null bitmap - image format may not be supported"</literal></expr></argument>)</argument_list></call></expr>;</throw>
      }</block></then></if>

      <return>return <expr><name>bitmap</name></expr>;</return>
    }</block></synchronized>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isReady</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"isReady"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>passthrough</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>passthrough</name><operator>.</operator><name>isReady</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator>
           <operator>(</operator><name>bitmapRegionDecoder</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>bitmapRegionDecoder</name><operator>.</operator><name>isRecycled</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>recycle</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>passthrough</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>passthrough</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>passthrough</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>bitmapRegionDecoder</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>
}</block></class>
</unit>
