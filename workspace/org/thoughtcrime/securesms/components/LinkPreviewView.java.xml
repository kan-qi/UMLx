<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\LinkPreviewView.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name><operator>.</operator><name>LinkPreview</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>ImageSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlidesClickedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ThemeUtil</name></name>;</import>

<import>import <name><name>okhttp3</name><operator>.</operator><name>HttpUrl</name></name>;</import>

<class><specifier>public</specifier> class <name>LinkPreviewView</name> <super><extends>extends <name>FrameLayout</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_CONVERSATION</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>TYPE_COMPOSE</name>      <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>             <name>container</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>OutlinedThumbnailView</name></type> <name>thumbnail</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>              <name>title</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>              <name>site</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                  <name>divider</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                  <name>closeButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                  <name>spinner</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                  <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                  <name>defaultRadius</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>CornerMask</name></type>           <name>cornerMask</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Outliner</name></type>             <name>outliner</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>CloseClickedListener</name></type> <name>closeClickedListener</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>LinkPreviewView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>LinkPreviewView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>link_preview</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>container</name>     <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>thumbnail</name>     <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_thumbnail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>title</name>         <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_title</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>site</name>          <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_site</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>divider</name>       <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_divider</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>spinner</name>       <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_progress_wheel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>closeButton</name>   <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>linkpreview_close</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>defaultRadius</name> <operator>=</operator> <call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>thumbnail_default_radius</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cornerMask</name>    <operator>=</operator> <operator>new</operator> <call><name>CornerMask</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>outliner</name>      <operator>=</operator> <operator>new</operator> <call><name>Outliner</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>outliner</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>ThemeUtil</name><operator>.</operator><name>getThemedColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>attr</name><operator>.</operator><name>conversation_item_image_outline_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>attrs</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TypedArray</name></type> <name>typedArray</name>   <init>= <expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTheme</name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>LinkPreviewView</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <call><name><name>typedArray</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>LinkPreviewView_linkpreview_type</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>typedArray</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_COMPOSE</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>container</name><operator>.</operator><name>setPadding</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>divider</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>closeButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>closeButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
        <if>if <condition>(<expr><name>closeClickedListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>closeClickedListener</name><operator>.</operator><name>onCloseClicked</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>setWillNotDraw</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_COMPOSE</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>cornerMask</name><operator>.</operator><name>isLegacy</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cornerMask</name><operator>.</operator><name>mask</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>dispatchDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispatchDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>TYPE_COMPOSE</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>cornerMask</name><operator>.</operator><name>isLegacy</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>cornerMask</name><operator>.</operator><name>mask</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>outliner</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLoading</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>site</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spinner</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLinkPreview</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LinkPreview</name></type> <name>linkPreview</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>showThumbnail</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>site</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>spinner</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>title</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>linkPreview</name><operator>.</operator><name>getTitle</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpUrl</name></type> <name>url</name> <init>= <expr><call><name><name>HttpUrl</name><operator>.</operator><name>parse</name></name><argument_list>(<argument><expr><call><name><name>linkPreview</name><operator>.</operator><name>getUrl</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>url</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>site</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>url</name><operator>.</operator><name>topPrivateDomain</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>showThumbnail</name> <operator>&amp;&amp;</operator> <call><name><name>linkPreview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>isPresent</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ImageSlide</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>linkPreview</name><operator>.</operator><name>getThumbnail</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>get</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name> <operator>==</operator> <name>TYPE_CONVERSATION</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>showDownloadText</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setCorners</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>topLeft</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>topRight</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cornerMask</name><operator>.</operator><name>setRadii</name></name><argument_list>(<argument><expr><name>topLeft</name></expr></argument>, <argument><expr><name>topRight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outliner</name><operator>.</operator><name>setRadii</name></name><argument_list>(<argument><expr><name>topLeft</name></expr></argument>, <argument><expr><name>topRight</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setCorners</name></name><argument_list>(<argument><expr><name>topLeft</name></expr></argument>, <argument><expr><name>defaultRadius</name></expr></argument>, <argument><expr><name>defaultRadius</name></expr></argument>, <argument><expr><name>defaultRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>postInvalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setCloseClickedListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>CloseClickedListener</name></type> <name>closeClickedListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>closeClickedListener</name></name> <operator>=</operator> <name>closeClickedListener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setDownloadClickedListener</name><parameter_list>(<parameter><decl><type><name>SlidesClickedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>thumbnail</name><operator>.</operator><name>setDownloadClickListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>CloseClickedListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onCloseClicked</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
