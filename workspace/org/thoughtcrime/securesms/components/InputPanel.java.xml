<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\components\InputPanel.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>DimenRes</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>format</name><operator>.</operator><name>DateUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AlphaAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>TranslateAnimation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Toast</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiDrawer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiToggle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>linkpreview</name><operator>.</operator><name>LinkPreview</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>QuoteModel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>SlideDeck</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ViewUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>AssertedSuccessListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>TimeUnit</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>atomic</name><operator>.</operator><name>AtomicLong</name></name>;</import>

<class><specifier>public</specifier> class <name>InputPanel</name> <super><extends>extends <name>LinearLayout</name></extends>
    <implements>implements <name><name>MicrophoneRecorderView</name><operator>.</operator><name>Listener</name></name>,
               <name><name>KeyboardAwareLinearLayout</name><operator>.</operator><name>OnKeyboardShownListener</name></name>,
               <name><name>EmojiDrawer</name><operator>.</operator><name>EmojiEventListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>InputPanel</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>FADE_TIME</name> <init>= <expr><literal type="number">150</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>QuoteView</name></type>       <name>quoteView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>LinkPreviewView</name></type> <name>linkPreview</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiToggle</name></type>     <name>emojiToggle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ComposeText</name></type>     <name>composeText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>            <name>quickCameraToggle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>            <name>quickAudioToggle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>            <name>buttonToggle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>            <name>recordingContainer</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>MicrophoneRecorderView</name></type> <name>microphoneRecorderView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SlideToCancel</name></type>          <name>slideToCancel</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RecordTime</name></type>             <name>recordTime</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Listener</name></type> <name>listener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>emojiVisible</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>InputPanel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>InputPanel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>HONEYCOMB</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <name>InputPanel</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>View</name></type> <name>quoteDismiss</name> <init>= <expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quote_dismiss</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quoteView</name></name>              <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quote_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>linkPreview</name></name>            <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>link_preview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>emojiToggle</name></name>            <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>emoji_toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>composeText</name></name>            <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>embedded_text_editor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quickCameraToggle</name></name>      <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quick_camera_toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>quickAudioToggle</name></name>       <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>quick_audio_toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>buttonToggle</name></name>           <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>button_toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordingContainer</name></name>     <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recording_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordTime</name></name>             <operator>=</operator> <operator>new</operator> <call><name>RecordTime</name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>record_time</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slideToCancel</name></name>          <operator>=</operator> <operator>new</operator> <call><name>SlideToCancel</name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>slide_to_cancel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>microphoneRecorderView</name></name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>recorder_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>microphoneRecorderView</name><operator>.</operator><name>setListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&lt;</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>microphoneRecorderView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>microphoneRecorderView</name><operator>.</operator><name>setClickable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isSystemEmojiPreferred</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>emojiVisible</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>emojiVisible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>quoteDismiss</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>clearQuote</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>linkPreview</name><operator>.</operator><name>setCloseClickedListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onLinkPreviewCanceled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setListener</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <annotation>@<name>NonNull</name></annotation> <name>Listener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>listener</name></name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>listener</name><operator>.</operator><name>onEmojiToggle</name></name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setMediaListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MediaListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setMediaListener</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setQuote</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Recipient</name></type> <name>author</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>body</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SlideDeck</name></type> <name>attachments</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>quoteView</name><operator>.</operator><name>setQuote</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>author</name></expr></argument>, <argument><expr><name>body</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>attachments</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>quoteView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>cornerRadius</name> <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_collapse_radius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setCorners</name></name><argument_list>(<argument><expr><name>cornerRadius</name></expr></argument>, <argument><expr><name>cornerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>clearQuote</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>quoteView</name><operator>.</operator><name>dismiss</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>cornerRadius</name> <init>= <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_radius</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setCorners</name></name><argument_list>(<argument><expr><name>cornerRadius</name></expr></argument>, <argument><expr><name>cornerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>QuoteModel</name></argument>&gt;</argument_list></name></type> <name>getQuote</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>quoteView</name><operator>.</operator><name>getQuoteId</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>quoteView</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>QuoteModel</name><argument_list>(<argument><expr><call><name><name>quoteView</name><operator>.</operator><name>getQuoteId</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>quoteView</name><operator>.</operator><name>getAuthor</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>quoteView</name><operator>.</operator><name>getBody</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><call><name><name>quoteView</name><operator>.</operator><name>getAttachments</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLinkPreviewLoading</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setLoading</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLinkPreview</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LinkPreview</name></argument>&gt;</argument_list></name></type> <name>preview</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>preview</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setLinkPreview</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><call><name><name>preview</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>int</name></type> <name>cornerRadius</name> <init>= <expr><ternary><condition><expr><call><name><name>quoteView</name><operator>.</operator><name>getVisibility</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>VISIBLE</name></expr> ?</condition><then> <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_collapse_radius</name></name></expr></argument>)</argument_list></call></expr>
                                                            </then><else>: <expr><call><name>readDimen</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>message_corner_radius</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>linkPreview</name><operator>.</operator><name>setCorners</name></name><argument_list>(<argument><expr><name>cornerRadius</name></expr></argument>, <argument><expr><name>cornerRadius</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setEmojiDrawer</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>EmojiDrawer</name></type> <name>emojiDrawer</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>attach</name></name><argument_list>(<argument><expr><name>emojiDrawer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRecordPermissionRequired</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecorderPermissionRequired</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRecordPressed</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>startPositionX</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecorderStarted</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name>recordTime</name><operator>.</operator><name>display</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>slideToCancel</name><operator>.</operator><name>display</name></name><argument_list>(<argument><expr><name>startPositionX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>emojiVisible</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>emojiToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>quickCameraToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>quickAudioToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name>buttonToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRecordReleased</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name></type> <name>elapsedTime</name> <init>= <expr><call><name>onRecordHideEvent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Elapsed time: "</literal> <operator>+</operator> <name>elapsedTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>elapsedTime</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecorderFinished</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>Toast</name><operator>.</operator><name>makeText</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>InputPanel_tap_and_hold_to_record_a_voice_message_release_to_send</name></name></expr></argument>, <argument><expr><name><name>Toast</name><operator>.</operator><name>LENGTH_LONG</name></name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecorderCanceled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRecordMoved</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>absoluteX</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>slideToCancel</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type>   <name>direction</name> <init>= <expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>position</name>  <init>= <expr><name>absoluteX</name> <operator>/</operator> <call><name><name>recordingContainer</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name> <operator>&amp;&amp;</operator> <name>position</name> <operator>&lt;=</operator> <literal type="number">0.5</literal> <operator>||</operator>
        <name>direction</name> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_RTL</name></name> <operator>&amp;&amp;</operator> <name>position</name> <operator>&gt;=</operator> <literal type="number">0.6</literal></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>microphoneRecorderView</name><operator>.</operator><name>cancelAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onRecordCanceled</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>onRecordHideEvent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>listener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onRecorderCanceled</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>microphoneRecorderView</name><operator>.</operator><name>cancelAction</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>quickAudioToggle</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>quickCameraToggle</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>long</name></type> <name>onRecordHideEvent</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>future</name>      <init>= <expr><call><name><name>slideToCancel</name><operator>.</operator><name>hide</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type>                   <name>elapsedTime</name> <init>= <expr><call><name><name>recordTime</name><operator>.</operator><name>hide</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>AssertedSuccessListener</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>Void</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>emojiVisible</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>emojiToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>quickCameraToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>quickAudioToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name>buttonToggle</name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>elapsedTime</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onKeyboardShown</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setToEmoji</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onKeyEvent</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>keyEvent</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>dispatchKeyEvent</name></name><argument_list>(<argument><expr><name>keyEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onEmojiSelected</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>emoji</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>insertEmoji</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>readDimen</name><parameter_list>(<parameter><decl><type><annotation>@<name>DimenRes</name></annotation> <name>int</name></type> <name>dimenRes</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name>dimenRes</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>


  <interface><specifier>public</specifier> interface <name>Listener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onRecorderStarted</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecorderFinished</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecorderCanceled</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onRecorderPermissionRequired</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onEmojiToggle</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onLinkPreviewCanceled</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>SlideToCancel</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>View</name></type> <name>slideToCancelView</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>startPositionX</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>SlideToCancel</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>slideToCancelView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>slideToCancelView</name></name> <operator>=</operator> <name>slideToCancelView</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>display</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>startPositionX</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startPositionX</name></name> <operator>=</operator> <name>startPositionX</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>slideToCancelView</name></name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>hide</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Void</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name>getOffset</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>AnimationSet</name></type> <name>animation</name> <init>= <expr><operator>new</operator> <call><name>AnimationSet</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                    <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>addAnimation</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>AlphaAnimation</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><name><name>MicrophoneRecorderView</name><operator>.</operator><name>ANIMATION_DURATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillBefore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>slideToCancelView</name><operator>.</operator><name>postDelayed</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>, <argument><expr><name><name>MicrophoneRecorderView</name><operator>.</operator><name>ANIMATION_DURATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>slideToCancelView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>slideToCancelView</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><name>future</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>moveTo</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>float</name></type>     <name>offset</name>    <init>= <expr><call><name>getOffset</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Animation</name></type> <name>animation</name> <init>= <expr><operator>new</operator> <call><name>TranslateAnimation</name><argument_list>(<argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                                   <argument><expr><name><name>Animation</name><operator>.</operator><name>ABSOLUTE</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>,
                                                   <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                   <argument><expr><name><name>Animation</name><operator>.</operator><name>RELATIVE_TO_SELF</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setDuration</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>animation</name><operator>.</operator><name>setFillBefore</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>slideToCancelView</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>animation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>private</specifier> <type><name>float</name></type> <name>getOffset</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><call><name><name>ViewCompat</name><operator>.</operator><name>getLayoutDirection</name></name><argument_list>(<argument><expr><name>slideToCancelView</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>ViewCompat</name><operator>.</operator><name>LAYOUT_DIRECTION_LTR</name></name></expr> ?</condition><then>
          <expr><operator>-</operator><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startPositionX</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name><name>this</name><operator>.</operator><name>startPositionX</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>RecordTime</name> <super><implements>implements <name>Runnable</name></implements></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextView</name></type> <name>recordTimeView</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AtomicLong</name></type> <name>startTime</name> <init>= <expr><operator>new</operator> <call><name>AtomicLong</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <constructor><specifier>private</specifier> <name>RecordTime</name><parameter_list>(<parameter><decl><type><name>TextView</name></type> <name>recordTimeView</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>recordTimeView</name></name> <operator>=</operator> <name>recordTimeView</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><specifier>public</specifier> <type><name>void</name></type> <name>display</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startTime</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>recordTimeView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatElapsedTime</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeIn</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recordTimeView</name></name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>public</specifier> <type><name>long</name></type> <name>hide</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>elapsedtime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>startTime</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>ViewUtil</name><operator>.</operator><name>fadeOut</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>recordTimeView</name></name></expr></argument>, <argument><expr><name>FADE_TIME</name></expr></argument>, <argument><expr><name><name>View</name><operator>.</operator><name>INVISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>elapsedtime</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>long</name></type> <name>localStartTime</name> <init>= <expr><call><name><name>startTime</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>localStartTime</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>long</name></type> <name>elapsedTime</name> <init>= <expr><call><name><name>System</name><operator>.</operator><name>currentTimeMillis</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>localStartTime</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>recordTimeView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>DateUtils</name><operator>.</operator><name>formatElapsedTime</name></name><argument_list>(<argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>MILLISECONDS</name><operator>.</operator><name>toSeconds</name></name><argument_list>(<argument><expr><name>elapsedTime</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMainDelayed</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name><name>TimeUnit</name><operator>.</operator><name>SECONDS</name><operator>.</operator><name>toMillis</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>MediaListener</name> <block>{
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onMediaSelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>String</name></type> <name>contentType</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
