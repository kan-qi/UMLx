<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\viewmodel\Layer.java"><comment type="block" format="javadoc">/**
 * Copyright (c) 2016 UPTech
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>viewmodel</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>FloatRange</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<class><specifier>public</specifier> class <name>Layer</name> <block>{

  <comment type="block" format="javadoc">/**
   * rotation relative to the layer center, in degrees
   */</comment>
  <decl_stmt><decl><annotation>@<name>FloatRange</name><argument_list>(<argument><expr><name>from</name> <operator>=</operator> <literal type="number">0.0F</literal></expr></argument>, <argument><expr><name>to</name> <operator>=</operator> <literal type="number">360.0F</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>float</name></type> <name>rotationInDegrees</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * top left X coordinate, relative to parent canvas
   */</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>x</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * top left Y coordinate, relative to parent canvas
   */</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>y</name></decl>;</decl_stmt>
  <comment type="block" format="javadoc">/**
   * is layer flipped horizontally (by X-coordinate)
   */</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isFlipped</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Layer</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rotationInDegrees</name></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isFlipped</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">0.0F</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>postScale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scaleDiff</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><literal type="string">"Layer"</literal></expr></argument>, <argument><expr><literal type="string">"ScaleDiff: "</literal> <operator>+</operator> <name>scaleDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>newVal</name> <init>= <expr><name>scale</name> <operator>+</operator> <name>scaleDiff</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>newVal</name> <operator>&gt;=</operator> <call><name>getMinScale</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>newVal</name> <operator>&lt;=</operator> <call><name>getMaxScale</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>scale</name> <operator>=</operator> <name>newVal</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>float</name></type> <name>getMaxScale</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>Limits</name><operator>.</operator><name>MAX_SCALE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>float</name></type> <name>getMinScale</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>Limits</name><operator>.</operator><name>MIN_SCALE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>postRotate</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>rotationInDegreesDiff</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rotationInDegrees</name></name> <operator>+=</operator> <name>rotationInDegreesDiff</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rotationInDegrees</name></name> <operator>%=</operator> <literal type="number">360.0F</literal></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>postTranslate</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>dy</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name>dx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name>dy</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>flip</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isFlipped</name></name> <operator>=</operator> <operator>!</operator><name>isFlipped</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>initialScale</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>Limits</name><operator>.</operator><name>INITIAL_ENTITY_SCALE</name></name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>getRotationInDegrees</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>rotationInDegrees</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setRotationInDegrees</name><parameter_list>(<parameter><decl><type><annotation>@<name>FloatRange</name><argument_list>(<argument><expr><name>from</name> <operator>=</operator> <literal type="number">0.0</literal></expr></argument>, <argument><expr><name>to</name> <operator>=</operator> <literal type="number">360.0</literal></expr></argument>)</argument_list></annotation> <name>float</name></type> <name>rotationInDegrees</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rotationInDegrees</name></name> <operator>=</operator> <name>rotationInDegrees</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>getScale</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>scale</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setScale</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scale</name></name> <operator>=</operator> <name>scale</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>getX</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>x</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>float</name></type> <name>getY</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>y</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isFlipped</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>isFlipped</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setFlipped</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>flipped</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>isFlipped</name> <operator>=</operator> <name>flipped</name></expr>;</expr_stmt>
  }</block></function>

  <interface>interface <name>Limits</name> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>MIN_SCALE</name> <init>= <expr><literal type="number">0.06F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>MAX_SCALE</name> <init>= <expr><literal type="number">4.0F</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>INITIAL_ENTITY_SCALE</name> <init>= <expr><literal type="number">0.4F</literal></expr></init></decl>;</decl_stmt>
  }</block></interface>
}</block></class>
</unit>
