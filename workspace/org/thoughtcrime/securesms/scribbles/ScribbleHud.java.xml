<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\ScribbleHud.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Rect</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>LinearLayoutManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v7</name><operator>.</operator><name>widget</name><operator>.</operator><name>RecyclerView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>KeyEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewTreeObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>TransportOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>ComposeText</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>InputAwareLayout</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>SendButton</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiDrawer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>emoji</name><operator>.</operator><name>EmojiToggle</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>ColorPaletteAdapter</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>VerticalSlideColorPicker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>CharacterCalculator</name><operator>.</operator><name>CharacterState</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>views</name><operator>.</operator><name>Stub</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * The HUD (heads-up display) that contains all of the tools for interacting with
 * {@link org.thoughtcrime.securesms.scribbles.widget.ScribbleView}
 */</comment>
<class><specifier>public</specifier> class <name>ScribbleHud</name> <super><extends>extends <name>InputAwareLayout</name></extends> <implements>implements <name><name>ViewTreeObserver</name><operator>.</operator><name>OnGlobalLayoutListener</name></name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>drawButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>highlightButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>textButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>stickerButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>undoButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>deleteButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>View</name></type>                     <name>saveButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>VerticalSlideColorPicker</name></type> <name>colorPicker</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RecyclerView</name></type>             <name>colorPalette</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>                <name>inputContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ComposeText</name></type>              <name>composeText</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SendButton</name></type>               <name>sendButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>                <name>sendButtonBkg</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EmojiToggle</name></type>              <name>emojiToggle</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Stub</name><argument_list type="generic">&lt;<argument><name>EmojiDrawer</name></argument>&gt;</argument_list></name></type>        <name>emojiDrawer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>                 <name>charactersLeft</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>EventListener</name></type>       <name>eventListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ColorPaletteAdapter</name></type> <name>colorPaletteAdapter</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                 <name>visibleHeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Locale</name></type>              <name>locale</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Rect</name></type> <name>visibleBounds</name> <init>= <expr><operator>new</operator> <call><name>Rect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ScribbleHud</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ScribbleHud</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>ScribbleHud</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onAttachedToWindow</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onAttachedToWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getRootView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getViewTreeObserver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>addOnGlobalLayoutListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDetachedFromWindow</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDetachedFromWindow</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getRootView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getViewTreeObserver</name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeGlobalOnLayoutListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onGlobalLayout</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>getRootView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindowVisibleDisplayFrame</name><argument_list>(<argument><expr><name>visibleBounds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>currentVisibleHeight</name> <init>= <expr><call><name><name>visibleBounds</name><operator>.</operator><name>height</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>currentVisibleHeight</name> <operator>!=</operator> <name>visibleHeight</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>getLayoutParams</name><argument_list>()</argument_list></call><operator>.</operator><name>height</name> <operator>=</operator> <name>currentVisibleHeight</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>layout</name><argument_list>(<argument><expr><name><name>visibleBounds</name><operator>.</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>visibleBounds</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>visibleBounds</name><operator>.</operator><name>right</name></name></expr></argument>, <argument><expr><name><name>visibleBounds</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>requestLayout</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>visibleHeight</name> <operator>=</operator> <name>currentVisibleHeight</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>inflate</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>scribble_hud</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setOrientation</name><argument_list>(<argument><expr><name>VERTICAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>drawButton</name>      <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_draw_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>highlightButton</name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_highlight_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>textButton</name>      <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_text_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stickerButton</name>   <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_sticker_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>undoButton</name>      <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_undo_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>deleteButton</name>    <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_delete_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>saveButton</name>      <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_save_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>colorPicker</name>     <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_color_picker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>colorPalette</name>    <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_color_palette</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>inputContainer</name>  <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_compose_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>composeText</name>     <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_compose_text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sendButton</name>      <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_send_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sendButtonBkg</name>   <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_send_button_bkg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>emojiToggle</name>     <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_emoji_toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>emojiDrawer</name>     <operator>=</operator> <operator>new</operator> <call><name><name>Stub</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_emoji_drawer_stub</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>charactersLeft</name>  <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_characters_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>initializeViews</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setTransport</name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initializeViews</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>undoButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onUndo</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>deleteButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onDelete</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>saveButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onEditComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name>isKeyboardOpen</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>hideSoftkey</name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onEditComplete</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>composeText</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>sendButton</name><operator>.</operator><name>getSelectedTransport</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>addOnTransportChangedListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>newTransport</name></decl></parameter>, <parameter><decl><name>manuallySelected</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name>presentCharactersRemaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setTransport</name></name><argument_list>(<argument><expr><name>newTransport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sendButtonBkg</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColorFilter</name><argument_list>(<argument><expr><call><name><name>newTransport</name><operator>.</operator><name>getBackgroundColor</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>MULTIPLY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sendButtonBkg</name><operator>.</operator><name>getBackground</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>invalidateSelf</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ComposeKeyPressedListener</name></type> <name>composeKeyPressedListener</name> <init>= <expr><operator>new</operator> <call><name>ComposeKeyPressedListener</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setOnKeyListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>setOnFocusChangeListener</name></name><argument_list>(<argument><expr><name>composeKeyPressedListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>colorPaletteAdapter</name> <operator>=</operator> <operator>new</operator> <call><name>ColorPaletteAdapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPaletteAdapter</name><operator>.</operator><name>setEventListener</name></name><argument_list>(<argument><expr><name>colorPicker</name><operator>::</operator><name>setActiveColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setLayoutManager</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LinearLayoutManager</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setAdapter</name></name><argument_list>(<argument><expr><name>colorPaletteAdapter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isSystemEmojiPreferred</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><name>this</name><operator>::</operator><name>onEmojiToggleClicked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLocale</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>locale</name></name> <operator>=</operator> <name>locale</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setTransport</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>transport</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>transport</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>saveButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>inputContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>setTransport</name></name><argument_list>(<argument><expr><call><name><name>transport</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>saveButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>inputContainer</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>hideSaveButton</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>hide</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>hide</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>saveButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>dismissEmojiKeyboard</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>hideCurrentInput</name><argument_list>(<argument><expr><name>composeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setColorPalette</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>colors</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>colorPaletteAdapter</name><operator>.</operator><name>setColors</name></name><argument_list>(<argument><expr><name>colors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getActiveColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>colorPicker</name><operator>.</operator><name>getActiveColor</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setActiveColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setActiveColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setEventListener</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>EventListener</name></type> <name>eventListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventListener</name></name> <operator>=</operator> <name>eventListener</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>enterMode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>setMode</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Mode</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>notify</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{
      <case>case <expr><name>NONE</name></expr>:</case>      <expr_stmt><expr><call><name>presentModeNone</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <break>break;</break>
      <case>case <expr><name>DRAW</name></expr>:</case>      <expr_stmt><expr><call><name>presentModeDraw</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <break>break;</break>
      <case>case <expr><name>HIGHLIGHT</name></expr>:</case> <expr_stmt><expr><call><name>presentModeHighlight</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <break>break;</break>
      <case>case <expr><name>TEXT</name></expr>:</case>      <expr_stmt><expr><call><name>presentModeText</name><argument_list>()</argument_list></call></expr>;</expr_stmt>      <break>break;</break>
      <case>case <expr><name>STICKER</name></expr>:</case>   <expr_stmt><expr><call><name>presentModeSticker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>   <break>break;</break>
    }</block></switch>

    <if>if <condition>(<expr><name>notify</name> <operator>&amp;&amp;</operator> <name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onModeStarted</name></name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentModeNone</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>undoButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>deleteButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>DRAW</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>HIGHLIGHT</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>TEXT</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>STICKER</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentModeDraw</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>undoButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>deleteButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setOnColorChangeListener</name></name><argument_list>(<argument><expr><name>standardOnColorChangeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setActiveColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>RED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentModeHighlight</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>undoButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>deleteButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setOnColorChangeListener</name></name><argument_list>(<argument><expr><name>highlightOnColorChangeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setActiveColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>YELLOW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentModeText</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>deleteButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>undoButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setOnColorChangeListener</name></name><argument_list>(<argument><expr><name>standardOnColorChangeListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setActiveColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentModeSticker</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>deleteButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>VISIBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>drawButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>highlightButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>undoButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPicker</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>colorPalette</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name>GONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>stickerButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name>setMode</name><argument_list>(<argument><expr><name><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>presentCharactersRemaining</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>          <name>messageBody</name>     <init>= <expr><call><name><name>composeText</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TransportOption</name></type> <name>transportOption</name> <init>= <expr><call><name><name>sendButton</name><operator>.</operator><name>getSelectedTransport</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>CharacterState</name></type>  <name>characterState</name>  <init>= <expr><call><name><name>transportOption</name><operator>.</operator><name>calculateCharacters</name></name><argument_list>(<argument><expr><name>messageBody</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>characterState</name><operator>.</operator><name>charactersRemaining</name></name> <operator>&lt;=</operator> <literal type="number">15</literal> <operator>||</operator> <name><name>characterState</name><operator>.</operator><name>messagesSpent</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>charactersLeft</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><name>locale</name></expr></argument>,
                                           <argument><expr><literal type="string">"%d/%d (%d)"</literal></expr></argument>,
                                           <argument><expr><name><name>characterState</name><operator>.</operator><name>charactersRemaining</name></name></expr></argument>,
                                           <argument><expr><name><name>characterState</name><operator>.</operator><name>maxTotalMessageSize</name></name></expr></argument>,
                                           <argument><expr><name><name>characterState</name><operator>.</operator><name>messagesSpent</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>charactersLeft</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>charactersLeft</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onEmojiToggleClicked</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>emojiDrawer</name><operator>.</operator><name>resolved</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>emojiToggle</name><operator>.</operator><name>attach</name></name><argument_list>(<argument><expr><call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setEmojiEventListener</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>EmojiDrawer</name><operator>.</operator><name>EmojiEventListener</name></name></super><argument_list>()</argument_list> <block>{
        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onKeyEvent</name><parameter_list>(<parameter><decl><type><name>KeyEvent</name></type> <name>keyEvent</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>dispatchKeyEvent</name></name><argument_list>(<argument><expr><name>keyEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>

        <function><annotation>@<name>Override</name></annotation>
        <specifier>public</specifier> <type><name>void</name></type> <name>onEmojiSelected</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>emoji</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>composeText</name><operator>.</operator><name>insertEmoji</name></name><argument_list>(<argument><expr><name>emoji</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></function>
      }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name>getCurrentInput</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>showSoftkey</name><argument_list>(<argument><expr><name>composeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>hideSoftkey</name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>post</name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name>show</name><argument_list>(<argument><expr><name>composeText</name></expr></argument>, <argument><expr><call><name><name>emojiDrawer</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>VerticalSlideColorPicker</name><operator>.</operator><name>OnColorChangeListener</name></name></type> <name>standardOnColorChangeListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>VerticalSlideColorPicker</name><operator>.</operator><name>OnColorChangeListener</name></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onColorChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selectedColor</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onColorChange</name></name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>VerticalSlideColorPicker</name><operator>.</operator><name>OnColorChangeListener</name></name></type> <name>highlightOnColorChangeListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>VerticalSlideColorPicker</name><operator>.</operator><name>OnColorChangeListener</name></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onColorChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selectedColor</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>eventListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>red</name></name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>green</name></name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name><name>Color</name><operator>.</operator><name>blue</name></name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onColorChange</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>argb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <class><specifier>private</specifier> class <name>ComposeKeyPressedListener</name> <super><implements>implements <name>OnKeyListener</name>, <name>OnClickListener</name>, <name>TextWatcher</name>, <name>OnFocusChangeListener</name></implements></super> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>beforeLength</name></decl>;</decl_stmt>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onKey</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>keyCode</name></decl></parameter>, <parameter><decl><type><name>KeyEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>keyCode</name> <operator>==</operator> <name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isEnterSendsEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>dispatchKeyEvent</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyEvent</name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr></argument>, <argument><expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>sendButton</name><operator>.</operator><name>dispatchKeyEvent</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>KeyEvent</name><argument_list>(<argument><expr><name><name>KeyEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr></argument>, <argument><expr><name><name>KeyEvent</name><operator>.</operator><name>KEYCODE_ENTER</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
          }</block></then></if>
        }</block></then></if>
      }</block></then></if>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onClick</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>showSoftkey</name><argument_list>(<argument><expr><name>composeText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>beforeLength</name> <operator>=</operator> <call><name><name>composeText</name><operator>.</operator><name>getTextTrimmed</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>length</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>presentCharactersRemaining</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{}</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onFocusChange</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hasFocus</name></decl></parameter>)</parameter_list> <block>{}</block></function>
  }</block></class>

  <enum><specifier>public</specifier> enum <name>Mode</name> <block>{
    <decl><name>NONE</name></decl>, <decl><name>DRAW</name></decl>, <decl><name>HIGHLIGHT</name></decl>, <decl><name>TEXT</name></decl>, <decl><name>STICKER</name></decl>
  }</block></enum>

  <interface><specifier>public</specifier> interface <name>EventListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onModeStarted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onColorChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onUndo</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onDelete</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onEditComplete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>transport</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
