<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\ScribbleFragment.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Intent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PointF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>TransportOption</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mediasend</name><operator>.</operator><name>MediaSendPageFragment</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>providers</name><operator>.</operator><name>PersistentBlobProvider</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>viewmodel</name><operator>.</operator><name>Font</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>viewmodel</name><operator>.</operator><name>Layer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>viewmodel</name><operator>.</operator><name>TextLayer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>MotionView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>ScribbleView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>VerticalSlideColorPicker</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name><operator>.</operator><name>ImageEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name><operator>.</operator><name>MotionEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name><operator>.</operator><name>TextEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MediaUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SimpleTask</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ListenableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Locale</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<import>import static <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Activity</name><operator>.</operator><name>RESULT_OK</name></name>;</import>

<class><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>JELLY_BEAN</name></name></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name>ScribbleFragment</name> <super><extends>extends <name>Fragment</name></extends> <implements>implements <name><name>ScribbleHud</name><operator>.</operator><name>EventListener</name></name>,
                                                          <name><name>VerticalSlideColorPicker</name><operator>.</operator><name>OnColorChangeListener</name></name>,
                                                          <name>MediaSendPageFragment</name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>ScribbleFragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_IMAGE_URI</name> <init>= <expr><literal type="string">"image_uri"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_LOCALE</name>    <init>= <expr><literal type="string">"locale"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_TRANSPORT</name> <init>= <expr><literal type="string">"compose_mode"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>KEY_HIDE_SAVE</name> <init>= <expr><literal type="string">"hide_save"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>SELECT_STICKER_REQUEST_CODE</name> <init>= <expr><literal type="number">123</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Controller</name></type>    <name>controller</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ScribbleHud</name></type>   <name>scribbleHud</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ScribbleView</name></type>  <name>scribbleView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>GlideRequests</name></type> <name>glideRequests</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Uri</name></type>           <name>imageUri</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>ScribbleView</name><operator>.</operator><name>SavedState</name></name></type> <name>savedState</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>ScribbleFragment</name></type> <name>newInstance</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>imageUri</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Locale</name></type> <name>locale</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>transport</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>hideSave</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Bundle</name></type> <name>args</name> <init>= <expr><operator>new</operator> <call><name>Bundle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_IMAGE_URI</name></expr></argument>, <argument><expr><name>imageUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putSerializable</name></name><argument_list>(<argument><expr><name>KEY_LOCALE</name></expr></argument>, <argument><expr><name>locale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putParcelable</name></name><argument_list>(<argument><expr><name>KEY_TRANSPORT</name></expr></argument>, <argument><expr><call><name><name>transport</name><operator>.</operator><name>orNull</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>args</name><operator>.</operator><name>putBoolean</name></name><argument_list>(<argument><expr><name>KEY_HIDE_SAVE</name></expr></argument>, <argument><expr><name>hideSave</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ScribbleFragment</name></type> <name>fragment</name> <init>= <expr><operator>new</operator> <call><name>ScribbleFragment</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setArguments</name></name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fragment</name><operator>.</operator><name>setUri</name></name><argument_list>(<argument><expr><name>imageUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>fragment</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Controller</name><operator>)</operator></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Parent activity must implement Controller interface."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>
    <expr_stmt><expr><name>controller</name> <operator>=</operator> <operator>(</operator><name>Controller</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>imageUri</name>   <operator>=</operator> <call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name>KEY_IMAGE_URI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>scribble_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>glideRequests</name></name> <operator>=</operator> <call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scribbleHud</name></name>   <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_hud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scribbleView</name></name>  <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>scribble_view</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setEventListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setTransport</name></name><argument_list>(<argument><expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getParcelable</name><argument_list>(<argument><expr><name>KEY_TRANSPORT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>hideSaveButton</name></name><argument_list>(<argument><expr><call><name>getArguments</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBoolean</name><argument_list>(<argument><expr><name>KEY_HIDE_SAVE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setFullscreen</name></name><argument_list>(<argument><expr><operator>(</operator><call><name>getActivity</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getWindow</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAttributes</name><argument_list>()</argument_list></call><operator>.</operator><name>flags</name> <operator>&amp;</operator> <name><name>WindowManager</name><operator>.</operator><name>LayoutParams</name><operator>.</operator><name>FLAG_FULLSCREEN</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setMotionViewCallback</name></name><argument_list>(<argument><expr><name>motionViewCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingChangedListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setColorPalette</name></name><argument_list>(<argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getUniqueColors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingMode</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setImage</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>imageUri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>savedState</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>restoreState</name></name><argument_list>(<argument><expr><name>savedState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>setUri</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>imageUri</name></name> <operator>=</operator> <name>uri</name></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>Uri</name></type> <name>getUri</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>imageUri</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>View</name></type> <name>getPlaybackControls</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>Object</name></type> <name>saveState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>scribbleView</name><operator>.</operator><name>saveState</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>restoreState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Object</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>state</name> <operator>instanceof</operator> <name><name>ScribbleView</name><operator>.</operator><name>SavedState</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>savedState</name> <operator>=</operator> <operator>(</operator><name><name>ScribbleView</name><operator>.</operator><name>SavedState</name></name><operator>)</operator> <name>state</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Received a bad saved state. Received class: "</literal> <operator>+</operator> <call><name><name>state</name><operator>.</operator><name>getClass</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isEmojiKeyboardVisible</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>scribbleHud</name><operator>.</operator><name>isInputOpen</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>dismissEmojiKeyboard</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>dismissEmojiKeyboard</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>addSticker</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Bitmap</name></type> <name>pica</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <decl_stmt><decl><type><name>Layer</name></type>       <name>layer</name>  <init>= <expr><operator>new</operator> <call><name>Layer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ImageEntity</name></type> <name>entity</name> <init>= <expr><operator>new</operator> <call><name>ImageEntity</name><argument_list>(<argument><expr><name>layer</name></expr></argument>, <argument><expr><name>pica</name></expr></argument>, <argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>addEntityAndPosition</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>changeTextEntityColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selectedColor</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>TextEntity</name></type> <name>textEntity</name> <init>= <expr><call><name>currentTextEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>textEntity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>textEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFont</name><argument_list>()</argument_list></call><operator>.</operator><call><name>setColor</name><argument_list>(<argument><expr><name>selectedColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textEntity</name><operator>.</operator><name>updateEntity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setColorPalette</name></name><argument_list>(<argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getUniqueColors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>startTextEntityEditing</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>TextEntity</name></type> <name>textEntity</name> <init>= <expr><call><name>currentTextEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>textEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>startEditing</name></name><argument_list>(<argument><expr><name>textEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <specifier>private</specifier> <type><name>TextEntity</name></type> <name>currentTextEntity</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>scribbleView</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>scribbleView</name><operator>.</operator><name>getSelectedEntity</name></name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>TextEntity</name></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><operator>(</operator><name>TextEntity</name><operator>)</operator> <call><name><name>scribbleView</name><operator>.</operator><name>getSelectedEntity</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>protected</specifier> <type><name>void</name></type> <name>addTextSticker</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>TextLayer</name></type>  <name>textLayer</name>  <init>= <expr><call><name>createTextLayer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TextEntity</name></type> <name>textEntity</name> <init>= <expr><operator>new</operator> <call><name>TextEntity</name><argument_list>(<argument><expr><name>textLayer</name></expr></argument>, <argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>addEntityAndPosition</name></name><argument_list>(<argument><expr><name>textEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>PointF</name></type> <name>center</name> <init>= <expr><call><name><name>textEntity</name><operator>.</operator><name>absoluteCenter</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>center</name><operator>.</operator><name>y</name></name> <operator>=</operator> <name><name>center</name><operator>.</operator><name>y</name></name> <operator>*</operator> <literal type="number">0.5F</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textEntity</name><operator>.</operator><name>moveCenterTo</name></name><argument_list>(<argument><expr><name>center</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>startTextEntityEditing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>changeTextEntityColor</name><argument_list>(<argument><expr><call><name><name>scribbleHud</name><operator>.</operator><name>getActiveColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>TextLayer</name></type> <name>createTextLayer</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>TextLayer</name></type> <name>textLayer</name> <init>= <expr><operator>new</operator> <call><name>TextLayer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Font</name></type> <name>font</name> <init>= <expr><operator>new</operator> <call><name>Font</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>font</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>scribbleHud</name><operator>.</operator><name>getActiveColor</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>font</name><operator>.</operator><name>setSize</name></name><argument_list>(<argument><expr><name><name>TextLayer</name><operator>.</operator><name>Limits</name><operator>.</operator><name>INITIAL_FONT_SIZE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>textLayer</name><operator>.</operator><name>setFont</name></name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>textLayer</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"StaticFieldLeak"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onActivityResult</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>requestCode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>resultCode</name></decl></parameter>, <parameter><decl><type><name>Intent</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onActivityResult</name></name><argument_list>(<argument><expr><name>requestCode</name></expr></argument>, <argument><expr><name>resultCode</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>resultCode</name> <operator>==</operator> <name>RESULT_OK</name> <operator>&amp;&amp;</operator> <name>requestCode</name> <operator>==</operator> <name>SELECT_STICKER_REQUEST_CODE</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><specifier>final</specifier> <name>String</name></type> <name>stickerFile</name> <init>= <expr><call><name><name>data</name><operator>.</operator><name>getStringExtra</name></name><argument_list>(<argument><expr><name><name>StickerSelectActivity</name><operator>.</operator><name>EXTRA_STICKER_FILE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>SimpleTask</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><call><name>getLifecycle</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
        <try>try <block>{
          <return>return <expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeStream</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAssets</name><argument_list>()</argument_list></call><operator>.</operator><call><name>open</name><argument_list>(<argument><expr><name>stickerFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
        }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
          <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><literal type="null">null</literal></expr>;</return>
        }</block></catch></try>
      }</block></lambda></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>bitmap</name></decl></parameter></parameter_list> -&gt; <block>{
        <if>if <condition>(<expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>addSticker</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onModeStarted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>ScribbleHud</name><operator>.</operator><name>Mode</name></name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{
      <case>case <expr><name>DRAW</name></expr>:</case>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingBrushWidth</name></name><argument_list>(<argument><expr><name><name>ScribbleView</name><operator>.</operator><name>DEFAULT_BRUSH_WIDTH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>HIGHLIGHT</name></expr>:</case>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingBrushWidth</name></name><argument_list>(<argument><expr><name><name>ScribbleView</name><operator>.</operator><name>DEFAULT_BRUSH_WIDTH</name></name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>TEXT</name></expr>:</case>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingMode</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>addTextSticker</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>STICKER</name></expr>:</case>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingMode</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>Intent</name></type> <name>intent</name> <init>= <expr><operator>new</operator> <call><name>Intent</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>StickerSelectActivity</name><operator>.</operator><name>class</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>startActivityForResult</name><argument_list>(<argument><expr><name>intent</name></expr></argument>, <argument><expr><name>SELECT_STICKER_REQUEST_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>

      <case>case <expr><name>NONE</name></expr>:</case>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>clearSelection</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingMode</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></switch>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onColorChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>setDrawingBrushColor</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>changeTextEntityColor</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onUndo</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>undoDrawing</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setColorPalette</name></name><argument_list>(<argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getUniqueColors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onDelete</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>scribbleView</name><operator>.</operator><name>deleteSelected</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setColorPalette</name></name><argument_list>(<argument><expr><call><name><name>scribbleView</name><operator>.</operator><name>getUniqueColors</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onEditComplete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>transport</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>ListenableFuture</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><call><name><name>scribbleView</name><operator>.</operator><name>getRenderedImage</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>addListener</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>ListenableFuture</name><operator>.</operator><name><name>Listener</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSuccess</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>result</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>PersistentBlobProvider</name></type> <name>provider</name> <init>= <expr><call><name><name>PersistentBlobProvider</name><operator>.</operator><name>getInstance</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type>  <name>baos</name>     <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>JPEG</name></name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>baos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>baos</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onImageEditComplete</name></name><argument_list>(<argument><expr><call><name><name>provider</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>MediaUtil</name><operator>.</operator><name>IMAGE_JPEG</name></name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>result</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><call><name><name>result</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>,
                                       <argument><expr><name><name>data</name><operator>.</operator><name>length</name></name></expr></argument>,
                                       <argument><expr><name>message</name></expr></argument>,
                                       <argument><expr><name>transport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onFailure</name><parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onImageEditFailure</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MotionView</name><operator>.</operator><name>MotionViewCallback</name></name></type> <name>motionViewCallback</name> <init>= <expr><operator>new</operator> <class><super><name><name>MotionView</name><operator>.</operator><name>MotionViewCallback</name></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onEntitySelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>entity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>enterMode</name></name><argument_list>(<argument><expr><name><name>ScribbleHud</name><operator>.</operator><name>Mode</name><operator>.</operator><name>NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if <condition>(<expr><name>entity</name> <operator>instanceof</operator> <name>TextEntity</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>textColor</name> <init>= <expr><operator>(</operator><operator>(</operator><name>TextEntity</name><operator>)</operator> <name>entity</name><operator>)</operator><operator>.</operator><call><name>getLayer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFont</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>enterMode</name></name><argument_list>(<argument><expr><name><name>ScribbleHud</name><operator>.</operator><name>Mode</name><operator>.</operator><name>TEXT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>setActiveColor</name></name><argument_list>(<argument><expr><name>textColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><call><name><name>scribbleHud</name><operator>.</operator><name>enterMode</name></name><argument_list>(<argument><expr><name><name>ScribbleHud</name><operator>.</operator><name>Mode</name><operator>.</operator><name>STICKER</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onTouchEventsNeeded</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onEntityDoubleTap</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>startTextEntityEditing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <interface><specifier>public</specifier> interface <name>Controller</name> <block>{
    <function_decl><type><name>void</name></type> <name>onImageEditComplete</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>message</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>transport</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onImageEditFailure</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onTouchEventsNeeded</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>needed</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
