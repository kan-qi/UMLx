<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\multitouch\TwoFingerGestureDetector.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>multitouch</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>DisplayMetrics</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewConfiguration</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Almer Thie (code.almeros.com)
 *         Copyright (c) 2013, Almer Thie (code.almeros.com)
 *         &lt;p&gt;
 *         All rights reserved.
 *         &lt;p&gt;
 *         Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *         &lt;p&gt;
 *         Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *         Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
 *         in the documentation and/or other materials provided with the distribution.
 *         &lt;p&gt;
 *         THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *         INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *         IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *         OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *         OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *         OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 *         OF SUCH DAMAGE.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>TwoFingerGestureDetector</name> <super><extends>extends <name>BaseGestureDetector</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>TwoFingerGestureDetector</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>mEdgeSlop</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mPrevFingerDiffX</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mPrevFingerDiffY</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mCurrFingerDiffX</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mCurrFingerDiffY</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mRightSlopEdge</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mBottomSlopEdge</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mCurrLen</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mPrevLen</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>TwoFingerGestureDetector</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ViewConfiguration</name></type> <name>config</name> <init>= <expr><call><name><name>ViewConfiguration</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mEdgeSlop</name> <operator>=</operator> <call><name><name>config</name><operator>.</operator><name>getScaledEdgeSlop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function_decl><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>handleStartProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actionCode</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>handleInProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actionCode</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>updateStateByEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>curr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>updateStateByEvent</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>prev</name> <init>= <expr><name>mPrevEvent</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>mCurrLen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mPrevLen</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

        <comment type="line">// Previous</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>px0</name> <init>= <expr><call><name><name>prev</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>py0</name> <init>= <expr><call><name><name>prev</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>px1</name> <init>= <expr><call><name><name>prev</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>py1</name> <init>= <expr><call><name><name>prev</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>pvx</name> <init>= <expr><name>px1</name> <operator>-</operator> <name>px0</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>pvy</name> <init>= <expr><name>py1</name> <operator>-</operator> <name>py0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mPrevFingerDiffX</name> <operator>=</operator> <name>pvx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mPrevFingerDiffY</name> <operator>=</operator> <name>pvy</name></expr>;</expr_stmt>

        <comment type="line">// Current</comment>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cx0</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cy0</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cx1</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cy1</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cvx</name> <init>= <expr><name>cx1</name> <operator>-</operator> <name>cx0</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cvy</name> <init>= <expr><name>cy1</name> <operator>-</operator> <name>cy0</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mCurrFingerDiffX</name> <operator>=</operator> <name>cvx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrFingerDiffY</name> <operator>=</operator> <name>cvy</name></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the current distance between the two pointers forming the
     * gesture in progress.
     *
     * @return Distance between pointers in pixels.
     */</comment>
    <function><specifier>public</specifier> <type><name>float</name></type> <name>getCurrentSpan</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mCurrLen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cvx</name> <init>= <expr><name>mCurrFingerDiffX</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>cvy</name> <init>= <expr><name>mCurrFingerDiffY</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mCurrLen</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>cvx</name> <operator>*</operator> <name>cvx</name> <operator>+</operator> <name>cvy</name> <operator>*</operator> <name>cvy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>mCurrLen</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the previous distance between the two pointers forming the
     * gesture in progress.
     *
     * @return Previous distance between pointers in pixels.
     */</comment>
    <function><specifier>public</specifier> <type><name>float</name></type> <name>getPreviousSpan</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mPrevLen</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>pvx</name> <init>= <expr><name>mPrevFingerDiffX</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>pvy</name> <init>= <expr><name>mPrevFingerDiffY</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>mPrevLen</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><name>pvx</name> <operator>*</operator> <name>pvx</name> <operator>+</operator> <name>pvy</name> <operator>*</operator> <name>pvy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <return>return <expr><name>mPrevLen</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Check if we have a sloppy gesture. Sloppy gestures can happen if the edge
     * of the user's hand is touching the screen, for example.
     *
     * @param event
     * @return
     */</comment>
    <function><specifier>protected</specifier> <type><name>boolean</name></type> <name>isSloppyGesture</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// As orientation can change, query the metrics in touch down</comment>
        <decl_stmt><decl><type><name>DisplayMetrics</name></type> <name>metrics</name> <init>= <expr><call><name><name>mContext</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDisplayMetrics</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mRightSlopEdge</name> <operator>=</operator> <name><name>metrics</name><operator>.</operator><name>widthPixels</name></name> <operator>-</operator> <name>mEdgeSlop</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mBottomSlopEdge</name> <operator>=</operator> <name><name>metrics</name><operator>.</operator><name>heightPixels</name></name> <operator>-</operator> <name>mEdgeSlop</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>edgeSlop</name> <init>= <expr><name>mEdgeSlop</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>rightSlop</name> <init>= <expr><name>mRightSlopEdge</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>bottomSlop</name> <init>= <expr><name>mBottomSlopEdge</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>x0</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getRawX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>y0</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getRawY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>x1</name> <init>= <expr><call><name>getRawX</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>final</specifier> <name>float</name></type> <name>y1</name> <init>= <expr><call><name>getRawY</name><argument_list>(<argument><expr><name>event</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>,
              <argument><expr><call><name><name>String</name><operator>.</operator><name>format</name></name><argument_list>(<argument><expr><literal type="string">"x0: %f, y0: %f, x1: %f, y1: %f, EdgeSlop: %f, RightSlop: %f, BottomSlop: %f"</literal></expr></argument>,
                            <argument><expr><name>x0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>edgeSlop</name></expr></argument>, <argument><expr><name>rightSlop</name></expr></argument>, <argument><expr><name>bottomSlop</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>boolean</name></type> <name>p0sloppy</name> <init>= <expr><name><name>x0</name> <argument_list type="generic">&lt; <argument><name>edgeSlop</name> <operator>||</operator> <name><name>y0</name> <argument_list type="generic">&lt; <argument><name>edgeSlop</name>
                <operator>||</operator> <name>x0</name></argument> &gt;</argument_list></name> <name>rightSlop</name> <operator>||</operator> <name>y0</name></argument> &gt;</argument_list></name> <name>bottomSlop</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>boolean</name></type> <name>p1sloppy</name> <init>= <expr><name><name>x1</name> <argument_list type="generic">&lt; <argument><name>edgeSlop</name> <operator>||</operator> <name><name>y1</name> <argument_list type="generic">&lt; <argument><name>edgeSlop</name>
                <operator>||</operator> <name>x1</name></argument> &gt;</argument_list></name> <name>rightSlop</name> <operator>||</operator> <name>y1</name></argument> &gt;</argument_list></name> <name>bottomSlop</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>p0sloppy</name> <operator>&amp;&amp;</operator> <name>p1sloppy</name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>p0sloppy</name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>p1sloppy</name></expr>)</condition><then> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then></if></elseif></if>
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * MotionEvent has no getRawX(int) method; simulate it pending future API approval.
     *
     * @param event
     * @param pointerIndex
     * @return
     */</comment>
    <function><specifier>protected</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>getRawX</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointerIndex</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>event</name><operator>.</operator><name>getRawX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pointerIndex</name> <operator>&lt;</operator> <call><name><name>event</name><operator>.</operator><name>getPointerCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>(<argument><expr><name>pointerIndex</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="number">0f</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * MotionEvent has no getRawY(int) method; simulate it pending future API approval.
     *
     * @param event
     * @param pointerIndex
     * @return
     */</comment>
    <function><specifier>protected</specifier> <specifier>static</specifier> <type><name>float</name></type> <name>getRawY</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pointerIndex</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>offset</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>event</name><operator>.</operator><name>getRawY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>pointerIndex</name> <operator>&lt;</operator> <call><name><name>event</name><operator>.</operator><name>getPointerCount</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <return>return <expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><name>pointerIndex</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>offset</name></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="number">0f</literal></expr>;</return>
    }</block></function>

}</block></class>
</unit>
