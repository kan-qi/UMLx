<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\multitouch\BaseGestureDetector.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>multitouch</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Almer Thie (code.almeros.com)
 *         Copyright (c) 2013, Almer Thie (code.almeros.com)
 *         &lt;p&gt;
 *         All rights reserved.
 *         &lt;p&gt;
 *         Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *         &lt;p&gt;
 *         Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *         Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
 *         in the documentation and/or other materials provided with the distribution.
 *         &lt;p&gt;
 *         THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *         INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *         IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *         OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *         OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *         OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 *         OF SUCH DAMAGE.
 */</comment>
<class><specifier>public</specifier> <specifier>abstract</specifier> class <name>BaseGestureDetector</name> <block>{
    <comment type="block" format="javadoc">/**
     * This value is the threshold ratio between the previous combined pressure
     * and the current combined pressure. When pressure decreases rapidly
     * between events the position values can often be imprecise, as it usually
     * indicates that the user is in the process of lifting a pointer off of the
     * device. This value was tuned experimentally.
     */</comment>
    <decl_stmt><decl><specifier>protected</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>PRESSURE_THRESHOLD</name> <init>= <expr><literal type="number">0.67f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><specifier>final</specifier> <name>Context</name></type> <name>mContext</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>boolean</name></type> <name>mGestureInProgress</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>MotionEvent</name></type> <name>mPrevEvent</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>MotionEvent</name></type> <name>mCurrEvent</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mCurrPressure</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>float</name></type> <name>mPrevPressure</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>protected</specifier> <type><name>long</name></type> <name>mTimeDelta</name></decl>;</decl_stmt>


    <constructor><specifier>public</specifier> <name>BaseGestureDetector</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>mContext</name> <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="block" format="javadoc">/**
     * All gesture detectors need to be called through this method to be able to
     * detect gestures. This method delegates work to handler methods
     * (handleStartProgressEvent, handleInProgressEvent) implemented in
     * extending classes.
     *
     * @param event
     * @return
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>int</name></type> <name>actionCode</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name><name>MotionEvent</name><operator>.</operator><name>ACTION_MASK</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>mGestureInProgress</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>handleStartProgressEvent</name><argument_list>(<argument><expr><name>actionCode</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>handleInProgressEvent</name><argument_list>(<argument><expr><name>actionCode</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Called when the current event occurred when NO gesture is in progress
     * yet. The handling in this implementation may set the gesture in progress
     * (via mGestureInProgress) or out of progress
     *
     * @param actionCode
     * @param event
     */</comment>
    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>handleStartProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actionCode</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>

    <comment type="block" format="javadoc">/**
     * Called when the current event occurred when a gesture IS in progress. The
     * handling in this implementation may set the gesture out of progress (via
     * mGestureInProgress).
     *
     * @param actionCode
     * @param event
     */</comment>
    <function_decl><specifier>protected</specifier> <specifier>abstract</specifier> <type><name>void</name></type> <name>handleInProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actionCode</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>;</function_decl>


    <function><specifier>protected</specifier> <type><name>void</name></type> <name>updateStateByEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>curr</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>prev</name> <init>= <expr><name>mPrevEvent</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Reset mCurrEvent</comment>
        <if>if <condition>(<expr><name>mCurrEvent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mCurrEvent</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mCurrEvent</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>mCurrEvent</name> <operator>=</operator> <call><name><name>MotionEvent</name><operator>.</operator><name>obtain</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <comment type="line">// Delta time</comment>
        <expr_stmt><expr><name>mTimeDelta</name> <operator>=</operator> <call><name><name>curr</name><operator>.</operator><name>getEventTime</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>prev</name><operator>.</operator><name>getEventTime</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Pressure</comment>
        <expr_stmt><expr><name>mCurrPressure</name> <operator>=</operator> <call><name><name>curr</name><operator>.</operator><name>getPressure</name></name><argument_list>(<argument><expr><call><name><name>curr</name><operator>.</operator><name>getActionIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mPrevPressure</name> <operator>=</operator> <call><name><name>prev</name><operator>.</operator><name>getPressure</name></name><argument_list>(<argument><expr><call><name><name>prev</name><operator>.</operator><name>getActionIndex</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><specifier>protected</specifier> <type><name>void</name></type> <name>resetState</name><parameter_list>()</parameter_list> <block>{
        <if>if <condition>(<expr><name>mPrevEvent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mPrevEvent</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mPrevEvent</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>mCurrEvent</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>mCurrEvent</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>mCurrEvent</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>mGestureInProgress</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></function>


    <comment type="block" format="javadoc">/**
     * Returns {@code true} if a gesture is currently in progress.
     *
     * @return {@code true} if a gesture is currently in progress, {@code false} otherwise.
     */</comment>
    <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isInProgress</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mGestureInProgress</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the time difference in milliseconds between the previous accepted
     * GestureDetector event and the current GestureDetector event.
     *
     * @return Time difference since the last move event in milliseconds.
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getTimeDelta</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mTimeDelta</name></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the event time of the current GestureDetector event being
     * processed.
     *
     * @return Current GestureDetector event time in milliseconds.
     */</comment>
    <function><specifier>public</specifier> <type><name>long</name></type> <name>getEventTime</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><call><name><name>mCurrEvent</name><operator>.</operator><name>getEventTime</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

}</block></class>
</unit>
