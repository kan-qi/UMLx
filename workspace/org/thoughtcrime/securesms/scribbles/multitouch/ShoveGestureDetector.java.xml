<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\multitouch\ShoveGestureDetector.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>multitouch</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>

<comment type="block" format="javadoc">/**
 * @author Robert Nordan (robert.nordan@norkart.no)
 *         &lt;p&gt;
 *         Copyright (c) 2013, Norkart AS
 *         &lt;p&gt;
 *         All rights reserved.
 *         &lt;p&gt;
 *         Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
 *         &lt;p&gt;
 *         Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
 *         Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
 *         in the documentation and/or other materials provided with the distribution.
 *         &lt;p&gt;
 *         THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *         INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 *         IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
 *         OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
 *         OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 *         OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
 *         OF SUCH DAMAGE.
 */</comment>
<class><specifier>public</specifier> class <name>ShoveGestureDetector</name> <super><extends>extends <name>TwoFingerGestureDetector</name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OnShoveGestureListener</name></type> <name>mListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mPrevAverageY</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>mCurrAverageY</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>mSloppyGesture</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>ShoveGestureDetector</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>OnShoveGestureListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mListener</name> <operator>=</operator> <name>listener</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>handleStartProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actionCode</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>actionCode</name></expr>)</condition> <block>{
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_POINTER_DOWN</name></name></expr>:</case>
                <comment type="line">// At least the second finger is on screen now</comment>

                <expr_stmt><expr><call><name>resetState</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">// In case we missed an UP/CANCEL event</comment>
                <expr_stmt><expr><name>mPrevEvent</name> <operator>=</operator> <call><name><name>MotionEvent</name><operator>.</operator><name>obtain</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mTimeDelta</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>updateStateByEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// See if we have a sloppy gesture</comment>
                <expr_stmt><expr><name>mSloppyGesture</name> <operator>=</operator> <call><name>isSloppyGesture</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>mSloppyGesture</name></expr>)</condition><then> <block>{
                    <comment type="line">// No, start gesture now</comment>
                    <expr_stmt><expr><name>mGestureInProgress</name> <operator>=</operator> <call><name><name>mListener</name><operator>.</operator><name>onShoveBegin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <break>break;</break>

            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
                <if>if <condition>(<expr><operator>!</operator><name>mSloppyGesture</name></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>

                <comment type="line">// See if we still have a sloppy gesture</comment>
                <expr_stmt><expr><name>mSloppyGesture</name> <operator>=</operator> <call><name>isSloppyGesture</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><operator>!</operator><name>mSloppyGesture</name></expr>)</condition><then> <block>{
                    <comment type="line">// No, start normal gesture now</comment>
                    <expr_stmt><expr><name>mGestureInProgress</name> <operator>=</operator> <call><name><name>mListener</name><operator>.</operator><name>onShoveBegin</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <break>break;</break>

            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_POINTER_UP</name></name></expr>:</case>
                <if>if <condition>(<expr><operator>!</operator><name>mSloppyGesture</name></expr>)</condition><then> <block>{
                    <break>break;</break>
                }</block></then></if>

                <break>break;</break>
        }</block></switch>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>handleInProgressEvent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>actionCode</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <switch>switch <condition>(<expr><name>actionCode</name></expr>)</condition> <block>{
            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_POINTER_UP</name></name></expr>:</case>
                <comment type="line">// Gesture ended but</comment>
                <expr_stmt><expr><call><name>updateStateByEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if>if <condition>(<expr><operator>!</operator><name>mSloppyGesture</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onShoveEnd</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name>resetState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_CANCEL</name></name></expr>:</case>
                <if>if <condition>(<expr><operator>!</operator><name>mSloppyGesture</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>mListener</name><operator>.</operator><name>onShoveEnd</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>

                <expr_stmt><expr><call><name>resetState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr>:</case>
                <expr_stmt><expr><call><name>updateStateByEvent</name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Only accept the event if our relative pressure is within</comment>
                <comment type="line">// a certain limit. This can help filter shaky data as a</comment>
                <comment type="line">// finger is lifted. Also check that shove is meaningful.</comment>
                <if>if <condition>(<expr><name>mCurrPressure</name> <operator>/</operator> <name>mPrevPressure</name> <operator>&gt;</operator> <name>PRESSURE_THRESHOLD</name>
                        <operator>&amp;&amp;</operator> <call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name>getShovePixelsDelta</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.5f</literal></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>updatePrevious</name> <init>= <expr><call><name><name>mListener</name><operator>.</operator><name>onShove</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name>updatePrevious</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>mPrevEvent</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>mPrevEvent</name> <operator>=</operator> <call><name><name>MotionEvent</name><operator>.</operator><name>obtain</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
                <break>break;</break>
        }</block></switch>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>updateStateByEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>curr</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>updateStateByEvent</name></name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>final</specifier> <name>MotionEvent</name></type> <name>prev</name> <init>= <expr><name>mPrevEvent</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>py0</name> <init>= <expr><call><name><name>prev</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>py1</name> <init>= <expr><call><name><name>prev</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mPrevAverageY</name> <operator>=</operator> <operator>(</operator><name>py0</name> <operator>+</operator> <name>py1</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>float</name></type> <name>cy0</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>cy1</name> <init>= <expr><call><name><name>curr</name><operator>.</operator><name>getY</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>mCurrAverageY</name> <operator>=</operator> <operator>(</operator><name>cy0</name> <operator>+</operator> <name>cy1</name><operator>)</operator> <operator>/</operator> <literal type="number">2.0f</literal></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>boolean</name></type> <name>isSloppyGesture</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>boolean</name></type> <name>sloppy</name> <init>= <expr><call><name><name>super</name><operator>.</operator><name>isSloppyGesture</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>sloppy</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

        <comment type="line">// If it's not traditionally sloppy, we check if the angle between fingers</comment>
        <comment type="line">// is acceptable.</comment>
        <decl_stmt><decl><type><name>double</name></type> <name>angle</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>atan2</name></name><argument_list>(<argument><expr><name>mCurrFingerDiffY</name></expr></argument>, <argument><expr><name>mCurrFingerDiffX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//about 20 degrees, left or right</comment>
        <return>return <expr><operator>!</operator><operator>(</operator><operator>(</operator><literal type="number">0.0f</literal> <operator>&lt;</operator> <name>angle</name> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <literal type="number">0.35f</literal><operator>)</operator>
                <operator>||</operator> <literal type="number">2.79f</literal> <operator>&lt;</operator> <name>angle</name> <operator>&amp;&amp;</operator> <name>angle</name> <operator>&lt;</operator> <name><name>Math</name><operator>.</operator><name>PI</name></name><operator>)</operator></expr>;</return>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Return the distance in pixels from the previous shove event to the current
     * event.
     *
     * @return The current distance in pixels.
     */</comment>
    <function><specifier>public</specifier> <type><name>float</name></type> <name>getShovePixelsDelta</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>mCurrAverageY</name> <operator>-</operator> <name>mPrevAverageY</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>protected</specifier> <type><name>void</name></type> <name>resetState</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>resetState</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mSloppyGesture</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mPrevAverageY</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mCurrAverageY</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>
    }</block></function>

    <comment type="block" format="javadoc">/**
     * Listener which must be implemented which is used by ShoveGestureDetector
     * to perform callbacks to any implementing class which is registered to a
     * ShoveGestureDetector via the constructor.
     *
     * @see ShoveGestureDetector.SimpleOnShoveGestureListener
     */</comment>
    <interface><specifier>public</specifier> interface <name>OnShoveGestureListener</name> <block>{
        <function_decl><specifier>public</specifier> <type><name>boolean</name></type> <name>onShove</name><parameter_list>(<parameter><decl><type><name>ShoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><specifier>public</specifier> <type><name>boolean</name></type> <name>onShoveBegin</name><parameter_list>(<parameter><decl><type><name>ShoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list>;</function_decl>

        <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onShoveEnd</name><parameter_list>(<parameter><decl><type><name>ShoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list>;</function_decl>
    }</block></interface>

    <comment type="block" format="javadoc">/**
     * Helper class which may be extended and where the methods may be
     * implemented. This way it is not necessary to implement all methods
     * of OnShoveGestureListener.
     */</comment>
    <class><specifier>public</specifier> <specifier>static</specifier> class <name>SimpleOnShoveGestureListener</name> <super><implements>implements <name>OnShoveGestureListener</name></implements></super> <block>{
        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>onShove</name><parameter_list>(<parameter><decl><type><name>ShoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>boolean</name></type> <name>onShoveBegin</name><parameter_list>(<parameter><decl><type><name>ShoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list> <block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></function>

        <function><specifier>public</specifier> <type><name>void</name></type> <name>onShoveEnd</name><parameter_list>(<parameter><decl><type><name>ShoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Do nothing, overridden implementation may be used</comment>
        }</block></function>
    }</block></class>
}</block></class>
</unit>
