<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\widget\CanvasView.java"><comment type="block" format="javadoc">/**
 * CanvasView.java
 *
 * Copyright (c) 2014 Tomohiro IKEDA (Korilakkuma)
 * Released under the MIT license
 */</comment>

<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name><operator>.</operator><name>CompressFormat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>BitmapFactory</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Matrix</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuff</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PorterDuffXfermode</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<comment type="block" format="javadoc">/**
 * This class defines fields and methods for drawing.
 */</comment>
<class><specifier>public</specifier> class <name>CanvasView</name> <super><extends>extends <name>View</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>CanvasView</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>public</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>DEFAULT_STROKE_WIDTH</name> <init>= <expr><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Enumeration for Mode</comment>
  <enum><specifier>public</specifier> enum <name>Mode</name> <block>{
    <decl><name>DRAW</name></decl>,
    <decl><name>TEXT</name></decl>,
    <decl><name>ERASER</name></decl>;
  }</block></enum>

  <comment type="line">// Enumeration for Drawer</comment>
  <enum><specifier>public</specifier> enum <name>Drawer</name> <block>{
    <decl><name>PEN</name></decl>,
    <decl><name>LINE</name></decl>,
    <decl><name>RECTANGLE</name></decl>,
    <decl><name>CIRCLE</name></decl>,
    <decl><name>ELLIPSE</name></decl>,
    <decl><name>QUADRATIC_BEZIER</name></decl>,
    <decl><name>QUBIC_BEZIER</name></decl>;
  }</block></enum>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>initialWidth</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>initialHeight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>canvasWidth</name>   <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>    <name>canvasHeight</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Bitmap</name></type> <name>bitmap</name>        <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>pathLists</name>  <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>paintLists</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;<argument><name>Paint</name></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// for Eraser</comment>
<comment type="line">//  private int baseColor = Color.WHITE;</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>baseColor</name> <init>= <expr><name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// for Undo, Redo</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>historyPointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Flags</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Mode</name></type> <name>mode</name>      <init>= <expr><name><name>Mode</name><operator>.</operator><name>DRAW</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Drawer</name></type> <name>drawer</name>  <init>= <expr><name><name>Drawer</name><operator>.</operator><name>PEN</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>isDown</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// for Paint</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Paint</name><operator>.</operator><name>Style</name></name></type> <name>paintStyle</name> <init>= <expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>paintStrokeColor</name>   <init>= <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>paintFillColor</name>     <init>= <expr><name><name>Color</name><operator>.</operator><name>BLACK</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>paintStrokeWidth</name> <init>= <expr><name>DEFAULT_STROKE_WIDTH</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>opacity</name>            <init>= <expr><literal type="number">255</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>blur</name>             <init>= <expr><literal type="number">0F</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Paint</name><operator>.</operator><name>Cap</name></name></type> <name>lineCap</name>      <init>= <expr><name><name>Paint</name><operator>.</operator><name>Cap</name><operator>.</operator><name>ROUND</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// for Drawer</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>startX</name>   <init>= <expr><literal type="number">0F</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>startY</name>   <init>= <expr><literal type="number">0F</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>controlX</name> <init>= <expr><literal type="number">0F</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type> <name>controlY</name> <init>= <expr><literal type="number">0F</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>active</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <comment type="block" format="javadoc">/**
   * Copy Constructor
   *
   * @param context
   * @param attrs
   * @param defStyle
   */</comment>
  <constructor><specifier>public</specifier> <name>CanvasView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyle</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Copy Constructor
   *
   * @param context
   * @param attrs
   */</comment>
  <constructor><specifier>public</specifier> <name>CanvasView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <comment type="block" format="javadoc">/**
   * Copy Constructor
   *
   * @param context
   */</comment>
  <constructor><specifier>public</specifier> <name>CanvasView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>


  <function><specifier>private</specifier> <type><name>void</name></type> <name>setup</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>createPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>++</operator></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method creates the instance of Paint.
   * In addition, this method sets styles for Paint.
   *
   * @return paint This is returned as the instance of Paint
   */</comment>
  <function><specifier>private</specifier> <type><name>Paint</name></type> <name>createPaint</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>paintStyle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>paintStrokeWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStrokeCap</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>lineCap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStrokeJoin</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Join</name><operator>.</operator><name>ROUND</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// fixed</comment>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>==</operator> <name><name>Mode</name><operator>.</operator><name>ERASER</name></name></expr>)</condition><then> <block>{
      <comment type="line">// Eraser</comment>
      <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setXfermode</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PorterDuffXfermode</name><argument_list>(<argument><expr><name><name>PorterDuff</name><operator>.</operator><name>Mode</name><operator>.</operator><name>CLEAR</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setARGB</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// paint.setColor(this.baseColor);</comment>
      <comment type="line">// paint.setShadowLayer(this.blur, 0F, 0F, this.baseColor);</comment>
    }</block></then> <else>else <block>{
      <comment type="line">// Otherwise</comment>
      <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>paintStrokeColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setShadowLayer</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>blur</name></name></expr></argument>, <argument><expr><literal type="number">0F</literal></expr></argument>, <argument><expr><literal type="number">0F</literal></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>paintStrokeColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>opacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>paint</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method initialize Path.
   * Namely, this method creates the instance of Path,
   * and moves current position.
   *
   * @param event This is argument of onTouchEvent method
   * @return path This is returned as the instance of Path
   */</comment>
  <function><specifier>private</specifier> <type><name>Path</name></type> <name>createPath</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Save for ACTION_MOVE</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>=</operator> <call><name>scaleX</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startY</name></name> <operator>=</operator> <call><name>scaleY</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>path</name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method updates the lists for the instance of Path and Paint.
   * "Undo" and "Redo" are enabled by this method.
   *
   * @param path the instance of Path
   */</comment>
  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateHistory</name><parameter_list>(<parameter><decl><type><name>Path</name></type> <name>path</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>==</operator> <call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>createPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>++</operator></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <comment type="line">// On the way of Undo or Redo</comment>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>, <argument><expr><call><name><name>this</name><operator>.</operator><name>createPaint</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>++</operator></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method gets the instance of Path that pointer indicates.
   *
   * @return the instance of Path
   */</comment>
  <function><specifier>private</specifier> <type><name>Path</name></type> <name>getCurrentPath</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method defines processes on MotionEvent.ACTION_DOWN
   *
   * @param event This is argument of onTouchEvent method
   */</comment>
  <function><specifier>private</specifier> <type><name>void</name></type> <name>onActionDown</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name><name>this</name><operator>.</operator><name>mode</name></name></expr>)</condition> <block>{
      <case>case <expr><name>DRAW</name></expr>   :</case>
      <case>case <expr><name>ERASER</name></expr> :</case>
        <if>if <condition>(<expr><operator>(</operator><name><name>this</name><operator>.</operator><name>drawer</name></name> <operator>!=</operator> <name><name>Drawer</name><operator>.</operator><name>QUADRATIC_BEZIER</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>drawer</name></name> <operator>!=</operator> <name><name>Drawer</name><operator>.</operator><name>QUBIC_BEZIER</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <comment type="line">// Oherwise</comment>
          <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>updateHistory</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>createPath</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDown</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <comment type="line">// Bezier</comment>
          <if>if <condition>(<expr><operator>(</operator><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>==</operator> <literal type="number">0F</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>startY</name></name> <operator>==</operator> <literal type="number">0F</literal><operator>)</operator></expr>)</condition><then> <block>{
            <comment type="line">// The 1st tap</comment>
            <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>updateHistory</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>createPath</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then> <else>else <block>{
            <comment type="line">// The 2nd tap</comment>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>controlX</name></name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>controlY</name></name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDown</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          }</block></else></if>
        }</block></else></if>

        <break>break;</break>
      <case>case <expr><name>TEXT</name></expr>   :</case>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startY</name></name> <operator>=</operator> <call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <break>break;</break>
      <default>default :</default>
        <break>break;</break>
    }</block></switch>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method defines processes on MotionEvent.ACTION_MOVE
   *
   * @param event This is argument of onTouchEvent method
   */</comment>
  <function><specifier>private</specifier> <type><name>void</name></type> <name>onActionMove</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>x</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>y</name> <init>= <expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>this</name><operator>.</operator><name>mode</name></name></expr>)</condition> <block>{
      <case>case <expr><name>DRAW</name></expr>   :</case>
      <case>case <expr><name>ERASER</name></expr> :</case>

        <if>if <condition>(<expr><operator>(</operator><name><name>this</name><operator>.</operator><name>drawer</name></name> <operator>!=</operator> <name><name>Drawer</name><operator>.</operator><name>QUADRATIC_BEZIER</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>this</name><operator>.</operator><name>drawer</name></name> <operator>!=</operator> <name><name>Drawer</name><operator>.</operator><name>QUBIC_BEZIER</name></name><operator>)</operator></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><operator>!</operator><name>isDown</name></expr>)</condition><then> <block>{
            <return>return;</return>
          }</block></then></if>

          <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getCurrentPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <switch>switch <condition>(<expr><name><name>this</name><operator>.</operator><name>drawer</name></name></expr>)</condition> <block>{
            <case>case <expr><name>PEN</name></expr> :</case>
              <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>event</name><operator>.</operator><name>getHistorySize</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><call><name>scaleX</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getHistoricalX</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>scaleY</name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getHistoricalY</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              }</block></for>
              <break>break;</break>
            <case>case <expr><name>LINE</name></expr> :</case>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>lineTo</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>RECTANGLE</name></expr> :</case>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addRect</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startY</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CCW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>CIRCLE</name></expr> :</case>
              <decl_stmt><decl><type><name>double</name></type> <name>distanceX</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call>(<name>double</name>)<argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>double</name></type> <name>distanceY</name> <init>= <expr><call><name><name>Math</name><operator>.</operator><name>abs</name></name><argument_list>(<argument><expr><call>(<name>double</name>)<argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <decl_stmt><decl><type><name>double</name></type> <name>radius</name>    <init>= <expr><call><name><name>Math</name><operator>.</operator><name>sqrt</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>distanceX</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>Math</name><operator>.</operator><name>pow</name></name><argument_list>(<argument><expr><name>distanceY</name></expr></argument>, <argument><expr><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addCircle</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startY</name></name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>radius</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CCW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>ELLIPSE</name></expr> :</case>
              <decl_stmt><decl><type><name>RectF</name></type> <name>rect</name> <init>= <expr><operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>startY</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addOval</name></name><argument_list>(<argument><expr><name>rect</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CCW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <default>default :</default>
              <break>break;</break>
          }</block></switch>
        }</block></then> <else>else <block>{
          <if>if <condition>(<expr><operator>!</operator><name>isDown</name></expr>)</condition><then> <block>{
            <return>return;</return>
          }</block></then></if>

          <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>getCurrentPath</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><call><name>scaleX</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startX</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>scaleY</name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>startY</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>quadTo</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>controlX</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>.</operator><name>controlY</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>

        <break>break;</break>
      <case>case <expr><name>TEXT</name></expr> :</case>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startY</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

        <break>break;</break>
      <default>default :</default>
        <break>break;</break>
    }</block></switch>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method defines processes on MotionEvent.ACTION_DOWN
   *
   * @param event This is argument of onTouchEvent method
   */</comment>
  <function><specifier>private</specifier> <type><name>void</name></type> <name>onActionUp</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>isDown</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startX</name></name> <operator>=</operator> <literal type="number">0F</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>startY</name></name> <operator>=</operator> <literal type="number">0F</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isDown</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>SavedState</name></type> <name>saveState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>SavedState</name><argument_list>(<argument><expr><name>pathLists</name></expr></argument>, <argument><expr><name>paintLists</name></expr></argument>, <argument><expr><name>historyPointer</name></expr></argument>, <argument><expr><name>initialWidth</name></expr></argument>, <argument><expr><name>initialHeight</name></expr></argument>, <argument><expr><name>canvasWidth</name></expr></argument>, <argument><expr><name>canvasHeight</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>restoreState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SavedState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPaths</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>state</name><operator>.</operator><name>getPaints</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getHistoryPointer</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initialWidth</name></name>  <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getInitialWidth</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initialHeight</name></name> <operator>=</operator> <call><name><name>state</name><operator>.</operator><name>getInitialHeight</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>postInvalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setActive</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>active</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>active</name></name> <operator>=</operator> <name>active</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method updates the instance of Canvas (View)
   *
   * @param canvas the new instance of Canvas
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawColor</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>baseColor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>oldw</name></expr></argument>, <argument><expr><name>oldh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>canvasWidth</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>canvasHeight</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>initialWidth</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>initialWidth</name> <operator>=</operator> <name>canvasWidth</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>initialHeight</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>initialHeight</name> <operator>=</operator> <name>canvasHeight</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>initialWidth</name></expr></argument>, <argument><expr><name>initialHeight</name></expr></argument>, <argument><expr><name>canvasWidth</name></expr></argument>, <argument><expr><name>canvasHeight</name></expr></argument>, <argument><expr><name>pathLists</name></expr></argument>, <argument><expr><name>paintLists</name></expr></argument>, <argument><expr><name>historyPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initialWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initialHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canvasWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canvasHeight</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>pathLists</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>paintLists</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>historyPointer</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>scaleX</name> <init>= <expr><literal type="number">1f</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>scaleY</name> <init>= <expr><literal type="number">1f</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>initialWidth</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>scaleX</name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>canvasWidth</name> <operator>/</operator> <name>initialWidth</name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>initialHeight</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>scaleY</name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>canvasHeight</name> <operator>/</operator> <name>initialHeight</name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>scaleX</name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>canvas</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>canvasWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>scaleY</name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name><name>canvas</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>/</operator> <name>canvasHeight</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Matrix</name></type> <name>matrix</name> <init>= <expr><operator>new</operator> <call><name>Matrix</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>setScale</name></name><argument_list>(<argument><expr><name>scaleX</name></expr></argument>, <argument><expr><name>scaleY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>historyPointer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>Path</name></type> <name>path</name>   <init>= <expr><call><name><name>pathLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><call><name><name>paintLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>Path</name></type> <name>scaledPath</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>transform</name></name><argument_list>(<argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>scaledPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Paint</name></type> <name>scaledPaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>scaledPaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><call><name><name>scaledPaint</name><operator>.</operator><name>getStrokeWidth</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>scaleX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>scaledPath</name></expr></argument>, <argument><expr><name>scaledPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method set event listener for drawing.
   *
   * @param event the instance of MotionEvent
   * @return
   */</comment>
  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><name>active</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

    <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>onActionDown</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_MOVE</name></name></expr> :</case>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>onActionMove</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr> :</case>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>onActionUp</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default :</default>
        <break>break;</break>
    }</block></switch>

    <comment type="line">// Re draw</comment>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for mode.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>Mode</name></type> <name>getMode</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>mode</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for mode.
   *
   * @param mode
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setMode</name><parameter_list>(<parameter><decl><type><name>Mode</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for drawer.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>Drawer</name></type> <name>getDrawer</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>drawer</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for drawer.
   *
   * @param drawer
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setDrawer</name><parameter_list>(<parameter><decl><type><name>Drawer</name></type> <name>drawer</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>drawer</name></name> <operator>=</operator> <name>drawer</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method draws canvas again for Undo.
   *
   * @return If Undo is enabled, this is returned as true. Otherwise, this is returned as false.
   */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>undo</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method draws canvas again for Redo.
   *
   * @return If Redo is enabled, this is returned as true. Otherwise, this is returned as false.
   */</comment>
  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>redo</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>&lt;</operator> <call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method initializes canvas.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>clear</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>Path</name></type> <name>path</name> <init>= <expr><operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>moveTo</name></name><argument_list>(<argument><expr><literal type="number">0F</literal></expr></argument>, <argument><expr><literal type="number">0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addRect</name></name><argument_list>(<argument><expr><literal type="number">0F</literal></expr></argument>, <argument><expr><literal type="number">0F</literal></expr></argument>, <argument><expr><literal type="number">1000F</literal></expr></argument>, <argument><expr><literal type="number">1000F</literal></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CCW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Paint</name></type> <name>paint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>==</operator> <call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>++</operator></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <comment type="line">// On the way of Undo or Redo</comment>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name><operator>++</operator></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></init></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>pathLists</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>paintLists</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>

    <comment type="line">// Clear</comment>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for canvas background color
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getBaseColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>baseColor</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for canvas background color
   *
   * @param color
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setBaseColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>baseColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for stroke or fill.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name><name>Paint</name><operator>.</operator><name>Style</name></name></type> <name>getPaintStyle</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>paintStyle</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for stroke or fill.
   *
   * @param style
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPaintStyle</name><parameter_list>(<parameter><decl><type><name><name>Paint</name><operator>.</operator><name>Style</name></name></type> <name>style</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paintStyle</name></name> <operator>=</operator> <name>style</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for stroke color.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getPaintStrokeColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>paintStrokeColor</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for stroke color.
   *
   * @param color
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPaintStrokeColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paintStrokeColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for fill color.
   * But, current Android API cannot set fill color (?).
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getPaintFillColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>paintFillColor</name></name></expr>;</return>
  }</block></function><empty_stmt>;</empty_stmt>

  <comment type="block" format="javadoc">/**
   * This method is setter for fill color.
   * But, current Android API cannot set fill color (?).
   *
   * @param color
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPaintFillColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paintFillColor</name></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for stroke width.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>float</name></type> <name>getPaintStrokeWidth</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>paintStrokeWidth</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for stroke width.
   *
   * @param width
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setPaintStrokeWidth</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>width</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paintStrokeWidth</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paintStrokeWidth</name></name> <operator>=</operator> <literal type="number">3F</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for alpha.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>int</name></type> <name>getOpacity</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>opacity</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for alpha.
   * The 1st argument must be between 0 and 255.
   *
   * @param opacity
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setOpacity</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>opacity</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>(</operator><name>opacity</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>opacity</name> <operator>&lt;=</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>opacity</name></name> <operator>=</operator> <name>opacity</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>opacity</name></name><operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for amount of blur.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name>float</name></type> <name>getBlur</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>blur</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for amount of blur.
   * The 1st argument is greater than or equal to 0.0.
   *
   * @param blur
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setBlur</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>blur</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>blur</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blur</name></name> <operator>=</operator> <name>blur</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>blur</name></name> <operator>=</operator> <literal type="number">0F</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is getter for line cap.
   *
   * @return
   */</comment>
  <function><specifier>public</specifier> <type><name><name>Paint</name><operator>.</operator><name>Cap</name></name></type> <name>getLineCap</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name><name>this</name><operator>.</operator><name>lineCap</name></name></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method is setter for line cap.
   *
   * @param cap
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLineCap</name><parameter_list>(<parameter><decl><type><name><name>Paint</name><operator>.</operator><name>Cap</name></name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>lineCap</name></name> <operator>=</operator> <name>cap</name></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method gets current canvas as bitmap.
   *
   * @return This is returned as bitmap.
   */</comment>
  <function><specifier>public</specifier> <type><name>Bitmap</name></type> <name>getBitmap</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setDrawingCacheEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setDrawingCacheEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getDrawingCache</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method gets current canvas as scaled bitmap.
   *
   * @return This is returned as scaled bitmap.
   */</comment>
  <function><specifier>public</specifier> <type><name>Bitmap</name></type> <name>getScaleBitmap</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setDrawingCacheEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>setDrawingCacheEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>Bitmap</name><operator>.</operator><name>createScaledBitmap</name></name><argument_list>(<argument><expr><call><name><name>this</name><operator>.</operator><name>getDrawingCache</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method draws the designated bitmap to canvas.
   *
   * @param bitmap
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>drawBitmap</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method draws the designated byte array of bitmap to canvas.
   *
   * @param byteArray This is returned as byte array of bitmap.
   */</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>drawBitmap</name><parameter_list>(<parameter><decl><type><name><name>byte</name><index>[]</index></name></type> <name>byteArray</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><call><name><name>BitmapFactory</name><operator>.</operator><name>decodeByteArray</name></name><argument_list>(<argument><expr><name>byteArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>byteArray</name><operator>.</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This static method gets the designated bitmap as byte array.
   *
   * @param bitmap
   * @param format
   * @param quality
   * @return This is returned as byte array of bitmap.
   */</comment>
  <function><specifier>public</specifier> <specifier>static</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getBitmapAsByteArray</name><parameter_list>(<parameter><decl><type><name>Bitmap</name></type> <name>bitmap</name></decl></parameter>, <parameter><decl><type><name>CompressFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>byteArrayOutputStream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>byteArrayOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>byteArrayOutputStream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method gets the bitmap as byte array.
   *
   * @param format
   * @param quality
   * @return This is returned as byte array of bitmap.
   */</comment>
  <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getBitmapAsByteArray</name><parameter_list>(<parameter><decl><type><name>CompressFormat</name></type> <name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quality</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>byteArrayOutputStream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>getBitmap</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>compress</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><name>quality</name></expr></argument>, <argument><expr><name>byteArrayOutputStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name><name>byteArrayOutputStream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * This method gets the bitmap as byte array.
   * Bitmap format is PNG, and quality is 100.
   *
   * @return This is returned as byte array of bitmap.
   */</comment>
  <function><specifier>public</specifier> <type><name><name>byte</name><index>[]</index></name></type> <name>getBitmapAsByteArray</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>getBitmapAsByteArray</name></name><argument_list>(<argument><expr><name><name>CompressFormat</name><operator>.</operator><name>PNG</name></name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getUniqueColors</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>colors</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>paintLists</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>historyPointer</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><call><name><name>paintLists</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>colors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>rgb</name></name><argument_list>(<argument><expr><call><name><name>Color</name><operator>.</operator><name>red</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>green</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>Color</name><operator>.</operator><name>blue</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><name>colors</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>float</name></type> <name>scaleX</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>initialWidth</name> <operator>/</operator> <name>canvasWidth</name><operator>)</operator> <operator>*</operator> <name>x</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>float</name></type> <name>scaleY</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>initialWidth</name> <operator>/</operator> <name>canvasWidth</name><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</return>
  }</block></function>

  <class><specifier>static</specifier> class <name>SavedState</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type>  <name>paths</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>paints</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>         <name>historyPointer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>         <name>initialWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>         <name>initialHeight</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>         <name>canvasWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>         <name>canvasHeight</name></decl>;</decl_stmt>

    <constructor><name>SavedState</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>paths</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>paints</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>historyPointer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initialWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>initialHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canvasWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>canvasHeight</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paths</name></name>          <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>paths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>paints</name></name>         <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>paints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>historyPointer</name></name> <operator>=</operator> <name>historyPointer</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initialWidth</name></name>   <operator>=</operator> <name>initialWidth</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>initialHeight</name></name>  <operator>=</operator> <name>initialHeight</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>canvasWidth</name></name>    <operator>=</operator> <name>canvasWidth</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>canvasHeight</name></name>   <operator>=</operator> <name>canvasHeight</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Path</name></argument>&gt;</argument_list></name></type> <name>getPaths</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>paths</name></expr>;</return>
    }</block></function>

    <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Paint</name></argument>&gt;</argument_list></name></type> <name>getPaints</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>paints</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getHistoryPointer</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>historyPointer</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getInitialWidth</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>initialWidth</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getInitialHeight</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>initialHeight</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getCanvasWidth</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>canvasWidth</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>getCanvasHeight</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>canvasHeight</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>paths</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class></unit>
