<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\widget\VerticalSlideColorPicker.java"><comment type="block" format="javadoc">/**
 * Copyright (c) 2016 Mark Charles
 * Copyright (c) 2016 Open Whisper Systems
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>TypedArray</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>LinearGradient</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Path</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>RectF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Shader</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>

<class><specifier>public</specifier> class <name>VerticalSlideColorPicker</name> <super><extends>extends <name>View</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>float</name></type> <name>INDICATOR_TO_BAR_WIDTH_RATIO</name> <init>= <expr><literal type="number">0.8f</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type>  <name>paint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type>  <name>strokePaint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type>  <name>indicatorStrokePaint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type>  <name>indicatorFillPaint</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Path</name></type>   <name>path</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Canvas</name></type> <name>bitmapCanvas</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>viewWidth</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>viewHeight</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>centerX</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type>   <name>colorPickerRadius</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RectF</name></type>   <name>colorPickerBody</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>OnColorChangeListener</name></type> <name>onColorChangeListener</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>borderColor</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type>   <name>borderWidth</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>float</name></type>   <name>indicatorRadius</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>int</name><index>[]</index></name></type>   <name>colors</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>touchY</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>     <name>activeColor</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>VerticalSlideColorPicker</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>VerticalSlideColorPicker</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TypedArray</name></type> <name>a</name> <init>= <expr><call><name><name>context</name><operator>.</operator><name>getTheme</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>obtainStyledAttributes</name><argument_list>(<argument><expr><name>attrs</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>VerticalSlideColorPicker</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <try>try <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>colorsResourceId</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>getResourceId</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>VerticalSlideColorPicker_pickerColors</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>array</name><operator>.</operator><name>scribble_colors</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>colors</name>          <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getIntArray</name><argument_list>(<argument><expr><name>colorsResourceId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>borderColor</name>     <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getColor</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>VerticalSlideColorPicker_pickerBorderColor</name></name></expr></argument>, <argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>borderWidth</name>     <operator>=</operator> <call><name><name>a</name><operator>.</operator><name>getDimension</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>styleable</name><operator>.</operator><name>VerticalSlideColorPicker_pickerBorderWidth</name></name></expr></argument>, <argument><expr><literal type="number">10f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block> <finally>finally <block>{
      <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></finally></try>

    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>VerticalSlideColorPicker</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <name>VerticalSlideColorPicker</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleRes</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><name>defStyleRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>setWillNotDraw</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>paint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>path</name> <operator>=</operator> <operator>new</operator> <call><name>Path</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>strokePaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>STROKE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>borderColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>strokePaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>borderWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>indicatorStrokePaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>(<argument><expr><name>strokePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indicatorStrokePaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>borderWidth</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>indicatorFillPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indicatorFillPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>indicatorFillPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addCircle</name></name><argument_list>(<argument><expr><name>centerX</name></expr></argument>, <argument><expr><name>borderWidth</name> <operator>+</operator> <name>colorPickerRadius</name></expr></argument>, <argument><expr><name>colorPickerRadius</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addRect</name></name><argument_list>(<argument><expr><name>colorPickerBody</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>addCircle</name></name><argument_list>(<argument><expr><name>centerX</name></expr></argument>, <argument><expr><name>viewHeight</name> <operator>-</operator> <operator>(</operator><name>borderWidth</name> <operator>+</operator> <name>colorPickerRadius</name><operator>)</operator></expr></argument>, <argument><expr><name>colorPickerRadius</name></expr></argument>, <argument><expr><name><name>Path</name><operator>.</operator><name>Direction</name><operator>.</operator><name>CW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bitmapCanvas</name><operator>.</operator><name>drawColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>bitmapCanvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>strokePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bitmapCanvas</name><operator>.</operator><name>drawPath</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>paint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>touchY</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name><name>colorPickerBody</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>touchY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>indicatorFillPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><name>activeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawCircle</name></name><argument_list>(<argument><expr><name>centerX</name></expr></argument>, <argument><expr><name>touchY</name></expr></argument>, <argument><expr><name>indicatorRadius</name></expr></argument>, <argument><expr><name>indicatorFillPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawCircle</name></name><argument_list>(<argument><expr><name>centerX</name></expr></argument>, <argument><expr><name>touchY</name></expr></argument>, <argument><expr><name>indicatorRadius</name></expr></argument>, <argument><expr><name>indicatorStrokePaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onTouchEvent</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>touchY</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>event</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>colorPickerBody</name><operator>.</operator><name>bottom</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>touchY</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>colorPickerBody</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><name>touchY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>activeColor</name> <operator>=</operator> <call><name><name>bitmap</name><operator>.</operator><name>getPixel</name></name><argument_list>(<argument><expr><name>viewWidth</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>touchY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>onColorChangeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>onColorChangeListener</name><operator>.</operator><name>onColorChange</name></name><argument_list>(<argument><expr><name>activeColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onSizeChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>oldh</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onSizeChanged</name></name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>oldw</name></expr></argument>, <argument><expr><name>oldh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>viewWidth</name>  <operator>=</operator> <name>w</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>viewHeight</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>barWidth</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>viewWidth</name> <operator>*</operator> <name>INDICATOR_TO_BAR_WIDTH_RATIO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>centerX</name>           <operator>=</operator> <name>viewWidth</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>indicatorRadius</name>   <operator>=</operator> <operator>(</operator><name>viewWidth</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>borderWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>colorPickerRadius</name> <operator>=</operator> <operator>(</operator><name>barWidth</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <name>borderWidth</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>colorPickerBody</name>   <operator>=</operator> <operator>new</operator> <call><name>RectF</name><argument_list>(<argument><expr><name>centerX</name> <operator>-</operator> <name>colorPickerRadius</name></expr></argument>, <argument><expr><name>borderWidth</name> <operator>+</operator> <name>colorPickerRadius</name></expr></argument>, <argument><expr><name>centerX</name> <operator>+</operator> <name>colorPickerRadius</name></expr></argument>, <argument><expr><name>viewHeight</name> <operator>-</operator> <operator>(</operator><name>borderWidth</name> <operator>+</operator> <name>colorPickerRadius</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LinearGradient</name></type> <name>gradient</name> <init>= <expr><operator>new</operator> <call><name>LinearGradient</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>colorPickerBody</name><operator>.</operator><name>top</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>colorPickerBody</name><operator>.</operator><name>bottom</name></name></expr></argument>, <argument><expr><name>colors</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>Shader</name><operator>.</operator><name>TileMode</name><operator>.</operator><name>CLAMP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>paint</name><operator>.</operator><name>setShader</name></name><argument_list>(<argument><expr><name>gradient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>bitmap</name>       <operator>=</operator> <call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><name>viewWidth</name></expr></argument>, <argument><expr><name>viewHeight</name></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>bitmapCanvas</name> <operator>=</operator> <operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setBorderColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>borderColor</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>borderColor</name></name> <operator>=</operator> <name>borderColor</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setBorderWidth</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>borderWidth</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>borderWidth</name></name> <operator>=</operator> <name>borderWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setColors</name><parameter_list>(<parameter><decl><type><name><name>int</name><index>[]</index></name></type> <name>colors</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>colors</name></name> <operator>=</operator> <name>colors</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setActiveColor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>activeColor</name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>colorPickerBody</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>touchY</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>colorPickerBody</name><operator>.</operator><name>top</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><name>onColorChangeListener</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>onColorChangeListener</name><operator>.</operator><name>onColorChange</name></name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>getActiveColor</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>activeColor</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setOnColorChangeListener</name><parameter_list>(<parameter><decl><type><name>OnColorChangeListener</name></type> <name>onColorChangeListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>onColorChangeListener</name></name> <operator>=</operator> <name>onColorChangeListener</name></expr>;</expr_stmt>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>OnColorChangeListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onColorChange</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>selectedColor</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class></unit>
