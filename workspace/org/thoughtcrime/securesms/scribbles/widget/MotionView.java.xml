<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\widget\MotionView.java"><comment type="block" format="javadoc">/**
 * Copyright (c) 2016 UPTech
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>TargetApi</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PointF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>GestureDetectorCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewCompat</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Editable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>InputType</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Selection</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextWatcher</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>TypedValue</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>GestureDetector</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Gravity</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ScaleGestureDetector</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>inputmethod</name><operator>.</operator><name>InputMethodManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>EditText</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>FrameLayout</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>annimon</name><operator>.</operator><name>stream</name><operator>.</operator><name>Stream</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>multitouch</name><operator>.</operator><name>MoveGestureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>multitouch</name><operator>.</operator><name>RotateGestureDetector</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name><operator>.</operator><name>MotionEntity</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name><operator>.</operator><name>TextEntity</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>ArrayList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashSet</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Set</name></name>;</import>

<class><specifier>public</specifier> class <name>MotionView</name>  <super><extends>extends <name>FrameLayout</name></extends> <implements>implements <name>TextWatcher</name></implements></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MotionView</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <interface><specifier>public</specifier> interface <name>Constants</name> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>SELECTED_LAYER_ALPHA</name> <init>= <expr><literal type="number">0.15F</literal></expr></init></decl>;</decl_stmt>
  }</block></interface>

  <interface><specifier>public</specifier> interface <name>MotionViewCallback</name> <block>{
    <function_decl><type><name>void</name></type> <name>onEntitySelected</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onEntityDoubleTap</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>

  <comment type="line">// layers</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>MotionEntity</name></argument>&gt;</argument_list></name></type> <name>entities</name> <init>= <expr><operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
  <specifier>private</specifier> <type><name>MotionEntity</name></type> <name>selectedEntity</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Paint</name></type> <name>selectedLayerPaint</name></decl>;</decl_stmt>

  <comment type="line">// callback</comment>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
  <specifier>private</specifier> <type><name>MotionViewCallback</name></type> <name>motionViewCallback</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>EditText</name></type> <name>editText</name></decl>;</decl_stmt>

  <comment type="line">// gesture detection</comment>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ScaleGestureDetector</name></type> <name>scaleGestureDetector</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>RotateGestureDetector</name></type> <name>rotateGestureDetector</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>MoveGestureDetector</name></type> <name>moveGestureDetector</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>GestureDetectorCompat</name></type> <name>gestureDetectorCompat</name></decl>;</decl_stmt>

  <comment type="line">// constructors</comment>
  <constructor><specifier>public</specifier> <name>MotionView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>MotionView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>MotionView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>TargetApi</name><argument_list>(<argument><expr><name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>LOLLIPOP</name></name></expr></argument>)</argument_list></annotation>
  <specifier>public</specifier> <name>MotionView</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleAttr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>defStyleRes</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>, <argument><expr><name>defStyleAttr</name></expr></argument>, <argument><expr><name>defStyleRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// I fucking love Android</comment>
    <expr_stmt><expr><call><name>setWillNotDraw</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>selectedLayerPaint</name> <operator>=</operator> <operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selectedLayerPaint</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><call>(<name>int</name>) <argument_list>(<argument><expr><literal type="number">255</literal> <operator>*</operator> <name><name>Constants</name><operator>.</operator><name>SELECTED_LAYER_ALPHA</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>selectedLayerPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>editText</name></name> <operator>=</operator> <operator>new</operator> <call><name>EditText</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ViewCompat</name><operator>.</operator><name>setAlpha</name></name><argument_list>(<argument><expr><name><name>this</name><operator>.</operator><name>editText</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>setLayoutParams</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LayoutParams</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>Gravity</name><operator>.</operator><name>TOP</name></name> <operator>|</operator> <name><name>Gravity</name><operator>.</operator><name>LEFT</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>setClickable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>setBackgroundColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><name><name>TypedValue</name><operator>.</operator><name>COMPLEX_UNIT_SP</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>setInputType</name></name><argument_list>(<argument><expr><name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_FLAG_MULTI_LINE</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_FLAG_NO_SUGGESTIONS</name></name> <operator>|</operator> <name><name>InputType</name><operator>.</operator><name>TYPE_TEXT_VARIATION_VISIBLE_PASSWORD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><name>editText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>editText</name><operator>.</operator><name>addTextChangedListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// init listeners</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>scaleGestureDetector</name></name> <operator>=</operator> <operator>new</operator> <call><name>ScaleGestureDetector</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>ScaleListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>rotateGestureDetector</name></name> <operator>=</operator> <operator>new</operator> <call><name>RotateGestureDetector</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>RotateListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>moveGestureDetector</name></name> <operator>=</operator> <operator>new</operator> <call><name>MoveGestureDetector</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>MoveListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>gestureDetectorCompat</name></name> <operator>=</operator> <operator>new</operator> <call><name>GestureDetectorCompat</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>TapsListener</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>setOnTouchListener</name><argument_list>(<argument><expr><name>onTouchListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>SavedState</name></type> <name>saveState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>SavedState</name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>restoreState</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SavedState</name></type> <name>savedState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>entities</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>entities</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name><name>savedState</name><operator>.</operator><name>getEntities</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>postInvalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>startEditing</name><parameter_list>(<parameter><decl><type><name>TextEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>setFocusableInTouchMode</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>setFocusable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>entity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Selection</name><operator>.</operator><name>setSelection</name></name><argument_list>(<argument><expr><call><name><name>editText</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>editText</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>ims</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>ims</name><operator>.</operator><name>showSoftInput</name></name><argument_list>(<argument><expr><name>editText</name></expr></argument>, <argument><expr><name><name>InputMethodManager</name><operator>.</operator><name>SHOW_IMPLICIT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>MotionEntity</name></type> <name>getSelectedEntity</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>selectedEntity</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MotionEntity</name></argument>&gt;</argument_list></name></type> <name>getEntities</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>entities</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setMotionViewCallback</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionViewCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>motionViewCallback</name></name> <operator>=</operator> <name>callback</name></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addEntity</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>entity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>entities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>selectEntity</name><argument_list>(<argument><expr><name>entity</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addEntityAndPosition</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>entity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>initEntityBorder</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>initialTranslateAndScale</name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>entities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>selectEntity</name><argument_list>(<argument><expr><name>entity</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>getUniqueColors</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Set</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>colors</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashSet</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>MotionEntity</name></type> <name>entity</name> <range>: <expr><name>entities</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>entity</name> <operator>instanceof</operator> <name>TextEntity</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>colors</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TextEntity</name><operator>)</operator> <name>entity</name><operator>)</operator><operator>.</operator><call><name>getLayer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getFont</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>

    <return>return <expr><name>colors</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initEntityBorder</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter> )</parameter_list> <block>{
    <comment type="line">// init stroke</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>strokeSize</name> <init>= <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getDimensionPixelSize</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>dimen</name><operator>.</operator><name>scribble_stroke_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Paint</name></type> <name>borderPaint</name> <init>= <expr><operator>new</operator> <call><name>Paint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>borderPaint</name><operator>.</operator><name>setStrokeWidth</name></name><argument_list>(<argument><expr><name>strokeSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>borderPaint</name><operator>.</operator><name>setAntiAlias</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>borderPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>sticker_selected_color</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>entity</name><operator>.</operator><name>setBorderPaint</name></name><argument_list>(<argument><expr><name>borderPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>dispatchDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>dispatchDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// dispatch draw is called after child views is drawn.</comment>
    <comment type="line">// the idea that is we draw background stickers, than child views (if any), and than selected item</comment>
    <comment type="line">// to draw on top of child views - do it in dispatchDraw(Canvas)</comment>
    <comment type="line">// to draw below that - do it in onDraw(Canvas)</comment>
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>selectedLayerPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onDraw</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onDraw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>unselectEntity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>draw</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>void</name></type> <name>render</name><parameter_list>(<parameter><decl><type><name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MotionEntity</name></argument>&gt;</argument_list></name></type> <name>entities</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>entities</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>entities</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>draw</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * as a side effect - the method deselects Entity (if any selected)
   * @return bitmap with all the Entities at their current positions
   */</comment>
  <function><specifier>public</specifier> <type><name>Bitmap</name></type> <name>getThumbnailImage</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>selectEntity</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Bitmap</name></type> <name>bmp</name> <init>= <expr><call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// IMPORTANT: always create white background, cos if the image is saved in JPEG format,</comment>
    <comment type="line">// which doesn't have transparent pixels, the background will be black</comment>
    <expr_stmt><expr><call><name><name>bmp</name><operator>.</operator><name>eraseColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>WHITE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>Canvas</name></type> <name>canvas</name> <init>= <expr><operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>render</name><argument_list>(<argument><expr><name>canvas</name></expr></argument>, <argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>bmp</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateUI</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>handleTranslate</name><parameter_list>(<parameter><decl><type><name>PointF</name></type> <name>delta</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>float</name></type> <name>newCenterX</name> <init>= <expr><call><name><name>selectedEntity</name><operator>.</operator><name>absoluteCenterX</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>delta</name><operator>.</operator><name>x</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>newCenterY</name> <init>= <expr><call><name><name>selectedEntity</name><operator>.</operator><name>absoluteCenterY</name></name><argument_list>()</argument_list></call> <operator>+</operator> <name><name>delta</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
      <comment type="line">// limit entity center to screen bounds</comment>
      <decl_stmt><decl><type><name>boolean</name></type> <name>needUpdateUI</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>newCenterX</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newCenterX</name> <operator>&lt;=</operator> <call><name>getWidth</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postTranslate</name><argument_list>(<argument><expr><name><name>delta</name><operator>.</operator><name>x</name></name> <operator>/</operator> <call><name>getWidth</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>needUpdateUI</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name>newCenterY</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>newCenterY</name> <operator>&lt;=</operator> <call><name>getHeight</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postTranslate</name><argument_list>(<argument><expr><literal type="number">0.0F</literal></expr></argument>, <argument><expr><name><name>delta</name><operator>.</operator><name>y</name></name> <operator>/</operator> <call><name>getHeight</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>needUpdateUI</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name>needUpdateUI</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>updateUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>initialTranslateAndScale</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>entity</name><operator>.</operator><name>moveToCanvasCenter</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>entity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setScale</name><argument_list>(<argument><expr><call><name><name>entity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>initialScale</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>selectEntity</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>updateCallback</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>entity</name> <operator>!=</operator> <name>selectedEntity</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>setIsSelected</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>selectedEntity</name> <operator>instanceof</operator> <name>TextEntity</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>TextEntity</name><operator>)</operator> <name>selectedEntity</name><operator>)</operator><operator>.</operator><call><name>getLayer</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name>deletedSelectedEntity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>clearComposingText</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>editText</name><operator>.</operator><name>clearFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>InputMethodManager</name></type> <name>imm</name> <init>= <expr><operator>(</operator><name>InputMethodManager</name><operator>)</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSystemService</name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>INPUT_METHOD_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>imm</name><operator>.</operator><name>hideSoftInputFromWindow</name></name><argument_list>(<argument><expr><call><name><name>editText</name><operator>.</operator><name>getWindowToken</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

    }</block></then></if>
    <if>if <condition>(<expr><name>entity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>entity</name><operator>.</operator><name>setIsSelected</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>selectedEntity</name> <operator>=</operator> <name>entity</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>updateCallback</name> <operator>&amp;&amp;</operator> <name>motionViewCallback</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>motionViewCallback</name><operator>.</operator><name>onEntitySelected</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>unselectEntity</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>selectEntity</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <specifier>private</specifier> <type><name>MotionEntity</name></type> <name>findEntityAtPoint</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>MotionEntity</name></type> <name>selected</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>PointF</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>PointF</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>entities</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>entities</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>pointInLayerRect</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>selected</name> <operator>=</operator> <call><name><name>entities</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <return>return <expr><name>selected</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateSelectionOnTap</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>MotionEntity</name></type> <name>entity</name> <init>= <expr><call><name>findEntityAtPoint</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>selectEntity</name><argument_list>(<argument><expr><name>entity</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateOnLongPress</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// if layer is currently selected and point inside layer - move it to front</comment>
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>PointF</name></type> <name>p</name> <init>= <expr><operator>new</operator> <call><name>PointF</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>getX</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>getY</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><call><name><name>selectedEntity</name><operator>.</operator><name>pointInLayerRect</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>bringLayerToFront</name><argument_list>(<argument><expr><name>selectedEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>bringLayerToFront</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// removing and adding brings layer to front</comment>
    <if>if <condition>(<expr><call><name><name>entities</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>entities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>moveEntityToBack</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>MotionEntity</name></type> <name>entity</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>entity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name><name>entities</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>entities</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>entity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>flipSelectedEntity</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>flip</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>moveSelectedBack</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>moveEntityToBack</name><argument_list>(<argument><expr><name>selectedEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>deletedSelectedEntity</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>selectedEntity</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>
    <if>if <condition>(<expr><call><name><name>entities</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><name>selectedEntity</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>selectedEntity</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>invalidate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <comment type="line">// memory</comment>
  <function><specifier>public</specifier> <type><name>void</name></type> <name>release</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>MotionEntity</name></type> <name>entity</name> <range>: <expr><name>entities</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>entity</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <comment type="line">// gesture detectors</comment>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>View</name><operator>.</operator><name>OnTouchListener</name></name></type> <name>onTouchListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>View</name><operator>.</operator><name>OnTouchListener</name></name></super><argument_list>()</argument_list> <block>{

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onTouch</name><parameter_list>(<parameter><decl><type><name>View</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>MotionEvent</name></type> <name>event</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>scaleGestureDetector</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>scaleGestureDetector</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>rotateGestureDetector</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>moveGestureDetector</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>gestureDetectorCompat</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <class><specifier>private</specifier> class <name>TapsListener</name> <super><extends>extends <name><name>GestureDetector</name><operator>.</operator><name>SimpleOnGestureListener</name></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onDoubleTap</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>motionViewCallback</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>motionViewCallback</name><operator>.</operator><name>onEntityDoubleTap</name></name><argument_list>(<argument><expr><name>selectedEntity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onLongPress</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>updateOnLongPress</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onSingleTapUp</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>updateSelectionOnTap</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onDown</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>updateSelectionOnTap</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>ScaleListener</name> <super><extends>extends <name><name>ScaleGestureDetector</name><operator>.</operator><name>SimpleOnScaleGestureListener</name></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onScale</name><parameter_list>(<parameter><decl><type><name>ScaleGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>float</name></type> <name>scaleFactorDiff</name> <init>= <expr><call><name><name>detector</name><operator>.</operator><name>getScaleFactor</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"ScaleFactorDiff: "</literal> <operator>+</operator> <name>scaleFactorDiff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postScale</name><argument_list>(<argument><expr><name>scaleFactorDiff</name> <operator>-</operator> <literal type="number">1.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>updateEntity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>RotateListener</name> <super><extends>extends <name><name>RotateGestureDetector</name><operator>.</operator><name>SimpleOnRotateGestureListener</name></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onRotate</name><parameter_list>(<parameter><decl><type><name>RotateGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>(<expr><name>selectedEntity</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>selectedEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>postRotate</name><argument_list>(<argument><expr><operator>-</operator><call><name><name>detector</name><operator>.</operator><name>getRotationDegreesDelta</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateUI</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <class><specifier>private</specifier> class <name>MoveListener</name> <super><extends>extends <name><name>MoveGestureDetector</name><operator>.</operator><name>SimpleOnMoveGestureListener</name></name></extends></super> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onMove</name><parameter_list>(<parameter><decl><type><name>MoveGestureDetector</name></type> <name>detector</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>handleTranslate</name><argument_list>(<argument><expr><call><name><name>detector</name><operator>.</operator><name>getFocusDelta</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>beforeTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>after</name></decl></parameter>)</parameter_list> <block>{}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onTextChanged</name><parameter_list>(<parameter><decl><type><name>CharSequence</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>before</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{}</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>afterTextChanged</name><parameter_list>(<parameter><decl><type><name>Editable</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type>       <name>text</name>   <init>= <expr><call><name><name>s</name><operator>.</operator><name>toString</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MotionEntity</name></type> <name>entity</name> <init>= <expr><call><name>getSelectedEntity</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>entity</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>entity</name> <operator>instanceof</operator> <name>TextEntity</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TextEntity</name></type> <name>textEntity</name> <init>= <expr><operator>(</operator><name>TextEntity</name><operator>)</operator><name>entity</name></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><operator>!</operator><call><name><name>textEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getText</name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>textEntity</name><operator>.</operator><name>getLayer</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>setText</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>textEntity</name><operator>.</operator><name>updateEntity</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>MotionView</name><operator>.</operator><name>this</name><operator>.</operator><name>invalidate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <class><specifier>static</specifier> class <name>SavedState</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>MotionEntity</name></argument>&gt;</argument_list></name></type> <name>entities</name></decl>;</decl_stmt>

    <constructor><name>SavedState</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MotionEntity</name></argument>&gt;</argument_list></name></type> <name>entities</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>entities</name></name> <operator>=</operator> <operator>new</operator> <call><name><name>ArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>Stream</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>entities</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>forEach</name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>e</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>e</name><operator>.</operator><name>setIsSelected</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>MotionEntity</name></argument>&gt;</argument_list></name></type> <name>getEntities</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>entities</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isEmpty</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><call><name><name>entities</name><operator>.</operator><name>isEmpty</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
