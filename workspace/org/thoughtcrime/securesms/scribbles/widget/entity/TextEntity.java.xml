<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\widget\entity\TextEntity.java"><comment type="block" format="javadoc">/**
 * Copyright (c) 2016 UPTech
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Color</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PointF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>IntRange</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>Layout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>StaticLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextPaint</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>viewmodel</name><operator>.</operator><name>TextLayer</name></name>;</import>


<class><specifier>public</specifier> class <name>TextEntity</name> <super><extends>extends <name>MotionEntity</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>TextPaint</name></type> <name>textPaint</name></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
  <specifier>private</specifier> <type><name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TextEntity</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TextLayer</name></type> <name>textLayer</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>IntRange</name><argument_list>(<argument><expr><name>from</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></annotation> <name>int</name></type> <name>canvasWidth</name></decl></parameter>,
                    <parameter><decl><type><annotation>@<name>IntRange</name><argument_list>(<argument><expr><name>from</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></annotation> <name>int</name></type> <name>canvasHeight</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>textLayer</name></expr></argument>, <argument><expr><name>canvasWidth</name></expr></argument>, <argument><expr><name>canvasHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>textPaint</name></name> <operator>=</operator> <operator>new</operator> <call><name>TextPaint</name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>ANTI_ALIAS_FLAG</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>updateEntity</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateEntity</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>moveToPreviousCenter</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">// save previous center</comment>
    <decl_stmt><decl><type><name>PointF</name></type> <name>oldCenter</name> <init>= <expr><call><name>absoluteCenter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Bitmap</name></type> <name>newBmp</name> <init>= <expr><call><name>createBitmap</name><argument_list>(<argument><expr><call><name>getLayer</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>bitmap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// recycle previous bitmap (if not reused) as soon as possible</comment>
    <if>if <condition>(<expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <name>bitmap</name> <operator>!=</operator> <name>newBmp</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>bitmap</name><operator>.</operator><name>isRecycled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>newBmp</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"UnnecessaryLocalVariable"</literal></expr></argument>)</argument_list></annotation>
    <type><name>float</name></type> <name>widthAspect</name> <init>= <expr><literal type="number">1.0F</literal> <operator>*</operator> <name>canvasWidth</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// for text we always match text width with parent width</comment>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>holyScale</name></name> <operator>=</operator> <name>widthAspect</name></expr>;</expr_stmt>

    <comment type="line">// initial position of the entity</comment>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>moveToPreviousCenter</name></expr>)</condition><then> <block>{
      <comment type="line">// move to previous center</comment>
      <expr_stmt><expr><call><name>moveCenterTo</name><argument_list>(<argument><expr><name>oldCenter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <comment type="block" format="javadoc">/**
   * If reuseBmp is not null, and size of the new bitmap matches the size of the reuseBmp,
   * new bitmap won't be created, reuseBmp it will be reused instead
   *
   * @param textLayer text to draw
   * @param reuseBmp  the bitmap that will be reused
   * @return bitmap with the text
   */</comment>
  <function><annotation>@<name>NonNull</name></annotation>
  <specifier>private</specifier> <type><name>Bitmap</name></type> <name>createBitmap</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>TextLayer</name></type> <name>textLayer</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bitmap</name></type> <name>reuseBmp</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>boundsWidth</name> <init>= <expr><name>canvasWidth</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// init params - size, color, typeface</comment>
    <expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setStyle</name></name><argument_list>(<argument><expr><name><name>Paint</name><operator>.</operator><name>Style</name><operator>.</operator><name>FILL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setTextSize</name></name><argument_list>(<argument><expr><call><name><name>textLayer</name><operator>.</operator><name>getFont</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSize</name><argument_list>()</argument_list></call> <operator>*</operator> <name>canvasWidth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>textPaint</name><operator>.</operator><name>setColor</name></name><argument_list>(<argument><expr><call><name><name>textLayer</name><operator>.</operator><name>getFont</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        textPaint.setTypeface(fontProvider.getTypeface(textLayer.getFont().getTypeface()));</comment>

    <comment type="line">// drawing text guide : http://ivankocijan.xyz/android-drawing-multiline-text-on-canvas/</comment>
    <comment type="line">// Static layout which will be drawn on canvas</comment>
    <decl_stmt><decl><type><name>StaticLayout</name></type> <name>sl</name> <init>= <expr><operator>new</operator> <call><name>StaticLayout</name><argument_list>(
        <argument><expr><call><name><name>textLayer</name><operator>.</operator><name>getText</name></name><argument_list>()</argument_list></call></expr></argument>, <comment type="line">// - text which will be drawn</comment>
        <argument><expr><name>textPaint</name></expr></argument>,
        <argument><expr><name>boundsWidth</name></expr></argument>, <comment type="line">// - width of the layout</comment>
        <argument><expr><name><name>Layout</name><operator>.</operator><name>Alignment</name><operator>.</operator><name>ALIGN_CENTER</name></name></expr></argument>, <comment type="line">// - layout alignment</comment>
        <argument><expr><literal type="number">1</literal></expr></argument>, <comment type="line">// 1 - text spacing multiply</comment>
        <argument><expr><literal type="number">1</literal></expr></argument>, <comment type="line">// 1 - text spacing add</comment>
        <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">// true - include padding</comment>

    <comment type="line">// calculate height for the entity, min - Limits.MIN_BITMAP_HEIGHT</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>boundsHeight</name> <init>= <expr><call><name><name>sl</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create bitmap not smaller than TextLayer.Limits.MIN_BITMAP_HEIGHT</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>bmpHeight</name> <init>= <expr><call>(<name>int</name>) <argument_list>(<argument><expr><name>canvasHeight</name> <operator>*</operator> <call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name><name>TextLayer</name><operator>.</operator><name>Limits</name><operator>.</operator><name>MIN_BITMAP_HEIGHT</name></name></expr></argument>,
                                                   <argument><expr><literal type="number">1.0F</literal> <operator>*</operator> <name>boundsHeight</name> <operator>/</operator> <name>canvasHeight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// create bitmap where text will be drawn</comment>
    <decl_stmt><decl><type><name>Bitmap</name></type> <name>bmp</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>reuseBmp</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>reuseBmp</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>boundsWidth</name>
        <operator>&amp;&amp;</operator> <call><name><name>reuseBmp</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>bmpHeight</name></expr>)</condition><then> <block>{
      <comment type="line">// if previous bitmap exists, and it's width/height is the same - reuse it</comment>
      <expr_stmt><expr><name>bmp</name> <operator>=</operator> <name>reuseBmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>bmp</name><operator>.</operator><name>eraseColor</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>TRANSPARENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// erase color when reusing</comment>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>bmp</name> <operator>=</operator> <call><name><name>Bitmap</name><operator>.</operator><name>createBitmap</name></name><argument_list>(<argument><expr><name>boundsWidth</name></expr></argument>, <argument><expr><name>bmpHeight</name></expr></argument>, <argument><expr><name><name>Bitmap</name><operator>.</operator><name>Config</name><operator>.</operator><name>ARGB_8888</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <decl_stmt><decl><type><name>Canvas</name></type> <name>canvas</name> <init>= <expr><operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>bmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>save</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// move text to center if bitmap is bigger that text</comment>
    <if>if <condition>(<expr><name>boundsHeight</name> <operator>&lt;</operator> <name>bmpHeight</name></expr>)</condition><then> <block>{
      <comment type="line">//calculate Y coordinate - In this case we want to draw the text in the</comment>
      <comment type="line">//center of the canvas so we move Y coordinate to center.</comment>
      <decl_stmt><decl><type><name>float</name></type> <name>textYCoordinate</name> <init>= <expr><operator>(</operator><name>bmpHeight</name> <operator>-</operator> <name>boundsHeight</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>translate</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>textYCoordinate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">//draws static layout on canvas</comment>
    <expr_stmt><expr><call><name><name>sl</name><operator>.</operator><name>draw</name></name><argument_list>(<argument><expr><name>canvas</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>restore</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>bmp</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
    <annotation>@<name>NonNull</name></annotation>
  <specifier>public</specifier> <type><name>TextLayer</name></type> <name>getLayer</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>TextLayer</name><operator>)</operator> <name>layer</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>drawContent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Paint</name></type> <name>drawingPaint</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>drawingPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>bitmap</name> <operator>!=</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>updateEntity</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>updateEntity</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class></unit>
