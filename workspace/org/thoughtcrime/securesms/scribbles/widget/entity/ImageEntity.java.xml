<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\scribbles\widget\entity\ImageEntity.java"><comment type="block" format="javadoc">/**
 * Copyright (c) 2016 UPTech
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>widget</name><operator>.</operator><name>entity</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Paint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>IntRange</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>scribbles</name><operator>.</operator><name>viewmodel</name><operator>.</operator><name>Layer</name></name>;</import>


<class><specifier>public</specifier> class <name>ImageEntity</name> <super><extends>extends <name>MotionEntity</name></extends></super> <block>{

  <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>
  <specifier>private</specifier> <type><specifier>final</specifier> <name>Bitmap</name></type> <name>bitmap</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>ImageEntity</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Layer</name></type> <name>layer</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Bitmap</name></type> <name>bitmap</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>IntRange</name><argument_list>(<argument><expr><name>from</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></annotation> <name>int</name></type> <name>canvasWidth</name></decl></parameter>,
                     <parameter><decl><type><annotation>@<name>IntRange</name><argument_list>(<argument><expr><name>from</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></annotation> <name>int</name></type> <name>canvasHeight</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>layer</name></expr></argument>, <argument><expr><name>canvasWidth</name></expr></argument>, <argument><expr><name>canvasHeight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>bitmap</name></name> <operator>=</operator> <name>bitmap</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>width</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>height</name> <init>= <expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>widthAspect</name> <init>= <expr><literal type="number">1.0F</literal> <operator>*</operator> <name>canvasWidth</name> <operator>/</operator> <name>width</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>heightAspect</name> <init>= <expr><literal type="number">1.0F</literal> <operator>*</operator> <name>canvasHeight</name> <operator>/</operator> <name>height</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// fit the smallest size</comment>
    <expr_stmt><expr><name>holyScale</name> <operator>=</operator> <call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>widthAspect</name></expr></argument>, <argument><expr><name>heightAspect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// initial position of the entity</comment>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>srcPoints</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>drawContent</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Canvas</name></type> <name>canvas</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Paint</name></type> <name>drawingPaint</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><name>bitmap</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>drawingPaint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getWidth</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>bitmap</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>int</name></type> <name>getHeight</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>bitmap</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>release</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><call><name><name>bitmap</name><operator>.</operator><name>isRecycled</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>bitmap</name><operator>.</operator><name>recycle</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>
}</block></class></unit>
