<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\longmessage\LongMessageRepository.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>longmessage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>Cursor</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>AsyncTask</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>WorkerThread</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>MmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>SmsDatabase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MmsMessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>PartAuthority</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>TextSlide</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>IOException</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>InputStream</name></name>;</import>

<class>class <name>LongMessageRepository</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>LongMessageRepository</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MmsDatabase</name></type> <name>mmsDatabase</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SmsDatabase</name></type> <name>smsDatabase</name></decl>;</decl_stmt>

  <constructor><name>LongMessageRepository</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>mmsDatabase</name></name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getMmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>smsDatabase</name></name> <operator>=</operator> <call><name><name>DatabaseFactory</name><operator>.</operator><name>getSmsDatabase</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name>void</name></type> <name>getMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isMms</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Callback</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LongMessage</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>AsyncTask</name><operator>.</operator><name>THREAD_POOL_EXECUTOR</name><operator>.</operator><name>execute</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><name>isMms</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name>getMmsLongMessage</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mmsDatabase</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onComplete</name></name><argument_list>(<argument><expr><call><name>getSmsLongMessage</name><argument_list>(<argument><expr><name>smsDatabase</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LongMessage</name></argument>&gt;</argument_list></name></type> <name>getMmsLongMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MmsDatabase</name></type> <name>mmsDatabase</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MmsMessageRecord</name></argument>&gt;</argument_list></name></type> <name>record</name> <init>= <expr><call><name>getMmsMessage</name><argument_list>(<argument><expr><name>mmsDatabase</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>TextSlide</name></type> <name>textSlide</name> <init>= <expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSlideDeck</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getTextSlide</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><name>textSlide</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>textSlide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongMessage</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>readFullBody</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>textSlide</name><operator>.</operator><name>getUri</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then> <else>else <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongMessage</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
      }</block></else></if>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LongMessage</name></argument>&gt;</argument_list></name></type> <name>getSmsLongMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SmsDatabase</name></type> <name>smsDatabase</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>record</name> <init>= <expr><call><name>getSmsMessage</name><argument_list>(<argument><expr><name>smsDatabase</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongMessage</name><argument_list>(<argument><expr><call><name><name>record</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></function>


  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MmsMessageRecord</name></argument>&gt;</argument_list></name></type> <name>getMmsMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MmsDatabase</name></type> <name>mmsDatabase</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>mmsDatabase</name><operator>.</operator><name>getMessage</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><operator>(</operator><name>MmsMessageRecord</name><operator>)</operator> <call><name><name>mmsDatabase</name><operator>.</operator><name>readerFor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></try>
  }</block></function>

  <function><annotation>@<name>WorkerThread</name></annotation>
  <specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>MessageRecord</name></argument>&gt;</argument_list></name></type> <name>getSmsMessage</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SmsDatabase</name></type> <name>smsDatabase</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>)</parameter_list> <block>{
    <try>try <init>(<decl><type><name>Cursor</name></type> <name>cursor</name> <init>= <expr><call><name><name>smsDatabase</name><operator>.</operator><name>getMessageCursor</name></name><argument_list>(<argument><expr><name>messageId</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><call><name><name>smsDatabase</name><operator>.</operator><name>readerFor</name></name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getNext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></try>
  }</block></function>

  <function><specifier>private</specifier> <type><name>String</name></type> <name>readFullBody</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Uri</name></type> <name>uri</name></decl></parameter>)</parameter_list> <block>{
    <try>try <init>(<decl><type><name>InputStream</name></type> <name>stream</name> <init>= <expr><call><name><name>PartAuthority</name><operator>.</operator><name>getAttachmentStream</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr></init></decl>)</init> <block>{
      <return>return <expr><call><name><name>Util</name><operator>.</operator><name>readFullyAsString</name></name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></try> <catch>catch <parameter_list>(<parameter><decl><type><name>IOException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to read full text body."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="string">""</literal></expr>;</return>
    }</block></catch>
  }</block></function>

  <interface>interface <name><name>Callback</name><parameter_list>&lt;<parameter><name>T</name></parameter>&gt;</parameter_list></name> <block>{
    <function_decl><type><name>void</name></type> <name>onComplete</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
