<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\longmessage\LongMessageViewModel.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>longmessage</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>app</name><operator>.</operator><name>Application</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>LiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>MutableLiveData</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModel</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>arch</name><operator>.</operator><name>lifecycle</name><operator>.</operator><name>ViewModelProvider</name></name>;</import>

<import>import <name><name>android</name><operator>.</operator><name>database</name><operator>.</operator><name>ContentObserver</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Handler</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>DatabaseContentProviders</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<class>class <name>LongMessageViewModel</name> <super><extends>extends <name>ViewModel</name></extends></super> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Application</name></type>           <name>application</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LongMessageRepository</name></type> <name>repository</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                  <name>messageId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>               <name>isMms</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>MutableLiveData</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LongMessage</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>message</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>MessageObserver</name></type>                        <name>messageObserver</name></decl>;</decl_stmt>

  <constructor><specifier>private</specifier> <name>LongMessageViewModel</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Application</name></type> <name>application</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LongMessageRepository</name></type> <name>repository</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isMms</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>application</name></name>     <operator>=</operator> <name>application</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name>      <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageId</name></name>       <operator>=</operator> <name>messageId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isMms</name></name>           <operator>=</operator> <name>isMms</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>message</name></name>         <operator>=</operator> <operator>new</operator> <call><name><name>MutableLiveData</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageObserver</name></name> <operator>=</operator> <operator>new</operator> <call><name>MessageObserver</name><argument_list>(<argument><expr><operator>new</operator> <call><name>Handler</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><type><name><name>LiveData</name><argument_list type="generic">&lt;<argument><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>LongMessage</name></argument>&gt;</argument_list></name></argument>&gt;</argument_list></name></type> <name>getMessage</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>repository</name><operator>.</operator><name>getMessage</name></name><argument_list>(<argument><expr><name>application</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>isMms</name></expr></argument>, <argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>longMessage</name></decl></parameter></parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>longMessage</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>registerContentObserver</name><argument_list>(<argument><expr><call><name><name>DatabaseContentProviders</name><operator>.</operator><name>Conversation</name><operator>.</operator><name>getUriForThread</name></name><argument_list>(<argument><expr><call><name><name>longMessage</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getMessageRecord</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getThreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><name>messageObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>message</name><operator>.</operator><name>postValue</name></name><argument_list>(<argument><expr><name>longMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>message</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onCleared</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>application</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>unregisterContentObserver</name><argument_list>(<argument><expr><name>messageObserver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <class><specifier>private</specifier> class <name>MessageObserver</name> <super><extends>extends <name>ContentObserver</name></extends></super> <block>{
    <constructor><name>MessageObserver</name><parameter_list>(<parameter><decl><type><name>Handler</name></type> <name>handler</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onChange</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>selfChange</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>getMessage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <class><specifier>static</specifier> class <name>Factory</name> <super><extends>extends <name><name>ViewModelProvider</name><operator>.</operator><name>NewInstanceFactory</name></name></extends></super> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Application</name></type>           <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>LongMessageRepository</name></type> <name>repository</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>long</name></type>                  <name>messageId</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>               <name>isMms</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Factory</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Application</name></type> <name>application</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LongMessageRepository</name></type> <name>repository</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>messageId</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>isMms</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>    <operator>=</operator> <name>application</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>repository</name></name> <operator>=</operator> <name>repository</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>messageId</name></name>  <operator>=</operator> <name>messageId</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>isMms</name></name>      <operator>=</operator> <name>isMms</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <annotation>@<name><name>NonNull</name><argument_list type="generic">&lt;<argument><name>T</name> <extends>extends <name>ViewModel</name></extends></argument>&gt;</argument_list></name></annotation> <type><name>T</name></type> <name>create</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Class</name><argument_list type="generic">&lt;<argument><name>T</name></argument>&gt;</argument_list></name></type> <name>modelClass</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><call><name><name>modelClass</name><operator>.</operator><name>cast</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>LongMessageViewModel</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>repository</name></expr></argument>, <argument><expr><name>messageId</name></expr></argument>, <argument><expr><name>isMms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
