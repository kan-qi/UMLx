<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\TransportOptions.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>Manifest</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>CharacterCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>MmsCharacterCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>permissions</name><operator>.</operator><name>Permissions</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>PushCharacterCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>SmsCharacterCalculator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>dualsim</name><operator>.</operator><name>SubscriptionInfoCompat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>dualsim</name><operator>.</operator><name>SubscriptionManagerCompat</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>whispersystems</name><operator>.</operator><name>libsignal</name><operator>.</operator><name>util</name><operator>.</operator><name>guava</name><operator>.</operator><name>Optional</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>TransportOption</name><operator>.</operator><name>Type</name></name>;</import>

<class><specifier>public</specifier> class <name>TransportOptions</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>TransportOptions</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>OnTransportChangedListener</name></argument>&gt;</argument_list></name></type> <name>listeners</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>                          <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type>            <name>enabledTransports</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Type</name></type>                      <name>defaultTransportType</name>  <init>= <expr><name><name>Type</name><operator>.</operator><name>SMS</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type>         <name>defaultSubscriptionId</name> <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>selectedOption</name>        <init>= <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>TransportOptions</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>               <operator>=</operator> <name>context</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enabledTransports</name></name>     <operator>=</operator> <call><name>initializeAvailableTransports</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultSubscriptionId</name></name> <operator>=</operator> <operator>new</operator> <call><name>SubscriptionManagerCompat</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getPreferredSubscriptionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>reset</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>media</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>transportOptions</name> <init>= <expr><call><name>initializeAvailableTransports</name><argument_list>(<argument><expr><name>media</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>enabledTransports</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>enabledTransports</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>transportOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>isEnabled</name><argument_list>(<argument><expr><call><name><name>selectedOption</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setSelectedTransport</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultTransportType</name></name> <operator>=</operator> <name><name>Type</name><operator>.</operator><name>SMS</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultSubscriptionId</name></name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>notifyTransportChangeListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setDefaultTransport</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultTransportType</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>notifyTransportChangeListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setDefaultSubscriptionId</name><parameter_list>(<parameter><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>Integer</name></argument>&gt;</argument_list></name></type> <name>subscriptionId</name></decl></parameter>)</parameter_list> <block>{
    <if>if  <condition>(<expr><call><name><name>defaultSubscriptionId</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>subscriptionId</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>defaultSubscriptionId</name></name> <operator>=</operator> <name>subscriptionId</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><call><name><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>notifyTransportChangeListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setSelectedTransport</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation>  <name>TransportOption</name></type> <name>transportOption</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>selectedOption</name></name> <operator>=</operator> <call><name><name>Optional</name><operator>.</operator><name>fromNullable</name></name><argument_list>(<argument><expr><name>transportOption</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>notifyTransportChangeListeners</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>isManualSelection</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>TransportOption</name></type> <name>getSelectedTransport</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>selectedOption</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</return></block></then></if>

    <if>if <condition>(<expr><call><name><name>defaultSubscriptionId</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><name>TransportOption</name></type> <name>transportOption</name> <range>: <expr><name>enabledTransports</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>transportOption</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>defaultTransportType</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>int</name><operator>)</operator><call><name><name>defaultSubscriptionId</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>transportOption</name><operator>.</operator><name>getSimSubscriptionId</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>or</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
          <return>return <expr><name>transportOption</name></expr>;</return>
        }</block></then></if>
      }</block></for>
    }</block></then></if>

    <for>for <control>(<init><decl><type><name>TransportOption</name></type> <name>transportOption</name> <range>: <expr><name>enabledTransports</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>transportOption</name><operator>.</operator><name>getType</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>defaultTransportType</name></expr>)</condition><then> <block>{
        <return>return <expr><name>transportOption</name></expr>;</return>
      }</block></then></if>
    }</block></for>

    <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><literal type="string">"No options of default type!"</literal></expr></argument>)</argument_list></call></expr>;</throw>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>disableTransport</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>option</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>enabledTransports</name><operator>.</operator><name>remove</name></name><argument_list>(<argument><expr><call><name><name>option</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if>if <condition>(<expr><call><name><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>selectedOption</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getType</name><argument_list>()</argument_list></call> <operator>==</operator> <name>type</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>setSelectedTransport</name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>getEnabledTransports</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><name>enabledTransports</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>addOnTransportChangedListener</name><parameter_list>(<parameter><decl><type><name>OnTransportChangedListener</name></type> <name>listener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>listeners</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>listener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>initializeAvailableTransports</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isMediaMessage</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>results</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>isMediaMessage</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getTransportOptionsForSimCards</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationActivity_transport_insecure_mms</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>conversation_activity__type_message_mms_insecure</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><operator>new</operator> <call><name>MmsCharacterCalculator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><call><name>getTransportOptionsForSimCards</name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationActivity_transport_insecure_sms</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>conversation_activity__type_message_sms_insecure</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                                    <argument><expr><operator>new</operator> <call><name>SmsCharacterCalculator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransportOption</name><argument_list>(<argument><expr><name><name>Type</name><operator>.</operator><name>TEXTSECURE</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_send_push_white_24dp</name></name></expr></argument>,
                                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>textsecure_primary</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>ConversationActivity_transport_signal</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name><name>context</name><operator>.</operator><name>getString</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>conversation_activity__type_message_push</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><operator>new</operator> <call><name>PushCharacterCalculator</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>getTransportOptionsForSimCards</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>text</name></decl></parameter>,
                                                                        <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>String</name></type> <name>composeHint</name></decl></parameter>,
                                                                        <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CharacterCalculator</name></type> <name>characterCalculator</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type>        <name>results</name>             <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SubscriptionManagerCompat</name></type>    <name>subscriptionManager</name> <init>= <expr><operator>new</operator> <call><name>SubscriptionManagerCompat</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name>SubscriptionInfoCompat</name></argument>&gt;</argument_list></name></type> <name>subscriptions</name></decl>;</decl_stmt>

    <if>if <condition>(<expr><call><name><name>Permissions</name><operator>.</operator><name>hasAll</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>Manifest</name><operator>.</operator><name>permission</name><operator>.</operator><name>READ_PHONE_STATE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>subscriptions</name> <operator>=</operator> <call><name><name>subscriptionManager</name><operator>.</operator><name>getActiveSubscriptionInfoList</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>subscriptions</name> <operator>=</operator> <operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <if>if <condition>(<expr><call><name><name>subscriptions</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransportOption</name><argument_list>(<argument><expr><name><name>Type</name><operator>.</operator><name>SMS</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_send_sms_white_24dp</name></name></expr></argument>,
                                      <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>grey_600</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                      <argument><expr><name>text</name></expr></argument>, <argument><expr><name>composeHint</name></expr></argument>, <argument><expr><name>characterCalculator</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <for>for <control>(<init><decl><type><name>SubscriptionInfoCompat</name></type> <name>subscriptionInfo</name> <range>: <expr><name>subscriptions</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name><name>results</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>TransportOption</name><argument_list>(<argument><expr><name><name>Type</name><operator>.</operator><name>SMS</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_send_sms_white_24dp</name></name></expr></argument>,
                                        <argument><expr><call><name><name>context</name><operator>.</operator><name>getResources</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getColor</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>color</name><operator>.</operator><name>grey_600</name></name></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><name>text</name></expr></argument>, <argument><expr><name>composeHint</name></expr></argument>, <argument><expr><name>characterCalculator</name></expr></argument>,
                                        <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>subscriptionInfo</name><operator>.</operator><name>getDisplayName</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                        <argument><expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><call><name><name>subscriptionInfo</name><operator>.</operator><name>getSubscriptionId</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></else></if>

    <return>return <expr><name>results</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>notifyTransportChangeListeners</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>OnTransportChangedListener</name></type> <name>listener</name> <range>: <expr><name>listeners</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>listener</name><operator>.</operator><name>onChange</name></name><argument_list>(<argument><expr><call><name>getSelectedTransport</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>selectedOption</name><operator>.</operator><name>isPresent</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Optional</name><argument_list type="generic">&lt;<argument><name>TransportOption</name></argument>&gt;</argument_list></name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>TransportOption</name></type> <name>option</name> <range>: <expr><name>enabledTransports</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>isType</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>of</name></name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</return>
      }</block></then></if>
    }</block></for>

    <return>return <expr><call><name><name>Optional</name><operator>.</operator><name>absent</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isEnabled</name><parameter_list>(<parameter><decl><type><name>TransportOption</name></type> <name>transportOption</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>TransportOption</name></type> <name>option</name> <range>: <expr><name>enabledTransports</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>option</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>transportOption</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    }</block></for>

    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <interface><specifier>public</specifier> interface <name>OnTransportChangedListener</name> <block>{
    <function_decl><specifier>public</specifier> <type><name>void</name></type> <name>onChange</name><parameter_list>(<parameter><decl><type><name>TransportOption</name></type> <name>newTransport</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>manuallySelected</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
