<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\camera\Camera1Fragment.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>annotation</name><operator>.</operator><name>SuppressLint</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>res</name><operator>.</operator><name>Configuration</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Matrix</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Point</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>PointF</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>SurfaceTexture</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>drawable</name><operator>.</operator><name>Drawable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Bundle</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>v4</name><operator>.</operator><name>app</name><operator>.</operator><name>Fragment</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Display</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>GestureDetector</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>LayoutInflater</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>MotionEvent</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>TextureView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>ViewGroup</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>WindowManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>Animation</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>animation</name><operator>.</operator><name>AnimationUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageButton</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>MultiTransformation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>Transformation</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>CenterCrop</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>request</name><operator>.</operator><name>target</name><operator>.</operator><name>SimpleTarget</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>request</name><operator>.</operator><name>transition</name><operator>.</operator><name>Transition</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideApp</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Stopwatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>io</name><operator>.</operator><name>ByteArrayOutputStream</name></name>;</import>

<class><specifier>public</specifier> class <name>Camera1Fragment</name> <super><extends>extends <name>Fragment</name></extends> <implements>implements <name><name>TextureView</name><operator>.</operator><name>SurfaceTextureListener</name></name>,
                                                         <name><name>Camera1Controller</name><operator>.</operator><name>EventListener</name></name></implements></super>
<block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>Camera1Fragment</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>TextureView</name></type>                  <name>cameraPreview</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ViewGroup</name></type>                    <name>controlsContainer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ImageButton</name></type>                  <name>flipButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type>                       <name>captureButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Camera1Controller</name></type>            <name>camera</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Controller</name></type>                   <name>controller</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>OrderEnforcer</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type>         <name>orderEnforcer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>Camera1Controller</name><operator>.</operator><name>Properties</name></name></type> <name>properties</name></decl>;</decl_stmt>

  <function><specifier>public</specifier> <specifier>static</specifier> <type><name>Camera1Fragment</name></type> <name>newInstance</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>Camera1Fragment</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCreate</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onCreate</name></name><argument_list>(<argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>getActivity</name><argument_list>()</argument_list></call> <operator>instanceof</operator> <name>Controller</name><operator>)</operator></expr>)</condition><then> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>IllegalStateException</name><argument_list>(<argument><expr><literal type="string">"Parent activity must implement the Controller interface."</literal></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></then></if>

    <decl_stmt><decl><type><name>WindowManager</name></type> <name>windowManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getWindowManager</name></name><argument_list>(<argument><expr><call><name>getActivity</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Display</name></type>       <name>display</name>       <init>= <expr><call><name><name>windowManager</name><operator>.</operator><name>getDefaultDisplay</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Point</name></type>         <name>displaySize</name>   <init>= <expr><operator>new</operator> <call><name>Point</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>display</name><operator>.</operator><name>getSize</name></name><argument_list>(<argument><expr><name>displaySize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>controller</name>    <operator>=</operator> <operator>(</operator><name>Controller</name><operator>)</operator> <call><name>getActivity</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>camera</name>        <operator>=</operator> <operator>new</operator> <call><name>Camera1Controller</name><argument_list>(<argument><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getDirectCaptureCameraId</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>displaySize</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>displaySize</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>orderEnforcer</name> <operator>=</operator> <operator>new</operator> <call><name><name>OrderEnforcer</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>SURFACE_AVAILABLE</name></name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>CAMERA_PROPERTIES_AVAILABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Nullable</name></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>View</name></type> <name>onCreateView</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>LayoutInflater</name></type> <name>inflater</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>ViewGroup</name></type> <name>container</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>inflater</name><operator>.</operator><name>inflate</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>camera_fragment</name></name></expr></argument>, <argument><expr><name>container</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"ClickableViewAccessibility"</literal></expr></argument>)</argument_list></annotation>
  <annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onViewCreated</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>View</name></type> <name>view</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Bundle</name></type> <name>savedInstanceState</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onViewCreated</name></name><argument_list>(<argument><expr><name>view</name></expr></argument>, <argument><expr><name>savedInstanceState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cameraPreview</name>     <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera_preview</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>controlsContainer</name> <operator>=</operator> <call><name><name>view</name><operator>.</operator><name>findViewById</name></name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera_controls_container</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>onOrientationChanged</name><argument_list>(<argument><expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>cameraPreview</name><operator>.</operator><name>setSurfaceTextureListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>GestureDetector</name></type> <name>gestureDetector</name> <init>= <expr><operator>new</operator> <call><name>GestureDetector</name><argument_list>(<argument><expr><name>flipGestureListener</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cameraPreview</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>event</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>gestureDetector</name><operator>.</operator><name>onTouchEvent</name></name><argument_list>(<argument><expr><name>event</name></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onResume</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onResume</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>initialize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>SURFACE_AVAILABLE</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>linkSurface</name></name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getSurfaceTexture</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setScreenRotation</name></name><argument_list>(<argument><expr><call><name><name>controller</name><operator>.</operator><name>getDisplayRotation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>CAMERA_PROPERTIES_AVAILABLE</name></name></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>updatePreviewScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onPause</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onPause</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onConfigurationChanged</name><parameter_list>(<parameter><decl><type><name>Configuration</name></type> <name>newConfig</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onConfigurationChanged</name></name><argument_list>(<argument><expr><name>newConfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>onOrientationChanged</name><argument_list>(<argument><expr><name><name>newConfig</name><operator>.</operator><name>orientation</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSurfaceTextureAvailable</name><parameter_list>(<parameter><decl><type><name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>markCompleted</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>SURFACE_AVAILABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSurfaceTextureSizeChanged</name><parameter_list>(<parameter><decl><type><name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>SURFACE_AVAILABLE</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>camera</name><operator>.</operator><name>setScreenRotation</name></name><argument_list>(<argument><expr><call><name><name>controller</name><operator>.</operator><name>getDisplayRotation</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>CAMERA_PROPERTIES_AVAILABLE</name></name></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>updatePreviewScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>boolean</name></type> <name>onSurfaceTextureDestroyed</name><parameter_list>(<parameter><decl><type><name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onSurfaceTextureUpdated</name><parameter_list>(<parameter><decl><type><name>SurfaceTexture</name></type> <name>surface</name></decl></parameter>)</parameter_list> <block>{
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onPropertiesAvailable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>Camera1Controller</name><operator>.</operator><name>Properties</name></name></type> <name>properties</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got camera properties: "</literal> <operator>+</operator> <name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>properties</name></name> <operator>=</operator> <name>properties</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>CAMERA_PROPERTIES_AVAILABLE</name></name></expr></argument>, <argument><expr><name>this</name><operator>::</operator><name>updatePreviewScale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>markCompleted</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>CAMERA_PROPERTIES_AVAILABLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onCameraUnavailable</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onCameraError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><annotation>@<name>SuppressLint</name><argument_list>(<argument><expr><literal type="string">"ClickableViewAccessibility"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><name>void</name></type> <name>initControls</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>flipButton</name>    <operator>=</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera_flip_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>captureButton</name> <operator>=</operator> <call><name>getView</name><argument_list>()</argument_list></call><operator>.</operator><call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>camera_capture_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>captureButton</name><operator>.</operator><name>setOnTouchListener</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>v</name></decl></parameter>, <parameter><decl><name>event</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <switch>switch <condition>(<expr><call><name><name>event</name><operator>.</operator><name>getAction</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_DOWN</name></name></expr>:</case>
          <decl_stmt><decl><type><name>Animation</name></type> <name>shrinkAnimation</name> <init>= <expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>camera_capture_button_shrink</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>shrinkAnimation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>shrinkAnimation</name><operator>.</operator><name>setFillEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>captureButton</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>shrinkAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>onCaptureClicked</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_UP</name></name></expr>:</case>
        <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_CANCEL</name></name></expr>:</case>
        <case>case <expr><name><name>MotionEvent</name><operator>.</operator><name>ACTION_OUTSIDE</name></name></expr>:</case>
          <decl_stmt><decl><type><name>Animation</name></type> <name>growAnimation</name> <init>= <expr><call><name><name>AnimationUtils</name><operator>.</operator><name>loadAnimation</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>anim</name><operator>.</operator><name>camera_capture_button_grow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>growAnimation</name><operator>.</operator><name>setFillAfter</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>growAnimation</name><operator>.</operator><name>setFillEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>captureButton</name><operator>.</operator><name>startAnimation</name></name><argument_list>(<argument><expr><name>growAnimation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>captureButton</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
      }</block></switch>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>CAMERA_PROPERTIES_AVAILABLE</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <if>if <condition>(<expr><call><name><name>properties</name><operator>.</operator><name>getCameraCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>flipButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>properties</name><operator>.</operator><name>getCameraCount</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>flipButton</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>getDirectCaptureCameraId</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_camera_front</name></name></expr>
                                                                                                                                         </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_camera_rear</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>flipButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt;  <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>newCameraId</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name><name>flipButton</name><operator>.</operator><name>setImageResource</name></name><argument_list>(<argument><expr><ternary><condition><expr><name>newCameraId</name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_camera_front</name></name></expr>
                                                                                          </then><else>: <expr><name><name>R</name><operator>.</operator><name>drawable</name><operator>.</operator><name>ic_camera_rear</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>setDirectCaptureCameraId</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>newCameraId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>flipButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onCaptureClicked</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>orderEnforcer</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Stopwatch</name></type> <name>fastCaptureTimer</name> <init>= <expr><operator>new</operator> <call><name>Stopwatch</name><argument_list>(<argument><expr><literal type="string">"Capture"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>capture</name></name><argument_list>(<argument><expr><lambda><parameter_list>(<parameter><decl><name>jpegData</name></decl></parameter>, <parameter><decl><name>frontFacing</name></decl></parameter>)</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>fastCaptureTimer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"captured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>Transformation</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></type> <name>transformation</name> <init>= <expr><ternary><condition><expr><name>frontFacing</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name><name>MultiTransformation</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CenterCrop</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>new</operator> <call><name>FlipTransformation</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>
                                                          </then><else>: <expr><operator>new</operator> <call><name>CenterCrop</name><argument_list>()</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>GlideApp</name><operator>.</operator><name>with</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>asBitmap</name><argument_list>()</argument_list></call>
              <operator>.</operator><call><name>load</name><argument_list>(<argument><expr><name>jpegData</name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>transform</name><argument_list>(<argument><expr><name>transformation</name></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>override</name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>
              <operator>.</operator><call><name>into</name><argument_list>(<argument><expr><operator>new</operator> <class><super><name><name>SimpleTarget</name><argument_list type="generic">&lt;<argument><name>Bitmap</name></argument>&gt;</argument_list></name></super><argument_list>()</argument_list> <block>{
                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onResourceReady</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Bitmap</name></type> <name>resource</name></decl></parameter>, <parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name><name>Transition</name><argument_list type="generic">&lt;<argument><name>?</name> <super>super <name>Bitmap</name></super></argument>&gt;</argument_list></name></type> <name>transition</name></decl></parameter>)</parameter_list> <block>{
                  <expr_stmt><expr><call><name><name>fastCaptureTimer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"transform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <decl_stmt><decl><type><name>ByteArrayOutputStream</name></type> <name>stream</name> <init>= <expr><operator>new</operator> <call><name>ByteArrayOutputStream</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name><name>resource</name><operator>.</operator><name>compress</name></name><argument_list>(<argument><expr><name><name>Bitmap</name><operator>.</operator><name>CompressFormat</name><operator>.</operator><name>JPEG</name></name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>fastCaptureTimer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"compressed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <decl_stmt><decl><type><name><name>byte</name><index>[]</index></name></type> <name>data</name> <init>= <expr><call><name><name>stream</name><operator>.</operator><name>toByteArray</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name><name>fastCaptureTimer</name><operator>.</operator><name>split</name></name><argument_list>(<argument><expr><literal type="string">"bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name><name>fastCaptureTimer</name><operator>.</operator><name>stop</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                  <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onImageCaptured</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></function>

                <function><annotation>@<name>Override</name></annotation>
                <specifier>public</specifier> <type><name>void</name></type> <name>onLoadFailed</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Drawable</name></type> <name>errorDrawable</name></decl></parameter>)</parameter_list> <block>{
                  <expr_stmt><expr><call><name><name>controller</name><operator>.</operator><name>onCameraError</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></function>
              }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>PointF</name></type> <name>getScaleTransform</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>viewWidth</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>viewHeight</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cameraWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cameraHeight</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>float</name></type> <name>camWidth</name>  <init>= <expr><ternary><condition><expr><call><name>isPortrait</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>cameraWidth</name></expr></argument>, <argument><expr><name>cameraHeight</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>cameraWidth</name></expr></argument>, <argument><expr><name>cameraHeight</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>camHeight</name> <init>= <expr><ternary><condition><expr><call><name>isPortrait</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><name>cameraWidth</name></expr></argument>, <argument><expr><name>cameraHeight</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>cameraWidth</name></expr></argument>, <argument><expr><name>cameraHeight</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>scaleX</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>scaleY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><operator>(</operator><name>camWidth</name> <operator>/</operator> <name>viewWidth</name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name>camHeight</name> <operator>/</operator> <name>viewHeight</name><operator>)</operator></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>float</name></type> <name>targetWidth</name> <init>= <expr><name>viewHeight</name> <operator>*</operator> <operator>(</operator><name>camWidth</name> <operator>/</operator> <name>camHeight</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>scaleX</name> <operator>=</operator> <name>targetWidth</name> <operator>/</operator> <name>viewWidth</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>float</name></type> <name>targetHeight</name> <init>= <expr><name>viewWidth</name> <operator>*</operator> <operator>(</operator><name>camHeight</name> <operator>/</operator> <name>camWidth</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>scaleY</name> <operator>=</operator> <name>targetHeight</name> <operator>/</operator> <name>viewHeight</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><operator>new</operator> <call><name>PointF</name><argument_list>(<argument><expr><name>scaleX</name></expr></argument>, <argument><expr><name>scaleY</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onOrientationChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>orientation</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>layout</name> <init>= <expr><ternary><condition><expr><name>orientation</name> <operator>==</operator> <name><name>Configuration</name><operator>.</operator><name>ORIENTATION_PORTRAIT</name></name></expr> ?</condition><then> <expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>camera_controls_portrait</name></name></expr>
                                                                   </then><else>: <expr><name><name>R</name><operator>.</operator><name>layout</name><operator>.</operator><name>camera_controls_landscape</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>controlsContainer</name><operator>.</operator><name>removeAllViews</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>controlsContainer</name><operator>.</operator><name>addView</name></name><argument_list>(<argument><expr><call><name><name>LayoutInflater</name><operator>.</operator><name>from</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>inflate</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><name>controlsContainer</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initControls</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updatePreviewScale</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>PointF</name></type> <name>scale</name>  <init>= <expr><call><name>getScaleTransform</name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>getPreviewWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>properties</name><operator>.</operator><name>getPreviewHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Matrix</name></type> <name>matrix</name> <init>= <expr><operator>new</operator> <call><name>Matrix</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>camWidth</name>  <init>= <expr><ternary><condition><expr><call><name>isPortrait</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>camHeight</name> <init>= <expr><ternary><condition><expr><call><name>isPortrait</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><call><name><name>Math</name><operator>.</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>cameraPreview</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>setScale</name></name><argument_list>(<argument><expr><name><name>scale</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>scale</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>postTranslate</name></name><argument_list>(<argument><expr><operator>(</operator><name>camWidth</name> <operator>-</operator> <operator>(</operator><name>camWidth</name> <operator>*</operator> <name><name>scale</name><operator>.</operator><name>x</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><operator>(</operator><name>camHeight</name> <operator>-</operator> <operator>(</operator><name>camHeight</name> <operator>*</operator> <name><name>scale</name><operator>.</operator><name>y</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cameraPreview</name><operator>.</operator><name>setTransform</name></name><argument_list>(<argument><expr><name>matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isPortrait</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><call><name>getResources</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getConfiguration</name><argument_list>()</argument_list></call><operator>.</operator><name>orientation</name> <operator>==</operator> <name><name>Configuration</name><operator>.</operator><name>ORIENTATION_PORTRAIT</name></name></expr>;</return>
  }</block></function>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>GestureDetector</name><operator>.</operator><name>OnGestureListener</name></name></type> <name>flipGestureListener</name> <init>= <expr><operator>new</operator> <class><super><name><name>GestureDetector</name><operator>.</operator><name>SimpleOnGestureListener</name></name></super><argument_list>()</argument_list> <block>{
    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onDown</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>boolean</name></type> <name>onDoubleTap</name><parameter_list>(<parameter><decl><type><name>MotionEvent</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>flipButton</name><operator>.</operator><name>performClick</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
  }</block></class></expr></init></decl>;</decl_stmt>

  <interface><specifier>public</specifier> interface <name>Controller</name> <block>{
    <function_decl><type><name>void</name></type> <name>onCameraError</name><parameter_list>()</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onImageCaptured</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>data</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>int</name></type> <name>getDisplayRotation</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <enum><specifier>private</specifier> enum <name>Stage</name> <block>{
    <decl><name>SURFACE_AVAILABLE</name></decl>, <decl><name>CAMERA_PROPERTIES_AVAILABLE</name></decl>
  }</block></enum>
}</block></class>
</unit>
