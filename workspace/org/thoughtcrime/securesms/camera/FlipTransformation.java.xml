<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\camera\FlipTransformation.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Bitmap</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Canvas</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>Matrix</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>engine</name><operator>.</operator><name>bitmap_recycle</name><operator>.</operator><name>BitmapPool</name></name>;</import>
<import>import <name><name>com</name><operator>.</operator><name>bumptech</name><operator>.</operator><name>glide</name><operator>.</operator><name>load</name><operator>.</operator><name>resource</name><operator>.</operator><name>bitmap</name><operator>.</operator><name>BitmapTransformation</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>security</name><operator>.</operator><name>MessageDigest</name></name>;</import>

<class><specifier>public</specifier> class <name>FlipTransformation</name> <super><extends>extends <name>BitmapTransformation</name></extends></super> <block>{

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>Bitmap</name></type> <name>transform</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>BitmapPool</name></type> <name>pool</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Bitmap</name></type> <name>toTransform</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>outHeight</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Bitmap</name></type> <name>output</name> <init>= <expr><call><name><name>pool</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>toTransform</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>toTransform</name><operator>.</operator><name>getHeight</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>toTransform</name><operator>.</operator><name>getConfig</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>Canvas</name></type> <name>canvas</name> <init>= <expr><operator>new</operator> <call><name>Canvas</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Matrix</name></type> <name>matrix</name> <init>= <expr><operator>new</operator> <call><name>Matrix</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>setScale</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>matrix</name><operator>.</operator><name>postTranslate</name></name><argument_list>(<argument><expr><call><name><name>toTransform</name><operator>.</operator><name>getWidth</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>canvas</name><operator>.</operator><name>drawBitmap</name></name><argument_list>(<argument><expr><name>toTransform</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>output</name></expr>;</return>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>updateDiskCacheKey</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>MessageDigest</name></type> <name>messageDigest</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>messageDigest</name><operator>.</operator><name>update</name></name><argument_list>(<argument><expr><call><name><name>FlipTransformation</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getBytes</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
