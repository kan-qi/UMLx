<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\camera\OrderEnforcer.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedHashMap</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Map</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>CopyOnWriteArrayList</name></name>;</import>

<class><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"ConstantConditions"</literal></expr></argument>)</argument_list></annotation>
<specifier>public</specifier> class <name><name>OrderEnforcer</name><parameter_list>&lt;<parameter><name>E</name></parameter>&gt;</parameter_list></name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Map</name><argument_list type="generic">&lt;<argument><name>E</name></argument>, <argument><name>StageDetails</name></argument>&gt;</argument_list></name></type> <name>stages</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedHashMap</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>OrderEnforcer</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name><modifier>...</modifier></type> <name>stages</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>E</name></type> <name>stage</name> <range>: <expr><name>stages</name></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>stages</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>stage</name></expr></argument>, <argument><expr><operator>new</operator> <call><name>StageDetails</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></constructor>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>run</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name></type> <name>stage</name></decl></parameter>, <parameter><decl><type><name>Runnable</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name>isCompletedThrough</name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>stages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>getActions</name><argument_list>()</argument_list></call><operator>.</operator><call><name>add</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>markCompleted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>stages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>setCompleted</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>E</name></type> <name>s</name> <range>: <expr><call><name><name>stages</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>StageDetails</name></type> <name>details</name> <init>= <expr><call><name><name>stages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if <condition>(<expr><call><name><name>details</name><operator>.</operator><name>isCompleted</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>Runnable</name></type> <name>r</name> <range>: <expr><call><name><name>details</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
          <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>run</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name><name>details</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <break>break;</break>
      }</block></else></if>
    }</block></for>
  }</block></function>

  <function><specifier>public</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>StageDetails</name></type> <name>details</name> <range>: <expr><call><name><name>stages</name><operator>.</operator><name>values</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <expr_stmt><expr><call><name><name>details</name><operator>.</operator><name>setCompleted</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>details</name><operator>.</operator><name>getActions</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></function>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isCompletedThrough</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>E</name></type> <name>stage</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>E</name></type> <name>s</name> <range>: <expr><call><name><name>stages</name><operator>.</operator><name>keySet</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>equals</name></name><argument_list>(<argument><expr><name>stage</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><call><name><name>stages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isCompleted</name><argument_list>()</argument_list></call></expr>;</return>
      }</block></then> <elseif>else <if>if <condition>(<expr><operator>!</operator><call><name><name>stages</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>isCompleted</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
      }</block></then></if></elseif></if>
    }</block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
  }</block></function>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>StageDetails</name> <block>{
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>        <name>completed</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>actions</name>   <init>= <expr><operator>new</operator> <call><name><name>CopyOnWriteArrayList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <function><annotation>@<name>NonNull</name></annotation> <type><name><name>List</name><argument_list type="generic">&lt;<argument><name>Runnable</name></argument>&gt;</argument_list></name></type> <name>getActions</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>actions</name></expr>;</return>
    }</block></function>

    <function><type><name>boolean</name></type> <name>isCompleted</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>completed</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>setCompleted</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>completed</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>completed</name></name> <operator>=</operator> <name>completed</name></expr>;</expr_stmt>
    }</block></function>
  }</block></class>
}</block></class>
</unit>
