<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\camera\Camera1Controller.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>camera</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>graphics</name><operator>.</operator><name>SurfaceTexture</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>hardware</name><operator>.</operator><name>Camera</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>Surface</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Collections</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>Comparator</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>

<class><specifier>public</specifier> class <name>Camera1Controller</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>Camera1Controller</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>screenWidth</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>screenHeight</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>Camera</name></type>               <name>camera</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                  <name>cameraId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name><name>OrderEnforcer</name><argument_list type="generic">&lt;<argument><name>Stage</name></argument>&gt;</argument_list></name></type> <name>enforcer</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>EventListener</name></type>        <name>eventListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>SurfaceTexture</name></type>       <name>previewSurface</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type>                  <name>screenRotation</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>Camera1Controller</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>preferredDirection</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screenWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>screenHeight</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>EventListener</name></type> <name>eventListener</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>eventListener</name></name> <operator>=</operator> <name>eventListener</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enforcer</name></name>      <operator>=</operator> <operator>new</operator> <call><name><name>OrderEnforcer</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>INITIALIZED</name></name></expr></argument>, <argument><expr><name><name>Stage</name><operator>.</operator><name>PREVIEW_STARTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cameraId</name></name>      <operator>=</operator> <ternary><condition><expr><call><name><name>Camera</name><operator>.</operator><name>getNumberOfCameras</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>  ?</condition><then> <expr><name>preferredDirection</name></expr> </then><else>: <expr><name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>screenWidth</name></name>   <operator>=</operator> <name>screenWidth</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>screenHeight</name></name>  <operator>=</operator> <name>screenHeight</name></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>initialize</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"initialize()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>Camera</name><operator>.</operator><name>getNumberOfCameras</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>onCameraUnavailable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <try>try <block>{
      <expr_stmt><expr><name>camera</name> <operator>=</operator> <call><name><name>Camera</name><operator>.</operator><name>open</name></name><argument_list>(<argument><expr><name>cameraId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>onCameraUnavailable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></catch></try>

    <if>if <condition>(<expr><name>camera</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>onCameraUnavailable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type>  <name>params</name>      <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type>        <name>previewSize</name> <init>= <expr><call><name>getClosestSize</name><argument_list>(<argument><expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportedPreviewSizes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type>        <name>pictureSize</name> <init>= <expr><call><name>getClosestSize</name><argument_list>(<argument><expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getSupportedPictureSizes</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>screenWidth</name></expr></argument>, <argument><expr><name>screenHeight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>List</name><argument_list type="generic">&lt;<argument><name>String</name></argument>&gt;</argument_list></name></type> <name>focusModes</name>  <init>= <expr><call><name><name>params</name><operator>.</operator><name>getSupportedFocusModes</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Preview size: "</literal> <operator>+</operator> <name><name>previewSize</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="string">"x"</literal> <operator>+</operator> <name><name>previewSize</name><operator>.</operator><name>height</name></name> <operator>+</operator> <literal type="string">"  Picture size: "</literal> <operator>+</operator> <name><name>pictureSize</name><operator>.</operator><name>width</name></name> <operator>+</operator> <literal type="string">"x"</literal> <operator>+</operator> <name><name>pictureSize</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setPreviewSize</name></name><argument_list>(<argument><expr><name><name>previewSize</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>previewSize</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setPictureSize</name></name><argument_list>(<argument><expr><name><name>pictureSize</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>pictureSize</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setFlashMode</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FLASH_MODE_OFF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setColorEffect</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>EFFECT_NONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setWhiteBalance</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>WHITE_BALANCE_AUTO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>focusModes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_CONTINUOUS_PICTURE</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setFocusMode</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_CONTINUOUS_PICTURE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>focusModes</name><operator>.</operator><name>contains</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_CONTINUOUS_VIDEO</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setFocusMode</name></name><argument_list>(<argument><expr><name><name>Camera</name><operator>.</operator><name>Parameters</name><operator>.</operator><name>FOCUS_MODE_CONTINUOUS_VIDEO</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>


    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>markCompleted</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>INITIALIZED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onPropertiesAvailable</name></name><argument_list>(<argument><expr><call><name>getProperties</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>release</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"release() called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>PREVIEW_STARTED</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"release() executing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>previewSurface</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>stopPreview</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>linkSurface</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>SurfaceTexture</name></type> <name>surfaceTexture</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"linkSurface() called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>INITIALIZED</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <try>try <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"linkSurface() executing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>previewSurface</name> <operator>=</operator> <name>surfaceTexture</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setPreviewTexture</name></name><argument_list>(<argument><expr><name>surfaceTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>startPreview</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>markCompleted</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>PREVIEW_STARTED</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>Exception</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Failed to start preview."</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onCameraUnavailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>capture</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CaptureCallback</name></type> <name>callback</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>PREVIEW_STARTED</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>takePicture</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><lambda><parameter_list>(<parameter><decl><name>data</name></decl></parameter>, <parameter><decl><name>camera</name></decl></parameter>)</parameter_list> -&gt; <block>{
        <expr_stmt><expr><call><name><name>callback</name><operator>.</operator><name>onCaptureAvailable</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>cameraId</name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>int</name></type> <name>flip</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"flip()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SurfaceTexture</name></type> <name>surfaceTexture</name> <init>= <expr><name>previewSurface</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cameraId</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>cameraId</name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr> </then><else>: <expr><name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_BACK</name></name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>release</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>linkSurface</name><argument_list>(<argument><expr><name>surfaceTexture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setScreenRotation</name><argument_list>(<argument><expr><name>screenRotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>cameraId</name></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setScreenRotation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screenRotation</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"setScreenRotation("</literal> <operator>+</operator> <name>screenRotation</name> <operator>+</operator> <literal type="string">") called"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>run</name></name><argument_list>(<argument><expr><name><name>Stage</name><operator>.</operator><name>PREVIEW_STARTED</name></name></expr></argument>, <argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"setScreenRotation("</literal> <operator>+</operator> <name>screenRotation</name> <operator>+</operator> <literal type="string">") executing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>screenRotation</name></name> <operator>=</operator> <name>screenRotation</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int</name></type> <name>previewRotation</name> <init>= <expr><call><name>getPreviewRotation</name><argument_list>(<argument><expr><name>screenRotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>outputRotation</name>  <init>= <expr><call><name>getOutputRotation</name><argument_list>(<argument><expr><name>screenRotation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Preview rotation: "</literal> <operator>+</operator> <name>previewRotation</name> <operator>+</operator> <literal type="string">"  Output rotation: "</literal> <operator>+</operator> <name>outputRotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setDisplayOrientation</name></name><argument_list>(<argument><expr><name>previewRotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>Parameters</name></name></type> <name>params</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>params</name><operator>.</operator><name>setRotation</name></name><argument_list>(<argument><expr><name>outputRotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setParameters</name></name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>onCameraUnavailable</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>enforcer</name><operator>.</operator><name>reset</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>eventListener</name><operator>.</operator><name>onCameraUnavailable</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>Properties</name></type> <name>getProperties</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>previewSize</name> <init>= <expr><call><name><name>camera</name><operator>.</operator><name>getParameters</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getPreviewSize</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>new</operator> <call><name>Properties</name><argument_list>(<argument><expr><call><name><name>Camera</name><operator>.</operator><name>getNumberOfCameras</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>previewSize</name><operator>.</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>previewSize</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name><name>Camera</name><operator>.</operator><name>Size</name></name></type> <name>getClosestSize</name><parameter_list>(<parameter><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name></type> <name>sizes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Collections</name><operator>.</operator><name>sort</name></name><argument_list>(<argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>ASC_SIZE_COMPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <call><name><name>sizes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>sizes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>width</name> <operator>*</operator> <call><name><name>sizes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>height</name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>*</operator> <name>height</name><operator>)</operator></expr>)</condition> <block>{
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><call><name><name>sizes</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><call><name><name>Math</name><operator>.</operator><name>min</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name><name>sizes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getOutputRotation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>displayRotationCode</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>degrees</name> <init>= <expr><call><name>convertRotationToDegrees</name><argument_list>(<argument><expr><name>displayRotationCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>CameraInfo</name></name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name><name>Camera</name><operator>.</operator><name>CameraInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Camera</name><operator>.</operator><name>getCameraInfo</name></name><argument_list>(<argument><expr><name>cameraId</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr>)</condition><then> <block>{
      <return>return <expr><operator>(</operator><name><name>info</name><operator>.</operator><name>orientation</name></name> <operator>+</operator> <name>degrees</name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><operator>(</operator><name><name>info</name><operator>.</operator><name>orientation</name></name> <operator>-</operator> <name>degrees</name> <operator>+</operator> <literal type="number">360</literal><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</return>
    }</block></else></if>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>getPreviewRotation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>displayRotationCode</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>degrees</name> <init>= <expr><call><name>convertRotationToDegrees</name><argument_list>(<argument><expr><name>displayRotationCode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>Camera</name><operator>.</operator><name>CameraInfo</name></name></type> <name>info</name> <init>= <expr><operator>new</operator> <call><name><name>Camera</name><operator>.</operator><name>CameraInfo</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Camera</name><operator>.</operator><name>getCameraInfo</name></name><argument_list>(<argument><expr><name>cameraId</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>facing</name></name> <operator>==</operator> <name><name>Camera</name><operator>.</operator><name>CameraInfo</name><operator>.</operator><name>CAMERA_FACING_FRONT</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>orientation</name></name> <operator>+</operator> <name>degrees</name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><literal type="number">360</literal> <operator>-</operator> <name>result</name><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name><name>info</name><operator>.</operator><name>orientation</name></name> <operator>-</operator> <name>degrees</name> <operator>+</operator> <literal type="number">360</literal><operator>)</operator> <operator>%</operator> <literal type="number">360</literal></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><name>result</name></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>int</name></type> <name>convertRotationToDegrees</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>screenRotation</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch <condition>(<expr><name>screenRotation</name></expr>)</condition> <block>{
      <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_0</name></name></expr>:</case>   <return>return <expr><literal type="number">0</literal></expr>;</return>
      <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_90</name></name></expr>:</case>  <return>return <expr><literal type="number">90</literal></expr>;</return>
      <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_180</name></name></expr>:</case> <return>return <expr><literal type="number">180</literal></expr>;</return>
      <case>case <expr><name><name>Surface</name><operator>.</operator><name>ROTATION_270</name></name></expr>:</case> <return>return <expr><literal type="number">270</literal></expr>;</return>
    }</block></switch>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>Comparator</name><argument_list type="generic">&lt;<argument><name><name>Camera</name><operator>.</operator><name>Size</name></name></argument>&gt;</argument_list></name></type> <name>ASC_SIZE_COMPARATOR</name> <init>= <expr><lambda><parameter_list>(<parameter><decl><name>o1</name></decl></parameter>, <parameter><decl><name>o2</name></decl></parameter>)</parameter_list> -&gt; <block type="pseudo"><expr><call><name><name>Integer</name><operator>.</operator><name>compare</name></name><argument_list>(<argument><expr><name><name>o1</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>o1</name><operator>.</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>o2</name><operator>.</operator><name>width</name></name> <operator>*</operator> <name><name>o2</name><operator>.</operator><name>height</name></name></expr></argument>)</argument_list></call></expr></block></lambda></expr></init></decl>;</decl_stmt>

  <enum><specifier>private</specifier> enum <name>Stage</name> <block>{
    <decl><name>INITIALIZED</name></decl>, <decl><name>PREVIEW_STARTED</name></decl>
  }</block></enum>

  <class>class <name>Properties</name> <block>{

    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>cameraCount</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>previewWidth</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type> <name>previewHeight</name></decl>;</decl_stmt>

    <constructor><specifier>public</specifier> <name>Properties</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cameraCount</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>previewWidth</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>previewHeight</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cameraCount</name></name>   <operator>=</operator> <name>cameraCount</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>previewWidth</name></name>  <operator>=</operator> <name>previewWidth</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>previewHeight</name></name> <operator>=</operator> <name>previewHeight</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>int</name></type> <name>getCameraCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>cameraCount</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getPreviewWidth</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>previewWidth</name></expr>;</return>
    }</block></function>

    <function><specifier>public</specifier> <type><name>int</name></type> <name>getPreviewHeight</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>previewHeight</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>String</name></type> <name>toString</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><literal type="string">"cameraCount: "</literal> <operator>+</operator> <name>cameraCount</name> <operator>+</operator> <literal type="string">"  previewWidth: "</literal> <operator>+</operator> <name>previewWidth</name> <operator>+</operator> <literal type="string">"  previewHeight: "</literal> <operator>+</operator> <name>previewHeight</name></expr>;</return>
    }</block></function>
  }</block></class>

  <interface>interface <name>EventListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onPropertiesAvailable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Properties</name></type> <name>properties</name></decl></parameter>)</parameter_list>;</function_decl>
    <function_decl><type><name>void</name></type> <name>onCameraUnavailable</name><parameter_list>()</parameter_list>;</function_decl>
  }</block></interface>

  <interface>interface <name>CaptureCallback</name> <block>{
    <function_decl><type><name>void</name></type> <name>onCaptureAvailable</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>byte</name><index>[]</index></name></type> <name>jpegData</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>frontFacing</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
