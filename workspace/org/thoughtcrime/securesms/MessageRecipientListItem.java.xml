<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\MessageRecipientListItem.java"><comment type="block">/*
 * Copyright (C) 2014 Open Whisper Systems
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>text</name><operator>.</operator><name>TextUtils</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>util</name><operator>.</operator><name>AttributeSet</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>view</name><operator>.</operator><name>View</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>Button</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>ImageView</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>RelativeLayout</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>widget</name><operator>.</operator><name>TextView</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>MessageDetailsRecipientAdapter</name><operator>.</operator><name>RecipientDeliveryStatus</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>AvatarImageView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>DeliveryStatusView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>components</name><operator>.</operator><name>FromTextView</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>IdentityKeyMismatch</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>documents</name><operator>.</operator><name>NetworkFailure</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>database</name><operator>.</operator><name>model</name><operator>.</operator><name>MessageRecord</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>mms</name><operator>.</operator><name>GlideRequests</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>Recipient</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>recipients</name><operator>.</operator><name>RecipientModifiedListener</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>TextSecurePreferences</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>Util</name></name>;</import>

<comment type="block" format="javadoc">/**
 * A simple view to show the recipients of a message
 *
 * @author Jake McGinty
 */</comment>
<class><specifier>public</specifier> class <name>MessageRecipientListItem</name> <super><extends>extends <name>RelativeLayout</name></extends>
    <implements>implements <name>RecipientModifiedListener</name></implements></super>
<block>{
  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <type><specifier>final</specifier> <specifier>static</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>MessageRecipientListItem</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><name>RecipientDeliveryStatus</name></type> <name>member</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>GlideRequests</name></type>           <name>glideRequests</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>FromTextView</name></type>            <name>fromView</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>                <name>errorDescription</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>TextView</name></type>                <name>actionDescription</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type>                  <name>conflictButton</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>AvatarImageView</name></type>         <name>contactPhotoImage</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>ImageView</name></type>               <name>unidentifiedDeliveryIcon</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>DeliveryStatusView</name></type>      <name>deliveryStatusView</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>MessageRecipientListItem</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <constructor><specifier>public</specifier> <name>MessageRecipientListItem</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><name>AttributeSet</name></type> <name>attrs</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>attrs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>protected</specifier> <type><name>void</name></type> <name>onFinishInflate</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>super</name><operator>.</operator><name>onFinishInflate</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>fromView</name></name>                 <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>from</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>errorDescription</name></name>         <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>error_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>actionDescription</name></name>        <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>action_description</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>contactPhotoImage</name></name>        <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>contact_photo_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>conflictButton</name></name>           <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>conflict_button</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>unidentifiedDeliveryIcon</name></name> <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>ud_indicator</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>deliveryStatusView</name></name>       <operator>=</operator> <call><name>findViewById</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>id</name><operator>.</operator><name>delivery_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>set</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>GlideRequests</name></type> <name>glideRequests</name></decl></parameter>,
                  <parameter><decl><type><specifier>final</specifier> <name>MessageRecord</name></type> <name>record</name></decl></parameter>,
                  <parameter><decl><type><specifier>final</specifier> <name>RecipientDeliveryStatus</name></type> <name>member</name></decl></parameter>,
                  <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isPushGroup</name></decl></parameter>)</parameter_list>
  <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>glideRequests</name></name> <operator>=</operator> <name>glideRequests</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>member</name></name>        <operator>=</operator> <name>member</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>addListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fromView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><call><name><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>contactPhotoImage</name><operator>.</operator><name>setAvatar</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><call><name><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setIssueIndicators</name><argument_list>(<argument><expr><name>record</name></expr></argument>, <argument><expr><name>isPushGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>unidentifiedDeliveryIcon</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextSecurePreferences</name><operator>.</operator><name>isShowUnidentifiedDeliveryIndicatorsEnabled</name></name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>member</name><operator>.</operator><name>isUnidentified</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>VISIBLE</name></expr> </then><else>: <expr><name>GONE</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>setIssueIndicators</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MessageRecord</name></type> <name>record</name></decl></parameter>,
                                  <parameter><decl><type><specifier>final</specifier> <name>boolean</name></type> <name>isPushGroup</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name>NetworkFailure</name></type>      <name>networkFailure</name> <init>= <expr><call><name>getNetworkFailure</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>final</specifier> <name>IdentityKeyMismatch</name></type> <name>keyMismatch</name>    <init>= <expr><ternary><condition><expr><name>networkFailure</name> <operator>==</operator> <literal type="null">null</literal></expr> ?</condition><then> <expr><call><name>getKeyMismatch</name><argument_list>(<argument><expr><name>record</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="null">null</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name></type> <name>errorText</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>keyMismatch</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>conflictButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>errorText</name> <operator>=</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageDetailsRecipient_new_safety_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>conflictButton</name><operator>.</operator><name>setOnClickListener</name></name><argument_list>(<argument><expr><lambda><parameter_list type="pseudo"><parameter><decl><name>v</name></decl></parameter></parameter_list> -&gt; <block type="pseudo"><expr><operator>new</operator> <call><name>ConfirmIdentityDialog</name><argument_list>(<argument><expr><call><name>getContext</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>record</name></expr></argument>, <argument><expr><name>keyMismatch</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>show</name><argument_list>()</argument_list></call></expr></block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><operator>(</operator><name>networkFailure</name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>record</name><operator>.</operator><name>isPending</name></name><argument_list>()</argument_list></call><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>isPushGroup</name> <operator>&amp;&amp;</operator> <call><name><name>record</name><operator>.</operator><name>isFailed</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>conflictButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>errorText</name> <operator>=</operator> <call><name>getContext</name><argument_list>()</argument_list></call><operator>.</operator><call><name>getString</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>string</name><operator>.</operator><name>MessageDetailsRecipient_failed_to_send</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isOutgoing</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><call><name><name>member</name><operator>.</operator><name>getDeliveryStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecipientDeliveryStatus</name><operator>.</operator><name>Status</name><operator>.</operator><name>PENDING</name></name> <operator>||</operator> <call><name><name>member</name><operator>.</operator><name>getDeliveryStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecipientDeliveryStatus</name><operator>.</operator><name>Status</name><operator>.</operator><name>UNKNOWN</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><call><name><name>member</name><operator>.</operator><name>getDeliveryStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecipientDeliveryStatus</name><operator>.</operator><name>Status</name><operator>.</operator><name>READ</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setRead</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>member</name><operator>.</operator><name>getDeliveryStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecipientDeliveryStatus</name><operator>.</operator><name>Status</name><operator>.</operator><name>DELIVERED</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setDelivered</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><call><name><name>member</name><operator>.</operator><name>getDeliveryStatus</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>RecipientDeliveryStatus</name><operator>.</operator><name>Status</name><operator>.</operator><name>SENT</name></name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setSent</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>deliveryStatusView</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>

      <expr_stmt><expr><call><name><name>conflictButton</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>errorDescription</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>errorText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>errorDescription</name><operator>.</operator><name>setVisibility</name></name><argument_list>(<argument><expr><ternary><condition><expr><call><name><name>TextUtils</name><operator>.</operator><name>isEmpty</name></name><argument_list>(<argument><expr><name>errorText</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>View</name><operator>.</operator><name>GONE</name></name></expr> </then><else>: <expr><name><name>View</name><operator>.</operator><name>VISIBLE</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>private</specifier> <type><name>NetworkFailure</name></type> <name>getNetworkFailure</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MessageRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>hasNetworkFailures</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><specifier>final</specifier> <name>NetworkFailure</name></type> <name>failure</name> <range>: <expr><call><name><name>record</name><operator>.</operator><name>getNetworkFailures</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>failure</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><name>failure</name></expr>;</return>
        }</block></then></if>
      }</block></for>
    }</block></then></if>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>IdentityKeyMismatch</name></type> <name>getKeyMismatch</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>MessageRecord</name></type> <name>record</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>record</name><operator>.</operator><name>isIdentityMismatchFailure</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <for>for <control>(<init><decl><type><specifier>final</specifier> <name>IdentityKeyMismatch</name></type> <name>mismatch</name> <range>: <expr><call><name><name>record</name><operator>.</operator><name>getIdentityKeyMismatches</name></name><argument_list>()</argument_list></call></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><call><name><name>mismatch</name><operator>.</operator><name>getAddress</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>equals</name><argument_list>(<argument><expr><call><name><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>getAddress</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
          <return>return <expr><name>mismatch</name></expr>;</return>
        }</block></then></if>
      }</block></for>
    }</block></then></if>
    <return>return <expr><literal type="null">null</literal></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>unbind</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>member</name></name> <operator>!=</operator> <literal type="null">null</literal> <operator>&amp;&amp;</operator> <call><name><name>this</name><operator>.</operator><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>member</name><operator>.</operator><name>getRecipient</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>removeListener</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></function>

  <function><annotation>@<name>Override</name></annotation>
  <specifier>public</specifier> <type><name>void</name></type> <name>onModified</name><parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Recipient</name></type> <name>recipient</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>Util</name><operator>.</operator><name>runOnMain</name></name><argument_list>(<argument><expr><lambda><parameter_list>()</parameter_list> -&gt; <block>{
      <expr_stmt><expr><call><name><name>fromView</name><operator>.</operator><name>setText</name></name><argument_list>(<argument><expr><name>recipient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>contactPhotoImage</name><operator>.</operator><name>setAvatar</name></name><argument_list>(<argument><expr><name>glideRequests</name></expr></argument>, <argument><expr><name>recipient</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
