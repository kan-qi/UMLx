<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\webrtc\locks\LockManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>locks</name></name>;</package>

<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>wifi</name><operator>.</operator><name>WifiManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>PowerManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>provider</name><operator>.</operator><name>Settings</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<comment type="block" format="javadoc">/**
 * Maintains wake lock state.
 *
 * @author Stuart O. Anderson
 */</comment>
<class><specifier>public</specifier> class <name>LockManager</name> <block>{

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>LockManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name></type>        <name>fullLock</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>PowerManager</name><operator>.</operator><name>WakeLock</name></name></type>        <name>partialLock</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name><name>WifiManager</name><operator>.</operator><name>WifiLock</name></name></type>         <name>wifiLock</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>ProximityLock</name></type>                <name>proximityLock</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>AccelerometerListener</name></type> <name>accelerometerListener</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>boolean</name></type>               <name>wifiLockEnforced</name></decl>;</decl_stmt>


  <decl_stmt><decl><specifier>private</specifier> <type><name>int</name></type> <name>orientation</name> <init>= <expr><name><name>AccelerometerListener</name><operator>.</operator><name>ORIENTATION_UNKNOWN</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>proximityDisabled</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>

  <enum><specifier>public</specifier> enum <name>PhoneState</name> <block>{
    <decl><name>IDLE</name></decl>,
    <decl><name>PROCESSING</name></decl>,  <comment type="line">//used when the phone is active but before the user should be alerted.</comment>
    <decl><name>INTERACTIVE</name></decl>,
    <decl><name>IN_CALL</name></decl>,
    <decl><name>IN_VIDEO</name></decl>
  }</block></enum>

  <enum><specifier>private</specifier> enum <name>LockState</name> <block>{
    <decl><name>FULL</name></decl>,
    <decl><name>PARTIAL</name></decl>,
    <decl><name>SLEEP</name></decl>,
    <decl><name>PROXIMITY</name></decl>
  }</block></enum>

  <constructor><specifier>public</specifier> <name>LockManager</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>PowerManager</name></type> <name>pm</name> <init>= <expr><operator>(</operator><name>PowerManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>POWER_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fullLock</name> <operator>=</operator> <call><name><name>pm</name><operator>.</operator><name>newWakeLock</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>SCREEN_BRIGHT_WAKE_LOCK</name></name> <operator>|</operator> <name><name>PowerManager</name><operator>.</operator><name>ACQUIRE_CAUSES_WAKEUP</name></name></expr></argument>, <argument><expr><literal type="string">"RedPhone Full"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>partialLock</name> <operator>=</operator> <call><name><name>pm</name><operator>.</operator><name>newWakeLock</name></name><argument_list>(<argument><expr><name><name>PowerManager</name><operator>.</operator><name>PARTIAL_WAKE_LOCK</name></name></expr></argument>, <argument><expr><literal type="string">"RedPhone Partial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>proximityLock</name> <operator>=</operator> <operator>new</operator> <call><name>ProximityLock</name><argument_list>(<argument><expr><name>pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>WifiManager</name></type> <name>wm</name> <init>= <expr><operator>(</operator><name>WifiManager</name><operator>)</operator> <call><name><name>context</name><operator>.</operator><name>getSystemService</name></name><argument_list>(<argument><expr><name><name>Context</name><operator>.</operator><name>WIFI_SERVICE</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>wifiLock</name> <operator>=</operator> <call><name><name>wm</name><operator>.</operator><name>createWifiLock</name></name><argument_list>(<argument><expr><name><name>WifiManager</name><operator>.</operator><name>WIFI_MODE_FULL_HIGH_PERF</name></name></expr></argument>, <argument><expr><literal type="string">"RedPhone Wifi"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>fullLock</name><operator>.</operator><name>setReferenceCounted</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>partialLock</name><operator>.</operator><name>setReferenceCounted</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>wifiLock</name><operator>.</operator><name>setReferenceCounted</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>accelerometerListener</name> <operator>=</operator> <operator>new</operator> <call><name>AccelerometerListener</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>new</operator> <class><super><name><name>AccelerometerListener</name><operator>.</operator><name>OrientationListener</name></name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>orientationChanged</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newOrientation</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>orientation</name> <operator>=</operator> <name>newOrientation</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Orentation Update: "</literal> <operator>+</operator> <name>newOrientation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateInCallLockState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>wifiLockEnforced</name> <operator>=</operator> <call><name>isWifiPowerActiveModeEnabled</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>private</specifier> <type><name>boolean</name></type> <name>isWifiPowerActiveModeEnabled</name><parameter_list>(<parameter><decl><type><name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>wifi_pwr_active_mode</name> <init>= <expr><call><name><name>Settings</name><operator>.</operator><name>Secure</name><operator>.</operator><name>getInt</name></name><argument_list>(<argument><expr><call><name><name>context</name><operator>.</operator><name>getContentResolver</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"wifi_pwr_active_mode"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Wifi Activity Policy: "</literal> <operator>+</operator> <name>wifi_pwr_active_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>wifi_pwr_active_mode</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>

    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
  }</block></function>

  <function><specifier>private</specifier> <type><name>void</name></type> <name>updateInCallLockState</name><parameter_list>()</parameter_list> <block>{
    <if>if <condition>(<expr><name>orientation</name> <operator>!=</operator> <name><name>AccelerometerListener</name><operator>.</operator><name>ORIENTATION_HORIZONTAL</name></name> <operator>&amp;&amp;</operator> <name>wifiLockEnforced</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>proximityDisabled</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>setLockState</name><argument_list>(<argument><expr><name><name>LockState</name><operator>.</operator><name>PROXIMITY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>setLockState</name><argument_list>(<argument><expr><name><name>LockState</name><operator>.</operator><name>FULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>updatePhoneState</name><parameter_list>(<parameter><decl><type><name>PhoneState</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch<condition>(<expr><name>state</name></expr>)</condition> <block>{
      <case>case <expr><name>IDLE</name></expr>:</case>
        <expr_stmt><expr><call><name>setLockState</name><argument_list>(<argument><expr><name><name>LockState</name><operator>.</operator><name>SLEEP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>accelerometerListener</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PROCESSING</name></expr>:</case>
        <expr_stmt><expr><call><name>setLockState</name><argument_list>(<argument><expr><name><name>LockState</name><operator>.</operator><name>PARTIAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>accelerometerListener</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>INTERACTIVE</name></expr>:</case>
        <expr_stmt><expr><call><name>setLockState</name><argument_list>(<argument><expr><name><name>LockState</name><operator>.</operator><name>FULL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>accelerometerListener</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>IN_VIDEO</name></expr>:</case>
        <expr_stmt><expr><name>proximityDisabled</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>accelerometerListener</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateInCallLockState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>IN_CALL</name></expr>:</case>
        <expr_stmt><expr><name>proximityDisabled</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>accelerometerListener</name><operator>.</operator><name>enable</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>updateInCallLockState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></switch>
  }</block></function>

  <function><specifier>private</specifier> <specifier>synchronized</specifier> <type><name>void</name></type> <name>setLockState</name><parameter_list>(<parameter><decl><type><name>LockState</name></type> <name>newState</name></decl></parameter>)</parameter_list> <block>{
    <switch>switch<condition>(<expr><name>newState</name></expr>)</condition> <block>{
      <case>case <expr><name>FULL</name></expr>:</case>
        <expr_stmt><expr><call><name><name>fullLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>partialLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wifiLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>proximityLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PARTIAL</name></expr>:</case>
        <expr_stmt><expr><call><name><name>partialLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wifiLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fullLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>proximityLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>SLEEP</name></expr>:</case>
        <expr_stmt><expr><call><name><name>fullLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>partialLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wifiLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>proximityLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>PROXIMITY</name></expr>:</case>
        <expr_stmt><expr><call><name><name>partialLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>proximityLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>wifiLock</name><operator>.</operator><name>acquire</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>fullLock</name><operator>.</operator><name>release</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <throw>throw <expr><operator>new</operator> <call><name>IllegalArgumentException</name><argument_list>(<argument><expr><literal type="string">"Unhandled Mode: "</literal> <operator>+</operator> <name>newState</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></switch>
    <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>d</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Entered Lock State: "</literal> <operator>+</operator> <name>newState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
