<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\webrtc\PeerConnectionWrapper.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>logging</name><operator>.</operator><name>Log</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>SettableFuture</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>AudioSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>AudioTrack</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>Camera1Enumerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>Camera2Enumerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraEnumerator</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraVideoCapturer</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>DataChannel</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>EglBase</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>IceCandidate</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>MediaConstraints</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>MediaStream</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnection</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>PeerConnectionFactory</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>SdpObserver</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>SessionDescription</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>SurfaceTextureHelper</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>VideoSink</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>VideoSource</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>VideoTrack</name></name>;</import>

<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>LinkedList</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>List</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>util</name><operator>.</operator><name>concurrent</name><operator>.</operator><name>ExecutionException</name></name>;</import>

<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraState</name><operator>.</operator><name>Direction</name><operator>.</operator><name>BACK</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraState</name><operator>.</operator><name>Direction</name><operator>.</operator><name>FRONT</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraState</name><operator>.</operator><name>Direction</name><operator>.</operator><name>NONE</name></name>;</import>
<import>import static <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>CameraState</name><operator>.</operator><name>Direction</name><operator>.</operator><name>PENDING</name></name>;</import>

<class><specifier>public</specifier> class <name>PeerConnectionWrapper</name> <block>{
  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>PeerConnectionWrapper</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></type> <name>STUN_SERVER</name> <init>= <expr><operator>new</operator> <call><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name><argument_list>(<argument><expr><literal type="string">"stun:stun1.l.google.com:19302"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <specifier>private</specifier> <type><specifier>final</specifier> <name>PeerConnection</name></type> <name>peerConnection</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <specifier>private</specifier> <type><specifier>final</specifier> <name>AudioTrack</name></type>     <name>audioTrack</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <specifier>private</specifier> <type><specifier>final</specifier> <name>AudioSource</name></type>    <name>audioSource</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>NonNull</name></annotation>  <specifier>private</specifier> <type><specifier>final</specifier> <name>Camera</name></type>         <name>camera</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name>VideoSource</name></type>    <name>videoSource</name></decl>;</decl_stmt>
  <decl_stmt><decl><annotation>@<name>Nullable</name></annotation> <specifier>private</specifier> <type><specifier>final</specifier> <name>VideoTrack</name></type>     <name>videoTrack</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>PeerConnectionWrapper</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type>                        <name>context</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>PeerConnectionFactory</name></type>          <name>factory</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>PeerConnection</name><operator>.</operator><name>Observer</name></name></type>        <name>observer</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>VideoSink</name></type>                      <name>localRenderer</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></type> <name>turnServers</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraEventListener</name></type>            <name>cameraEventListener</name></decl></parameter>,
                               <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>EglBase</name></type>                        <name>eglBase</name></decl></parameter>,
                               <parameter><decl><type><name>boolean</name></type>                                 <name>hideIp</name></decl></parameter>)</parameter_list>
  <block>{
    <decl_stmt><decl><type><name><name>List</name><argument_list type="generic">&lt;<argument><name><name>PeerConnection</name><operator>.</operator><name>IceServer</name></name></argument>&gt;</argument_list></name></type> <name>iceServers</name> <init>= <expr><operator>new</operator> <call><name><name>LinkedList</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>iceServers</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>STUN_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>iceServers</name><operator>.</operator><name>addAll</name></name><argument_list>(<argument><expr><name>turnServers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MediaConstraints</name></type>                <name>constraints</name>      <init>= <expr><operator>new</operator> <call><name>MediaConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>MediaConstraints</name></type>                <name>audioConstraints</name> <init>= <expr><operator>new</operator> <call><name>MediaConstraints</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>PeerConnection</name><operator>.</operator><name>RTCConfiguration</name></name></type> <name>configuration</name>    <init>= <expr><operator>new</operator> <call><name><name>PeerConnection</name><operator>.</operator><name>RTCConfiguration</name></name><argument_list>(<argument><expr><name>iceServers</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>configuration</name><operator>.</operator><name>bundlePolicy</name></name>  <operator>=</operator> <name><name>PeerConnection</name><operator>.</operator><name>BundlePolicy</name><operator>.</operator><name>MAXBUNDLE</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>configuration</name><operator>.</operator><name>rtcpMuxPolicy</name></name> <operator>=</operator> <name><name>PeerConnection</name><operator>.</operator><name>RtcpMuxPolicy</name><operator>.</operator><name>REQUIRE</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>hideIp</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>configuration</name><operator>.</operator><name>iceTransportsType</name></name> <operator>=</operator> <name><name>PeerConnection</name><operator>.</operator><name>IceTransportsType</name><operator>.</operator><name>RELAY</name></name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>constraints</name><operator>.</operator><name>optional</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>MediaConstraints</name><operator>.</operator><name>KeyValuePair</name></name><argument_list>(<argument><expr><literal type="string">"DtlsSrtpKeyAgreement"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>audioConstraints</name><operator>.</operator><name>optional</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name><name>MediaConstraints</name><operator>.</operator><name>KeyValuePair</name></name><argument_list>(<argument><expr><literal type="string">"DtlsSrtpKeyAgreement"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>peerConnection</name></name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>createPeerConnection</name></name><argument_list>(<argument><expr><name>configuration</name></expr></argument>, <argument><expr><name>constraints</name></expr></argument>, <argument><expr><name>observer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioPlayout</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioRecording</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>MediaStream</name></type> <name>mediaStream</name> <init>= <expr><call><name><name>factory</name><operator>.</operator><name>createLocalMediaStream</name></name><argument_list>(<argument><expr><literal type="string">"ARDAMS"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioSource</name></name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>createAudioSource</name></name><argument_list>(<argument><expr><name>audioConstraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>audioTrack</name></name>  <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>createAudioTrack</name></name><argument_list>(<argument><expr><literal type="string">"ARDAMSa0"</literal></expr></argument>, <argument><expr><name>audioSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>audioTrack</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>mediaStream</name><operator>.</operator><name>addTrack</name></name><argument_list>(<argument><expr><name>audioTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>camera</name></name> <operator>=</operator> <operator>new</operator> <call><name>Camera</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cameraEventListener</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>camera</name><operator>.</operator><name>capturer</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>videoSource</name></name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>createVideoSource</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>videoTrack</name></name> <operator>=</operator> <call><name><name>factory</name><operator>.</operator><name>createVideoTrack</name></name><argument_list>(<argument><expr><literal type="string">"ARDAMSv0"</literal></expr></argument>, <argument><expr><name>videoSource</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>capturer</name><operator>.</operator><name>initialize</name></name><argument_list>(<argument><expr><call><name><name>SurfaceTextureHelper</name><operator>.</operator><name>create</name></name><argument_list>(<argument><expr><literal type="string">"WebRTC-SurfaceTextureHelper"</literal></expr></argument>, <argument><expr><call><name><name>eglBase</name><operator>.</operator><name>getEglBaseContext</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>context</name></expr></argument>, <argument><expr><call><name><name>videoSource</name><operator>.</operator><name>getCapturerObserver</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>videoTrack</name><operator>.</operator><name>addSink</name></name><argument_list>(<argument><expr><name>localRenderer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>videoTrack</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>mediaStream</name><operator>.</operator><name>addTrack</name></name><argument_list>(<argument><expr><name>videoTrack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>videoSource</name></name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>videoTrack</name></name>  <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>addStream</name></name><argument_list>(<argument><expr><name>mediaStream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setVideoEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>videoTrack</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>videoTrack</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>flipCamera</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>camera</name><operator>.</operator><name>flip</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>CameraState</name></type> <name>getCameraState</name><parameter_list>()</parameter_list> <block>{
    <return>return <expr><operator>new</operator> <call><name>CameraState</name><argument_list>(<argument><expr><call><name><name>camera</name><operator>.</operator><name>getActiveDirection</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>camera</name><operator>.</operator><name>getCount</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setCommunicationMode</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioPlayout</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>setAudioRecording</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setAudioEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>audioTrack</name><operator>.</operator><name>setEnabled</name></name><argument_list>(<argument><expr><name>enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>DataChannel</name></type> <name>createDataChannel</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>name</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>DataChannel</name><operator>.</operator><name>Init</name></name></type> <name>dataChannelConfiguration</name> <init>= <expr><operator>new</operator> <call><name><name>DataChannel</name><operator>.</operator><name>Init</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dataChannelConfiguration</name><operator>.</operator><name>ordered</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>

    <return>return <expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>createDataChannel</name></name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>dataChannelConfiguration</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><specifier>public</specifier> <type><name>SessionDescription</name></type> <name>createOffer</name><parameter_list>(<parameter><decl><type><name>MediaConstraints</name></type> <name>mediaConstraints</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PeerConnectionException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>SessionDescription</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>createOffer</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SdpObserver</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateSuccess</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sdp</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetSuccess</name><parameter_list>()</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></function>
    }</block></class></expr></argument>, <argument><expr><name>mediaConstraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <return>return <expr><call><name>correctSessionDescription</name><argument_list>(<argument><expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>SessionDescription</name></type> <name>createAnswer</name><parameter_list>(<parameter><decl><type><name>MediaConstraints</name></type> <name>mediaConstraints</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PeerConnectionException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>SessionDescription</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>createAnswer</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SdpObserver</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateSuccess</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sdp</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetSuccess</name><parameter_list>()</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></function>
    }</block></class></expr></argument>, <argument><expr><name>mediaConstraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <return>return <expr><call><name>correctSessionDescription</name><argument_list>(<argument><expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setRemoteDescription</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sdp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PeerConnectionException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>setRemoteDescription</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SdpObserver</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateSuccess</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sdp</name></decl></parameter>)</parameter_list> <block>{}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{}</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetSuccess</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>, <argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>setLocalDescription</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sdp</name></decl></parameter>)</parameter_list> <throws>throws <argument><expr><name>PeerConnectionException</name></expr></argument></throws> <block>{
    <decl_stmt><decl><type><specifier>final</specifier> <name><name>SettableFuture</name><argument_list type="generic">&lt;<argument><name>Boolean</name></argument>&gt;</argument_list></name></type> <name>future</name> <init>= <expr><operator>new</operator> <call><name><name>SettableFuture</name><argument_list type="generic">&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>peerConnection</name><operator>.</operator><name>setLocalDescription</name></name><argument_list>(<argument><expr><operator>new</operator> <class><super><name>SdpObserver</name></super><argument_list>()</argument_list> <block>{
      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateSuccess</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sdp</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onCreateFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>()</argument_list></call></expr>;</throw>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetSuccess</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>set</name></name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>

      <function><annotation>@<name>Override</name></annotation>
      <specifier>public</specifier> <type><name>void</name></type> <name>onSetFailure</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>setException</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></function>
    }</block></class></expr></argument>, <argument><expr><name>sdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <try>try <block>{
      <expr_stmt><expr><call><name><name>future</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>AssertionError</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch> <catch>catch <parameter_list>(<parameter><decl><type><name>ExecutionException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
      <throw>throw <expr><operator>new</operator> <call><name>PeerConnectionException</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</throw>
    }</block></catch></try>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>camera</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>this</name><operator>.</operator><name>videoSource</name></name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>videoSource</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>audioSource</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>boolean</name></type> <name>addIceCandidate</name><parameter_list>(<parameter><decl><type><name>IceCandidate</name></type> <name>candidate</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>this</name><operator>.</operator><name>peerConnection</name><operator>.</operator><name>addIceCandidate</name></name><argument_list>(<argument><expr><name>candidate</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>


  <function><specifier>private</specifier> <type><name>SessionDescription</name></type> <name>correctSessionDescription</name><parameter_list>(<parameter><decl><type><name>SessionDescription</name></type> <name>sessionDescription</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>String</name></type> <name>updatedSdp</name> <init>= <expr><call><name><name>sessionDescription</name><operator>.</operator><name>description</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">"(a=fmtp:111 ((?!cbr=).)*)\r?\n"</literal></expr></argument>, <argument><expr><literal type="string">"$1;cbr=1\r\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>updatedSdp</name> <operator>=</operator> <call><name><name>updatedSdp</name><operator>.</operator><name>replaceAll</name></name><argument_list>(<argument><expr><literal type="string">".+urn:ietf:params:rtp-hdrext:ssrc-audio-level.*\r?\n"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>new</operator> <call><name>SessionDescription</name><argument_list>(<argument><expr><name><name>sessionDescription</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name>updatedSdp</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <class><specifier>public</specifier> <specifier>static</specifier> class <name>PeerConnectionException</name> <super><extends>extends <name>Exception</name></extends></super> <block>{
    <constructor><specifier>public</specifier> <name>PeerConnectionException</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>error</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <constructor><specifier>public</specifier> <name>PeerConnectionException</name><parameter_list>(<parameter><decl><type><name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name>super</name><argument_list>(<argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
  }</block></class>

  <class><specifier>private</specifier> <specifier>static</specifier> class <name>Camera</name> <super><implements>implements <name><name>CameraVideoCapturer</name><operator>.</operator><name>CameraSwitchHandler</name></name></implements></super> <block>{

    <decl_stmt><decl><annotation>@<name>Nullable</name></annotation>
    <specifier>private</specifier> <type><specifier>final</specifier> <name>CameraVideoCapturer</name></type>   <name>capturer</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>CameraEventListener</name></type>   <name>cameraEventListener</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>                   <name>cameraCount</name></decl>;</decl_stmt>

    <decl_stmt><decl><specifier>private</specifier> <type><name><name>CameraState</name><operator>.</operator><name>Direction</name></name></type> <name>activeDirection</name></decl>;</decl_stmt>
    <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type>               <name>enabled</name></decl>;</decl_stmt>

    <constructor><name>Camera</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>, <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraEventListener</name></type> <name>cameraEventListener</name></decl></parameter>)</parameter_list>
    <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>cameraEventListener</name></name> <operator>=</operator> <name>cameraEventListener</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>CameraEnumerator</name></type> <name>enumerator</name> <init>= <expr><call><name>getCameraEnumerator</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>cameraCount</name> <operator>=</operator> <call><name><name>enumerator</name><operator>.</operator><name>getDeviceNames</name></name><argument_list>()</argument_list></call><operator>.</operator><name>length</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>CameraVideoCapturer</name></type> <name>capturerCandidate</name> <init>= <expr><call><name>createVideoCapturer</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>FRONT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>capturerCandidate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>activeDirection</name> <operator>=</operator> <name>FRONT</name></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>capturerCandidate</name> <operator>=</operator> <call><name>createVideoCapturer</name><argument_list>(<argument><expr><name>enumerator</name></expr></argument>, <argument><expr><name>BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>capturerCandidate</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>activeDirection</name> <operator>=</operator> <name>BACK</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><name>activeDirection</name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt>
        }</block></else></if>
      }</block></else></if>
      <expr_stmt><expr><name>capturer</name> <operator>=</operator> <name>capturerCandidate</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>flip</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>capturer</name> <operator>==</operator> <literal type="null">null</literal> <operator>||</operator> <name>cameraCount</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Tried to flip the camera, but we only have "</literal> <operator>+</operator> <name>cameraCount</name> <operator>+</operator> <literal type="string">" of them."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
      }</block></then></if>
      <expr_stmt><expr><name>activeDirection</name> <operator>=</operator> <name>PENDING</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>capturer</name><operator>.</operator><name>switchCamera</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>setEnabled</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>enabled</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name><name>this</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name>enabled</name></expr>;</expr_stmt>

      <if>if <condition>(<expr><name>capturer</name> <operator>==</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <return>return;</return>
      }</block></then></if>

      <try>try <block>{
        <if>if <condition>(<expr><name>enabled</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><call><name><name>capturer</name><operator>.</operator><name>startCapture</name></name><argument_list>(<argument><expr><literal type="number">1280</literal></expr></argument>, <argument><expr><literal type="number">720</literal></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
          <expr_stmt><expr><call><name><name>capturer</name><operator>.</operator><name>stopCapture</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Got interrupted while trying to stop video capture"</literal></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>
    }</block></function>

    <function><type><name>void</name></type> <name>dispose</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>capturer</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name><name>capturer</name><operator>.</operator><name>dispose</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></function>

    <function><type><name>int</name></type> <name>getCount</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>cameraCount</name></expr>;</return>
    }</block></function>

    <function><annotation>@<name>NonNull</name></annotation> <type><name><name>CameraState</name><operator>.</operator><name>Direction</name></name></type> <name>getActiveDirection</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><ternary><condition><expr><name>enabled</name></expr> ?</condition><then> <expr><name>activeDirection</name></expr> </then><else>: <expr><name>NONE</name></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Nullable</name></annotation> <type><name>CameraVideoCapturer</name></type> <name>getCapturer</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><name>capturer</name></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>Nullable</name></annotation> <type><name>CameraVideoCapturer</name></type> <name>createVideoCapturer</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraEnumerator</name></type> <name>enumerator</name></decl></parameter>,
                                                              <parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name><name>CameraState</name><operator>.</operator><name>Direction</name></name></type> <name>direction</name></decl></parameter>)</parameter_list>
    <block>{
      <decl_stmt><decl><type><name><name>String</name><index>[]</index></name></type> <name>deviceNames</name> <init>= <expr><call><name><name>enumerator</name><operator>.</operator><name>getDeviceNames</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>String</name></type> <name>deviceName</name> <range>: <expr><name>deviceNames</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>direction</name> <operator>==</operator> <name>FRONT</name> <operator>&amp;&amp;</operator> <call><name><name>enumerator</name><operator>.</operator><name>isFrontFacing</name></name><argument_list>(<argument><expr><name>deviceName</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator>
            <operator>(</operator><name>direction</name> <operator>==</operator> <name>BACK</name>  <operator>&amp;&amp;</operator> <call><name><name>enumerator</name><operator>.</operator><name>isBackFacing</name></name><argument_list>(<argument><expr><name>deviceName</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then>
        <block>{
          <return>return <expr><call><name><name>enumerator</name><operator>.</operator><name>createCapturer</name></name><argument_list>(<argument><expr><name>deviceName</name></expr></argument>, <argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if>
      }</block></for>

      <return>return <expr><literal type="null">null</literal></expr>;</return>
    }</block></function>

    <function><specifier>private</specifier> <annotation>@<name>NonNull</name></annotation> <type><name>CameraEnumerator</name></type> <name>getCameraEnumerator</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>boolean</name></type> <name>camera2EnumeratorIsSupported</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
      <try>try <block>{
        <expr_stmt><expr><name>camera2EnumeratorIsSupported</name> <operator>=</operator> <call><name><name>Camera2Enumerator</name><operator>.</operator><name>isSupported</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block> <catch>catch <parameter_list>(<parameter><decl><type><specifier>final</specifier> <name>Throwable</name></type> <name>throwable</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>w</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Camera2Enumator.isSupport() threw."</literal></expr></argument>, <argument><expr><name>throwable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></catch></try>

      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>i</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"Camera2 enumerator supported: "</literal> <operator>+</operator> <name>camera2EnumeratorIsSupported</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <return>return <expr><ternary><condition><expr><name>camera2EnumeratorIsSupported</name></expr> ?</condition><then> <expr><operator>new</operator> <call><name>Camera2Enumerator</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>
                                          </then><else>: <expr><operator>new</operator> <call><name>Camera1Enumerator</name><argument_list>(<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCameraSwitchDone</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>isFrontFacing</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><name>activeDirection</name> <operator>=</operator> <ternary><condition><expr><name>isFrontFacing</name></expr> ?</condition><then> <expr><name>FRONT</name></expr> </then><else>: <expr><name>BACK</name></expr></else></ternary></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cameraEventListener</name><operator>.</operator><name>onCameraSwitchCompleted</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CameraState</name><argument_list>(<argument><expr><call><name>getActiveDirection</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><annotation>@<name>Override</name></annotation>
    <specifier>public</specifier> <type><name>void</name></type> <name>onCameraSwitchError</name><parameter_list>(<parameter><decl><type><name>String</name></type> <name>errorMessage</name></decl></parameter>)</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>Log</name><operator>.</operator><name>e</name></name><argument_list>(<argument><expr><name>TAG</name></expr></argument>, <argument><expr><literal type="string">"onCameraSwitchError: "</literal> <operator>+</operator> <name>errorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>cameraEventListener</name><operator>.</operator><name>onCameraSwitchCompleted</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>CameraState</name><argument_list>(<argument><expr><call><name>getActiveDirection</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>getCount</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
  }</block></class>

  <interface><specifier>public</specifier> interface <name>CameraEventListener</name> <block>{
    <function_decl><type><name>void</name></type> <name>onCameraSwitchCompleted</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>CameraState</name></type> <name>newCameraState</name></decl></parameter>)</parameter_list>;</function_decl>
  }</block></interface>
}</block></class>
</unit>
