<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="D:\AndroidAnalysis\Instrumentation-apps\Signal-Android\src\org\thoughtcrime\securesms\webrtc\audio\SignalAudioManager.java"><package>package <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>webrtc</name><operator>.</operator><name>audio</name></name>;</package>


<import>import <name><name>android</name><operator>.</operator><name>content</name><operator>.</operator><name>Context</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>AudioManager</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>media</name><operator>.</operator><name>SoundPool</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>net</name><operator>.</operator><name>Uri</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>os</name><operator>.</operator><name>Build</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>NonNull</name></name>;</import>
<import>import <name><name>android</name><operator>.</operator><name>support</name><operator>.</operator><name>annotation</name><operator>.</operator><name>Nullable</name></name>;</import>

<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>R</name></name>;</import>
<import>import <name><name>org</name><operator>.</operator><name>thoughtcrime</name><operator>.</operator><name>securesms</name><operator>.</operator><name>util</name><operator>.</operator><name>ServiceUtil</name></name>;</import>

<class><specifier>public</specifier> class <name>SignalAudioManager</name> <block>{

  <decl_stmt><decl><annotation>@<name>SuppressWarnings</name><argument_list>(<argument><expr><literal type="string">"unused"</literal></expr></argument>)</argument_list></annotation>
  <specifier>private</specifier> <specifier>static</specifier> <type><specifier>final</specifier> <name>String</name></type> <name>TAG</name> <init>= <expr><call><name><name>SignalAudioManager</name><operator>.</operator><name><name>class</name><operator>.</operator><name>getSimpleName</name></name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>Context</name></type>        <name>context</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>IncomingRinger</name></type> <name>incomingRinger</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>OutgoingRinger</name></type> <name>outgoingRinger</name></decl>;</decl_stmt>

  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>SoundPool</name></type> <name>soundPool</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>       <name>connectedSoundId</name></decl>;</decl_stmt>
  <decl_stmt><decl><specifier>private</specifier> <type><specifier>final</specifier> <name>int</name></type>       <name>disconnectedSoundId</name></decl>;</decl_stmt>

  <constructor><specifier>public</specifier> <name>SignalAudioManager</name><parameter_list>(<parameter><decl><type><annotation>@<name>NonNull</name></annotation> <name>Context</name></type> <name>context</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>context</name></name>             <operator>=</operator> <call><name><name>context</name><operator>.</operator><name>getApplicationContext</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>incomingRinger</name></name>      <operator>=</operator> <operator>new</operator> <call><name>IncomingRinger</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>outgoingRinger</name></name>      <operator>=</operator> <operator>new</operator> <call><name>OutgoingRinger</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>soundPool</name></name>           <operator>=</operator> <operator>new</operator> <call><name>SoundPool</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>AudioManager</name><operator>.</operator><name>STREAM_VOICE_CALL</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>connectedSoundId</name></name>    <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>soundPool</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>webrtc_completed</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>.</operator><name>disconnectedSoundId</name></name> <operator>=</operator> <call><name><name>this</name><operator>.</operator><name>soundPool</name><operator>.</operator><name>load</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>raw</name><operator>.</operator><name>webrtc_disconnected</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>initializeAudioForCall</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name><name>Build</name><operator>.</operator><name>VERSION</name><operator>.</operator><name>SDK_INT</name></name> <operator>&gt;=</operator> <name><name>Build</name><operator>.</operator><name>VERSION_CODES</name><operator>.</operator><name>KITKAT</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>requestAudioFocus</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>AudioManager</name><operator>.</operator><name>STREAM_VOICE_CALL</name></name></expr></argument>, <argument><expr><name><name>AudioManager</name><operator>.</operator><name>AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>requestAudioFocus</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>, <argument><expr><name><name>AudioManager</name><operator>.</operator><name>STREAM_VOICE_CALL</name></name></expr></argument>, <argument><expr><name><name>AudioManager</name><operator>.</operator><name>AUDIOFOCUS_GAIN_TRANSIENT</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>startIncomingRinger</name><parameter_list>(<parameter><decl><type><annotation>@<name>Nullable</name></annotation> <name>Uri</name></type> <name>ringtoneUri</name></decl></parameter>, <parameter><decl><type><name>boolean</name></type> <name>vibrate</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>boolean</name></type>      <name>speaker</name>      <init>= <expr><operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isWiredHeadsetOn</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>audioManager</name><operator>.</operator><name>isBluetoothScoOn</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMode</name></name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>MODE_RINGTONE</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMicrophoneMute</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setSpeakerphoneOn</name></name><argument_list>(<argument><expr><name>speaker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>incomingRinger</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>ringtoneUri</name></expr></argument>, <argument><expr><name>vibrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>startOutgoingRinger</name><parameter_list>(<parameter><decl><type><name><name>OutgoingRinger</name><operator>.</operator><name>Type</name></name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMicrophoneMute</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMode</name></name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>MODE_IN_COMMUNICATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>outgoingRinger</name><operator>.</operator><name>start</name></name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>silenceIncomingRinger</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>incomingRinger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>startCommunication</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>preserveSpeakerphone</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>incomingRinger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outgoingRinger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMode</name></name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>MODE_IN_COMMUNICATION</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><operator>!</operator><name>preserveSpeakerphone</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setSpeakerphoneOn</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>soundPool</name><operator>.</operator><name>play</name></name><argument_list>(<argument><expr><name>connectedSoundId</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><specifier>public</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>(<parameter><decl><type><name>boolean</name></type> <name>playDisconnected</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>AudioManager</name></type> <name>audioManager</name> <init>= <expr><call><name><name>ServiceUtil</name><operator>.</operator><name>getAudioManager</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>incomingRinger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>outgoingRinger</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>playDisconnected</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>soundPool</name><operator>.</operator><name>play</name></name><argument_list>(<argument><expr><name>disconnectedSoundId</name></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>audioManager</name><operator>.</operator><name>isBluetoothScoOn</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setBluetoothScoOn</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>stopBluetoothSco</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setSpeakerphoneOn</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMicrophoneMute</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>setMode</name></name><argument_list>(<argument><expr><name><name>AudioManager</name><operator>.</operator><name>MODE_NORMAL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>audioManager</name><operator>.</operator><name>abandonAudioFocus</name></name><argument_list>(<argument><expr><literal type="null">null</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
}</block></class>
</unit>
